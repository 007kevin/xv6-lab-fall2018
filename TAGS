
grade-lab1,445
r = Runner(save("jos.out"),r6,57
def test_jos():test_jos10,150
def test_printf():test_printf14,211
BACKTRACE_RE = r"^ *ebp +f01[0-9a-z]{5} +eip +f0100[0-9a-z]{3} +args +([0-9a-z]+)"BACKTRACE_RE17,275
def test_backtrace_count():test_backtrace_count20,386
def test_backtrace_arguments():test_backtrace_arguments25,544
def test_backtrace_symbols():test_backtrace_symbols31,777
def test_backtrace_lines():test_backtrace_lines37,1018

mergedep.pl,31
sub readdeps {readdeps27,909

lib/readline.c,106
#define BUFLEN BUFLEN4,47
static char buf[BUFLEN];buf5,67
readline(const char *prompt)readline8,100

lib/string.c,1018
#define ASM ASM9,264
strlen(const char *s)strlen12,283
strnlen(const char *s, size_t size)strnlen22,371
strcpy(char *dst, const char *src)strcpy32,496
strcat(char *dst, const char *src)strcat43,636
strncpy(char *dst, const char *src, size_t size) {strncpy51,745
strlcpy(char *dst, const char *src, size_t size)strlcpy66,998
strcmp(const char *p, const char *q)strcmp80,1201
strncmp(const char *p, const char *q, size_t n)strncmp88,1340
strchr(const char *s, char c)strchr101,1645
strfind(const char *s, char c)strfind112,1889
memset(void *v, int c, size_t n)memset122,2002
memmove(void *dst, const void *src, size_t n)memmove142,2359
memset(void *v, int c, size_t n)memset174,3099
memmove(void *dst, const void *src, size_t n)memmove188,3221
memcpy(void *dst, const void *src, size_t n)memcpy209,3470
memcmp(const void *v1, const void *v2, size_t n)memcmp215,3554
memfind(const void *s, int c, size_t n)memfind230,3801
strtol(const char *s, char **endptr, int base)strtol240,4001

lib/printfmt.c,845
static const char * const error_string[MAXERROR] =error_string21,589
printnum(void (*putch)(int, void*), void *putdat,printnum36,995
getuint(va_list *ap, int lflag)getuint55,1609
getint(va_list *ap, int lflag)getint68,1897
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)vprintfmt83,2193
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)printfmt247,5283
struct sprintbuf {sprintbuf256,5443
	char *buf;buf257,5462
	char *buf;sprintbuf::buf257,5462
	char *ebuf;ebuf258,5474
	char *ebuf;sprintbuf::ebuf258,5474
	int cnt;cnt259,5487
	int cnt;sprintbuf::cnt259,5487
sprintputch(int ch, struct sprintbuf *b)sprintputch263,5513
vsnprintf(char *buf, int n, const char *fmt, va_list ap)vsnprintf271,5615
snprintf(char *buf, int n, const char *fmt, ...)snprintf288,5913

inc/memlayout.h,1127
#define JOS_INC_MEMLAYOUT_HJOS_INC_MEMLAYOUT_H2,28
#define GD_KT GD_KT15,324
#define GD_KD GD_KD16,366
#define GD_UT GD_UT17,408
#define GD_UD GD_UD18,448
#define GD_TSS0 GD_TSS019,488
#define	KERNBASE	KERNBASE87,4609
#define IOPHYSMEM	IOPHYSMEM92,4814
#define EXTPHYSMEM	EXTPHYSMEM93,4841
#define KSTACKTOP	KSTACKTOP96,4887
#define KSTKSIZE	KSTKSIZE97,4914
#define KSTKGAP	KSTKGAP98,4972
#define MMIOLIM	MMIOLIM101,5058
#define MMIOBASE	MMIOBASE102,5096
#define ULIM	ULIM104,5133
#define UVPT	UVPT112,5361
#define UPAGES	UPAGES114,5434
#define UENVS	UENVS116,5515
#define UTOP	UTOP123,5650
#define UXSTACKTOP	UXSTACKTOP125,5710
#define USTACKTOP	USTACKTOP128,5837
#define UTEXT	UTEXT131,5913
#define UTEMP	UTEMP134,6008
#define PFTEMP	PFTEMP137,6168
#define USTABDATA	USTABDATA139,6265
typedef uint32_t pte_t;pte_t143,6320
typedef uint32_t pde_t;pde_t144,6344
struct PageInfo {PageInfo175,7643
	struct PageInfo *pp_link;pp_link177,7693
	struct PageInfo *pp_link;PageInfo::pp_link177,7693
	uint16_t pp_ref;pp_ref184,7951
	uint16_t pp_ref;PageInfo::pp_ref184,7951

inc/stab.h,1529
#define JOS_STAB_HJOS_STAB_H2,19
#define	N_GSYM	N_GSYM15,436
#define	N_FNAME	N_FNAME16,474
#define	N_FUN	N_FUN17,517
#define	N_STSYM	N_STSYM18,555
#define	N_LCSYM	N_LCSYM19,602
#define	N_MAIN	N_MAIN20,648
#define	N_PC	N_PC21,691
#define	N_RSYM	N_RSYM22,734
#define	N_SLINE	N_SLINE23,776
#define	N_DSLINE	N_DSLINE24,826
#define	N_BSLINE	N_BSLINE25,876
#define	N_SSYM	N_SSYM26,925
#define	N_SO	N_SO27,973
#define	N_LSYM	N_LSYM28,1017
#define	N_BINCL	N_BINCL29,1056
#define	N_SOL	N_SOL30,1104
#define	N_PSYM	N_PSYM31,1153
#define	N_EINCL	N_EINCL32,1196
#define	N_ENTRY	N_ENTRY33,1238
#define	N_LBRAC	N_LBRAC34,1285
#define	N_EXCL	N_EXCL35,1323
#define	N_RBRAC	N_RBRAC36,1368
#define	N_BCOMM	N_BCOMM37,1407
#define	N_ECOMM	N_ECOMM38,1445
#define	N_ECOML	N_ECOML39,1481
#define	N_LENG	N_LENG40,1530
struct Stab {Stab43,1637
	uint32_t n_strx;	// index into string table of namen_strx44,1651
	uint32_t n_strx;	// index into string table of nameStab::n_strx44,1651
	uint8_t n_type;         // type of symboln_type45,1704
	uint8_t n_type;         // type of symbolStab::n_type45,1704
	uint8_t n_other;        // misc info (usually empty)n_other46,1747
	uint8_t n_other;        // misc info (usually empty)Stab::n_other46,1747
	uint16_t n_desc;        // description fieldn_desc47,1801
	uint16_t n_desc;        // description fieldStab::n_desc47,1801
	uintptr_t n_value;	// value of symboln_value48,1847
	uintptr_t n_value;	// value of symbolStab::n_value48,1847

inc/string.h,47
#define JOS_INC_STRING_HJOS_INC_STRING_H2,25

inc/stdio.h,69
#define JOS_INC_STDIO_HJOS_INC_STDIO_H2,24
#define NULL	NULL7,87

inc/x86.h,1331
#define JOS_INC_X86_HJOS_INC_X86_H2,22
breakpoint(void)breakpoint7,88
inb(int port)inb13,155
insb(int port, void *addr, int cnt)insb21,278
inw(int port)inw30,481
insw(int port, void *addr, int cnt)insw38,605
inl(int port)inl47,808
insl(int port, void *addr, int cnt)insl55,932
outb(int port, uint8_t data)outb64,1131
outsb(int port, const void *addr, int cnt)outsb70,1241
outw(int port, uint16_t data)outw79,1438
outsw(int port, const void *addr, int cnt)outsw85,1549
outsl(int port, const void *addr, int cnt)outsl94,1746
outl(int port, uint32_t data)outl103,1943
invlpg(void *addr)invlpg109,2054
lidt(void *p)lidt115,2153
lgdt(void *p)lgdt121,2231
lldt(uint16_t sel)lldt127,2309
ltr(uint16_t sel)ltr133,2392
lcr0(uint32_t val)lcr0139,2473
rcr0(void)rcr0145,2566
rcr2(void)rcr2153,2678
lcr3(uint32_t val)lcr3161,2786
rcr3(void)rcr3167,2879
lcr4(uint32_t val)lcr4175,2987
rcr4(void)rcr4181,3080
tlbflush(void)tlbflush189,3188
read_eflags(void)read_eflags197,3337
write_eflags(uint32_t eflags)write_eflags205,3463
read_ebp(void)read_ebp211,3572
read_esp(void)read_esp219,3688
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)cpuid227,3800
read_tsc(void)read_tsc244,4147
xchg(volatile uint32_t *addr, uint32_t newval)xchg252,4255

inc/elf.h,3208
#define JOS_INC_ELF_HJOS_INC_ELF_H2,22
#define ELF_MAGIC ELF_MAGIC4,45
struct Elf {Elf6,109
	uint32_t e_magic;	// must equal ELF_MAGICe_magic7,122
	uint32_t e_magic;	// must equal ELF_MAGICElf::e_magic7,122
	uint8_t e_elf[12];e_elf8,165
	uint8_t e_elf[12];Elf::e_elf8,165
	uint16_t e_type;e_type9,185
	uint16_t e_type;Elf::e_type9,185
	uint16_t e_machine;e_machine10,203
	uint16_t e_machine;Elf::e_machine10,203
	uint32_t e_version;e_version11,224
	uint32_t e_version;Elf::e_version11,224
	uint32_t e_entry;e_entry12,245
	uint32_t e_entry;Elf::e_entry12,245
	uint32_t e_phoff;e_phoff13,264
	uint32_t e_phoff;Elf::e_phoff13,264
	uint32_t e_shoff;e_shoff14,283
	uint32_t e_shoff;Elf::e_shoff14,283
	uint32_t e_flags;e_flags15,302
	uint32_t e_flags;Elf::e_flags15,302
	uint16_t e_ehsize;e_ehsize16,321
	uint16_t e_ehsize;Elf::e_ehsize16,321
	uint16_t e_phentsize;e_phentsize17,341
	uint16_t e_phentsize;Elf::e_phentsize17,341
	uint16_t e_phnum;e_phnum18,364
	uint16_t e_phnum;Elf::e_phnum18,364
	uint16_t e_shentsize;e_shentsize19,383
	uint16_t e_shentsize;Elf::e_shentsize19,383
	uint16_t e_shnum;e_shnum20,406
	uint16_t e_shnum;Elf::e_shnum20,406
	uint16_t e_shstrndx;e_shstrndx21,425
	uint16_t e_shstrndx;Elf::e_shstrndx21,425
struct Proghdr {Proghdr24,451
	uint32_t p_type;p_type25,468
	uint32_t p_type;Proghdr::p_type25,468
	uint32_t p_offset;p_offset26,486
	uint32_t p_offset;Proghdr::p_offset26,486
	uint32_t p_va;p_va27,506
	uint32_t p_va;Proghdr::p_va27,506
	uint32_t p_pa;p_pa28,522
	uint32_t p_pa;Proghdr::p_pa28,522
	uint32_t p_filesz;p_filesz29,538
	uint32_t p_filesz;Proghdr::p_filesz29,538
	uint32_t p_memsz;p_memsz30,558
	uint32_t p_memsz;Proghdr::p_memsz30,558
	uint32_t p_flags;p_flags31,577
	uint32_t p_flags;Proghdr::p_flags31,577
	uint32_t p_align;p_align32,596
	uint32_t p_align;Proghdr::p_align32,596
struct Secthdr {Secthdr35,619
	uint32_t sh_name;sh_name36,636
	uint32_t sh_name;Secthdr::sh_name36,636
	uint32_t sh_type;sh_type37,655
	uint32_t sh_type;Secthdr::sh_type37,655
	uint32_t sh_flags;sh_flags38,674
	uint32_t sh_flags;Secthdr::sh_flags38,674
	uint32_t sh_addr;sh_addr39,694
	uint32_t sh_addr;Secthdr::sh_addr39,694
	uint32_t sh_offset;sh_offset40,713
	uint32_t sh_offset;Secthdr::sh_offset40,713
	uint32_t sh_size;sh_size41,734
	uint32_t sh_size;Secthdr::sh_size41,734
	uint32_t sh_link;sh_link42,753
	uint32_t sh_link;Secthdr::sh_link42,753
	uint32_t sh_info;sh_info43,772
	uint32_t sh_info;Secthdr::sh_info43,772
	uint32_t sh_addralign;sh_addralign44,791
	uint32_t sh_addralign;Secthdr::sh_addralign44,791
	uint32_t sh_entsize;sh_entsize45,815
	uint32_t sh_entsize;Secthdr::sh_entsize45,815
#define ELF_PROG_LOAD	ELF_PROG_LOAD49,871
#define ELF_PROG_FLAG_EXEC	ELF_PROG_FLAG_EXEC52,931
#define ELF_PROG_FLAG_WRITE	ELF_PROG_FLAG_WRITE53,960
#define ELF_PROG_FLAG_READ	ELF_PROG_FLAG_READ54,990
#define ELF_SHT_NULL	ELF_SHT_NULL57,1051
#define ELF_SHT_PROGBITS	ELF_SHT_PROGBITS58,1075
#define ELF_SHT_SYMTAB	ELF_SHT_SYMTAB59,1102
#define ELF_SHT_STRTAB	ELF_SHT_STRTAB60,1128
#define ELF_SHN_UNDEF	ELF_SHN_UNDEF63,1186

inc/mmu.h,10794
#define JOS_INC_MMU_HJOS_INC_MMU_H2,22
#define PGNUM(PGNUM30,964
#define PDX(PDX33,1040
#define PTX(PTX36,1121
#define PGOFF(PGOFF39,1200
#define PGADDR(PGADDR42,1300
#define NPDENTRIES	NPDENTRIES45,1421
#define NPTENTRIES	NPTENTRIES46,1491
#define PGSIZE	PGSIZE48,1554
#define PGSHIFT	PGSHIFT49,1602
#define PTSIZE	PTSIZE51,1640
#define PTSHIFT	PTSHIFT52,1718
#define PTXSHIFT	PTXSHIFT54,1756
#define PDXSHIFT	PDXSHIFT55,1814
#define PTE_P	PTE_P58,1910
#define PTE_W	PTE_W59,1942
#define PTE_U	PTE_U60,1976
#define PTE_PWT	PTE_PWT61,2005
#define PTE_PCD	PTE_PCD62,2045
#define PTE_A	PTE_A63,2085
#define PTE_D	PTE_D64,2118
#define PTE_PS	PTE_PS65,2148
#define PTE_G	PTE_G66,2183
#define PTE_AVAIL	PTE_AVAIL70,2353
#define PTE_SYSCALL	PTE_SYSCALL73,2480
#define PTE_ADDR(PTE_ADDR76,2586
#define CR0_PE	CR0_PE79,2665
#define CR0_MP	CR0_MP80,2713
#define CR0_EM	CR0_EM81,2763
#define CR0_TS	CR0_TS82,2803
#define CR0_ET	CR0_ET83,2847
#define CR0_NE	CR0_NE84,2892
#define CR0_WP	CR0_WP85,2937
#define CR0_AM	CR0_AM86,2981
#define CR0_NW	CR0_NW87,3026
#define CR0_CD	CR0_CD88,3073
#define CR0_PG	CR0_PG89,3117
#define CR4_PCE	CR4_PCE91,3155
#define CR4_MCE	CR4_MCE92,3213
#define CR4_PSE	CR4_PSE93,3265
#define CR4_DE	CR4_DE94,3317
#define CR4_TSD	CR4_TSD95,3368
#define CR4_PVI	CR4_PVI96,3418
#define CR4_VME	CR4_VME97,3483
#define FL_CF	FL_CF100,3554
#define FL_PF	FL_PF101,3594
#define FL_AF	FL_AF102,3635
#define FL_ZF	FL_ZF103,3685
#define FL_SF	FL_SF104,3724
#define FL_TF	FL_TF105,3763
#define FL_IF	FL_IF106,3802
#define FL_DF	FL_DF107,3846
#define FL_OF	FL_OF108,3890
#define FL_IOPL_MASK	FL_IOPL_MASK109,3933
#define FL_IOPL_0	FL_IOPL_0110,3996
#define FL_IOPL_1	FL_IOPL_1111,4040
#define FL_IOPL_2	FL_IOPL_2112,4084
#define FL_IOPL_3	FL_IOPL_3113,4128
#define FL_NT	FL_NT114,4172
#define FL_RF	FL_RF115,4213
#define FL_VM	FL_VM116,4254
#define FL_AC	FL_AC117,4301
#define FL_VIF	FL_VIF118,4346
#define FL_VIP	FL_VIP119,4399
#define FL_ID	FL_ID120,4455
#define FEC_PR	FEC_PR123,4519
#define FEC_WR	FEC_WR124,4584
#define FEC_U	FEC_U125,4636
#define SEG_NULL	SEG_NULL139,4841
#define SEG(SEG142,4903
struct Segdesc {Segdesc152,5176
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitsd_lim_15_0153,5193
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitSegdesc::sd_lim_15_0153,5193
	unsigned sd_base_15_0 : 16; // Low bits of segment base addresssd_base_15_0154,5251
	unsigned sd_base_15_0 : 16; // Low bits of segment base addressSegdesc::sd_base_15_0154,5251
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addresssd_base_23_16155,5316
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addressSegdesc::sd_base_23_16155,5316
	unsigned sd_type : 4;       // Segment type (see STS_ constants)sd_type156,5384
	unsigned sd_type : 4;       // Segment type (see STS_ constants)Segdesc::sd_type156,5384
	unsigned sd_s : 1;          // 0 = system, 1 = applicationsd_s157,5450
	unsigned sd_s : 1;          // 0 = system, 1 = applicationSegdesc::sd_s157,5450
	unsigned sd_dpl : 2;        // Descriptor Privilege Levelsd_dpl158,5510
	unsigned sd_dpl : 2;        // Descriptor Privilege LevelSegdesc::sd_dpl158,5510
	unsigned sd_p : 1;          // Presentsd_p159,5569
	unsigned sd_p : 1;          // PresentSegdesc::sd_p159,5569
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitsd_lim_19_16160,5609
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitSegdesc::sd_lim_19_16160,5609
	unsigned sd_avl : 1;        // Unused (available for software use)sd_avl161,5668
	unsigned sd_avl : 1;        // Unused (available for software use)Segdesc::sd_avl161,5668
	unsigned sd_rsv1 : 1;       // Reservedsd_rsv1162,5736
	unsigned sd_rsv1 : 1;       // ReservedSegdesc::sd_rsv1162,5736
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentsd_db163,5777
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentSegdesc::sd_db163,5777
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setsd_g164,5848
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setSegdesc::sd_g164,5848
	unsigned sd_base_31_24 : 8; // High bits of segment base addresssd_base_31_24165,5921
	unsigned sd_base_31_24 : 8; // High bits of segment base addressSegdesc::sd_base_31_24165,5921
#define SEG_NULL	SEG_NULL168,6006
#define SEG_FAULT	SEG_FAULT170,6114
#define SEG(SEG172,6192
#define SEG16(SEG16176,6391
#define STA_X	STA_X184,6662
#define STA_E	STA_E185,6707
#define STA_C	STA_C186,6771
#define STA_W	STA_W187,6839
#define STA_R	STA_R188,6901
#define STA_A	STA_A189,6958
#define STS_T16A	STS_T16A192,7022
#define STS_LDT	STS_LDT193,7071
#define STS_T16B	STS_T16B194,7122
#define STS_CG16	STS_CG16195,7166
#define STS_TG	STS_TG196,7211
#define STS_IG16	STS_IG16197,7268
#define STS_TG16	STS_TG16198,7318
#define STS_T32A	STS_T32A199,7363
#define STS_T32B	STS_T32B200,7412
#define STS_CG32	STS_CG32201,7456
#define STS_IG32	STS_IG32202,7501
#define STS_TG32	STS_TG32203,7551
struct Taskstate {Taskstate215,7731
	uint32_t ts_link;	// Old ts selectorts_link216,7750
	uint32_t ts_link;	// Old ts selectorTaskstate::ts_link216,7750
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsts_esp0217,7788
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsTaskstate::ts_esp0217,7788
	uint16_t ts_ss0;	//   after an increase in privilege levelts_ss0218,7848
	uint16_t ts_ss0;	//   after an increase in privilege levelTaskstate::ts_ss0218,7848
	uint16_t ts_padding1;ts_padding1219,7908
	uint16_t ts_padding1;Taskstate::ts_padding1219,7908
	uintptr_t ts_esp1;ts_esp1220,7931
	uintptr_t ts_esp1;Taskstate::ts_esp1220,7931
	uint16_t ts_ss1;ts_ss1221,7951
	uint16_t ts_ss1;Taskstate::ts_ss1221,7951
	uint16_t ts_padding2;ts_padding2222,7969
	uint16_t ts_padding2;Taskstate::ts_padding2222,7969
	uintptr_t ts_esp2;ts_esp2223,7992
	uintptr_t ts_esp2;Taskstate::ts_esp2223,7992
	uint16_t ts_ss2;ts_ss2224,8012
	uint16_t ts_ss2;Taskstate::ts_ss2224,8012
	uint16_t ts_padding3;ts_padding3225,8030
	uint16_t ts_padding3;Taskstate::ts_padding3225,8030
	physaddr_t ts_cr3;	// Page directory basets_cr3226,8053
	physaddr_t ts_cr3;	// Page directory baseTaskstate::ts_cr3226,8053
	uintptr_t ts_eip;	// Saved state from last task switchts_eip227,8096
	uintptr_t ts_eip;	// Saved state from last task switchTaskstate::ts_eip227,8096
	uint32_t ts_eflags;ts_eflags228,8152
	uint32_t ts_eflags;Taskstate::ts_eflags228,8152
	uint32_t ts_eax;	// More saved state (registers)ts_eax229,8173
	uint32_t ts_eax;	// More saved state (registers)Taskstate::ts_eax229,8173
	uint32_t ts_ecx;ts_ecx230,8223
	uint32_t ts_ecx;Taskstate::ts_ecx230,8223
	uint32_t ts_edx;ts_edx231,8241
	uint32_t ts_edx;Taskstate::ts_edx231,8241
	uint32_t ts_ebx;ts_ebx232,8259
	uint32_t ts_ebx;Taskstate::ts_ebx232,8259
	uintptr_t ts_esp;ts_esp233,8277
	uintptr_t ts_esp;Taskstate::ts_esp233,8277
	uintptr_t ts_ebp;ts_ebp234,8296
	uintptr_t ts_ebp;Taskstate::ts_ebp234,8296
	uint32_t ts_esi;ts_esi235,8315
	uint32_t ts_esi;Taskstate::ts_esi235,8315
	uint32_t ts_edi;ts_edi236,8333
	uint32_t ts_edi;Taskstate::ts_edi236,8333
	uint16_t ts_es;		// Even more saved state (segment selectors)ts_es237,8351
	uint16_t ts_es;		// Even more saved state (segment selectors)Taskstate::ts_es237,8351
	uint16_t ts_padding4;ts_padding4238,8414
	uint16_t ts_padding4;Taskstate::ts_padding4238,8414
	uint16_t ts_cs;ts_cs239,8437
	uint16_t ts_cs;Taskstate::ts_cs239,8437
	uint16_t ts_padding5;ts_padding5240,8454
	uint16_t ts_padding5;Taskstate::ts_padding5240,8454
	uint16_t ts_ss;ts_ss241,8477
	uint16_t ts_ss;Taskstate::ts_ss241,8477
	uint16_t ts_padding6;ts_padding6242,8494
	uint16_t ts_padding6;Taskstate::ts_padding6242,8494
	uint16_t ts_ds;ts_ds243,8517
	uint16_t ts_ds;Taskstate::ts_ds243,8517
	uint16_t ts_padding7;ts_padding7244,8534
	uint16_t ts_padding7;Taskstate::ts_padding7244,8534
	uint16_t ts_fs;ts_fs245,8557
	uint16_t ts_fs;Taskstate::ts_fs245,8557
	uint16_t ts_padding8;ts_padding8246,8574
	uint16_t ts_padding8;Taskstate::ts_padding8246,8574
	uint16_t ts_gs;ts_gs247,8597
	uint16_t ts_gs;Taskstate::ts_gs247,8597
	uint16_t ts_padding9;ts_padding9248,8614
	uint16_t ts_padding9;Taskstate::ts_padding9248,8614
	uint16_t ts_ldt;ts_ldt249,8637
	uint16_t ts_ldt;Taskstate::ts_ldt249,8637
	uint16_t ts_padding10;ts_padding10250,8655
	uint16_t ts_padding10;Taskstate::ts_padding10250,8655
	uint16_t ts_t;		// Trap on task switchts_t251,8679
	uint16_t ts_t;		// Trap on task switchTaskstate::ts_t251,8679
	uint16_t ts_iomb;	// I/O map base addressts_iomb252,8719
	uint16_t ts_iomb;	// I/O map base addressTaskstate::ts_iomb252,8719
struct Gatedesc {Gatedesc256,8811
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentgd_off_15_0257,8829
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentGatedesc::gd_off_15_0257,8829
	unsigned gd_sel : 16;        // segment selectorgd_sel258,8895
	unsigned gd_sel : 16;        // segment selectorGatedesc::gd_sel258,8895
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesgd_args259,8945
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesGatedesc::gd_args259,8945
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)gd_rsv1260,9013
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)Gatedesc::gd_rsv1260,9013
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})gd_type261,9079
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})Gatedesc::gd_type261,9079
	unsigned gd_s : 1;           // must be 0 (system)gd_s262,9137
	unsigned gd_s : 1;           // must be 0 (system)Gatedesc::gd_s262,9137
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelgd_dpl263,9189
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelGatedesc::gd_dpl263,9189
	unsigned gd_p : 1;           // Presentgd_p264,9262
	unsigned gd_p : 1;           // PresentGatedesc::gd_p264,9262
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentgd_off_31_16265,9303
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentGatedesc::gd_off_31_16265,9303
#define SETGATE(SETGATE282,10286
#define SETCALLGATE(SETCALLGATE296,10699
struct Pseudodesc {Pseudodesc310,11137
	uint16_t pd_lim;		// Limitpd_lim311,11157
	uint16_t pd_lim;		// LimitPseudodesc::pd_lim311,11157
	uint32_t pd_base;		// Base addresspd_base312,11185
	uint32_t pd_base;		// Base addressPseudodesc::pd_base312,11185

inc/stdarg.h,189
#define	JOS_INC_STDARG_HJOS_INC_STDARG_H4,91
typedef __builtin_va_list va_list;va_list6,117
#define va_start(va_start8,153
#define va_arg(va_arg10,210
#define va_end(va_end12,263

inc/error.h,460
#define JOS_INC_ERROR_HJOS_INC_ERROR_H4,72
	E_UNSPECIFIED	= 1,	// Unspecified or unknown problemE_UNSPECIFIED8,172
	E_BAD_ENV	,	// Environment doesn't exist or otherwiseE_BAD_ENV9,226
	E_INVAL		,	// Invalid parameterE_INVAL11,323
	E_NO_MEM	,	// Request failed due to memory shortageE_NO_MEM12,356
	E_NO_FREE_ENV	,	// Attempt to create a new environment beyondE_NO_FREE_ENV13,409
	E_FAULT		,	// Memory faultE_FAULT15,499
	MAXERRORMAXERROR17,528

inc/kbdreg.h,2510
#define JOS_KBDREG_HJOS_KBDREG_H2,21
#define KEY_HOME	KEY_HOME5,63
#define KEY_END	KEY_END6,85
#define KEY_UP	KEY_UP7,107
#define KEY_DN	KEY_DN8,128
#define KEY_LF	KEY_LF9,149
#define KEY_RT	KEY_RT10,170
#define KEY_PGUP	KEY_PGUP11,191
#define KEY_PGDN	KEY_PGDN12,213
#define KEY_INS	KEY_INS13,235
#define KEY_DEL	KEY_DEL14,257
#define	KBSTATP	KBSTATP19,331
#define	 KBS_DIB	KBS_DIB20,389
#define	 KBS_IBF	KBS_IBF21,436
#define	 KBS_WARM	KBS_WARM22,485
#define	 KBS_OCMD	KBS_OCMD23,535
#define	 KBS_NOSEC	KBS_NOSEC24,594
#define	 KBS_TERR	KBS_TERR25,654
#define	 KBS_RERR	KBS_RERR26,720
#define	 KBS_PERR	KBS_PERR27,767
#define	KBCMDP	KBCMDP29,814
#define	 KBC_RAMREAD	KBC_RAMREAD30,864
#define	 KBC_RAMWRITE	KBC_RAMWRITE31,910
#define	 KBC_AUXDISABLE	KBC_AUXDISABLE32,956
#define	 KBC_AUXENABLE	KBC_AUXENABLE33,1014
#define	 KBC_AUXTEST	KBC_AUXTEST34,1070
#define	 KBC_KBDECHO	KBC_KBDECHO35,1122
#define	 KBC_AUXECHO	KBC_AUXECHO36,1176
#define	 KBC_AUXWRITE	KBC_AUXWRITE37,1231
#define	 KBC_SELFTEST	KBC_SELFTEST38,1288
#define	 KBC_KBDTEST	KBC_KBDTEST39,1337
#define	 KBC_KBDDISABLE	KBC_KBDDISABLE40,1388
#define	 KBC_KBDENABLE	KBC_KBDENABLE41,1445
#define	 KBC_PULSE0	KBC_PULSE042,1500
#define	 KBC_PULSE1	KBC_PULSE143,1550
#define	 KBC_PULSE2	KBC_PULSE244,1600
#define	 KBC_PULSE3	KBC_PULSE345,1650
#define	KBDATAP	KBDATAP47,1701
#define	KBOUTP	KBOUTP48,1746
#define	K_RDCMDBYTE	K_RDCMDBYTE50,1791
#define	K_LDCMDBYTE	K_LDCMDBYTE51,1816
#define	KC8_TRANS	KC8_TRANS53,1842
#define	KC8_MDISABLE	KC8_MDISABLE54,1897
#define	KC8_KDISABLE	KC8_KDISABLE55,1943
#define	KC8_IGNSEC	KC8_IGNSEC56,1992
#define	KC8_CPU	KC8_CPU57,2043
#define	KC8_MENABLE	KC8_MENABLE58,2102
#define	KC8_KENABLE	KC8_KENABLE59,2156
#define	CMDBYTE	CMDBYTE60,2213
#define	KBC_RESET	KBC_RESET63,2299
#define	KBC_RESEND	KBC_RESEND64,2347
#define	KBC_SETDEFAULT	KBC_SETDEFAULT65,2419
#define	KBC_DISABLE	KBC_DISABLE66,2494
#define	KBC_ENABLE	KBC_ENABLE67,2578
#define	KBC_TYPEMATIC	KBC_TYPEMATIC68,2628
#define	KBC_SETTABLE	KBC_SETTABLE69,2690
#define	KBC_MODEIND	KBC_MODEIND70,2753
#define	KBC_ECHO	KBC_ECHO71,2815
#define	KBR_EXTENDED	KBR_EXTENDED74,2903
#define	KBR_RESEND	KBR_RESEND75,2957
#define	KBR_ACK	KBR_ACK76,3011
#define	KBR_OVERRUN	KBR_OVERRUN77,3064
#define	KBR_FAILURE	KBR_FAILURE78,3103
#define	KBR_BREAK	KBR_BREAK79,3152
#define	KBR_RSTDONE	KBR_RSTDONE80,3221
#define	KBR_ECHO	KBR_ECHO81,3267

inc/types.h,1005
#define JOS_INC_TYPES_HJOS_INC_TYPES_H2,24
#define NULL NULL5,62
typedef _Bool bool;bool9,130
enum { false, true };false10,150
enum { false, true };true10,150
typedef __signed char int8_t;int8_t13,219
typedef unsigned char uint8_t;uint8_t14,249
typedef short int16_t;int16_t15,280
typedef unsigned short uint16_t;uint16_t16,303
typedef int int32_t;int32_t17,336
typedef unsigned int uint32_t;uint32_t18,357
typedef long long int64_t;int64_t19,388
typedef unsigned long long uint64_t;uint64_t20,415
typedef int32_t intptr_t;intptr_t26,673
typedef uint32_t uintptr_t;uintptr_t27,699
typedef uint32_t physaddr_t;physaddr_t28,727
typedef uint32_t ppn_t;ppn_t31,791
typedef uint32_t size_t;size_t34,859
typedef int32_t ssize_t;ssize_t37,975
typedef int32_t off_t;off_t40,1048
#define MIN(MIN43,1108
#define MAX(MAX49,1241
#define ROUNDDOWN(ROUNDDOWN58,1476
#define ROUNDUP(ROUNDUP64,1637
#define ARRAY_SIZE(ARRAY_SIZE70,1778
#define offsetof(offsetof73,1904

inc/assert.h,175
#define JOS_INC_ASSERT_HJOS_INC_ASSERT_H4,73
#define warn(warn11,247
#define panic(panic12,304
#define assert(assert14,364
#define static_assert(static_assert18,521

boot/sign.pl,0

boot/main.c,255
#define SECTSIZE	SECTSIZE32,1131
#define ELFHDR	ELFHDR33,1152
bootmain(void)bootmain39,1293
readseg(uint32_t pa, uint32_t count, uint32_t offset)readseg72,2092
waitdisk(void)waitdisk99,2821
readsect(void *dst, uint32_t offset)readsect107,2928

boot/boot.S,108
start:start13,454
protcseg:protcseg58,1983
spin:spin72,2497
gdt:gdt77,2598
gdtdesc:gdtdesc82,2757

obj/boot/boot.asm,729
Disassembly of section .text:Disassembly5,49
start:start11,174
protcseg:protcseg84,2893
spin:spin108,3821
voidvoid132,4396
static inline uint8_tstatic137,4463
voidvoid157,5076
static inline voidstatic169,5412
	offset = (offset / SECTSIZE) + 1;offset226,7583
	end_pa = pa + count;end_pa230,7719
	offset = (offset / SECTSIZE) + 1;offset234,7851
	end_pa = pa + count;end_pa236,7935
	offset = (offset / SECTSIZE) + 1;offset238,8006
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph282,9731
	eph = ph + ELFHDR->e_phnum;eph284,9848
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph286,9929
	eph = ph + ELFHDR->e_phnum;eph288,10052
static inline voidstatic309,10911

obj/kern/kernel.asm,256079
Disassembly of section .text:Disassembly5,47
f0100000 <_start+0xeffffff4>:f01000007,78
_start = RELOC(entry)_start9,123
entry:entry12,159
f0100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dhf010000014,200
f0100006:	00 00                	add    %al,(%eax)f010000615,256
f0100008:	fe 4f 52             	decb   0x52(%edi)f010000816,306
f010000b:	e4                   	.byte 0xe4f010000b17,356
f010000c <entry>:f010000c19,400
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472f010000c20,418
f0100013:	34 12 f010001321,471
f0100015:	b8 00 50 11 00       	mov    $0x115000,%eaxf010001528,696
f010001a:	0f 22 d8             	mov    %eax,%cr3f010001a30,767
f010001d:	0f 20 c0             	mov    %cr0,%eaxf010001d33,852
f0100020:	0d 01 00 01 80       	or     $0x80010001,%eaxf010002035,936
f0100025:	0f 22 c0             	mov    %eax,%cr0f010002537,1009
f0100028:	b8 2f 00 10 f0       	mov    $0xf010002f,%eaxf010002843,1219
f010002d:	ff e0                	jmp    *%eaxf010002d45,1286
f010002f <relocated>:f010002f47,1332
relocated:relocated48,1354
f010002f:	bd 00 00 00 00       	mov    $0x0,%ebpf010002f54,1542
f0100034:	bc 00 30 11 f0       	mov    $0xf0113000,%espf010003458,1644
f0100039:	e8 02 00 00 00       	call   f0100040 <i386_init>f010003962,1734
f010003e <spin>:f010003e64,1795
spin:	jmp	spinspin67,1869
f010003e:	eb fe                	jmp    f010003e <spin>f010003e68,1884
f0100040 <i386_init>:f010004070,1940
voidvoid74,1989
f0100040:	55                   	push   %ebpf010004077,2012
f0100041:	89 e5                	mov    %esp,%ebpf010004178,2056
f0100043:	53                   	push   %ebxf010004379,2105
f0100044:	83 ec 08             	sub    $0x8,%espf010004480,2149
f0100047:	e8 03 01 00 00       	call   f010014f <__x86.get_pc_thunk.bx>f010004781,2198
f010004c:	81 c3 bc 42 01 00    	add    $0x142bc,%ebxf010004c82,2270
f0100052:	c7 c2 60 60 11 f0    	mov    $0xf0116060,%edxf010005289,2587
f0100058:	c7 c0 c0 66 11 f0    	mov    $0xf01166c0,%eaxf010005890,2643
f010005e:	29 d0                	sub    %edx,%eaxf010005e91,2699
f0100060:	50                   	push   %eaxf010006092,2748
f0100061:	6a 00                	push   $0x0f010006193,2792
f0100063:	52                   	push   %edxf010006394,2836
f0100064:	e8 ba 23 00 00       	call   f0102423 <memset>f010006495,2880
f0100069:	e8 36 05 00 00       	call   f01005a4 <cons_init>f0100069100,3027
f010006e:	83 c4 08             	add    $0x8,%espf010006e103,3135
f0100071:	68 ac 1a 00 00       	push   $0x1aacf0100071104,3184
f0100076:	8d 83 58 e5 fe ff    	lea    -0x11aa8(%ebx),%eaxf0100076105,3231
f010007c:	50                   	push   %eaxf010007c106,3290
f010007d:	e8 45 18 00 00       	call   f01018c7 <cprintf>f010007d107,3334
f0100082:	e8 9b 0d 00 00       	call   f0100e22 <mem_init>f0100082111,3459
f0100087:	83 c4 10             	add    $0x10,%espf0100087112,3518
f010008a:	83 ec 0c             	sub    $0xc,%espf010008a117,3631
f010008d:	6a 00                	push   $0x0f010008d118,3680
f010008f:	e8 8c 07 00 00       	call   f0100820 <monitor>f010008f119,3724
f0100094:	83 c4 10             	add    $0x10,%espf0100094120,3782
f0100097:	eb f1                	jmp    f010008a <i386_init+0x4a>f0100097121,3832
f0100099 <_panic>:f0100099123,3898
voidvoid127,4034
f0100099:	55                   	push   %ebpf0100099130,4097
f010009a:	89 e5                	mov    %esp,%ebpf010009a131,4141
f010009c:	57                   	push   %edif010009c132,4190
f010009d:	56                   	push   %esif010009d133,4234
f010009e:	53                   	push   %ebxf010009e134,4278
f010009f:	83 ec 0c             	sub    $0xc,%espf010009f135,4322
f01000a2:	e8 a8 00 00 00       	call   f010014f <__x86.get_pc_thunk.bx>f01000a2136,4371
f01000a7:	81 c3 61 42 01 00    	add    $0x14261,%ebxf01000a7137,4443
f01000ad:	8b 7d 10             	mov    0x10(%ebp),%edif01000ad138,4496
f01000b0:	c7 c0 c4 66 11 f0    	mov    $0xf01166c4,%eaxf01000b0142,4580
f01000b6:	83 38 00             	cmpl   $0x0,(%eax)f01000b6143,4636
f01000b9:	74 0f                	je     f01000ca <_panic+0x31>f01000b9144,4687
dead:dead147,4763
f01000bb:	83 ec 0c             	sub    $0xc,%espf01000bb151,4834
f01000be:	6a 00                	push   $0x0f01000be152,4883
f01000c0:	e8 5b 07 00 00       	call   f0100820 <monitor>f01000c0153,4927
f01000c5:	83 c4 10             	add    $0x10,%espf01000c5154,4985
f01000c8:	eb f1                	jmp    f01000bb <_panic+0x22>f01000c8155,5035
	panicstr = fmt;panicstr156,5097
f01000ca:	89 38                	mov    %edi,(%eax)f01000ca157,5114
f01000cc:	fa                   	cli    f01000cc159,5192
f01000cd:	fc                   	cld    f01000cd160,5232
f01000ce:	8d 75 14             	lea    0x14(%ebp),%esif01000ce162,5292
f01000d1:	83 ec 04             	sub    $0x4,%espf01000d1164,5396
f01000d4:	ff 75 0c             	pushl  0xc(%ebp)f01000d4165,5445
f01000d7:	ff 75 08             	pushl  0x8(%ebp)f01000d7166,5494
f01000da:	8d 83 73 e5 fe ff    	lea    -0x11a8d(%ebx),%eaxf01000da167,5543
f01000e0:	50                   	push   %eaxf01000e0168,5602
f01000e1:	e8 e1 17 00 00       	call   f01018c7 <cprintf>f01000e1169,5646
f01000e6:	83 c4 08             	add    $0x8,%espf01000e6171,5724
f01000e9:	56                   	push   %esif01000e9172,5773
f01000ea:	57                   	push   %edif01000ea173,5817
f01000eb:	e8 a0 17 00 00       	call   f0101890 <vcprintf>f01000eb174,5861
f01000f0:	8d 83 af e5 fe ff    	lea    -0x11a51(%ebx),%eaxf01000f0176,5936
f01000f6:	89 04 24             	mov    %eax,(%esp)f01000f6177,5995
f01000f9:	e8 c9 17 00 00       	call   f01018c7 <cprintf>f01000f9178,6046
f01000fe:	83 c4 10             	add    $0x10,%espf01000fe179,6104
f0100101:	eb b8                	jmp    f01000bb <_panic+0x22>f0100101180,6154
f0100103 <_warn>:f0100103182,6217
voidvoid186,6266
f0100103:	55                   	push   %ebpf0100103189,6328
f0100104:	89 e5                	mov    %esp,%ebpf0100104190,6372
f0100106:	56                   	push   %esif0100106191,6421
f0100107:	53                   	push   %ebxf0100107192,6465
f0100108:	e8 42 00 00 00       	call   f010014f <__x86.get_pc_thunk.bx>f0100108193,6509
f010010d:	81 c3 fb 41 01 00    	add    $0x141fb,%ebxf010010d194,6581
f0100113:	8d 75 14             	lea    0x14(%ebp),%esif0100113198,6668
f0100116:	83 ec 04             	sub    $0x4,%espf0100116200,6774
f0100119:	ff 75 0c             	pushl  0xc(%ebp)f0100119201,6823
f010011c:	ff 75 08             	pushl  0x8(%ebp)f010011c202,6872
f010011f:	8d 83 8b e5 fe ff    	lea    -0x11a75(%ebx),%eaxf010011f203,6921
f0100125:	50                   	push   %eaxf0100125204,6980
f0100126:	e8 9c 17 00 00       	call   f01018c7 <cprintf>f0100126205,7024
f010012b:	83 c4 08             	add    $0x8,%espf010012b207,7102
f010012e:	56                   	push   %esif010012e208,7151
f010012f:	ff 75 10             	pushl  0x10(%ebp)f010012f209,7195
f0100132:	e8 59 17 00 00       	call   f0101890 <vcprintf>f0100132210,7245
f0100137:	8d 83 af e5 fe ff    	lea    -0x11a51(%ebx),%eaxf0100137212,7320
f010013d:	89 04 24             	mov    %eax,(%esp)f010013d213,7379
f0100140:	e8 82 17 00 00       	call   f01018c7 <cprintf>f0100140214,7430
f0100145:	83 c4 10             	add    $0x10,%espf0100145217,7503
f0100148:	8d 65 f8             	lea    -0x8(%ebp),%espf0100148218,7553
f010014b:	5b                   	pop    %ebxf010014b219,7608
f010014c:	5e                   	pop    %esif010014c220,7652
f010014d:	5d                   	pop    %ebpf010014d221,7696
f010014e:	c3                   	ret    f010014e222,7740
f010014f <__x86.get_pc_thunk.bx>:f010014f224,7781
f010014f:	8b 1c 24             	mov    (%esp),%ebxf010014f225,7815
f0100152:	c3                   	ret    f0100152226,7866
f0100153 <serial_proc_data>:f0100153228,7907
static bool serial_exists;static230,7937
static intstatic232,7965
f0100153:	55                   	push   %ebpf0100153235,8001
f0100154:	89 e5                	mov    %esp,%ebpf0100154236,8045
static inline uint8_tstatic238,8095
f0100156:	ba fd 03 00 00       	mov    $0x3fd,%edxf0100156243,8204
f010015b:	ec                   	in     (%dx),%alf010015b244,8255
f010015c:	a8 01                	test   $0x1,%alf010015c246,8346
f010015e:	74 0b                	je     f010016b <serial_proc_data+0x18>f010015e247,8394
f0100160:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100160248,8466
f0100165:	ec                   	in     (%dx),%alf0100165249,8517
f0100166:	0f b6 c0             	movzbl %al,%eaxf0100166252,8605
f0100169:	5d                   	pop    %ebpf0100169254,8655
f010016a:	c3                   	ret    f010016a255,8699
f010016b:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf010016b257,8752
f0100170:	eb f7                	jmp    f0100169 <serial_proc_data+0x16>f0100170258,8808
f0100172 <cons_intr>:f0100172260,8881
static voidstatic264,9011
f0100172:	55                   	push   %ebpf0100172267,9054
f0100173:	89 e5                	mov    %esp,%ebpf0100173268,9098
f0100175:	56                   	push   %esif0100175269,9147
f0100176:	53                   	push   %ebxf0100176270,9191
f0100177:	e8 d3 ff ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100177271,9235
f010017c:	81 c3 8c 41 01 00    	add    $0x1418c,%ebxf010017c272,9307
f0100182:	89 c6                	mov    %eax,%esif0100182273,9360
f0100184:	ff d6                	call   *%esif0100184277,9451
f0100186:	83 f8 ff             	cmp    $0xffffffff,%eaxf0100186278,9496
f0100189:	74 2e                	je     f01001b9 <cons_intr+0x47>f0100189279,9552
f010018b:	85 c0                	test   %eax,%eaxf010018b281,9631
f010018d:	74 f5                	je     f0100184 <cons_intr+0x12>f010018d282,9680
f010018f:	8b 8b 7c 1f 00 00    	mov    0x1f7c(%ebx),%ecxf010018f285,9787
f0100195:	8d 51 01             	lea    0x1(%ecx),%edxf0100195286,9844
f0100198:	89 93 7c 1f 00 00    	mov    %edx,0x1f7c(%ebx)f0100198287,9898
f010019e:	88 84 0b 78 1d 00 00 	mov    %al,0x1d78(%ebx,%ecx,1)f010019e288,9955
f01001a5:	81 fa 00 02 00 00    	cmp    $0x200,%edxf01001a5290,10050
f01001ab:	75 d7                	jne    f0100184 <cons_intr+0x12>f01001ab291,10101
f01001ad:	c7 83 7c 1f 00 00 00 	movl   $0x0,0x1f7c(%ebx)f01001ad293,10184
f01001b4:	00 00 00 f01001b4294,10241
f01001b7:	eb cb                	jmp    f0100184 <cons_intr+0x12>f01001b7295,10261
f01001b9:	5b                   	pop    %ebxf01001b9298,10331
f01001ba:	5e                   	pop    %esif01001ba299,10375
f01001bb:	5d                   	pop    %ebpf01001bb300,10419
f01001bc:	c3                   	ret    f01001bc301,10463
f01001bd <kbd_proc_data>:f01001bd303,10504
f01001bd:	55                   	push   %ebpf01001bd305,10532
f01001be:	89 e5                	mov    %esp,%ebpf01001be306,10576
f01001c0:	56                   	push   %esif01001c0307,10625
f01001c1:	53                   	push   %ebxf01001c1308,10669
f01001c2:	e8 88 ff ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01001c2309,10713
f01001c7:	81 c3 41 41 01 00    	add    $0x14141,%ebxf01001c7310,10785
f01001cd:	ba 64 00 00 00       	mov    $0x64,%edxf01001cd311,10838
f01001d2:	ec                   	in     (%dx),%alf01001d2312,10888
f01001d3:	a8 01                	test   $0x1,%alf01001d3314,10965
f01001d5:	0f 84 06 01 00 00    	je     f01002e1 <kbd_proc_data+0x124>f01001d5315,11013
f01001db:	a8 20                	test   $0x20,%alf01001db317,11105
f01001dd:	0f 85 05 01 00 00    	jne    f01002e8 <kbd_proc_data+0x12b>f01001dd318,11154
f01001e3:	ba 60 00 00 00       	mov    $0x60,%edxf01001e3319,11224
f01001e8:	ec                   	in     (%dx),%alf01001e8320,11274
f01001e9:	89 c2                	mov    %eax,%edxf01001e9321,11323
f01001eb:	3c e0                	cmp    $0xe0,%alf01001eb323,11393
f01001ed:	0f 84 93 00 00 00    	je     f0100286 <kbd_proc_data+0xc9>f01001ed324,11442
f01001f3:	84 c0                	test   %al,%alf01001f3326,11538
f01001f5:	0f 88 a0 00 00 00    	js     f010029b <kbd_proc_data+0xde>f01001f5327,11585
f01001fb:	8b 8b 58 1d 00 00    	mov    0x1d58(%ebx),%ecxf01001fb329,11683
f0100201:	f6 c1 40             	test   $0x40,%clf0100201330,11740
f0100204:	74 0e                	je     f0100214 <kbd_proc_data+0x57>f0100204331,11789
f0100206:	83 c8 80             	or     $0xffffff80,%eaxf0100206333,11874
f0100209:	89 c2                	mov    %eax,%edxf0100209334,11930
f010020b:	83 e1 bf             	and    $0xffffffbf,%ecxf010020b336,11998
f010020e:	89 8b 58 1d 00 00    	mov    %ecx,0x1d58(%ebx)f010020e337,12054
f0100214:	0f b6 d2             	movzbl %dl,%edxf0100214339,12138
f0100217:	0f b6 84 13 d8 e6 fe 	movzbl -0x11928(%ebx,%edx,1),%eaxf0100217340,12186
f010021e:	ff f010021e341,12252
f010021f:	0b 83 58 1d 00 00    	or     0x1d58(%ebx),%eaxf010021f342,12266
f0100225:	0f b6 8c 13 d8 e5 fe 	movzbl -0x11a28(%ebx,%edx,1),%ecxf0100225344,12351
f010022c:	ff f010022c345,12417
f010022d:	31 c8                	xor    %ecx,%eaxf010022d346,12431
f010022f:	89 83 58 1d 00 00    	mov    %eax,0x1d58(%ebx)f010022f347,12480
	c = charcode[shift & (CTL | SHIFT)][data];c348,12537
f0100235:	89 c1                	mov    %eax,%ecxf0100235349,12581
f0100237:	83 e1 03             	and    $0x3,%ecxf0100237350,12630
f010023a:	8b 8c 8b f8 1c 00 00 	mov    0x1cf8(%ebx,%ecx,4),%ecxf010023a351,12679
f0100241:	0f b6 14 11          	movzbl (%ecx,%edx,1),%edxf0100241352,12743
f0100245:	0f b6 f2             	movzbl %dl,%esif0100245353,12801
f0100248:	a8 08                	test   $0x8,%alf0100248355,12874
f010024a:	74 0d                	je     f0100259 <kbd_proc_data+0x9c>f010024a356,12922
f010024c:	89 f2                	mov    %esi,%edxf010024c358,13019
f010024e:	8d 4e 9f             	lea    -0x61(%esi),%ecxf010024e359,13068
f0100251:	83 f9 19             	cmp    $0x19,%ecxf0100251360,13124
f0100254:	77 7a                	ja     f01002d0 <kbd_proc_data+0x113>f0100254361,13174
f0100256:	83 ee 20             	sub    $0x20,%esif0100256363,13263
f0100259:	f7 d0                	not    %eaxf0100259365,13361
f010025b:	a8 06                	test   $0x6,%alf010025b366,13405
f010025d:	75 33                	jne    f0100292 <kbd_proc_data+0xd5>f010025d367,13453
f010025f:	81 fe e9 00 00 00    	cmp    $0xe9,%esif010025f368,13522
f0100265:	75 2b                	jne    f0100292 <kbd_proc_data+0xd5>f0100265369,13572
f0100267:	83 ec 0c             	sub    $0xc,%espf0100267371,13668
f010026a:	8d 83 a5 e5 fe ff    	lea    -0x11a5b(%ebx),%eaxf010026a372,13717
f0100270:	50                   	push   %eaxf0100270373,13776
f0100271:	e8 51 16 00 00       	call   f01018c7 <cprintf>f0100271374,13820
static inline voidstatic377,13881
f0100276:	b8 03 00 00 00       	mov    $0x3,%eaxf0100276381,13988
f010027b:	ba 92 00 00 00       	mov    $0x92,%edxf010027b382,14037
f0100280:	ee                   	out    %al,(%dx)f0100280383,14087
f0100281:	83 c4 10             	add    $0x10,%espf0100281384,14136
f0100284:	eb 0c                	jmp    f0100292 <kbd_proc_data+0xd5>f0100284385,14186
f0100286:	83 8b 58 1d 00 00 40 	orl    $0x40,0x1d58(%ebx)f0100286387,14273
f010028d:	be 00 00 00 00       	mov    $0x0,%esif010028d389,14343
f0100292:	89 f0                	mov    %esi,%eaxf0100292391,14394
f0100294:	8d 65 f8             	lea    -0x8(%ebp),%espf0100294392,14443
f0100297:	5b                   	pop    %ebxf0100297393,14498
f0100298:	5e                   	pop    %esif0100298394,14542
f0100299:	5d                   	pop    %ebpf0100299395,14586
f010029a:	c3                   	ret    f010029a396,14630
		data = (shift & E0ESC ? data : data & 0x7F);data397,14670
f010029b:	8b 8b 58 1d 00 00    	mov    0x1d58(%ebx),%ecxf010029b398,14717
f01002a1:	89 ce                	mov    %ecx,%esif01002a1399,14774
f01002a3:	83 e6 40             	and    $0x40,%esif01002a3400,14823
f01002a6:	83 e0 7f             	and    $0x7f,%eaxf01002a6401,14873
f01002a9:	85 f6                	test   %esi,%esif01002a9402,14923
f01002ab:	0f 44 d0             	cmove  %eax,%edxf01002ab403,14972
f01002ae:	0f b6 d2             	movzbl %dl,%edxf01002ae405,15060
f01002b1:	0f b6 84 13 d8 e6 fe 	movzbl -0x11928(%ebx,%edx,1),%eaxf01002b1406,15108
f01002b8:	ff f01002b8407,15174
f01002b9:	83 c8 40             	or     $0x40,%eaxf01002b9408,15188
f01002bc:	0f b6 c0             	movzbl %al,%eaxf01002bc409,15238
f01002bf:	f7 d0                	not    %eaxf01002bf410,15286
f01002c1:	21 c8                	and    %ecx,%eaxf01002c1411,15330
f01002c3:	89 83 58 1d 00 00    	mov    %eax,0x1d58(%ebx)f01002c3412,15379
f01002c9:	be 00 00 00 00       	mov    $0x0,%esif01002c9414,15448
f01002ce:	eb c2                	jmp    f0100292 <kbd_proc_data+0xd5>f01002ce415,15497
f01002d0:	83 ea 41             	sub    $0x41,%edxf01002d0417,15599
f01002d3:	8d 4e 20             	lea    0x20(%esi),%ecxf01002d3419,15668
f01002d6:	83 fa 1a             	cmp    $0x1a,%edxf01002d6420,15723
f01002d9:	0f 42 f1             	cmovb  %ecx,%esif01002d9421,15773
f01002dc:	e9 78 ff ff ff       	jmp    f0100259 <kbd_proc_data+0x9c>f01002dc422,15822
f01002e1:	be ff ff ff ff       	mov    $0xffffffff,%esif01002e1424,15904
f01002e6:	eb aa                	jmp    f0100292 <kbd_proc_data+0xd5>f01002e6425,15960
f01002e8:	be ff ff ff ff       	mov    $0xffffffff,%esif01002e8427,16042
f01002ed:	eb a3                	jmp    f0100292 <kbd_proc_data+0xd5>f01002ed428,16098
f01002ef <cons_putc>:f01002ef430,16168
static voidstatic434,16230
f01002ef:	55                   	push   %ebpf01002ef437,16261
f01002f0:	89 e5                	mov    %esp,%ebpf01002f0438,16305
f01002f2:	57                   	push   %edif01002f2439,16354
f01002f3:	56                   	push   %esif01002f3440,16398
f01002f4:	53                   	push   %ebxf01002f4441,16442
f01002f5:	83 ec 1c             	sub    $0x1c,%espf01002f5442,16486
f01002f8:	e8 52 fe ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01002f8443,16536
f01002fd:	81 c3 0b 40 01 00    	add    $0x1400b,%ebxf01002fd444,16608
f0100303:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100303445,16661
f0100306:	be 00 00 00 00       	mov    $0x0,%esif0100306447,16730
f010030b:	bf fd 03 00 00       	mov    $0x3fd,%edif010030b449,16835
f0100310:	b9 84 00 00 00       	mov    $0x84,%ecxf0100310450,16886
f0100315:	eb 09                	jmp    f0100320 <cons_putc+0x31>f0100315451,16936
f0100317:	89 ca                	mov    %ecx,%edxf0100317452,17001
f0100319:	ec                   	in     (%dx),%alf0100319453,17050
f010031a:	ec                   	in     (%dx),%alf010031a454,17099
f010031b:	ec                   	in     (%dx),%alf010031b455,17148
f010031c:	ec                   	in     (%dx),%alf010031c456,17197
f010031d:	83 c6 01             	add    $0x1,%esif010031d458,17257
f0100320:	89 fa                	mov    %edi,%edxf0100320459,17306
f0100322:	ec                   	in     (%dx),%alf0100322460,17355
f0100323:	a8 20                	test   $0x20,%alf0100323462,17463
f0100325:	75 08                	jne    f010032f <cons_putc+0x40>f0100325463,17512
f0100327:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif0100327464,17577
f010032d:	7e e8                	jle    f0100317 <cons_putc+0x28>f010032d465,17629
f010032f:	8b 7d e4             	mov    -0x1c(%ebp),%edif010032f467,17719
f0100332:	89 f8                	mov    %edi,%eaxf0100332468,17775
f0100334:	88 45 e3             	mov    %al,-0x1d(%ebp)f0100334469,17824
f0100337:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100337471,17936
f010033c:	ee                   	out    %al,(%dx)f010033c472,17987
f010033d:	be 00 00 00 00       	mov    $0x0,%esif010033d474,18091
f0100342:	bf 79 03 00 00       	mov    $0x379,%edif0100342476,18196
f0100347:	b9 84 00 00 00       	mov    $0x84,%ecxf0100347477,18247
f010034c:	eb 09                	jmp    f0100357 <cons_putc+0x68>f010034c478,18297
f010034e:	89 ca                	mov    %ecx,%edxf010034e479,18362
f0100350:	ec                   	in     (%dx),%alf0100350480,18411
f0100351:	ec                   	in     (%dx),%alf0100351481,18460
f0100352:	ec                   	in     (%dx),%alf0100352482,18509
f0100353:	ec                   	in     (%dx),%alf0100353483,18558
f0100354:	83 c6 01             	add    $0x1,%esif0100354484,18607
f0100357:	89 fa                	mov    %edi,%edxf0100357485,18656
f0100359:	ec                   	in     (%dx),%alf0100359486,18705
f010035a:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif010035a487,18754
f0100360:	7f 04                	jg     f0100366 <cons_putc+0x77>f0100360488,18806
f0100362:	84 c0                	test   %al,%alf0100362489,18871
f0100364:	79 e8                	jns    f010034e <cons_putc+0x5f>f0100364490,18918
f0100366:	ba 78 03 00 00       	mov    $0x378,%edxf0100366492,19040
f010036b:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eaxf010036b493,19091
f010036f:	ee                   	out    %al,(%dx)f010036f494,19147
f0100370:	ba 7a 03 00 00       	mov    $0x37a,%edxf0100370495,19196
f0100375:	b8 0d 00 00 00       	mov    $0xd,%eaxf0100375496,19247
f010037a:	ee                   	out    %al,(%dx)f010037a497,19296
f010037b:	b8 08 00 00 00       	mov    $0x8,%eaxf010037b498,19345
f0100380:	ee                   	out    %al,(%dx)f0100380499,19394
f0100381:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100381501,19462
f0100384:	89 fa                	mov    %edi,%edxf0100384502,19518
f0100386:	81 e2 00 ff ff ff    	and    $0xffffff00,%edxf0100386503,19567
f010038c:	89 f8                	mov    %edi,%eaxf010038c505,19638
f010038e:	80 cc 07             	or     $0x7,%ahf010038e506,19687
f0100391:	85 d2                	test   %edx,%edxf0100391507,19735
f0100393:	0f 45 c7             	cmovne %edi,%eaxf0100393508,19784
f0100396:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100396509,19833
f0100399:	0f b6 c0             	movzbl %al,%eaxf0100399511,19910
f010039c:	83 f8 09             	cmp    $0x9,%eaxf010039c512,19958
f010039f:	0f 84 b9 00 00 00    	je     f010045e <cons_putc+0x16f>f010039f513,20007
f01003a5:	83 f8 09             	cmp    $0x9,%eaxf01003a5514,20073
f01003a8:	7e 74                	jle    f010041e <cons_putc+0x12f>f01003a8515,20122
f01003aa:	83 f8 0a             	cmp    $0xa,%eaxf01003aa516,20188
f01003ad:	0f 84 9e 00 00 00    	je     f0100451 <cons_putc+0x162>f01003ad517,20237
f01003b3:	83 f8 0d             	cmp    $0xd,%eaxf01003b3518,20303
f01003b6:	0f 85 d9 00 00 00    	jne    f0100495 <cons_putc+0x1a6>f01003b6519,20352
f01003bc:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf01003bc521,20453
f01003c3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eaxf01003c3522,20510
f01003c9:	c1 e8 16             	shr    $0x16,%eaxf01003c9523,20567
f01003cc:	8d 04 80             	lea    (%eax,%eax,4),%eaxf01003cc524,20617
f01003cf:	c1 e0 04             	shl    $0x4,%eaxf01003cf525,20675
f01003d2:	66 89 83 80 1f 00 00 	mov    %ax,0x1f80(%ebx)f01003d2526,20724
f01003d9:	66 81 bb 80 1f 00 00 	cmpw   $0x7cf,0x1f80(%ebx)f01003d9528,20808
f01003e0:	cf 07 f01003e0529,20867
f01003e2:	0f 87 d4 00 00 00    	ja     f01004bc <cons_putc+0x1cd>f01003e2530,20884
f01003e8:	8b 8b 88 1f 00 00    	mov    0x1f88(%ebx),%ecxf01003e8532,20972
f01003ee:	b8 0e 00 00 00       	mov    $0xe,%eaxf01003ee533,21029
f01003f3:	89 ca                	mov    %ecx,%edxf01003f3534,21078
f01003f5:	ee                   	out    %al,(%dx)f01003f5535,21127
f01003f6:	0f b7 9b 80 1f 00 00 	movzwl 0x1f80(%ebx),%ebxf01003f6537,21212
f01003fd:	8d 71 01             	lea    0x1(%ecx),%esif01003fd538,21269
f0100400:	89 d8                	mov    %ebx,%eaxf0100400539,21323
f0100402:	66 c1 e8 08          	shr    $0x8,%axf0100402540,21372
f0100406:	89 f2                	mov    %esi,%edxf0100406541,21420
f0100408:	ee                   	out    %al,(%dx)f0100408542,21469
f0100409:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100409543,21518
f010040e:	89 ca                	mov    %ecx,%edxf010040e544,21567
f0100410:	ee                   	out    %al,(%dx)f0100410545,21616
f0100411:	89 d8                	mov    %ebx,%eaxf0100411546,21665
f0100413:	89 f2                	mov    %esi,%edxf0100413547,21714
f0100415:	ee                   	out    %al,(%dx)f0100415548,21763
f0100416:	8d 65 f4             	lea    -0xc(%ebp),%espf0100416553,21859
f0100419:	5b                   	pop    %ebxf0100419554,21914
f010041a:	5e                   	pop    %esif010041a555,21958
f010041b:	5f                   	pop    %edif010041b556,22002
f010041c:	5d                   	pop    %ebpf010041c557,22046
f010041d:	c3                   	ret    f010041d558,22090
f010041e:	83 f8 08             	cmp    $0x8,%eaxf010041e560,22151
f0100421:	75 72                	jne    f0100495 <cons_putc+0x1a6>f0100421561,22200
f0100423:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf0100423563,22287
f010042a:	66 85 c0             	test   %ax,%axf010042a564,22344
f010042d:	74 b9                	je     f01003e8 <cons_putc+0xf9>f010042d565,22391
f010042f:	83 e8 01             	sub    $0x1,%eaxf010042f567,22470
f0100432:	66 89 83 80 1f 00 00 	mov    %ax,0x1f80(%ebx)f0100432568,22519
f0100439:	0f b7 c0             	movzwl %ax,%eaxf0100439570,22616
f010043c:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edxf010043c571,22664
f0100440:	b2 00                	mov    $0x0,%dlf0100440572,22720
f0100442:	83 ca 20             	or     $0x20,%edxf0100442573,22768
f0100445:	8b 8b 84 1f 00 00    	mov    0x1f84(%ebx),%ecxf0100445574,22818
f010044b:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)f010044b575,22875
f010044f:	eb 88                	jmp    f01003d9 <cons_putc+0xea>f010044f576,22932
f0100451:	66 83 83 80 1f 00 00 	addw   $0x50,0x1f80(%ebx)f0100451578,23020
f0100458:	50 f0100458579,23078
f0100459:	e9 5e ff ff ff       	jmp    f01003bc <cons_putc+0xcd>f0100459580,23092
f010045e:	b8 20 00 00 00       	mov    $0x20,%eaxf010045e582,23175
f0100463:	e8 87 fe ff ff       	call   f01002ef <cons_putc>f0100463583,23225
f0100468:	b8 20 00 00 00       	mov    $0x20,%eaxf0100468585,23303
f010046d:	e8 7d fe ff ff       	call   f01002ef <cons_putc>f010046d586,23353
f0100472:	b8 20 00 00 00       	mov    $0x20,%eaxf0100472588,23431
f0100477:	e8 73 fe ff ff       	call   f01002ef <cons_putc>f0100477589,23481
f010047c:	b8 20 00 00 00       	mov    $0x20,%eaxf010047c591,23559
f0100481:	e8 69 fe ff ff       	call   f01002ef <cons_putc>f0100481592,23609
f0100486:	b8 20 00 00 00       	mov    $0x20,%eaxf0100486594,23687
f010048b:	e8 5f fe ff ff       	call   f01002ef <cons_putc>f010048b595,23737
f0100490:	e9 44 ff ff ff       	jmp    f01003d9 <cons_putc+0xea>f0100490596,23797
f0100495:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf0100495598,23915
f010049c:	8d 50 01             	lea    0x1(%eax),%edxf010049c599,23972
f010049f:	66 89 93 80 1f 00 00 	mov    %dx,0x1f80(%ebx)f010049f600,24026
f01004a6:	0f b7 c0             	movzwl %ax,%eaxf01004a6601,24082
f01004a9:	8b 93 84 1f 00 00    	mov    0x1f84(%ebx),%edxf01004a9602,24130
f01004af:	0f b7 7d e4          	movzwl -0x1c(%ebp),%edif01004af603,24187
f01004b3:	66 89 3c 42          	mov    %di,(%edx,%eax,2)f01004b3604,24243
f01004b7:	e9 1d ff ff ff       	jmp    f01003d9 <cons_putc+0xea>f01004b7605,24300
f01004bc:	8b 83 84 1f 00 00    	mov    0x1f84(%ebx),%eaxf01004bc607,24447
f01004c2:	83 ec 04             	sub    $0x4,%espf01004c2608,24504
f01004c5:	68 00 0f 00 00       	push   $0xf00f01004c5609,24553
f01004ca:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edxf01004ca610,24599
f01004d0:	52                   	push   %edxf01004d0611,24654
f01004d1:	50                   	push   %eaxf01004d1612,24698
f01004d2:	e8 99 1f 00 00       	call   f0102470 <memmove>f01004d2613,24742
f01004d7:	8b 93 84 1f 00 00    	mov    0x1f84(%ebx),%edxf01004d7615,24830
f01004dd:	8d 82 00 0f 00 00    	lea    0xf00(%edx),%eaxf01004dd616,24887
f01004e3:	81 c2 a0 0f 00 00    	add    $0xfa0,%edxf01004e3617,24943
f01004e9:	83 c4 10             	add    $0x10,%espf01004e9618,24994
f01004ec:	66 c7 00 20 07       	movw   $0x720,(%eax)f01004ec619,25044
f01004f1:	83 c0 02             	add    $0x2,%eaxf01004f1620,25097
f01004f4:	39 d0                	cmp    %edx,%eaxf01004f4622,25197
f01004f6:	75 f4                	jne    f01004ec <cons_putc+0x1fd>f01004f6623,25246
f01004f8:	66 83 ab 80 1f 00 00 	subw   $0x50,0x1f80(%ebx)f01004f8625,25335
f01004ff:	50 f01004ff626,25393
f0100500:	e9 e3 fe ff ff       	jmp    f01003e8 <cons_putc+0xf9>f0100500627,25407
f0100505 <serial_intr>:f0100505629,25473
f0100505:	e8 e7 01 00 00       	call   f01006f1 <__x86.get_pc_thunk.ax>f0100505631,25499
f010050a:	05 fe 3d 01 00       	add    $0x13dfe,%eaxf010050a632,25571
f010050f:	80 b8 8c 1f 00 00 00 	cmpb   $0x0,0x1f8c(%eax)f010050f634,25644
f0100516:	75 02                	jne    f010051a <serial_intr+0x15>f0100516635,25701
f0100518:	f3 c3                	repz ret f0100518636,25768
f010051a:	55                   	push   %ebpf010051a638,25812
f010051b:	89 e5                	mov    %esp,%ebpf010051b639,25856
f010051d:	83 ec 08             	sub    $0x8,%espf010051d640,25905
f0100520:	8d 80 4b be fe ff    	lea    -0x141b5(%eax),%eaxf0100520642,25985
f0100526:	e8 47 fc ff ff       	call   f0100172 <cons_intr>f0100526643,26044
f010052b:	c9                   	leave  f010052b645,26106
f010052c:	c3                   	ret    f010052c646,26146
f010052d <kbd_intr>:f010052d648,26187
f010052d:	55                   	push   %ebpf010052d650,26210
f010052e:	89 e5                	mov    %esp,%ebpf010052e651,26254
f0100530:	83 ec 08             	sub    $0x8,%espf0100530652,26303
f0100533:	e8 b9 01 00 00       	call   f01006f1 <__x86.get_pc_thunk.ax>f0100533653,26352
f0100538:	05 d0 3d 01 00       	add    $0x13dd0,%eaxf0100538654,26424
f010053d:	8d 80 b5 be fe ff    	lea    -0x1414b(%eax),%eaxf010053d656,26504
f0100543:	e8 2a fc ff ff       	call   f0100172 <cons_intr>f0100543657,26563
f0100548:	c9                   	leave  f0100548659,26625
f0100549:	c3                   	ret    f0100549660,26665
f010054a <cons_getc>:f010054a662,26706
f010054a:	55                   	push   %ebpf010054a664,26730
f010054b:	89 e5                	mov    %esp,%ebpf010054b665,26774
f010054d:	53                   	push   %ebxf010054d666,26823
f010054e:	83 ec 04             	sub    $0x4,%espf010054e667,26867
f0100551:	e8 f9 fb ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100551668,26916
f0100556:	81 c3 b2 3d 01 00    	add    $0x13db2,%ebxf0100556669,26988
f010055c:	e8 a4 ff ff ff       	call   f0100505 <serial_intr>f010055c671,27057
f0100561:	e8 c7 ff ff ff       	call   f010052d <kbd_intr>f0100561673,27132
f0100566:	8b 93 78 1f 00 00    	mov    0x1f78(%ebx),%edxf0100566675,27222
f010056c:	b8 00 00 00 00       	mov    $0x0,%eaxf010056c677,27290
f0100571:	3b 93 7c 1f 00 00    	cmp    0x1f7c(%ebx),%edxf0100571679,27370
f0100577:	74 19                	je     f0100592 <cons_getc+0x48>f0100577680,27427
		c = cons.buf[cons.rpos++];c681,27492
f0100579:	8d 4a 01             	lea    0x1(%edx),%ecxf0100579682,27521
f010057c:	89 8b 78 1f 00 00    	mov    %ecx,0x1f78(%ebx)f010057c683,27575
f0100582:	0f b6 84 13 78 1d 00 	movzbl 0x1d78(%ebx,%edx,1),%eaxf0100582684,27632
f0100589:	00 f0100589685,27696
f010058a:	81 f9 00 02 00 00    	cmp    $0x200,%ecxf010058a687,27742
f0100590:	74 06                	je     f0100598 <cons_getc+0x4e>f0100590688,27793
f0100592:	83 c4 04             	add    $0x4,%espf0100592690,27860
f0100595:	5b                   	pop    %ebxf0100595691,27909
f0100596:	5d                   	pop    %ebpf0100596692,27953
f0100597:	c3                   	ret    f0100597693,27997
f0100598:	c7 83 78 1f 00 00 00 	movl   $0x0,0x1f78(%ebx)f0100598695,28055
f010059f:	00 00 00 f010059f696,28112
f01005a2:	eb ee                	jmp    f0100592 <cons_getc+0x48>f01005a2697,28132
f01005a4 <cons_init>:f01005a4699,28198
voidvoid702,28255
f01005a4:	55                   	push   %ebpf01005a4705,28278
f01005a5:	89 e5                	mov    %esp,%ebpf01005a5706,28322
f01005a7:	57                   	push   %edif01005a7707,28371
f01005a8:	56                   	push   %esif01005a8708,28415
f01005a9:	53                   	push   %ebxf01005a9709,28459
f01005aa:	83 ec 1c             	sub    $0x1c,%espf01005aa710,28503
f01005ad:	e8 9d fb ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01005ad711,28553
f01005b2:	81 c3 56 3d 01 00    	add    $0x13d56,%ebxf01005b2712,28625
	was = *cp;was713,28678
f01005b8:	0f b7 15 00 80 0b f0 	movzwl 0xf00b8000,%edxf01005b8714,28690
f01005bf:	66 c7 05 00 80 0b f0 	movw   $0xa55a,0xf00b8000f01005bf716,28771
f01005c6:	5a a5 f01005c6717,28829
f01005c8:	0f b7 05 00 80 0b f0 	movzwl 0xf00b8000,%eaxf01005c8719,28868
f01005cf:	66 3d 5a a5          	cmp    $0xa55a,%axf01005cf720,28923
f01005d3:	0f 84 bc 00 00 00    	je     f0100695 <cons_init+0xf1>f01005d3721,28974
		addr_6845 = MONO_BASE;addr_6845722,29039
f01005d9:	c7 83 88 1f 00 00 b4 	movl   $0x3b4,0x1f88(%ebx)f01005d9723,29064
f01005e0:	03 00 00 f01005e0724,29123
		cp = (uint16_t*) (KERNBASE + MONO_BUF);cp725,29143
f01005e3:	c7 45 e4 00 00 0b f0 	movl   $0xf00b0000,-0x1c(%ebp)f01005e3726,29185
f01005ea:	8b bb 88 1f 00 00    	mov    0x1f88(%ebx),%edif01005ea728,29270
f01005f0:	b8 0e 00 00 00       	mov    $0xe,%eaxf01005f0729,29327
f01005f5:	89 fa                	mov    %edi,%edxf01005f5730,29376
f01005f7:	ee                   	out    %al,(%dx)f01005f7731,29425
	pos = inb(addr_6845 + 1) << 8;pos732,29474
f01005f8:	8d 4f 01             	lea    0x1(%edi),%ecxf01005f8733,29506
f01005fb:	89 ca                	mov    %ecx,%edxf01005fb735,29616
f01005fd:	ec                   	in     (%dx),%alf01005fd736,29665
f01005fe:	0f b6 f0             	movzbl %al,%esif01005fe737,29714
f0100601:	c1 e6 08             	shl    $0x8,%esif0100601738,29762
f0100604:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100604740,29868
f0100609:	89 fa                	mov    %edi,%edxf0100609741,29917
f010060b:	ee                   	out    %al,(%dx)f010060b742,29966
f010060c:	89 ca                	mov    %ecx,%edxf010060c744,30071
f010060e:	ec                   	in     (%dx),%alf010060e745,30120
	crt_buf = (uint16_t*) cp;crt_buf746,30169
f010060f:	8b 7d e4             	mov    -0x1c(%ebp),%edif010060f747,30196
f0100612:	89 bb 84 1f 00 00    	mov    %edi,0x1f84(%ebx)f0100612748,30252
f0100618:	0f b6 c0             	movzbl %al,%eaxf0100618750,30337
f010061b:	09 c6                	or     %eax,%esif010061b751,30385
	crt_pos = pos;crt_pos752,30434
f010061d:	66 89 b3 80 1f 00 00 	mov    %si,0x1f80(%ebx)f010061d753,30450
f0100624:	b9 00 00 00 00       	mov    $0x0,%ecxf0100624755,30563
f0100629:	89 c8                	mov    %ecx,%eaxf0100629756,30612
f010062b:	ba fa 03 00 00       	mov    $0x3fa,%edxf010062b757,30661
f0100630:	ee                   	out    %al,(%dx)f0100630758,30712
f0100631:	bf fb 03 00 00       	mov    $0x3fb,%edif0100631759,30761
f0100636:	b8 80 ff ff ff       	mov    $0xffffff80,%eaxf0100636760,30812
f010063b:	89 fa                	mov    %edi,%edxf010063b761,30868
f010063d:	ee                   	out    %al,(%dx)f010063d762,30917
f010063e:	b8 0c 00 00 00       	mov    $0xc,%eaxf010063e763,30966
f0100643:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100643764,31015
f0100648:	ee                   	out    %al,(%dx)f0100648765,31066
f0100649:	be f9 03 00 00       	mov    $0x3f9,%esif0100649766,31115
f010064e:	89 c8                	mov    %ecx,%eaxf010064e767,31166
f0100650:	89 f2                	mov    %esi,%edxf0100650768,31215
f0100652:	ee                   	out    %al,(%dx)f0100652769,31264
f0100653:	b8 03 00 00 00       	mov    $0x3,%eaxf0100653770,31313
f0100658:	89 fa                	mov    %edi,%edxf0100658771,31362
f010065a:	ee                   	out    %al,(%dx)f010065a772,31411
f010065b:	ba fc 03 00 00       	mov    $0x3fc,%edxf010065b773,31460
f0100660:	89 c8                	mov    %ecx,%eaxf0100660774,31511
f0100662:	ee                   	out    %al,(%dx)f0100662775,31560
f0100663:	b8 01 00 00 00       	mov    $0x1,%eaxf0100663776,31609
f0100668:	89 f2                	mov    %esi,%edxf0100668777,31658
f010066a:	ee                   	out    %al,(%dx)f010066a778,31707
f010066b:	ba fd 03 00 00       	mov    $0x3fd,%edxf010066b780,31812
f0100670:	ec                   	in     (%dx),%alf0100670781,31863
f0100671:	89 c1                	mov    %eax,%ecxf0100671782,31912
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);serial_exists783,31961
f0100673:	3c ff                	cmp    $0xff,%alf0100673784,32007
f0100675:	0f 95 83 8c 1f 00 00 	setne  0x1f8c(%ebx)f0100675785,32056
f010067c:	ba fa 03 00 00       	mov    $0x3fa,%edxf010067c786,32108
f0100681:	ec                   	in     (%dx),%alf0100681787,32159
f0100682:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100682788,32208
f0100687:	ec                   	in     (%dx),%alf0100687789,32259
f0100688:	80 f9 ff             	cmp    $0xff,%clf0100688795,32372
f010068b:	74 25                	je     f01006b2 <cons_init+0x10e>f010068b796,32421
f010068d:	8d 65 f4             	lea    -0xc(%ebp),%espf010068d799,32533
f0100690:	5b                   	pop    %ebxf0100690800,32588
f0100691:	5e                   	pop    %esif0100691801,32632
f0100692:	5f                   	pop    %edif0100692802,32676
f0100693:	5d                   	pop    %ebpf0100693803,32720
f0100694:	c3                   	ret    f0100694804,32764
f0100695:	66 89 15 00 80 0b f0 	mov    %dx,0xf00b8000f0100695806,32817
		addr_6845 = CGA_BASE;addr_6845807,32871
f010069c:	c7 83 88 1f 00 00 d4 	movl   $0x3d4,0x1f88(%ebx)f010069c808,32895
f01006a3:	03 00 00 f01006a3809,32954
	cp = (uint16_t*) (KERNBASE + CGA_BUF);cp810,32974
f01006a6:	c7 45 e4 00 80 0b f0 	movl   $0xf00b8000,-0x1c(%ebp)f01006a6811,33014
f01006ad:	e9 38 ff ff ff       	jmp    f01005ea <cons_init+0x46>f01006ad812,33077
f01006b2:	83 ec 0c             	sub    $0xc,%espf01006b2814,33186
f01006b5:	8d 83 b1 e5 fe ff    	lea    -0x11a4f(%ebx),%eaxf01006b5815,33235
f01006bb:	50                   	push   %eaxf01006bb816,33294
f01006bc:	e8 06 12 00 00       	call   f01018c7 <cprintf>f01006bc817,33338
f01006c1:	83 c4 10             	add    $0x10,%espf01006c1818,33396
f01006c4:	eb c7                	jmp    f010068d <cons_init+0xe9>f01006c4820,33448
f01006c6 <cputchar>:f01006c6822,33514
voidvoid826,33597
f01006c6:	55                   	push   %ebpf01006c6829,33620
f01006c7:	89 e5                	mov    %esp,%ebpf01006c7830,33664
f01006c9:	83 ec 08             	sub    $0x8,%espf01006c9831,33713
f01006cc:	8b 45 08             	mov    0x8(%ebp),%eaxf01006cc833,33777
f01006cf:	e8 1b fc ff ff       	call   f01002ef <cons_putc>f01006cf834,33831
f01006d4:	c9                   	leave  f01006d4836,33893
f01006d5:	c3                   	ret    f01006d5837,33933
f01006d6 <getchar>:f01006d6839,33974
intint841,33995
f01006d6:	55                   	push   %ebpf01006d6844,34015
f01006d7:	89 e5                	mov    %esp,%ebpf01006d7845,34059
f01006d9:	83 ec 08             	sub    $0x8,%espf01006d9846,34108
f01006dc:	e8 69 fe ff ff       	call   f010054a <cons_getc>f01006dc850,34198
f01006e1:	85 c0                	test   %eax,%eaxf01006e1851,34258
f01006e3:	74 f7                	je     f01006dc <getchar+0x6>f01006e3852,34307
f01006e5:	c9                   	leave  f01006e5856,34402
f01006e6:	c3                   	ret    f01006e6857,34442
f01006e7 <iscons>:f01006e7859,34483
intint861,34503
f01006e7:	55                   	push   %ebpf01006e7864,34527
f01006e8:	89 e5                	mov    %esp,%ebpf01006e8865,34571
f01006ea:	b8 01 00 00 00       	mov    $0x1,%eaxf01006ea869,34654
f01006ef:	5d                   	pop    %ebpf01006ef870,34703
f01006f0:	c3                   	ret    f01006f0871,34747
f01006f1 <__x86.get_pc_thunk.ax>:f01006f1873,34788
f01006f1:	8b 04 24             	mov    (%esp),%eaxf01006f1874,34822
f01006f4:	c3                   	ret    f01006f4875,34873
f01006f5 <mon_help>:f01006f5877,34914
intint881,35000
f01006f5:	55                   	push   %ebpf01006f5884,35060
f01006f6:	89 e5                	mov    %esp,%ebpf01006f6885,35104
f01006f8:	56                   	push   %esif01006f8886,35153
f01006f9:	53                   	push   %ebxf01006f9887,35197
f01006fa:	e8 50 fa ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01006fa888,35241
f01006ff:	81 c3 09 3c 01 00    	add    $0x13c09,%ebxf01006ff889,35313
f0100705:	83 ec 04             	sub    $0x4,%espf0100705894,35479
f0100708:	8d 83 d8 e7 fe ff    	lea    -0x11828(%ebx),%eaxf0100708895,35528
f010070e:	50                   	push   %eaxf010070e896,35587
f010070f:	8d 83 f6 e7 fe ff    	lea    -0x1180a(%ebx),%eaxf010070f897,35631
f0100715:	50                   	push   %eaxf0100715898,35690
f0100716:	8d b3 fb e7 fe ff    	lea    -0x11805(%ebx),%esif0100716899,35734
f010071c:	56                   	push   %esif010071c900,35793
f010071d:	e8 a5 11 00 00       	call   f01018c7 <cprintf>f010071d901,35837
f0100722:	83 c4 0c             	add    $0xc,%espf0100722902,35895
f0100725:	8d 83 64 e8 fe ff    	lea    -0x1179c(%ebx),%eaxf0100725903,35944
f010072b:	50                   	push   %eaxf010072b904,36003
f010072c:	8d 83 04 e8 fe ff    	lea    -0x117fc(%ebx),%eaxf010072c905,36047
f0100732:	50                   	push   %eaxf0100732906,36106
f0100733:	56                   	push   %esif0100733907,36150
f0100734:	e8 8e 11 00 00       	call   f01018c7 <cprintf>f0100734908,36194
f0100739:	b8 00 00 00 00       	mov    $0x0,%eaxf0100739911,36265
f010073e:	8d 65 f8             	lea    -0x8(%ebp),%espf010073e912,36314
f0100741:	5b                   	pop    %ebxf0100741913,36369
f0100742:	5e                   	pop    %esif0100742914,36413
f0100743:	5d                   	pop    %ebpf0100743915,36457
f0100744:	c3                   	ret    f0100744916,36501
f0100745 <mon_kerninfo>:f0100745918,36542
intint920,36568
f0100745:	55                   	push   %ebpf0100745923,36632
f0100746:	89 e5                	mov    %esp,%ebpf0100746924,36676
f0100748:	57                   	push   %edif0100748925,36725
f0100749:	56                   	push   %esif0100749926,36769
f010074a:	53                   	push   %ebxf010074a927,36813
f010074b:	83 ec 18             	sub    $0x18,%espf010074b928,36857
f010074e:	e8 fc f9 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f010074e929,36907
f0100753:	81 c3 b5 3b 01 00    	add    $0x13bb5,%ebxf0100753930,36979
f0100759:	8d 83 0d e8 fe ff    	lea    -0x117f3(%ebx),%eaxf0100759934,37129
f010075f:	50                   	push   %eaxf010075f935,37188
f0100760:	e8 62 11 00 00       	call   f01018c7 <cprintf>f0100760936,37232
f0100765:	83 c4 08             	add    $0x8,%espf0100765938,37351
f0100768:	ff b3 f8 ff ff ff    	pushl  -0x8(%ebx)f0100768939,37400
f010076e:	8d 83 8c e8 fe ff    	lea    -0x11774(%ebx),%eaxf010076e940,37450
f0100774:	50                   	push   %eaxf0100774941,37509
f0100775:	e8 4d 11 00 00       	call   f01018c7 <cprintf>f0100775942,37553
f010077a:	83 c4 0c             	add    $0xc,%espf010077a944,37685
f010077d:	c7 c7 0c 00 10 f0    	mov    $0xf010000c,%edif010077d945,37734
f0100783:	8d 87 00 00 00 10    	lea    0x10000000(%edi),%eaxf0100783946,37790
f0100789:	50                   	push   %eaxf0100789947,37851
f010078a:	57                   	push   %edif010078a948,37895
f010078b:	8d 83 b4 e8 fe ff    	lea    -0x1174c(%ebx),%eaxf010078b949,37939
f0100791:	50                   	push   %eaxf0100791950,37998
f0100792:	e8 30 11 00 00       	call   f01018c7 <cprintf>f0100792951,38042
f0100797:	83 c4 0c             	add    $0xc,%espf0100797953,38174
f010079a:	c7 c0 59 28 10 f0    	mov    $0xf0102859,%eaxf010079a954,38223
f01007a0:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007a0955,38279
f01007a6:	52                   	push   %edxf01007a6956,38340
f01007a7:	50                   	push   %eaxf01007a7957,38384
f01007a8:	8d 83 d8 e8 fe ff    	lea    -0x11728(%ebx),%eaxf01007a8958,38428
f01007ae:	50                   	push   %eaxf01007ae959,38487
f01007af:	e8 13 11 00 00       	call   f01018c7 <cprintf>f01007af960,38531
f01007b4:	83 c4 0c             	add    $0xc,%espf01007b4962,38663
f01007b7:	c7 c0 60 60 11 f0    	mov    $0xf0116060,%eaxf01007b7963,38712
f01007bd:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007bd964,38768
f01007c3:	52                   	push   %edxf01007c3965,38829
f01007c4:	50                   	push   %eaxf01007c4966,38873
f01007c5:	8d 83 fc e8 fe ff    	lea    -0x11704(%ebx),%eaxf01007c5967,38917
f01007cb:	50                   	push   %eaxf01007cb968,38976
f01007cc:	e8 f6 10 00 00       	call   f01018c7 <cprintf>f01007cc969,39020
f01007d1:	83 c4 0c             	add    $0xc,%espf01007d1971,39148
f01007d4:	c7 c6 c0 66 11 f0    	mov    $0xf01166c0,%esif01007d4972,39197
f01007da:	8d 86 00 00 00 10    	lea    0x10000000(%esi),%eaxf01007da973,39253
f01007e0:	50                   	push   %eaxf01007e0974,39314
f01007e1:	56                   	push   %esif01007e1975,39358
f01007e2:	8d 83 20 e9 fe ff    	lea    -0x116e0(%ebx),%eaxf01007e2976,39402
f01007e8:	50                   	push   %eaxf01007e8977,39461
f01007e9:	e8 d9 10 00 00       	call   f01018c7 <cprintf>f01007e9978,39505
f01007ee:	83 c4 08             	add    $0x8,%espf01007ee980,39618
f01007f1:	81 c6 ff 03 00 00    	add    $0x3ff,%esif01007f1982,39705
f01007f7:	29 fe                	sub    %edi,%esif01007f7983,39756
f01007f9:	c1 fe 0a             	sar    $0xa,%esif01007f9985,39860
f01007fc:	56                   	push   %esif01007fc986,39909
f01007fd:	8d 83 44 e9 fe ff    	lea    -0x116bc(%ebx),%eaxf01007fd987,39953
f0100803:	50                   	push   %eaxf0100803988,40012
f0100804:	e8 be 10 00 00       	call   f01018c7 <cprintf>f0100804989,40056
f0100809:	b8 00 00 00 00       	mov    $0x0,%eaxf0100809992,40127
f010080e:	8d 65 f4             	lea    -0xc(%ebp),%espf010080e993,40176
f0100811:	5b                   	pop    %ebxf0100811994,40231
f0100812:	5e                   	pop    %esif0100812995,40275
f0100813:	5f                   	pop    %edif0100813996,40319
f0100814:	5d                   	pop    %ebpf0100814997,40363
f0100815:	c3                   	ret    f0100815998,40407
f0100816 <mon_backtrace>:f01008161000,40448
intint1002,40475
f0100816:	55                   	push   %ebpf01008161005,40540
f0100817:	89 e5                	mov    %esp,%ebpf01008171006,40584
f0100819:	b8 00 00 00 00       	mov    $0x0,%eaxf01008191010,40666
f010081e:	5d                   	pop    %ebpf010081e1011,40715
f010081f:	c3                   	ret    f010081f1012,40759
f0100820 <monitor>:f01008201014,40800
voidvoid1018,40834
f0100820:	55                   	push   %ebpf01008201021,40871
f0100821:	89 e5                	mov    %esp,%ebpf01008211022,40915
f0100823:	57                   	push   %edif01008231023,40964
f0100824:	56                   	push   %esif01008241024,41008
f0100825:	53                   	push   %ebxf01008251025,41052
f0100826:	83 ec 68             	sub    $0x68,%espf01008261026,41096
f0100829:	e8 21 f9 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01008291027,41146
f010082e:	81 c3 da 3a 01 00    	add    $0x13ada,%ebxf010082e1028,41218
f0100834:	8d 83 70 e9 fe ff    	lea    -0x11690(%ebx),%eaxf01008341032,41334
f010083a:	50                   	push   %eaxf010083a1033,41393
f010083b:	e8 87 10 00 00       	call   f01018c7 <cprintf>f010083b1034,41437
f0100840:	8d 83 94 e9 fe ff    	lea    -0x1166c(%ebx),%eaxf01008401036,41546
f0100846:	89 04 24             	mov    %eax,(%esp)f01008461037,41605
f0100849:	e8 79 10 00 00       	call   f01018c7 <cprintf>f01008491038,41656
f010084e:	83 c4 10             	add    $0x10,%espf010084e1039,41714
f0100851:	8d bb 2a e8 fe ff    	lea    -0x117d6(%ebx),%edif01008511041,41807
f0100857:	eb 4a                	jmp    f01008a3 <monitor+0x83>f01008571042,41866
f0100859:	83 ec 08             	sub    $0x8,%espf01008591043,41929
f010085c:	0f be c0             	movsbl %al,%eaxf010085c1044,41978
f010085f:	50                   	push   %eaxf010085f1045,42026
f0100860:	57                   	push   %edif01008601046,42070
f0100861:	e8 80 1b 00 00       	call   f01023e6 <strchr>f01008611047,42114
f0100866:	83 c4 10             	add    $0x10,%espf01008661048,42171
f0100869:	85 c0                	test   %eax,%eaxf01008691049,42221
f010086b:	74 08                	je     f0100875 <monitor+0x55>f010086b1050,42270
f010086d:	c6 06 00             	movb   $0x0,(%esi)f010086d1052,42348
f0100870:	8d 76 01             	lea    0x1(%esi),%esif01008701053,42399
f0100873:	eb 79                	jmp    f01008ee <monitor+0xce>f01008731054,42453
f0100875:	80 3e 00             	cmpb   $0x0,(%esi)f01008751056,42533
f0100878:	74 7f                	je     f01008f9 <monitor+0xd9>f01008781057,42584
f010087a:	83 7d a4 0f          	cmpl   $0xf,-0x5c(%ebp)f010087a1059,42674
f010087e:	74 0f                	je     f010088f <monitor+0x6f>f010087e1060,42730
f0100880:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01008801062,42815
f0100883:	8d 48 01             	lea    0x1(%eax),%ecxf01008831063,42871
f0100886:	89 4d a4             	mov    %ecx,-0x5c(%ebp)f01008861064,42925
f0100889:	89 74 85 a8          	mov    %esi,-0x58(%ebp,%eax,4)f01008891065,42981
f010088d:	eb 44                	jmp    f01008d3 <monitor+0xb3>f010088d1066,43044
f010088f:	83 ec 08             	sub    $0x8,%espf010088f1068,43161
f0100892:	6a 10                	push   $0x10f01008921069,43210
f0100894:	8d 83 2f e8 fe ff    	lea    -0x117d1(%ebx),%eaxf01008941070,43255
f010089a:	50                   	push   %eaxf010089a1071,43314
f010089b:	e8 27 10 00 00       	call   f01018c7 <cprintf>f010089b1072,43358
f01008a0:	83 c4 10             	add    $0x10,%espf01008a01073,43416
		buf = readline("K> ");buf1077,43481
f01008a3:	8d 83 26 e8 fe ff    	lea    -0x117da(%ebx),%eaxf01008a31078,43506
f01008a9:	89 45 a4             	mov    %eax,-0x5c(%ebp)f01008a91079,43565
f01008ac:	83 ec 0c             	sub    $0xc,%espf01008ac1080,43621
f01008af:	ff 75 a4             	pushl  -0x5c(%ebp)f01008af1081,43670
f01008b2:	e8 f7 18 00 00       	call   f01021ae <readline>f01008b21082,43721
f01008b7:	89 c6                	mov    %eax,%esif01008b71083,43780
f01008b9:	83 c4 10             	add    $0x10,%espf01008b91085,43848
f01008bc:	85 c0                	test   %eax,%eaxf01008bc1086,43898
f01008be:	74 ec                	je     f01008ac <monitor+0x8c>f01008be1087,43947
f01008c0:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)f01008c01089,44027
	argc = 0;argc1090,44083
f01008c7:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)f01008c71091,44094
f01008ce:	eb 1e                	jmp    f01008ee <monitor+0xce>f01008ce1092,44150
f01008d0:	83 c6 01             	add    $0x1,%esif01008d01094,44223
f01008d3:	0f b6 06             	movzbl (%esi),%eaxf01008d31096,44316
f01008d6:	84 c0                	test   %al,%alf01008d61097,44367
f01008d8:	74 14                	je     f01008ee <monitor+0xce>f01008d81098,44414
f01008da:	83 ec 08             	sub    $0x8,%espf01008da1099,44477
f01008dd:	0f be c0             	movsbl %al,%eaxf01008dd1100,44526
f01008e0:	50                   	push   %eaxf01008e01101,44574
f01008e1:	57                   	push   %edif01008e11102,44618
f01008e2:	e8 ff 1a 00 00       	call   f01023e6 <strchr>f01008e21103,44662
f01008e7:	83 c4 10             	add    $0x10,%espf01008e71104,44719
f01008ea:	85 c0                	test   %eax,%eaxf01008ea1105,44769
f01008ec:	74 e2                	je     f01008d0 <monitor+0xb0>f01008ec1106,44818
f01008ee:	0f b6 06             	movzbl (%esi),%eaxf01008ee1108,44924
f01008f1:	84 c0                	test   %al,%alf01008f11109,44975
f01008f3:	0f 85 60 ff ff ff    	jne    f0100859 <monitor+0x39>f01008f31110,45022
f01008f9:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01008f91112,45102
f01008fc:	c7 44 85 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%eax,4)f01008fc1113,45158
f0100903:	00 f01009031114,45221
f0100904:	85 c0                	test   %eax,%eaxf01009041116,45251
f0100906:	74 9b                	je     f01008a3 <monitor+0x83>f01009061117,45300
f0100908:	83 ec 08             	sub    $0x8,%espf01009081119,45409
f010090b:	8d 83 f6 e7 fe ff    	lea    -0x1180a(%ebx),%eaxf010090b1120,45458
f0100911:	50                   	push   %eaxf01009111121,45517
f0100912:	ff 75 a8             	pushl  -0x58(%ebp)f01009121122,45561
f0100915:	e8 6e 1a 00 00       	call   f0102388 <strcmp>f01009151123,45612
f010091a:	83 c4 10             	add    $0x10,%espf010091a1124,45669
f010091d:	85 c0                	test   %eax,%eaxf010091d1125,45719
f010091f:	74 38                	je     f0100959 <monitor+0x139>f010091f1126,45768
f0100921:	83 ec 08             	sub    $0x8,%espf01009211127,45832
f0100924:	8d 83 04 e8 fe ff    	lea    -0x117fc(%ebx),%eaxf01009241128,45881
f010092a:	50                   	push   %eaxf010092a1129,45940
f010092b:	ff 75 a8             	pushl  -0x58(%ebp)f010092b1130,45984
f010092e:	e8 55 1a 00 00       	call   f0102388 <strcmp>f010092e1131,46035
f0100933:	83 c4 10             	add    $0x10,%espf01009331132,46092
f0100936:	85 c0                	test   %eax,%eaxf01009361133,46142
f0100938:	74 1a                	je     f0100954 <monitor+0x134>f01009381134,46191
f010093a:	83 ec 08             	sub    $0x8,%espf010093a1136,46300
f010093d:	ff 75 a8             	pushl  -0x58(%ebp)f010093d1137,46349
f0100940:	8d 83 4c e8 fe ff    	lea    -0x117b4(%ebx),%eaxf01009401138,46400
f0100946:	50                   	push   %eaxf01009461139,46459
f0100947:	e8 7b 0f 00 00       	call   f01018c7 <cprintf>f01009471140,46503
f010094c:	83 c4 10             	add    $0x10,%espf010094c1141,46561
f010094f:	e9 4f ff ff ff       	jmp    f01008a3 <monitor+0x83>f010094f1142,46611
f0100954:	b8 01 00 00 00       	mov    $0x1,%eaxf01009541144,46720
f0100959:	83 ec 04             	sub    $0x4,%espf01009591146,46813
f010095c:	8d 04 40             	lea    (%eax,%eax,2),%eaxf010095c1147,46862
f010095f:	ff 75 08             	pushl  0x8(%ebp)f010095f1148,46920
f0100962:	8d 55 a8             	lea    -0x58(%ebp),%edxf01009621149,46969
f0100965:	52                   	push   %edxf01009651150,47025
f0100966:	ff 75 a4             	pushl  -0x5c(%ebp)f01009661151,47069
f0100969:	ff 94 83 10 1d 00 00 	call   *0x1d10(%ebx,%eax,4)f01009691152,47120
f0100970:	83 c4 10             	add    $0x10,%espf01009701154,47208
f0100973:	85 c0                	test   %eax,%eaxf01009731155,47258
f0100975:	0f 89 28 ff ff ff    	jns    f01008a3 <monitor+0x83>f01009751156,47307
f010097b:	8d 65 f4             	lea    -0xc(%ebp),%espf010097b1160,47386
f010097e:	5b                   	pop    %ebxf010097e1161,47441
f010097f:	5e                   	pop    %esif010097f1162,47485
f0100980:	5f                   	pop    %edif01009801163,47529
f0100981:	5d                   	pop    %ebpf01009811164,47573
f0100982:	c3                   	ret    f01009821165,47617
f0100983 <nvram_read>:f01009831167,47658
static intstatic1171,47791
f0100983:	55                   	push   %ebpf01009831174,47822
f0100984:	89 e5                	mov    %esp,%ebpf01009841175,47866
f0100986:	57                   	push   %edif01009861176,47915
f0100987:	56                   	push   %esif01009871177,47959
f0100988:	53                   	push   %ebxf01009881178,48003
f0100989:	83 ec 18             	sub    $0x18,%espf01009891179,48047
f010098c:	e8 be f7 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f010098c1180,48097
f0100991:	81 c3 77 39 01 00    	add    $0x13977,%ebxf01009911181,48169
f0100997:	89 c7                	mov    %eax,%edif01009971182,48222
f0100999:	50                   	push   %eaxf01009991184,48327
f010099a:	e8 a1 0e 00 00       	call   f0101840 <mc146818_read>f010099a1185,48371
f010099f:	89 c6                	mov    %eax,%esif010099f1186,48435
f01009a1:	83 c7 01             	add    $0x1,%edif01009a11187,48484
f01009a4:	89 3c 24             	mov    %edi,(%esp)f01009a41188,48533
f01009a7:	e8 94 0e 00 00       	call   f0101840 <mc146818_read>f01009a71189,48584
f01009ac:	c1 e0 08             	shl    $0x8,%eaxf01009ac1190,48648
f01009af:	09 f0                	or     %esi,%eaxf01009af1191,48697
f01009b1:	8d 65 f4             	lea    -0xc(%ebp),%espf01009b11193,48748
f01009b4:	5b                   	pop    %ebxf01009b41194,48803
f01009b5:	5e                   	pop    %esif01009b51195,48847
f01009b6:	5f                   	pop    %edif01009b61196,48891
f01009b7:	5d                   	pop    %ebpf01009b71197,48935
f01009b8:	c3                   	ret    f01009b81198,48979
f01009b9 <boot_alloc>:f01009b91200,49020
static void *static1204,49203
f01009b9:	55                   	push   %ebpf01009b91207,49242
f01009ba:	89 e5                	mov    %esp,%ebpf01009ba1208,49286
f01009bc:	53                   	push   %ebxf01009bc1209,49335
f01009bd:	83 ec 04             	sub    $0x4,%espf01009bd1210,49379
f01009c0:	e8 73 0e 00 00       	call   f0101838 <__x86.get_pc_thunk.cx>f01009c01211,49428
f01009c5:	81 c1 43 39 01 00    	add    $0x13943,%ecxf01009c51212,49500
f01009cb:	89 c2                	mov    %eax,%edxf01009cb1213,49553
f01009cd:	83 b9 90 1f 00 00 00 	cmpl   $0x0,0x1f90(%ecx)f01009cd1220,49902
f01009d4:	74 34                	je     f0100a0a <boot_alloc+0x51>f01009d41221,49959
f01009d6:	8b 81 90 1f 00 00    	mov    0x1f90(%ecx),%eaxf01009d61228,50291
f01009dc:	8b 99 98 1f 00 00    	mov    0x1f98(%ecx),%ebxf01009dc1229,50348
f01009e2:	c1 e3 0c             	shl    $0xc,%ebxf01009e21230,50405
f01009e5:	81 c3 c0 66 11 f0    	add    $0xf01166c0,%ebxf01009e51231,50454
f01009eb:	29 c3                	sub    %eax,%ebxf01009eb1232,50510
f01009ed:	39 d3                	cmp    %edx,%ebxf01009ed1235,50587
f01009ef:	72 31                	jb     f0100a22 <boot_alloc+0x69>f01009ef1236,50636
        result = nextfree;result1240,50838
f01009f1:	81 c2 ff 0f 00 00    	add    $0xfff,%edxf01009f11242,50905
f01009f7:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf01009f71243,50956
f01009fd:	01 c2                	add    %eax,%edxf01009fd1244,51012
f01009ff:	89 91 90 1f 00 00    	mov    %edx,0x1f90(%ecx)f01009ff1245,51061
f0100a05:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100a051248,51143
f0100a08:	c9                   	leave  f0100a081249,51198
f0100a09:	c3                   	ret    f0100a091250,51238
		nextfree = ROUNDUP((char *) end, PGSIZE);nextfree1251,51278
f0100a0a:	c7 c0 c0 66 11 f0    	mov    $0xf01166c0,%eaxf0100a0a1252,51322
f0100a10:	05 ff 0f 00 00       	add    $0xfff,%eaxf0100a101253,51378
f0100a15:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100a151254,51429
f0100a1a:	89 81 90 1f 00 00    	mov    %eax,0x1f90(%ecx)f0100a1a1255,51485
f0100a20:	eb b4                	jmp    f01009d6 <boot_alloc+0x1d>f0100a201256,51542
f0100a22:	83 ec 0c             	sub    $0xc,%espf0100a221258,51706
f0100a25:	53                   	push   %ebxf0100a251259,51755
f0100a26:	52                   	push   %edxf0100a261260,51799
f0100a27:	8d 81 bc e9 fe ff    	lea    -0x11644(%ecx),%eaxf0100a271261,51843
f0100a2d:	50                   	push   %eaxf0100a2d1262,51902
f0100a2e:	6a 6d                	push   $0x6df0100a2e1263,51946
f0100a30:	8d 81 38 ec fe ff    	lea    -0x113c8(%ecx),%eaxf0100a301264,51991
f0100a36:	50                   	push   %eaxf0100a361265,52050
f0100a37:	89 cb                	mov    %ecx,%ebxf0100a371266,52094
f0100a39:	e8 5b f6 ff ff       	call   f0100099 <_panic>f0100a391267,52143
f0100a3e <page2kva>:f0100a3e1269,52201
static inline void*static1273,52252
f0100a3e:	55                   	push   %ebpf0100a3e1276,52304
f0100a3f:	89 e5                	mov    %esp,%ebpf0100a3f1277,52348
f0100a41:	53                   	push   %ebxf0100a411278,52397
f0100a42:	83 ec 04             	sub    $0x4,%espf0100a421279,52441
f0100a45:	e8 ea 0d 00 00       	call   f0101834 <__x86.get_pc_thunk.dx>f0100a451280,52490
f0100a4a:	81 c2 be 38 01 00    	add    $0x138be,%edxf0100a4a1281,52562
f0100a50:	c7 c1 d0 66 11 f0    	mov    $0xf01166d0,%ecxf0100a501283,52648
f0100a56:	2b 01                	sub    (%ecx),%eaxf0100a561284,52704
f0100a58:	c1 f8 03             	sar    $0x3,%eaxf0100a581285,52755
f0100a5b:	c1 e0 0c             	shl    $0xc,%eaxf0100a5b1286,52804
f0100a5e:	89 c1                	mov    %eax,%ecxf0100a5e1288,52879
f0100a60:	c1 e9 0c             	shr    $0xc,%ecxf0100a601289,52928
f0100a63:	c7 c3 c8 66 11 f0    	mov    $0xf01166c8,%ebxf0100a631290,52977
f0100a69:	39 0b                	cmp    %ecx,(%ebx)f0100a691291,53033
f0100a6b:	76 0a                	jbe    f0100a77 <page2kva+0x39>f0100a6b1292,53084
f0100a6d:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100a6d1294,53181
f0100a72:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100a721297,53267
f0100a75:	c9                   	leave  f0100a751298,53322
f0100a76:	c3                   	ret    f0100a761299,53362
f0100a77:	50                   	push   %eaxf0100a771301,53466
f0100a78:	8d 82 08 ea fe ff    	lea    -0x115f8(%edx),%eaxf0100a781302,53510
f0100a7e:	50                   	push   %eaxf0100a7e1303,53569
f0100a7f:	6a 52                	push   $0x52f0100a7f1304,53613
f0100a81:	8d 82 44 ec fe ff    	lea    -0x113bc(%edx),%eaxf0100a811305,53658
f0100a87:	50                   	push   %eaxf0100a871306,53717
f0100a88:	89 d3                	mov    %edx,%ebxf0100a881307,53761
f0100a8a:	e8 0a f6 ff ff       	call   f0100099 <_panic>f0100a8a1308,53810
f0100a8f <check_va2pa>:f0100a8f1310,53868
static physaddr_tstatic1314,54032
f0100a8f:	55                   	push   %ebpf0100a8f1317,54092
f0100a90:	89 e5                	mov    %esp,%ebpf0100a901318,54136
f0100a92:	56                   	push   %esif0100a921319,54185
f0100a93:	53                   	push   %ebxf0100a931320,54229
f0100a94:	e8 9f 0d 00 00       	call   f0101838 <__x86.get_pc_thunk.cx>f0100a941321,54273
f0100a99:	81 c1 6f 38 01 00    	add    $0x1386f,%ecxf0100a991322,54345
	pgdir = &pgdir[PDX(va)];pgdir1325,54410
f0100a9f:	89 d3                	mov    %edx,%ebxf0100a9f1326,54436
f0100aa1:	c1 eb 16             	shr    $0x16,%ebxf0100aa11327,54485
f0100aa4:	8b 04 98             	mov    (%eax,%ebx,4),%eaxf0100aa41329,54559
f0100aa7:	a8 01                	test   $0x1,%alf0100aa71330,54617
f0100aa9:	74 5a                	je     f0100b05 <check_va2pa+0x76>f0100aa91331,54665
	p = (pte_t*) KADDR(PTE_ADDR(*pgdir));p1333,54745
f0100aab:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100aab1334,54784
f0100ab0:	89 c6                	mov    %eax,%esif0100ab01336,54866
f0100ab2:	c1 ee 0c             	shr    $0xc,%esif0100ab21337,54915
f0100ab5:	c7 c3 c8 66 11 f0    	mov    $0xf01166c8,%ebxf0100ab51338,54964
f0100abb:	3b 33                	cmp    (%ebx),%esif0100abb1339,55020
f0100abd:	73 2b                	jae    f0100aea <check_va2pa+0x5b>f0100abd1340,55071
f0100abf:	c1 ea 0c             	shr    $0xc,%edxf0100abf1342,55166
f0100ac2:	81 e2 ff 03 00 00    	and    $0x3ff,%edxf0100ac21343,55215
f0100ac8:	8b 84 90 00 00 00 f0 	mov    -0x10000000(%eax,%edx,4),%eaxf0100ac81344,55266
f0100acf:	89 c2                	mov    %eax,%edxf0100acf1345,55335
f0100ad1:	83 e2 01             	and    $0x1,%edxf0100ad11346,55384
f0100ad4:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100ad41349,55476
f0100ad9:	85 d2                	test   %edx,%edxf0100ad91350,55532
f0100adb:	ba ff ff ff ff       	mov    $0xffffffff,%edxf0100adb1351,55581
f0100ae0:	0f 44 c2             	cmove  %edx,%eaxf0100ae01352,55637
f0100ae3:	8d 65 f8             	lea    -0x8(%ebp),%espf0100ae31354,55688
f0100ae6:	5b                   	pop    %ebxf0100ae61355,55743
f0100ae7:	5e                   	pop    %esif0100ae71356,55787
f0100ae8:	5d                   	pop    %ebpf0100ae81357,55831
f0100ae9:	c3                   	ret    f0100ae91358,55875
f0100aea:	50                   	push   %eaxf0100aea1360,55979
f0100aeb:	8d 81 08 ea fe ff    	lea    -0x115f8(%ecx),%eaxf0100aeb1361,56023
f0100af1:	50                   	push   %eaxf0100af11362,56082
f0100af2:	68 bc 02 00 00       	push   $0x2bcf0100af21363,56126
f0100af7:	8d 81 38 ec fe ff    	lea    -0x113c8(%ecx),%eaxf0100af71364,56172
f0100afd:	50                   	push   %eaxf0100afd1365,56231
f0100afe:	89 cb                	mov    %ecx,%ebxf0100afe1366,56275
f0100b00:	e8 94 f5 ff ff       	call   f0100099 <_panic>f0100b001367,56324
f0100b05:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100b051369,56394
f0100b0a:	eb d7                	jmp    f0100ae3 <check_va2pa+0x54>f0100b0a1370,56450
f0100b0c <page_init>:f0100b0c1372,56518
f0100b0c:	55                   	push   %ebpf0100b0c1374,56542
f0100b0d:	89 e5                	mov    %esp,%ebpf0100b0d1375,56586
f0100b0f:	57                   	push   %edif0100b0f1376,56635
f0100b10:	56                   	push   %esif0100b101377,56679
f0100b11:	53                   	push   %ebxf0100b111378,56723
f0100b12:	83 ec 1c             	sub    $0x1c,%espf0100b121379,56767
f0100b15:	e8 22 0d 00 00       	call   f010183c <__x86.get_pc_thunk.si>f0100b151380,56817
f0100b1a:	81 c6 ee 37 01 00    	add    $0x137ee,%esif0100b1a1381,56889
f0100b20:	bb 00 00 00 00       	mov    $0x0,%ebxf0100b201383,56974
f0100b25:	c7 c7 c8 66 11 f0    	mov    $0xf01166c8,%edif0100b251384,57023
f0100b2b:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100b2b1386,57103
f0100b31:	89 45 e0             	mov    %eax,-0x20(%ebp)f0100b311387,57159
f0100b34:	eb 38                	jmp    f0100b6e <page_init+0x62>f0100b341389,57247
f0100b36:	39 9e 98 1f 00 00    	cmp    %ebx,0x1f98(%esi)f0100b361391,57347
f0100b3c:	76 52                	jbe    f0100b90 <page_init+0x84>f0100b3c1392,57404
f0100b3e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecxf0100b3e1393,57469
f0100b45:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100b451395,57550
f0100b4b:	89 ca                	mov    %ecx,%edxf0100b4b1396,57606
f0100b4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100b4d1397,57655
f0100b50:	03 10                	add    (%eax),%edxf0100b501398,57711
f0100b52:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f0100b521399,57762
f0100b58:	8b 86 94 1f 00 00    	mov    0x1f94(%esi),%eaxf0100b581401,57854
f0100b5e:	89 02                	mov    %eax,(%edx)f0100b5e1402,57911
			page_free_list = &pages[i];page_free_list1403,57962
f0100b60:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100b601404,57993
f0100b63:	03 08                	add    (%eax),%ecxf0100b631405,58049
f0100b65:	89 8e 94 1f 00 00    	mov    %ecx,0x1f94(%esi)f0100b651406,58100
f0100b6b:	83 c3 01             	add    $0x1,%ebxf0100b6b1408,58189
f0100b6e:	39 1f                	cmp    %ebx,(%edi)f0100b6e1409,58238
f0100b70:	0f 86 80 00 00 00    	jbe    f0100bf6 <page_init+0xea>f0100b701410,58289
f0100b76:	85 db                	test   %ebx,%ebxf0100b761412,58370
f0100b78:	75 bc                	jne    f0100b36 <page_init+0x2a>f0100b781413,58419
f0100b7a:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100b7a1415,58508
f0100b80:	8b 00                	mov    (%eax),%eaxf0100b801416,58564
f0100b82:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100b821417,58615
f0100b88:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100b881419,58697
f0100b8e:	eb db                	jmp    f0100b6b <page_init+0x5f>f0100b8e1420,58748
f0100b90:	81 fb ff 00 00 00    	cmp    $0xff,%ebxf0100b901422,58903
f0100b96:	77 16                	ja     f0100bae <page_init+0xa2>f0100b961423,58953
f0100b98:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100b981425,59042
f0100b9b:	8b 00                	mov    (%eax),%eaxf0100b9b1426,59098
f0100b9d:	8d 04 d8             	lea    (%eax,%ebx,8),%eaxf0100b9d1427,59149
f0100ba0:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100ba01428,59207
f0100ba6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100ba61430,59289
f0100bac:	eb bd                	jmp    f0100b6b <page_init+0x5f>f0100bac1431,59340
f0100bae:	b8 00 00 00 00       	mov    $0x0,%eaxf0100bae1433,59495
f0100bb3:	e8 01 fe ff ff       	call   f01009b9 <boot_alloc>f0100bb31434,59544
f0100bb8:	05 00 00 00 10       	add    $0x10000000,%eaxf0100bb81435,59605
f0100bbd:	c1 e8 0c             	shr    $0xc,%eaxf0100bbd1436,59661
f0100bc0:	39 d8                	cmp    %ebx,%eaxf0100bc01437,59710
f0100bc2:	77 d4                	ja     f0100b98 <page_init+0x8c>f0100bc21438,59759
f0100bc4:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecxf0100bc41439,59824
f0100bcb:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100bcb1441,59905
f0100bd1:	89 ca                	mov    %ecx,%edxf0100bd11442,59961
f0100bd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100bd31443,60010
f0100bd6:	03 10                	add    (%eax),%edxf0100bd61444,60066
f0100bd8:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f0100bd81445,60117
f0100bde:	8b 86 94 1f 00 00    	mov    0x1f94(%esi),%eaxf0100bde1447,60209
f0100be4:	89 02                	mov    %eax,(%edx)f0100be41448,60266
			page_free_list = &pages[i];page_free_list1449,60317
f0100be6:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100be61450,60348
f0100be9:	03 08                	add    (%eax),%ecxf0100be91451,60404
f0100beb:	89 8e 94 1f 00 00    	mov    %ecx,0x1f94(%esi)f0100beb1452,60455
f0100bf1:	e9 75 ff ff ff       	jmp    f0100b6b <page_init+0x5f>f0100bf11453,60512
f0100bf6:	83 c4 1c             	add    $0x1c,%espf0100bf61455,60579
f0100bf9:	5b                   	pop    %ebxf0100bf91456,60629
f0100bfa:	5e                   	pop    %esif0100bfa1457,60673
f0100bfb:	5f                   	pop    %edif0100bfb1458,60717
f0100bfc:	5d                   	pop    %ebpf0100bfc1459,60761
f0100bfd:	c3                   	ret    f0100bfd1460,60805
f0100bfe <page_alloc>:f0100bfe1462,60846
f0100bfe:	55                   	push   %ebpf0100bfe1464,60871
f0100bff:	89 e5                	mov    %esp,%ebpf0100bff1465,60915
f0100c01:	56                   	push   %esif0100c011466,60964
f0100c02:	53                   	push   %ebxf0100c021467,61008
f0100c03:	e8 47 f5 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100c031468,61052
f0100c08:	81 c3 00 37 01 00    	add    $0x13700,%ebxf0100c081469,61124
f0100c0e:	8b b3 94 1f 00 00    	mov    0x1f94(%ebx),%esif0100c0e1471,61212
f0100c14:	85 f6                	test   %esi,%esif0100c141472,61269
f0100c16:	74 1a                	je     f0100c32 <page_alloc+0x34>f0100c161473,61318
	page_free_list = result->pp_link;page_free_list1474,61384
f0100c18:	8b 06                	mov    (%esi),%eaxf0100c181475,61419
f0100c1a:	89 83 94 1f 00 00    	mov    %eax,0x1f94(%ebx)f0100c1a1476,61470
f0100c20:	c7 06 00 00 00 00    	movl   $0x0,(%esi)f0100c201478,61552
f0100c26:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f0100c261480,61624
f0100c2c:	f6 45 08 01          	testb  $0x1,0x8(%ebp)f0100c2c1482,61709
f0100c30:	75 09                	jne    f0100c3b <page_alloc+0x3d>f0100c301483,61763
f0100c32:	89 f0                	mov    %esi,%eaxf0100c321485,61831
f0100c34:	8d 65 f8             	lea    -0x8(%ebp),%espf0100c341486,61880
f0100c37:	5b                   	pop    %ebxf0100c371487,61935
f0100c38:	5e                   	pop    %esif0100c381488,61979
f0100c39:	5d                   	pop    %ebpf0100c391489,62023
f0100c3a:	c3                   	ret    f0100c3a1490,62067
f0100c3b:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100c3b1492,62140
f0100c41:	89 f2                	mov    %esi,%edxf0100c411493,62196
f0100c43:	2b 10                	sub    (%eax),%edxf0100c431494,62245
f0100c45:	89 d0                	mov    %edx,%eaxf0100c451495,62296
f0100c47:	c1 f8 03             	sar    $0x3,%eaxf0100c471496,62345
f0100c4a:	c1 e0 0c             	shl    $0xc,%eaxf0100c4a1497,62394
f0100c4d:	89 c1                	mov    %eax,%ecxf0100c4d1499,62469
f0100c4f:	c1 e9 0c             	shr    $0xc,%ecxf0100c4f1500,62518
f0100c52:	c7 c2 c8 66 11 f0    	mov    $0xf01166c8,%edxf0100c521501,62567
f0100c58:	3b 0a                	cmp    (%edx),%ecxf0100c581502,62623
f0100c5a:	73 1a                	jae    f0100c76 <page_alloc+0x78>f0100c5a1503,62674
f0100c5c:	83 ec 04             	sub    $0x4,%espf0100c5c1505,62779
f0100c5f:	68 00 10 00 00       	push   $0x1000f0100c5f1506,62828
f0100c64:	6a 00                	push   $0x0f0100c641507,62875
f0100c66:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100c661509,62952
f0100c6b:	50                   	push   %eaxf0100c6b1510,63008
f0100c6c:	e8 b2 17 00 00       	call   f0102423 <memset>f0100c6c1511,63052
f0100c71:	83 c4 10             	add    $0x10,%espf0100c711512,63109
f0100c74:	eb bc                	jmp    f0100c32 <page_alloc+0x34>f0100c741513,63159
f0100c76:	50                   	push   %eaxf0100c761515,63289
f0100c77:	8d 83 08 ea fe ff    	lea    -0x115f8(%ebx),%eaxf0100c771516,63333
f0100c7d:	50                   	push   %eaxf0100c7d1517,63392
f0100c7e:	6a 52                	push   $0x52f0100c7e1518,63436
f0100c80:	8d 83 44 ec fe ff    	lea    -0x113bc(%ebx),%eaxf0100c801519,63481
f0100c86:	50                   	push   %eaxf0100c861520,63540
f0100c87:	e8 0d f4 ff ff       	call   f0100099 <_panic>f0100c871521,63584
f0100c8c <page_free>:f0100c8c1523,63642
f0100c8c:	55                   	push   %ebpf0100c8c1525,63666
f0100c8d:	89 e5                	mov    %esp,%ebpf0100c8d1526,63710
f0100c8f:	53                   	push   %ebxf0100c8f1527,63759
f0100c90:	83 ec 04             	sub    $0x4,%espf0100c901528,63803
f0100c93:	e8 b7 f4 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100c931529,63852
f0100c98:	81 c3 70 36 01 00    	add    $0x13670,%ebxf0100c981530,63924
f0100c9e:	8b 45 08             	mov    0x8(%ebp),%eaxf0100c9e1531,63977
f0100ca1:	0f b7 48 04          	movzwl 0x4(%eax),%ecxf0100ca11533,64047
f0100ca5:	66 85 c9             	test   %cx,%cxf0100ca51534,64101
f0100ca8:	75 19                	jne    f0100cc3 <page_free+0x37>f0100ca81535,64148
f0100caa:	8b 08                	mov    (%eax),%ecxf0100caa1537,64230
f0100cac:	85 c9                	test   %ecx,%ecxf0100cac1538,64281
f0100cae:	75 2f                	jne    f0100cdf <page_free+0x53>f0100cae1539,64330
f0100cb0:	8b 8b 94 1f 00 00    	mov    0x1f94(%ebx),%ecxf0100cb01541,64426
f0100cb6:	89 08                	mov    %ecx,(%eax)f0100cb61542,64483
	page_free_list = pp;page_free_list1543,64534
f0100cb8:	89 83 94 1f 00 00    	mov    %eax,0x1f94(%ebx)f0100cb81544,64556
f0100cbe:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100cbe1546,64615
f0100cc1:	c9                   	leave  f0100cc11547,64670
f0100cc2:	c3                   	ret    f0100cc21548,64710
f0100cc3:	0f b7 c9             	movzwl %cx,%ecxf0100cc31550,64817
f0100cc6:	51                   	push   %ecxf0100cc61551,64865
f0100cc7:	8d 83 2c ea fe ff    	lea    -0x115d4(%ebx),%eaxf0100cc71552,64909
f0100ccd:	50                   	push   %eaxf0100ccd1553,64968
f0100cce:	68 3f 01 00 00       	push   $0x13ff0100cce1554,65012
f0100cd3:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf0100cd31555,65058
f0100cd9:	50                   	push   %eaxf0100cd91556,65117
f0100cda:	e8 ba f3 ff ff       	call   f0100099 <_panic>f0100cda1557,65161
f0100cdf:	51                   	push   %ecxf0100cdf1559,65282
f0100ce0:	8d 83 58 ea fe ff    	lea    -0x115a8(%ebx),%eaxf0100ce01560,65326
f0100ce6:	50                   	push   %eaxf0100ce61561,65385
f0100ce7:	68 41 01 00 00       	push   $0x141f0100ce71562,65429
f0100cec:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf0100cec1563,65475
f0100cf2:	50                   	push   %eaxf0100cf21564,65534
f0100cf3:	e8 a1 f3 ff ff       	call   f0100099 <_panic>f0100cf31565,65578
f0100cf8 <page_decref>:f0100cf81567,65636
f0100cf8:	55                   	push   %ebpf0100cf81569,65662
f0100cf9:	89 e5                	mov    %esp,%ebpf0100cf91570,65706
f0100cfb:	83 ec 08             	sub    $0x8,%espf0100cfb1571,65755
f0100cfe:	8b 55 08             	mov    0x8(%ebp),%edxf0100cfe1572,65804
f0100d01:	0f b7 42 04          	movzwl 0x4(%edx),%eaxf0100d011574,65882
f0100d05:	83 e8 01             	sub    $0x1,%eaxf0100d051575,65936
f0100d08:	66 89 42 04          	mov    %ax,0x4(%edx)f0100d081576,65985
f0100d0c:	66 85 c0             	test   %ax,%axf0100d0c1577,66038
f0100d0f:	74 02                	je     f0100d13 <page_decref+0x1b>f0100d0f1578,66085
f0100d11:	c9                   	leave  f0100d111580,66154
f0100d12:	c3                   	ret    f0100d121581,66194
f0100d13:	83 ec 0c             	sub    $0xc,%espf0100d131583,66251
f0100d16:	52                   	push   %edxf0100d161584,66300
f0100d17:	e8 70 ff ff ff       	call   f0100c8c <page_free>f0100d171585,66344
f0100d1c:	83 c4 10             	add    $0x10,%espf0100d1c1586,66404
f0100d1f:	eb f0                	jmp    f0100d11 <page_decref+0x19>f0100d1f1588,66456
f0100d21 <pgdir_walk>:f0100d211590,66524
f0100d21:	55                   	push   %ebpf0100d211592,66549
f0100d22:	89 e5                	mov    %esp,%ebpf0100d221593,66593
f0100d24:	57                   	push   %edif0100d241594,66642
f0100d25:	56                   	push   %esif0100d251595,66686
f0100d26:	53                   	push   %ebxf0100d261596,66730
f0100d27:	83 ec 0c             	sub    $0xc,%espf0100d271597,66774
f0100d2a:	e8 20 f4 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100d2a1598,66823
f0100d2f:	81 c3 d9 35 01 00    	add    $0x135d9,%ebxf0100d2f1599,66895
	pde = pgdir+PDX(va);pde1600,66948
f0100d35:	8b 75 0c             	mov    0xc(%ebp),%esif0100d351601,66970
f0100d38:	c1 ee 16             	shr    $0x16,%esif0100d381602,67024
f0100d3b:	c1 e6 02             	shl    $0x2,%esif0100d3b1603,67074
f0100d3e:	03 75 08             	add    0x8(%ebp),%esif0100d3e1604,67123
f0100d41:	f6 06 01             	testb  $0x1,(%esi)f0100d411606,67200
f0100d44:	75 38                	jne    f0100d7e <pgdir_walk+0x5d>f0100d441607,67251
f0100d46:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)f0100d461609,67344
f0100d4a:	0f 84 b6 00 00 00    	je     f0100e06 <pgdir_walk+0xe5>f0100d4a1610,67399
		pp = page_alloc(ALLOC_ZERO);pp1611,67465
f0100d50:	83 ec 0c             	sub    $0xc,%espf0100d501612,67496
f0100d53:	6a 01                	push   $0x1f0100d531613,67545
f0100d55:	e8 a4 fe ff ff       	call   f0100bfe <page_alloc>f0100d551614,67589
f0100d5a:	83 c4 10             	add    $0x10,%espf0100d5a1616,67673
f0100d5d:	85 c0                	test   %eax,%eaxf0100d5d1617,67723
f0100d5f:	0f 84 a8 00 00 00    	je     f0100e0d <pgdir_walk+0xec>f0100d5f1618,67772
f0100d65:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100d651620,67856
f0100d6b:	c7 c2 d0 66 11 f0    	mov    $0xf01166d0,%edxf0100d6b1622,67943
f0100d71:	2b 02                	sub    (%edx),%eaxf0100d711623,67999
f0100d73:	c1 f8 03             	sar    $0x3,%eaxf0100d731624,68050
f0100d76:	c1 e0 0c             	shl    $0xc,%eaxf0100d761625,68099
f0100d79:	83 c8 01             	or     $0x1,%eaxf0100d791627,68178
f0100d7c:	89 06                	mov    %eax,(%esi)f0100d7c1628,68227
	pte = (pte_t *) KADDR(PTE_ADDR(*pde));pte1629,68278
f0100d7e:	8b 36                	mov    (%esi),%esif0100d7e1630,68318
f0100d80:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esif0100d801631,68369
f0100d86:	89 f2                	mov    %esi,%edxf0100d861633,68451
f0100d88:	c1 ea 0c             	shr    $0xc,%edxf0100d881634,68500
f0100d8b:	c7 c0 c8 66 11 f0    	mov    $0xf01166c8,%eaxf0100d8b1635,68549
f0100d91:	3b 10                	cmp    (%eax),%edxf0100d911636,68605
f0100d93:	73 58                	jae    f0100ded <pgdir_walk+0xcc>f0100d931637,68656
f0100d95:	8d be 00 00 00 f0    	lea    -0x10000000(%esi),%edif0100d951639,68755
f0100d9b:	f6 86 00 00 00 f0 01 	testb  $0x1,-0x10000000(%esi)f0100d9b1641,68840
f0100da2:	75 34                	jne    f0100dd8 <pgdir_walk+0xb7>f0100da21642,68902
f0100da4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)f0100da41644,68995
f0100da8:	74 6a                	je     f0100e14 <pgdir_walk+0xf3>f0100da81645,69050
		pp = page_alloc(ALLOC_ZERO);pp1646,69116
f0100daa:	83 ec 0c             	sub    $0xc,%espf0100daa1647,69147
f0100dad:	6a 01                	push   $0x1f0100dad1648,69196
f0100daf:	e8 4a fe ff ff       	call   f0100bfe <page_alloc>f0100daf1649,69240
f0100db4:	83 c4 10             	add    $0x10,%espf0100db41651,69324
f0100db7:	85 c0                	test   %eax,%eaxf0100db71652,69374
f0100db9:	74 60                	je     f0100e1b <pgdir_walk+0xfa>f0100db91653,69423
f0100dbb:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100dbb1655,69507
f0100dc1:	c7 c2 d0 66 11 f0    	mov    $0xf01166d0,%edxf0100dc11657,69594
f0100dc7:	2b 02                	sub    (%edx),%eaxf0100dc71658,69650
f0100dc9:	c1 f8 03             	sar    $0x3,%eaxf0100dc91659,69701
f0100dcc:	c1 e0 0c             	shl    $0xc,%eaxf0100dcc1660,69750
f0100dcf:	83 c8 03             	or     $0x3,%eaxf0100dcf1662,69837
f0100dd2:	89 86 00 00 00 f0    	mov    %eax,-0x10000000(%esi)f0100dd21663,69886
f0100dd8:	8b 45 0c             	mov    0xc(%ebp),%eaxf0100dd81665,69971
f0100ddb:	c1 e8 0a             	shr    $0xa,%eaxf0100ddb1666,70025
f0100dde:	25 fc 0f 00 00       	and    $0xffc,%eaxf0100dde1667,70074
f0100de3:	01 f8                	add    %edi,%eaxf0100de31668,70125
f0100de5:	8d 65 f4             	lea    -0xc(%ebp),%espf0100de51670,70176
f0100de8:	5b                   	pop    %ebxf0100de81671,70231
f0100de9:	5e                   	pop    %esif0100de91672,70275
f0100dea:	5f                   	pop    %edif0100dea1673,70319
f0100deb:	5d                   	pop    %ebpf0100deb1674,70363
f0100dec:	c3                   	ret    f0100dec1675,70407
f0100ded:	56                   	push   %esif0100ded1677,70511
f0100dee:	8d 83 08 ea fe ff    	lea    -0x115f8(%ebx),%eaxf0100dee1678,70555
f0100df4:	50                   	push   %eaxf0100df41679,70614
f0100df5:	68 7a 01 00 00       	push   $0x17af0100df51680,70658
f0100dfa:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf0100dfa1681,70704
f0100e00:	50                   	push   %eaxf0100e001682,70763
f0100e01:	e8 93 f2 ff ff       	call   f0100099 <_panic>f0100e011683,70807
f0100e06:	b8 00 00 00 00       	mov    $0x0,%eaxf0100e061685,70891
f0100e0b:	eb d8                	jmp    f0100de5 <pgdir_walk+0xc4>f0100e0b1686,70940
f0100e0d:	b8 00 00 00 00       	mov    $0x0,%eaxf0100e0d1688,71029
f0100e12:	eb d1                	jmp    f0100de5 <pgdir_walk+0xc4>f0100e121689,71078
f0100e14:	b8 00 00 00 00       	mov    $0x0,%eaxf0100e141691,71171
f0100e19:	eb ca                	jmp    f0100de5 <pgdir_walk+0xc4>f0100e191692,71220
f0100e1b:	b8 00 00 00 00       	mov    $0x0,%eaxf0100e1b1694,71309
f0100e20:	eb c3                	jmp    f0100de5 <pgdir_walk+0xc4>f0100e201695,71358
f0100e22 <mem_init>:f0100e221697,71425
f0100e22:	55                   	push   %ebpf0100e221699,71448
f0100e23:	89 e5                	mov    %esp,%ebpf0100e231700,71492
f0100e25:	57                   	push   %edif0100e251701,71541
f0100e26:	56                   	push   %esif0100e261702,71585
f0100e27:	53                   	push   %ebxf0100e271703,71629
f0100e28:	83 ec 3c             	sub    $0x3c,%espf0100e281704,71673
f0100e2b:	e8 1f f3 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100e2b1705,71723
f0100e30:	81 c3 d8 34 01 00    	add    $0x134d8,%ebxf0100e301706,71795
	basemem = nvram_read(NVRAM_BASELO);basemem1707,71848
f0100e36:	b8 15 00 00 00       	mov    $0x15,%eaxf0100e361708,71885
f0100e3b:	e8 43 fb ff ff       	call   f0100983 <nvram_read>f0100e3b1709,71935
f0100e40:	89 c7                	mov    %eax,%edif0100e401710,71996
	extmem = nvram_read(NVRAM_EXTLO);extmem1711,72045
f0100e42:	b8 17 00 00 00       	mov    $0x17,%eaxf0100e421712,72080
f0100e47:	e8 37 fb ff ff       	call   f0100983 <nvram_read>f0100e471713,72130
f0100e4c:	89 c6                	mov    %eax,%esif0100e4c1714,72191
	ext16mem = nvram_read(NVRAM_EXT16LO) * 64;ext16mem1715,72240
f0100e4e:	b8 34 00 00 00       	mov    $0x34,%eaxf0100e4e1716,72284
f0100e53:	e8 2b fb ff ff       	call   f0100983 <nvram_read>f0100e531717,72334
f0100e58:	c1 e0 06             	shl    $0x6,%eaxf0100e581718,72395
f0100e5b:	85 c0                	test   %eax,%eaxf0100e5b1720,72459
f0100e5d:	75 0e                	jne    f0100e6d <mem_init+0x4b>f0100e5d1721,72508
		totalmem = basemem;totalmem1722,72572
f0100e5f:	89 f8                	mov    %edi,%eaxf0100e5f1723,72594
f0100e61:	85 f6                	test   %esi,%esif0100e611725,72661
f0100e63:	74 0d                	je     f0100e72 <mem_init+0x50>f0100e631726,72710
		totalmem = 1 * 1024 + extmem;totalmem1727,72774
f0100e65:	8d 86 00 04 00 00    	lea    0x400(%esi),%eaxf0100e651728,72806
f0100e6b:	eb 05                	jmp    f0100e72 <mem_init+0x50>f0100e6b1729,72862
		totalmem = 16 * 1024 + ext16mem;totalmem1730,72926
f0100e6d:	05 00 40 00 00       	add    $0x4000,%eaxf0100e6d1731,72961
	npages = totalmem / (PGSIZE / 1024);npages1732,73013
f0100e72:	89 c1                	mov    %eax,%ecxf0100e721733,73051
f0100e74:	c1 e9 02             	shr    $0x2,%ecxf0100e741734,73100
f0100e77:	c7 c2 c8 66 11 f0    	mov    $0xf01166c8,%edxf0100e771735,73149
f0100e7d:	89 0a                	mov    %ecx,(%edx)f0100e7d1736,73205
	npages_basemem = basemem / (PGSIZE / 1024);npages_basemem1737,73256
f0100e7f:	89 fa                	mov    %edi,%edxf0100e7f1738,73301
f0100e81:	c1 ea 02             	shr    $0x2,%edxf0100e811739,73350
f0100e84:	89 93 98 1f 00 00    	mov    %edx,0x1f98(%ebx)f0100e841740,73399
f0100e8a:	89 c2                	mov    %eax,%edxf0100e8a1742,73529
f0100e8c:	29 fa                	sub    %edi,%edxf0100e8c1743,73578
f0100e8e:	52                   	push   %edxf0100e8e1744,73627
f0100e8f:	57                   	push   %edif0100e8f1745,73671
f0100e90:	50                   	push   %eaxf0100e901746,73715
f0100e91:	8d 83 80 ea fe ff    	lea    -0x11580(%ebx),%eaxf0100e911747,73759
f0100e97:	50                   	push   %eaxf0100e971748,73818
f0100e98:	e8 2a 0a 00 00       	call   f01018c7 <cprintf>f0100e981749,73862
	kern_pgdir = (pde_t *) boot_alloc(PGSIZE);kern_pgdir1750,73920
f0100e9d:	b8 00 10 00 00       	mov    $0x1000,%eaxf0100e9d1751,73964
f0100ea2:	e8 12 fb ff ff       	call   f01009b9 <boot_alloc>f0100ea21752,74016
f0100ea7:	c7 c6 cc 66 11 f0    	mov    $0xf01166cc,%esif0100ea71753,74077
f0100ead:	89 06                	mov    %eax,(%esi)f0100ead1754,74133
f0100eaf:	83 c4 0c             	add    $0xc,%espf0100eaf1756,74216
f0100eb2:	68 00 10 00 00       	push   $0x1000f0100eb21757,74265
f0100eb7:	6a 00                	push   $0x0f0100eb71758,74312
f0100eb9:	50                   	push   %eaxf0100eb91759,74356
f0100eba:	e8 64 15 00 00       	call   f0102423 <memset>f0100eba1760,74400
f0100ebf:	8b 06                	mov    (%esi),%eaxf0100ebf1762,74517
f0100ec1:	83 c4 10             	add    $0x10,%espf0100ec11764,74599
f0100ec4:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf0100ec41765,74649
f0100ec9:	77 19                	ja     f0100ee4 <mem_init+0xc2>f0100ec91766,74705
f0100ecb:	50                   	push   %eaxf0100ecb1768,74835
f0100ecc:	8d 83 bc ea fe ff    	lea    -0x11544(%ebx),%eaxf0100ecc1769,74879
f0100ed2:	50                   	push   %eaxf0100ed21770,74938
f0100ed3:	68 92 00 00 00       	push   $0x92f0100ed31771,74982
f0100ed8:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf0100ed81772,75027
f0100ede:	50                   	push   %eaxf0100ede1773,75086
f0100edf:	e8 b5 f1 ff ff       	call   f0100099 <_panic>f0100edf1774,75130
f0100ee4:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf0100ee41776,75223
f0100eea:	83 ca 05             	or     $0x5,%edxf0100eea1777,75284
f0100eed:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)f0100eed1778,75333
	pages = (struct PageInfo *) boot_alloc(sizeof(struct PageInfo) * npages);pages1779,75389
f0100ef3:	c7 c6 c8 66 11 f0    	mov    $0xf01166c8,%esif0100ef31780,75464
f0100ef9:	8b 06                	mov    (%esi),%eaxf0100ef91781,75520
f0100efb:	c1 e0 03             	shl    $0x3,%eaxf0100efb1782,75571
f0100efe:	e8 b6 fa ff ff       	call   f01009b9 <boot_alloc>f0100efe1783,75620
f0100f03:	c7 c2 d0 66 11 f0    	mov    $0xf01166d0,%edxf0100f031784,75681
f0100f09:	89 02                	mov    %eax,(%edx)f0100f091785,75737
f0100f0b:	83 ec 04             	sub    $0x4,%espf0100f0b1787,75841
f0100f0e:	8b 16                	mov    (%esi),%edxf0100f0e1788,75890
f0100f10:	c1 e2 03             	shl    $0x3,%edxf0100f101789,75941
f0100f13:	52                   	push   %edxf0100f131790,75990
f0100f14:	6a 00                	push   $0x0f0100f141791,76034
f0100f16:	50                   	push   %eaxf0100f161792,76078
f0100f17:	e8 07 15 00 00       	call   f0102423 <memset>f0100f171793,76122
f0100f1c:	e8 eb fb ff ff       	call   f0100b0c <page_init>f0100f1c1795,76193
f0100f21:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf0100f211797,76275
f0100f27:	83 c4 10             	add    $0x10,%espf0100f271798,76332
f0100f2a:	85 c0                	test   %eax,%eaxf0100f2a1799,76382
f0100f2c:	74 5d                	je     f0100f8b <mem_init+0x169>f0100f2c1800,76431
f0100f2e:	8d 55 d8             	lea    -0x28(%ebp),%edxf0100f2e1802,76540
f0100f31:	89 55 e0             	mov    %edx,-0x20(%ebp)f0100f311803,76596
f0100f34:	8d 55 dc             	lea    -0x24(%ebp),%edxf0100f341804,76652
f0100f37:	89 55 e4             	mov    %edx,-0x1c(%ebp)f0100f371805,76708
f0100f3a:	c7 c1 d0 66 11 f0    	mov    $0xf01166d0,%ecxf0100f3a1807,76797
f0100f40:	89 c2                	mov    %eax,%edxf0100f401808,76853
f0100f42:	2b 11                	sub    (%ecx),%edxf0100f421809,76902
f0100f44:	f7 c2 00 e0 7f 00    	test   $0x7fe000,%edxf0100f441811,77002
f0100f4a:	0f 95 c2             	setne  %dlf0100f4a1812,77056
f0100f4d:	0f b6 d2             	movzbl %dl,%edxf0100f4d1813,77099
f0100f50:	8b 74 95 e0          	mov    -0x20(%ebp,%edx,4),%esif0100f501815,77170
f0100f54:	89 06                	mov    %eax,(%esi)f0100f541816,77233
f0100f56:	89 44 95 e0          	mov    %eax,-0x20(%ebp,%edx,4)f0100f561818,77316
f0100f5a:	8b 00                	mov    (%eax),%eaxf0100f5a1820,77431
f0100f5c:	85 c0                	test   %eax,%eaxf0100f5c1821,77482
f0100f5e:	75 e0                	jne    f0100f40 <mem_init+0x11e>f0100f5e1822,77531
f0100f60:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100f601824,77610
f0100f63:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100f631825,77666
f0100f69:	8b 55 dc             	mov    -0x24(%ebp),%edxf0100f691827,77733
f0100f6c:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100f6c1828,77789
f0100f6f:	89 10                	mov    %edx,(%eax)f0100f6f1829,77845
		page_free_list = pp1;page_free_list1830,77896
f0100f71:	8b 75 d8             	mov    -0x28(%ebp),%esif0100f711831,77920
f0100f74:	89 b3 94 1f 00 00    	mov    %esi,0x1f94(%ebx)f0100f741832,77976
f0100f7a:	c7 c7 d0 66 11 f0    	mov    $0xf01166d0,%edif0100f7a1833,78033
f0100f80:	c7 c0 c8 66 11 f0    	mov    $0xf01166c8,%eaxf0100f801835,78115
f0100f86:	89 45 d4             	mov    %eax,-0x2c(%ebp)f0100f861836,78171
f0100f89:	eb 33                	jmp    f0100fbe <mem_init+0x19c>f0100f891837,78227
f0100f8b:	83 ec 04             	sub    $0x4,%espf0100f8b1839,78340
f0100f8e:	8d 83 e0 ea fe ff    	lea    -0x11520(%ebx),%eaxf0100f8e1840,78389
f0100f94:	50                   	push   %eaxf0100f941841,78448
f0100f95:	68 fd 01 00 00       	push   $0x1fdf0100f951842,78492
f0100f9a:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf0100f9a1843,78538
f0100fa0:	50                   	push   %eaxf0100fa01844,78597
f0100fa1:	e8 f3 f0 ff ff       	call   f0100099 <_panic>f0100fa11845,78641
f0100fa6:	52                   	push   %edxf0100fa61847,78762
f0100fa7:	8d 83 08 ea fe ff    	lea    -0x115f8(%ebx),%eaxf0100fa71848,78806
f0100fad:	50                   	push   %eaxf0100fad1849,78865
f0100fae:	6a 52                	push   $0x52f0100fae1850,78909
f0100fb0:	8d 83 44 ec fe ff    	lea    -0x113bc(%ebx),%eaxf0100fb01851,78954
f0100fb6:	50                   	push   %eaxf0100fb61852,79013
f0100fb7:	e8 dd f0 ff ff       	call   f0100099 <_panic>f0100fb71853,79057
f0100fbc:	8b 36                	mov    (%esi),%esif0100fbc1855,79163
f0100fbe:	85 f6                	test   %esi,%esif0100fbe1856,79214
f0100fc0:	74 3d                	je     f0100fff <mem_init+0x1dd>f0100fc01857,79263
f0100fc2:	89 f0                	mov    %esi,%eaxf0100fc21859,79361
f0100fc4:	2b 07                	sub    (%edi),%eaxf0100fc41860,79410
f0100fc6:	c1 f8 03             	sar    $0x3,%eaxf0100fc61861,79461
f0100fc9:	89 c2                	mov    %eax,%edxf0100fc91863,79546
f0100fcb:	c1 e2 0c             	shl    $0xc,%edxf0100fcb1864,79595
f0100fce:	a9 00 fc 0f 00       	test   $0xffc00,%eaxf0100fce1865,79644
f0100fd3:	75 e7                	jne    f0100fbc <mem_init+0x19a>f0100fd31866,79697
f0100fd5:	89 d0                	mov    %edx,%eaxf0100fd51868,79788
f0100fd7:	c1 e8 0c             	shr    $0xc,%eaxf0100fd71869,79837
f0100fda:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0100fda1870,79886
f0100fdd:	3b 01                	cmp    (%ecx),%eaxf0100fdd1871,79942
f0100fdf:	73 c5                	jae    f0100fa6 <mem_init+0x184>f0100fdf1872,79993
f0100fe1:	83 ec 04             	sub    $0x4,%espf0100fe11874,80094
f0100fe4:	68 80 00 00 00       	push   $0x80f0100fe41875,80143
f0100fe9:	68 97 00 00 00       	push   $0x97f0100fe91876,80188
f0100fee:	81 ea 00 00 00 10    	sub    $0x10000000,%edxf0100fee1878,80266
f0100ff4:	52                   	push   %edxf0100ff41879,80322
f0100ff5:	e8 29 14 00 00       	call   f0102423 <memset>f0100ff51880,80366
f0100ffa:	83 c4 10             	add    $0x10,%espf0100ffa1881,80423
f0100ffd:	eb bd                	jmp    f0100fbc <mem_init+0x19a>f0100ffd1882,80473
	first_free_page = (char *) boot_alloc(0);first_free_page1883,80538
f0100fff:	b8 00 00 00 00       	mov    $0x0,%eaxf0100fff1884,80581
f0101004:	e8 b0 f9 ff ff       	call   f01009b9 <boot_alloc>f01010041885,80630
f0101009:	89 45 c8             	mov    %eax,-0x38(%ebp)f01010091886,80691
f010100c:	8b 93 94 1f 00 00    	mov    0x1f94(%ebx),%edxf010100c1888,80798
f0101012:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf01010121890,80878
f0101018:	8b 08                	mov    (%eax),%ecxf01010181891,80934
f010101a:	c7 c0 c8 66 11 f0    	mov    $0xf01166c8,%eaxf010101a1893,81016
f0101020:	8b 00                	mov    (%eax),%eaxf01010201894,81072
f0101022:	89 45 c4             	mov    %eax,-0x3c(%ebp)f01010221895,81123
f0101025:	8d 04 c1             	lea    (%ecx,%eax,8),%eaxf01010251896,81179
f0101028:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01010281897,81237
f010102b:	89 4d d0             	mov    %ecx,-0x30(%ebp)f010102b1899,81354
f010102e:	bf 00 00 00 00       	mov    $0x0,%edif010102e1901,81452
f0101033:	89 75 cc             	mov    %esi,-0x34(%ebp)f01010331902,81501
f0101036:	e9 f3 00 00 00       	jmp    f010112e <mem_init+0x30c>f01010361903,81557
f010103b:	8d 83 52 ec fe ff    	lea    -0x113ae(%ebx),%eaxf010103b1905,81645
f0101041:	50                   	push   %eaxf01010411906,81704
f0101042:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01010421907,81748
f0101048:	50                   	push   %eaxf01010481908,81807
f0101049:	68 17 02 00 00       	push   $0x217f01010491909,81851
f010104e:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010104e1910,81897
f0101054:	50                   	push   %eaxf01010541911,81956
f0101055:	e8 3f f0 ff ff       	call   f0100099 <_panic>f01010551912,82000
f010105a:	8d 83 73 ec fe ff    	lea    -0x1138d(%ebx),%eaxf010105a1914,82088
f0101060:	50                   	push   %eaxf01010601915,82147
f0101061:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01010611916,82191
f0101067:	50                   	push   %eaxf01010671917,82250
f0101068:	68 18 02 00 00       	push   $0x218f01010681918,82294
f010106d:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010106d1919,82340
f0101073:	50                   	push   %eaxf01010731920,82399
f0101074:	e8 20 f0 ff ff       	call   f0100099 <_panic>f01010741921,82443
f0101079:	8d 83 04 eb fe ff    	lea    -0x114fc(%ebx),%eaxf01010791923,82561
f010107f:	50                   	push   %eaxf010107f1924,82620
f0101080:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01010801925,82664
f0101086:	50                   	push   %eaxf01010861926,82723
f0101087:	68 19 02 00 00       	push   $0x219f01010871927,82767
f010108c:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010108c1928,82813
f0101092:	50                   	push   %eaxf01010921929,82872
f0101093:	e8 01 f0 ff ff       	call   f0100099 <_panic>f01010931930,82916
f0101098:	8d 83 87 ec fe ff    	lea    -0x11379(%ebx),%eaxf01010981932,83001
f010109e:	50                   	push   %eaxf010109e1933,83060
f010109f:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf010109f1934,83104
f01010a5:	50                   	push   %eaxf01010a51935,83163
f01010a6:	68 1c 02 00 00       	push   $0x21cf01010a61936,83207
f01010ab:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01010ab1937,83253
f01010b1:	50                   	push   %eaxf01010b11938,83312
f01010b2:	e8 e2 ef ff ff       	call   f0100099 <_panic>f01010b21939,83356
f01010b7:	8d 83 98 ec fe ff    	lea    -0x11368(%ebx),%eaxf01010b71941,83449
f01010bd:	50                   	push   %eaxf01010bd1942,83508
f01010be:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01010be1943,83552
f01010c4:	50                   	push   %eaxf01010c41944,83611
f01010c5:	68 1d 02 00 00       	push   $0x21df01010c51945,83655
f01010ca:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01010ca1946,83701
f01010d0:	50                   	push   %eaxf01010d01947,83760
f01010d1:	e8 c3 ef ff ff       	call   f0100099 <_panic>f01010d11948,83804
f01010d6:	8d 83 38 eb fe ff    	lea    -0x114c8(%ebx),%eaxf01010d61950,83907
f01010dc:	50                   	push   %eaxf01010dc1951,83966
f01010dd:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01010dd1952,84010
f01010e3:	50                   	push   %eaxf01010e31953,84069
f01010e4:	68 1e 02 00 00       	push   $0x21ef01010e41954,84113
f01010e9:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01010e91955,84159
f01010ef:	50                   	push   %eaxf01010ef1956,84218
f01010f0:	e8 a4 ef ff ff       	call   f0100099 <_panic>f01010f01957,84262
f01010f5:	8d 83 b1 ec fe ff    	lea    -0x1134f(%ebx),%eaxf01010f51959,84356
f01010fb:	50                   	push   %eaxf01010fb1960,84415
f01010fc:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01010fc1961,84459
f0101102:	50                   	push   %eaxf01011021962,84518
f0101103:	68 1f 02 00 00       	push   $0x21ff01011031963,84562
f0101108:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01011081964,84608
f010110e:	50                   	push   %eaxf010110e1965,84667
f010110f:	e8 85 ef ff ff       	call   f0100099 <_panic>f010110f1966,84711
f0101114:	89 c6                	mov    %eax,%esif01011141968,84794
f0101116:	c1 ee 0c             	shr    $0xc,%esif01011161969,84843
f0101119:	39 75 c4             	cmp    %esi,-0x3c(%ebp)f01011191970,84892
f010111c:	76 71                	jbe    f010118f <mem_init+0x36d>f010111c1971,84948
f010111e:	2d 00 00 00 10       	sub    $0x10000000,%eaxf010111e1973,85046
f0101123:	39 45 c8             	cmp    %eax,-0x38(%ebp)f01011231975,85182
f0101126:	77 7d                	ja     f01011a5 <mem_init+0x383>f01011261976,85238
f0101128:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f01011281978,85322
f010112c:	8b 12                	mov    (%edx),%edxf010112c1980,85429
f010112e:	85 d2                	test   %edx,%edxf010112e1981,85480
f0101130:	0f 84 8e 00 00 00    	je     f01011c4 <mem_init+0x3a2>f01011301982,85529
f0101136:	39 d1                	cmp    %edx,%ecxf01011361984,85617
f0101138:	0f 87 fd fe ff ff    	ja     f010103b <mem_init+0x219>f01011381985,85666
f010113e:	3b 55 d4             	cmp    -0x2c(%ebp),%edxf010113e1987,85762
f0101141:	0f 83 13 ff ff ff    	jae    f010105a <mem_init+0x238>f01011411988,85818
f0101147:	89 d0                	mov    %edx,%eaxf01011471990,85944
f0101149:	2b 45 d0             	sub    -0x30(%ebp),%eaxf01011491991,85993
f010114c:	a8 07                	test   $0x7,%alf010114c1992,86049
f010114e:	0f 85 25 ff ff ff    	jne    f0101079 <mem_init+0x257>f010114e1993,86097
f0101154:	c1 f8 03             	sar    $0x3,%eaxf01011541995,86195
f0101157:	c1 e0 0c             	shl    $0xc,%eaxf01011571996,86244
f010115a:	85 c0                	test   %eax,%eaxf010115a1998,86321
f010115c:	0f 84 36 ff ff ff    	je     f0101098 <mem_init+0x276>f010115c1999,86370
f0101162:	3d 00 00 0a 00       	cmp    $0xa0000,%eaxf01011622001,86471
f0101167:	0f 84 4a ff ff ff    	je     f01010b7 <mem_init+0x295>f01011672002,86524
f010116d:	3d 00 f0 0f 00       	cmp    $0xff000,%eaxf010116d2004,86635
f0101172:	0f 84 5e ff ff ff    	je     f01010d6 <mem_init+0x2b4>f01011722005,86688
f0101178:	3d 00 00 10 00       	cmp    $0x100000,%eaxf01011782007,86790
f010117d:	0f 84 72 ff ff ff    	je     f01010f5 <mem_init+0x2d3>f010117d2008,86844
f0101183:	3d ff ff 0f 00       	cmp    $0xfffff,%eaxf01011832010,86989
f0101188:	77 8a                	ja     f0101114 <mem_init+0x2f2>f01011882011,87042
f010118a:	83 c7 01             	add    $0x1,%edif010118a2013,87127
f010118d:	eb 9d                	jmp    f010112c <mem_init+0x30a>f010118d2014,87176
f010118f:	50                   	push   %eaxf010118f2016,87305
f0101190:	8d 83 08 ea fe ff    	lea    -0x115f8(%ebx),%eaxf01011902017,87349
f0101196:	50                   	push   %eaxf01011962018,87408
f0101197:	6a 52                	push   $0x52f01011972019,87452
f0101199:	8d 83 44 ec fe ff    	lea    -0x113bc(%ebx),%eaxf01011992020,87497
f010119f:	50                   	push   %eaxf010119f2021,87556
f01011a0:	e8 f4 ee ff ff       	call   f0100099 <_panic>f01011a02022,87600
f01011a5:	8d 83 5c eb fe ff    	lea    -0x114a4(%ebx),%eaxf01011a52024,87737
f01011ab:	50                   	push   %eaxf01011ab2025,87796
f01011ac:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01011ac2026,87840
f01011b2:	50                   	push   %eaxf01011b22027,87899
f01011b3:	68 20 02 00 00       	push   $0x220f01011b32028,87943
f01011b8:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01011b82029,87989
f01011be:	50                   	push   %eaxf01011be2030,88048
f01011bf:	e8 d5 ee ff ff       	call   f0100099 <_panic>f01011bf2031,88092
f01011c4:	8b 75 cc             	mov    -0x34(%ebp),%esif01011c42032,88149
f01011c7:	85 ff                	test   %edi,%edif01011c72034,88233
f01011c9:	7e 2e                	jle    f01011f9 <mem_init+0x3d7>f01011c92035,88282
f01011cb:	85 f6                	test   %esi,%esif01011cb2037,88374
f01011cd:	7e 49                	jle    f0101218 <mem_init+0x3f6>f01011cd2038,88423
f01011cf:	83 ec 0c             	sub    $0xc,%espf01011cf2040,88537
f01011d2:	8d 83 a4 eb fe ff    	lea    -0x1145c(%ebx),%eaxf01011d22041,88586
f01011d8:	50                   	push   %eaxf01011d82042,88645
f01011d9:	e8 e9 06 00 00       	call   f01018c7 <cprintf>f01011d92043,88689
f01011de:	83 c4 10             	add    $0x10,%espf01011de2045,88760
f01011e1:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf01011e12046,88810
f01011e7:	83 38 00             	cmpl   $0x0,(%eax)f01011e72047,88866
f01011ea:	74 4b                	je     f0101237 <mem_init+0x415>f01011ea2048,88917
f01011ec:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf01011ec2050,89042
f01011f2:	be 00 00 00 00       	mov    $0x0,%esif01011f22051,89099
f01011f7:	eb 5e                	jmp    f0101257 <mem_init+0x435>f01011f72052,89148
f01011f9:	8d 83 cb ec fe ff    	lea    -0x11335(%ebx),%eaxf01011f92054,89241
f01011ff:	50                   	push   %eaxf01011ff2055,89300
f0101200:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01012002056,89344
f0101206:	50                   	push   %eaxf01012062057,89403
f0101207:	68 28 02 00 00       	push   $0x228f01012072058,89447
f010120c:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010120c2059,89493
f0101212:	50                   	push   %eaxf01012122060,89552
f0101213:	e8 81 ee ff ff       	call   f0100099 <_panic>f01012132061,89596
f0101218:	8d 83 dd ec fe ff    	lea    -0x11323(%ebx),%eaxf01012182063,89680
f010121e:	50                   	push   %eaxf010121e2064,89739
f010121f:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf010121f2065,89783
f0101225:	50                   	push   %eaxf01012252066,89842
f0101226:	68 29 02 00 00       	push   $0x229f01012262067,89886
f010122b:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010122b2068,89932
f0101231:	50                   	push   %eaxf01012312069,89991
f0101232:	e8 62 ee ff ff       	call   f0100099 <_panic>f01012322070,90035
f0101237:	83 ec 04             	sub    $0x4,%espf01012372072,90131
f010123a:	8d 83 ee ec fe ff    	lea    -0x11312(%ebx),%eaxf010123a2073,90180
f0101240:	50                   	push   %eaxf01012402074,90239
f0101241:	68 3c 02 00 00       	push   $0x23cf01012412075,90283
f0101246:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01012462076,90329
f010124c:	50                   	push   %eaxf010124c2077,90388
f010124d:	e8 47 ee ff ff       	call   f0100099 <_panic>f010124d2078,90432
f0101252:	83 c6 01             	add    $0x1,%esif01012522080,90500
f0101255:	8b 00                	mov    (%eax),%eaxf01012552082,90609
f0101257:	85 c0                	test   %eax,%eaxf01012572083,90660
f0101259:	75 f7                	jne    f0101252 <mem_init+0x430>f01012592084,90709
f010125b:	83 ec 0c             	sub    $0xc,%espf010125b2086,90806
f010125e:	6a 00                	push   $0x0f010125e2087,90855
f0101260:	e8 99 f9 ff ff       	call   f0100bfe <page_alloc>f01012602088,90899
f0101265:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01012652089,90960
f0101268:	83 c4 10             	add    $0x10,%espf01012682090,91016
f010126b:	85 c0                	test   %eax,%eaxf010126b2091,91066
f010126d:	0f 84 e7 01 00 00    	je     f010145a <mem_init+0x638>f010126d2092,91115
f0101273:	83 ec 0c             	sub    $0xc,%espf01012732094,91212
f0101276:	6a 00                	push   $0x0f01012762095,91261
f0101278:	e8 81 f9 ff ff       	call   f0100bfe <page_alloc>f01012782096,91305
f010127d:	89 c7                	mov    %eax,%edif010127d2097,91366
f010127f:	83 c4 10             	add    $0x10,%espf010127f2098,91415
f0101282:	85 c0                	test   %eax,%eaxf01012822099,91465
f0101284:	0f 84 ef 01 00 00    	je     f0101479 <mem_init+0x657>f01012842100,91514
f010128a:	83 ec 0c             	sub    $0xc,%espf010128a2102,91611
f010128d:	6a 00                	push   $0x0f010128d2103,91660
f010128f:	e8 6a f9 ff ff       	call   f0100bfe <page_alloc>f010128f2104,91704
f0101294:	89 45 d0             	mov    %eax,-0x30(%ebp)f01012942105,91765
f0101297:	83 c4 10             	add    $0x10,%espf01012972106,91821
f010129a:	85 c0                	test   %eax,%eaxf010129a2107,91871
f010129c:	0f 84 f6 01 00 00    	je     f0101498 <mem_init+0x676>f010129c2108,91920
f01012a2:	39 7d d4             	cmp    %edi,-0x2c(%ebp)f01012a22110,92013
f01012a5:	0f 84 0c 02 00 00    	je     f01014b7 <mem_init+0x695>f01012a52111,92069
f01012ab:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01012ab2113,92176
f01012ae:	39 45 d4             	cmp    %eax,-0x2c(%ebp)f01012ae2114,92232
f01012b1:	0f 84 1f 02 00 00    	je     f01014d6 <mem_init+0x6b4>f01012b12115,92288
f01012b7:	39 c7                	cmp    %eax,%edif01012b72116,92353
f01012b9:	0f 84 17 02 00 00    	je     f01014d6 <mem_init+0x6b4>f01012b92117,92402
f01012bf:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf01012bf2119,92500
f01012c5:	8b 08                	mov    (%eax),%ecxf01012c52120,92556
f01012c7:	c7 c0 c8 66 11 f0    	mov    $0xf01166c8,%eaxf01012c72122,92646
f01012cd:	8b 10                	mov    (%eax),%edxf01012cd2123,92702
f01012cf:	c1 e2 0c             	shl    $0xc,%edxf01012cf2124,92753
f01012d2:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf01012d22125,92802
f01012d5:	29 c8                	sub    %ecx,%eaxf01012d52126,92858
f01012d7:	c1 f8 03             	sar    $0x3,%eaxf01012d72127,92907
f01012da:	c1 e0 0c             	shl    $0xc,%eaxf01012da2128,92956
f01012dd:	39 d0                	cmp    %edx,%eaxf01012dd2129,93005
f01012df:	0f 83 10 02 00 00    	jae    f01014f5 <mem_init+0x6d3>f01012df2130,93054
f01012e5:	89 f8                	mov    %edi,%eaxf01012e52131,93119
f01012e7:	29 c8                	sub    %ecx,%eaxf01012e72132,93168
f01012e9:	c1 f8 03             	sar    $0x3,%eaxf01012e92133,93217
f01012ec:	c1 e0 0c             	shl    $0xc,%eaxf01012ec2134,93266
f01012ef:	39 c2                	cmp    %eax,%edxf01012ef2136,93354
f01012f1:	0f 86 1d 02 00 00    	jbe    f0101514 <mem_init+0x6f2>f01012f12137,93403
f01012f7:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01012f72138,93468
f01012fa:	29 c8                	sub    %ecx,%eaxf01012fa2139,93524
f01012fc:	c1 f8 03             	sar    $0x3,%eaxf01012fc2140,93573
f01012ff:	c1 e0 0c             	shl    $0xc,%eaxf01012ff2141,93622
f0101302:	39 c2                	cmp    %eax,%edxf01013022143,93710
f0101304:	0f 86 29 02 00 00    	jbe    f0101533 <mem_init+0x711>f01013042144,93759
	fl = page_free_list;fl2145,93824
f010130a:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf010130a2146,93846
f0101310:	89 45 cc             	mov    %eax,-0x34(%ebp)f01013102147,93903
	page_free_list = 0;page_free_list2148,93959
f0101313:	c7 83 94 1f 00 00 00 	movl   $0x0,0x1f94(%ebx)f01013132149,93980
f010131a:	00 00 00 f010131a2150,94037
f010131d:	83 ec 0c             	sub    $0xc,%espf010131d2152,94082
f0101320:	6a 00                	push   $0x0f01013202153,94131
f0101322:	e8 d7 f8 ff ff       	call   f0100bfe <page_alloc>f01013222154,94175
f0101327:	83 c4 10             	add    $0x10,%espf01013272155,94236
f010132a:	85 c0                	test   %eax,%eaxf010132a2156,94286
f010132c:	0f 85 20 02 00 00    	jne    f0101552 <mem_init+0x730>f010132c2157,94335
f0101332:	83 ec 0c             	sub    $0xc,%espf01013322159,94417
f0101335:	ff 75 d4             	pushl  -0x2c(%ebp)f01013352160,94466
f0101338:	e8 4f f9 ff ff       	call   f0100c8c <page_free>f01013382161,94517
f010133d:	89 3c 24             	mov    %edi,(%esp)f010133d2163,94594
f0101340:	e8 47 f9 ff ff       	call   f0100c8c <page_free>f01013402164,94645
f0101345:	83 c4 04             	add    $0x4,%espf01013452166,94722
f0101348:	ff 75 d0             	pushl  -0x30(%ebp)f01013482167,94771
f010134b:	e8 3c f9 ff ff       	call   f0100c8c <page_free>f010134b2168,94822
f0101350:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f01013502170,94914
f0101357:	e8 a2 f8 ff ff       	call   f0100bfe <page_alloc>f01013572171,94965
f010135c:	89 c7                	mov    %eax,%edif010135c2172,95026
f010135e:	83 c4 10             	add    $0x10,%espf010135e2173,95075
f0101361:	85 c0                	test   %eax,%eaxf01013612174,95125
f0101363:	0f 84 08 02 00 00    	je     f0101571 <mem_init+0x74f>f01013632175,95174
f0101369:	83 ec 0c             	sub    $0xc,%espf01013692177,95271
f010136c:	6a 00                	push   $0x0f010136c2178,95320
f010136e:	e8 8b f8 ff ff       	call   f0100bfe <page_alloc>f010136e2179,95364
f0101373:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01013732180,95425
f0101376:	83 c4 10             	add    $0x10,%espf01013762181,95481
f0101379:	85 c0                	test   %eax,%eaxf01013792182,95531
f010137b:	0f 84 0f 02 00 00    	je     f0101590 <mem_init+0x76e>f010137b2183,95580
f0101381:	83 ec 0c             	sub    $0xc,%espf01013812185,95677
f0101384:	6a 00                	push   $0x0f01013842186,95726
f0101386:	e8 73 f8 ff ff       	call   f0100bfe <page_alloc>f01013862187,95770
f010138b:	89 45 d0             	mov    %eax,-0x30(%ebp)f010138b2188,95831
f010138e:	83 c4 10             	add    $0x10,%espf010138e2189,95887
f0101391:	85 c0                	test   %eax,%eaxf01013912190,95937
f0101393:	0f 84 16 02 00 00    	je     f01015af <mem_init+0x78d>f01013932191,95986
f0101399:	3b 7d d4             	cmp    -0x2c(%ebp),%edif01013992193,96079
f010139c:	0f 84 2c 02 00 00    	je     f01015ce <mem_init+0x7ac>f010139c2194,96135
f01013a2:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01013a22196,96242
f01013a5:	39 c7                	cmp    %eax,%edif01013a52197,96298
f01013a7:	0f 84 40 02 00 00    	je     f01015ed <mem_init+0x7cb>f01013a72198,96347
f01013ad:	39 45 d4             	cmp    %eax,-0x2c(%ebp)f01013ad2199,96412
f01013b0:	0f 84 37 02 00 00    	je     f01015ed <mem_init+0x7cb>f01013b02200,96468
f01013b6:	83 ec 0c             	sub    $0xc,%espf01013b62202,96558
f01013b9:	6a 00                	push   $0x0f01013b92203,96607
f01013bb:	e8 3e f8 ff ff       	call   f0100bfe <page_alloc>f01013bb2204,96651
f01013c0:	83 c4 10             	add    $0x10,%espf01013c02205,96712
f01013c3:	85 c0                	test   %eax,%eaxf01013c32206,96762
f01013c5:	0f 85 41 02 00 00    	jne    f010160c <mem_init+0x7ea>f01013c52207,96811
f01013cb:	89 f8                	mov    %edi,%eaxf01013cb2209,96911
f01013cd:	e8 6c f6 ff ff       	call   f0100a3e <page2kva>f01013cd2210,96960
f01013d2:	83 ec 04             	sub    $0x4,%espf01013d22211,97019
f01013d5:	68 00 10 00 00       	push   $0x1000f01013d52212,97068
f01013da:	6a 01                	push   $0x1f01013da2213,97115
f01013dc:	50                   	push   %eaxf01013dc2214,97159
f01013dd:	e8 41 10 00 00       	call   f0102423 <memset>f01013dd2215,97203
f01013e2:	89 3c 24             	mov    %edi,(%esp)f01013e22217,97277
f01013e5:	e8 a2 f8 ff ff       	call   f0100c8c <page_free>f01013e52218,97328
f01013ea:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)f01013ea2220,97428
f01013f1:	e8 08 f8 ff ff       	call   f0100bfe <page_alloc>f01013f12221,97479
f01013f6:	83 c4 10             	add    $0x10,%espf01013f62222,97540
f01013f9:	85 c0                	test   %eax,%eaxf01013f92223,97590
f01013fb:	0f 84 2a 02 00 00    	je     f010162b <mem_init+0x809>f01013fb2224,97639
f0101401:	39 c7                	cmp    %eax,%edif01014012226,97730
f0101403:	0f 85 41 02 00 00    	jne    f010164a <mem_init+0x828>f01014032227,97779
	c = page2kva(pp);c2228,97844
f0101409:	e8 30 f6 ff ff       	call   f0100a3e <page2kva>f01014092229,97863
f010140e:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edxf010140e2230,97922
f0101414:	80 38 00             	cmpb   $0x0,(%eax)f01014142232,98000
f0101417:	0f 85 4c 02 00 00    	jne    f0101669 <mem_init+0x847>f01014172233,98051
f010141d:	83 c0 01             	add    $0x1,%eaxf010141d2234,98116
f0101420:	39 c2                	cmp    %eax,%edxf01014202236,98195
f0101422:	75 f0                	jne    f0101414 <mem_init+0x5f2>f01014222237,98244
	page_free_list = fl;page_free_list2238,98309
f0101424:	8b 45 cc             	mov    -0x34(%ebp),%eaxf01014242239,98331
f0101427:	89 83 94 1f 00 00    	mov    %eax,0x1f94(%ebx)f01014272240,98387
f010142d:	83 ec 0c             	sub    $0xc,%espf010142d2242,98461
f0101430:	57                   	push   %edif01014302243,98510
f0101431:	e8 56 f8 ff ff       	call   f0100c8c <page_free>f01014312244,98554
f0101436:	83 c4 04             	add    $0x4,%espf01014362246,98631
f0101439:	ff 75 d4             	pushl  -0x2c(%ebp)f01014392247,98680
f010143c:	e8 4b f8 ff ff       	call   f0100c8c <page_free>f010143c2248,98731
f0101441:	83 c4 04             	add    $0x4,%espf01014412250,98808
f0101444:	ff 75 d0             	pushl  -0x30(%ebp)f01014442251,98857
f0101447:	e8 40 f8 ff ff       	call   f0100c8c <page_free>f01014472252,98908
f010144c:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf010144c2254,99017
f0101452:	83 c4 10             	add    $0x10,%espf01014522255,99074
f0101455:	e9 33 02 00 00       	jmp    f010168d <mem_init+0x86b>f01014552256,99124
f010145a:	8d 83 09 ed fe ff    	lea    -0x112f7(%ebx),%eaxf010145a2258,99221
f0101460:	50                   	push   %eaxf01014602259,99280
f0101461:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01014612260,99324
f0101467:	50                   	push   %eaxf01014672261,99383
f0101468:	68 44 02 00 00       	push   $0x244f01014682262,99427
f010146d:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010146d2263,99473
f0101473:	50                   	push   %eaxf01014732264,99532
f0101474:	e8 20 ec ff ff       	call   f0100099 <_panic>f01014742265,99576
f0101479:	8d 83 1f ed fe ff    	lea    -0x112e1(%ebx),%eaxf01014792267,99665
f010147f:	50                   	push   %eaxf010147f2268,99724
f0101480:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01014802269,99768
f0101486:	50                   	push   %eaxf01014862270,99827
f0101487:	68 45 02 00 00       	push   $0x245f01014872271,99871
f010148c:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010148c2272,99917
f0101492:	50                   	push   %eaxf01014922273,99976
f0101493:	e8 01 ec ff ff       	call   f0100099 <_panic>f01014932274,100020
f0101498:	8d 83 35 ed fe ff    	lea    -0x112cb(%ebx),%eaxf01014982276,100109
f010149e:	50                   	push   %eaxf010149e2277,100168
f010149f:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf010149f2278,100212
f01014a5:	50                   	push   %eaxf01014a52279,100271
f01014a6:	68 46 02 00 00       	push   $0x246f01014a62280,100315
f01014ab:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01014ab2281,100361
f01014b1:	50                   	push   %eaxf01014b12282,100420
f01014b2:	e8 e2 eb ff ff       	call   f0100099 <_panic>f01014b22283,100464
f01014b7:	8d 83 4b ed fe ff    	lea    -0x112b5(%ebx),%eaxf01014b72285,100549
f01014bd:	50                   	push   %eaxf01014bd2286,100608
f01014be:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01014be2287,100652
f01014c4:	50                   	push   %eaxf01014c42288,100711
f01014c5:	68 49 02 00 00       	push   $0x249f01014c52289,100755
f01014ca:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01014ca2290,100801
f01014d0:	50                   	push   %eaxf01014d02291,100860
f01014d1:	e8 c3 eb ff ff       	call   f0100099 <_panic>f01014d12292,100904
f01014d6:	8d 83 c8 eb fe ff    	lea    -0x11438(%ebx),%eaxf01014d62294,101003
f01014dc:	50                   	push   %eaxf01014dc2295,101062
f01014dd:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01014dd2296,101106
f01014e3:	50                   	push   %eaxf01014e32297,101165
f01014e4:	68 4a 02 00 00       	push   $0x24af01014e42298,101209
f01014e9:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01014e92299,101255
f01014ef:	50                   	push   %eaxf01014ef2300,101314
f01014f0:	e8 a4 eb ff ff       	call   f0100099 <_panic>f01014f02301,101358
f01014f5:	8d 83 5d ed fe ff    	lea    -0x112a3(%ebx),%eaxf01014f52303,101454
f01014fb:	50                   	push   %eaxf01014fb2304,101513
f01014fc:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01014fc2305,101557
f0101502:	50                   	push   %eaxf01015022306,101616
f0101503:	68 4b 02 00 00       	push   $0x24bf01015032307,101660
f0101508:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015082308,101706
f010150e:	50                   	push   %eaxf010150e2309,101765
f010150f:	e8 85 eb ff ff       	call   f0100099 <_panic>f010150f2310,101809
f0101514:	8d 83 7a ed fe ff    	lea    -0x11286(%ebx),%eaxf01015142312,101905
f010151a:	50                   	push   %eaxf010151a2313,101964
f010151b:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf010151b2314,102008
f0101521:	50                   	push   %eaxf01015212315,102067
f0101522:	68 4c 02 00 00       	push   $0x24cf01015222316,102111
f0101527:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015272317,102157
f010152d:	50                   	push   %eaxf010152d2318,102216
f010152e:	e8 66 eb ff ff       	call   f0100099 <_panic>f010152e2319,102260
f0101533:	8d 83 97 ed fe ff    	lea    -0x11269(%ebx),%eaxf01015332321,102356
f0101539:	50                   	push   %eaxf01015392322,102415
f010153a:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf010153a2323,102459
f0101540:	50                   	push   %eaxf01015402324,102518
f0101541:	68 4d 02 00 00       	push   $0x24df01015412325,102562
f0101546:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015462326,102608
f010154c:	50                   	push   %eaxf010154c2327,102667
f010154d:	e8 47 eb ff ff       	call   f0100099 <_panic>f010154d2328,102711
f0101552:	8d 83 b4 ed fe ff    	lea    -0x1124c(%ebx),%eaxf01015522330,102793
f0101558:	50                   	push   %eaxf01015582331,102852
f0101559:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01015592332,102896
f010155f:	50                   	push   %eaxf010155f2333,102955
f0101560:	68 54 02 00 00       	push   $0x254f01015602334,102999
f0101565:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015652335,103045
f010156b:	50                   	push   %eaxf010156b2336,103104
f010156c:	e8 28 eb ff ff       	call   f0100099 <_panic>f010156c2337,103148
f0101571:	8d 83 09 ed fe ff    	lea    -0x112f7(%ebx),%eaxf01015712339,103237
f0101577:	50                   	push   %eaxf01015772340,103296
f0101578:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01015782341,103340
f010157e:	50                   	push   %eaxf010157e2342,103399
f010157f:	68 5b 02 00 00       	push   $0x25bf010157f2343,103443
f0101584:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015842344,103489
f010158a:	50                   	push   %eaxf010158a2345,103548
f010158b:	e8 09 eb ff ff       	call   f0100099 <_panic>f010158b2346,103592
f0101590:	8d 83 1f ed fe ff    	lea    -0x112e1(%ebx),%eaxf01015902348,103681
f0101596:	50                   	push   %eaxf01015962349,103740
f0101597:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01015972350,103784
f010159d:	50                   	push   %eaxf010159d2351,103843
f010159e:	68 5c 02 00 00       	push   $0x25cf010159e2352,103887
f01015a3:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015a32353,103933
f01015a9:	50                   	push   %eaxf01015a92354,103992
f01015aa:	e8 ea ea ff ff       	call   f0100099 <_panic>f01015aa2355,104036
f01015af:	8d 83 35 ed fe ff    	lea    -0x112cb(%ebx),%eaxf01015af2357,104125
f01015b5:	50                   	push   %eaxf01015b52358,104184
f01015b6:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01015b62359,104228
f01015bc:	50                   	push   %eaxf01015bc2360,104287
f01015bd:	68 5d 02 00 00       	push   $0x25df01015bd2361,104331
f01015c2:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015c22362,104377
f01015c8:	50                   	push   %eaxf01015c82363,104436
f01015c9:	e8 cb ea ff ff       	call   f0100099 <_panic>f01015c92364,104480
f01015ce:	8d 83 4b ed fe ff    	lea    -0x112b5(%ebx),%eaxf01015ce2366,104565
f01015d4:	50                   	push   %eaxf01015d42367,104624
f01015d5:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01015d52368,104668
f01015db:	50                   	push   %eaxf01015db2369,104727
f01015dc:	68 5f 02 00 00       	push   $0x25ff01015dc2370,104771
f01015e1:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01015e12371,104817
f01015e7:	50                   	push   %eaxf01015e72372,104876
f01015e8:	e8 ac ea ff ff       	call   f0100099 <_panic>f01015e82373,104920
f01015ed:	8d 83 c8 eb fe ff    	lea    -0x11438(%ebx),%eaxf01015ed2375,105019
f01015f3:	50                   	push   %eaxf01015f32376,105078
f01015f4:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01015f42377,105122
f01015fa:	50                   	push   %eaxf01015fa2378,105181
f01015fb:	68 60 02 00 00       	push   $0x260f01015fb2379,105225
f0101600:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01016002380,105271
f0101606:	50                   	push   %eaxf01016062381,105330
f0101607:	e8 8d ea ff ff       	call   f0100099 <_panic>f01016072382,105374
f010160c:	8d 83 b4 ed fe ff    	lea    -0x1124c(%ebx),%eaxf010160c2384,105456
f0101612:	50                   	push   %eaxf01016122385,105515
f0101613:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01016132386,105559
f0101619:	50                   	push   %eaxf01016192387,105618
f010161a:	68 61 02 00 00       	push   $0x261f010161a2388,105662
f010161f:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010161f2389,105708
f0101625:	50                   	push   %eaxf01016252390,105767
f0101626:	e8 6e ea ff ff       	call   f0100099 <_panic>f01016262391,105811
f010162b:	8d 83 c3 ed fe ff    	lea    -0x1123d(%ebx),%eaxf010162b2393,105908
f0101631:	50                   	push   %eaxf01016312394,105967
f0101632:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01016322395,106011
f0101638:	50                   	push   %eaxf01016382396,106070
f0101639:	68 66 02 00 00       	push   $0x266f01016392397,106114
f010163e:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010163e2398,106160
f0101644:	50                   	push   %eaxf01016442399,106219
f0101645:	e8 4f ea ff ff       	call   f0100099 <_panic>f01016452400,106263
f010164a:	8d 83 e1 ed fe ff    	lea    -0x1121f(%ebx),%eaxf010164a2402,106346
f0101650:	50                   	push   %eaxf01016502403,106405
f0101651:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01016512404,106449
f0101657:	50                   	push   %eaxf01016572405,106508
f0101658:	68 67 02 00 00       	push   $0x267f01016582406,106552
f010165d:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010165d2407,106598
f0101663:	50                   	push   %eaxf01016632408,106657
f0101664:	e8 30 ea ff ff       	call   f0100099 <_panic>f01016642409,106701
f0101669:	8d 83 f1 ed fe ff    	lea    -0x1120f(%ebx),%eaxf01016692411,106779
f010166f:	50                   	push   %eaxf010166f2412,106838
f0101670:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01016702413,106882
f0101676:	50                   	push   %eaxf01016762414,106941
f0101677:	68 6a 02 00 00       	push   $0x26af01016772415,106985
f010167c:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010167c2416,107031
f0101682:	50                   	push   %eaxf01016822417,107090
f0101683:	e8 11 ea ff ff       	call   f0100099 <_panic>f01016832418,107134
f0101688:	83 ee 01             	sub    $0x1,%esif01016882420,107202
f010168b:	8b 00                	mov    (%eax),%eaxf010168b2422,107300
f010168d:	85 c0                	test   %eax,%eaxf010168d2423,107351
f010168f:	75 f7                	jne    f0101688 <mem_init+0x866>f010168f2424,107400
f0101691:	85 f6                	test   %esi,%esif01016912426,107486
f0101693:	0f 85 83 00 00 00    	jne    f010171c <mem_init+0x8fa>f01016932427,107535
f0101699:	83 ec 0c             	sub    $0xc,%espf01016992429,107645
f010169c:	8d 83 e8 eb fe ff    	lea    -0x11418(%ebx),%eaxf010169c2430,107694
f01016a2:	50                   	push   %eaxf01016a22431,107753
f01016a3:	e8 1f 02 00 00       	call   f01018c7 <cprintf>f01016a32432,107797
	pp0 = pp1 = pp2 = 0;pp02437,107936
f01016a8:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f01016a82439,107990
f01016af:	e8 4a f5 ff ff       	call   f0100bfe <page_alloc>f01016af2440,108041
f01016b4:	89 c7                	mov    %eax,%edif01016b42441,108102
f01016b6:	83 c4 10             	add    $0x10,%espf01016b62442,108151
f01016b9:	85 c0                	test   %eax,%eaxf01016b92443,108201
f01016bb:	74 7e                	je     f010173b <mem_init+0x919>f01016bb2444,108250
f01016bd:	83 ec 0c             	sub    $0xc,%espf01016bd2446,108347
f01016c0:	6a 00                	push   $0x0f01016c02447,108396
f01016c2:	e8 37 f5 ff ff       	call   f0100bfe <page_alloc>f01016c22448,108440
f01016c7:	89 c6                	mov    %eax,%esif01016c72449,108501
f01016c9:	83 c4 10             	add    $0x10,%espf01016c92450,108550
f01016cc:	85 c0                	test   %eax,%eaxf01016cc2451,108600
f01016ce:	0f 84 86 00 00 00    	je     f010175a <mem_init+0x938>f01016ce2452,108649
f01016d4:	83 ec 0c             	sub    $0xc,%espf01016d42454,108746
f01016d7:	6a 00                	push   $0x0f01016d72455,108795
f01016d9:	e8 20 f5 ff ff       	call   f0100bfe <page_alloc>f01016d92456,108839
f01016de:	83 c4 10             	add    $0x10,%espf01016de2457,108900
f01016e1:	85 c0                	test   %eax,%eaxf01016e12458,108950
f01016e3:	0f 84 90 00 00 00    	je     f0101779 <mem_init+0x957>f01016e32459,108999
f01016e9:	39 f7                	cmp    %esi,%edif01016e92463,109107
f01016eb:	0f 84 a7 00 00 00    	je     f0101798 <mem_init+0x976>f01016eb2464,109156
f01016f1:	39 c7                	cmp    %eax,%edif01016f12466,109263
f01016f3:	74 08                	je     f01016fd <mem_init+0x8db>f01016f32467,109312
f01016f5:	39 c6                	cmp    %eax,%esif01016f52468,109377
f01016f7:	0f 85 ba 00 00 00    	jne    f01017b7 <mem_init+0x995>f01016f72469,109426
f01016fd:	8d 83 c8 eb fe ff    	lea    -0x11438(%ebx),%eaxf01016fd2470,109491
f0101703:	50                   	push   %eaxf01017032471,109550
f0101704:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01017042472,109594
f010170a:	50                   	push   %eaxf010170a2473,109653
f010170b:	68 d6 02 00 00       	push   $0x2d6f010170b2474,109697
f0101710:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01017102475,109743
f0101716:	50                   	push   %eaxf01017162476,109802
f0101717:	e8 7d e9 ff ff       	call   f0100099 <_panic>f01017172477,109846
f010171c:	8d 83 fb ed fe ff    	lea    -0x11205(%ebx),%eaxf010171c2479,109924
f0101722:	50                   	push   %eaxf01017222480,109983
f0101723:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01017232481,110027
f0101729:	50                   	push   %eaxf01017292482,110086
f010172a:	68 77 02 00 00       	push   $0x277f010172a2483,110130
f010172f:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010172f2484,110176
f0101735:	50                   	push   %eaxf01017352485,110235
f0101736:	e8 5e e9 ff ff       	call   f0100099 <_panic>f01017362486,110279
f010173b:	8d 83 09 ed fe ff    	lea    -0x112f7(%ebx),%eaxf010173b2488,110368
f0101741:	50                   	push   %eaxf01017412489,110427
f0101742:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01017422490,110471
f0101748:	50                   	push   %eaxf01017482491,110530
f0101749:	68 d0 02 00 00       	push   $0x2d0f01017492492,110574
f010174e:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010174e2493,110620
f0101754:	50                   	push   %eaxf01017542494,110679
f0101755:	e8 3f e9 ff ff       	call   f0100099 <_panic>f01017552495,110723
f010175a:	8d 83 1f ed fe ff    	lea    -0x112e1(%ebx),%eaxf010175a2497,110812
f0101760:	50                   	push   %eaxf01017602498,110871
f0101761:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01017612499,110915
f0101767:	50                   	push   %eaxf01017672500,110974
f0101768:	68 d1 02 00 00       	push   $0x2d1f01017682501,111018
f010176d:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010176d2502,111064
f0101773:	50                   	push   %eaxf01017732503,111123
f0101774:	e8 20 e9 ff ff       	call   f0100099 <_panic>f01017742504,111167
f0101779:	8d 83 35 ed fe ff    	lea    -0x112cb(%ebx),%eaxf01017792506,111256
f010177f:	50                   	push   %eaxf010177f2507,111315
f0101780:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01017802508,111359
f0101786:	50                   	push   %eaxf01017862509,111418
f0101787:	68 d2 02 00 00       	push   $0x2d2f01017872510,111462
f010178c:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf010178c2511,111508
f0101792:	50                   	push   %eaxf01017922512,111567
f0101793:	e8 01 e9 ff ff       	call   f0100099 <_panic>f01017932513,111611
f0101798:	8d 83 4b ed fe ff    	lea    -0x112b5(%ebx),%eaxf01017982515,111696
f010179e:	50                   	push   %eaxf010179e2516,111755
f010179f:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf010179f2517,111799
f01017a5:	50                   	push   %eaxf01017a52518,111858
f01017a6:	68 d5 02 00 00       	push   $0x2d5f01017a62519,111902
f01017ab:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01017ab2520,111948
f01017b1:	50                   	push   %eaxf01017b12521,112007
f01017b2:	e8 e2 e8 ff ff       	call   f0100099 <_panic>f01017b22522,112051
	fl = page_free_list;fl2525,112158
	page_free_list = 0;page_free_list2526,112180
f01017b7:	c7 83 94 1f 00 00 00 	movl   $0x0,0x1f94(%ebx)f01017b72527,112201
f01017be:	00 00 00 f01017be2528,112258
f01017c1:	83 ec 0c             	sub    $0xc,%espf01017c12532,112333
f01017c4:	6a 00                	push   $0x0f01017c42533,112382
f01017c6:	e8 33 f4 ff ff       	call   f0100bfe <page_alloc>f01017c62534,112426
f01017cb:	83 c4 10             	add    $0x10,%espf01017cb2535,112487
f01017ce:	85 c0                	test   %eax,%eaxf01017ce2536,112537
f01017d0:	74 1f                	je     f01017f1 <mem_init+0x9cf>f01017d02537,112586
f01017d2:	8d 83 b4 ed fe ff    	lea    -0x1124c(%ebx),%eaxf01017d22538,112651
f01017d8:	50                   	push   %eaxf01017d82539,112710
f01017d9:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01017d92540,112754
f01017df:	50                   	push   %eaxf01017df2541,112813
f01017e0:	68 dd 02 00 00       	push   $0x2ddf01017e02542,112857
f01017e5:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01017e52543,112903
f01017eb:	50                   	push   %eaxf01017eb2544,112962
f01017ec:	e8 a8 e8 ff ff       	call   f0100099 <_panic>f01017ec2545,113006
f01017f1:	8d 83 08 ec fe ff    	lea    -0x113f8(%ebx),%eaxf01017f12552,113290
f01017f7:	50                   	push   %eaxf01017f72553,113349
f01017f8:	8d 83 5e ec fe ff    	lea    -0x113a2(%ebx),%eaxf01017f82554,113393
f01017fe:	50                   	push   %eaxf01017fe2555,113452
f01017ff:	68 e3 02 00 00       	push   $0x2e3f01017ff2556,113496
f0101804:	8d 83 38 ec fe ff    	lea    -0x113c8(%ebx),%eaxf01018042557,113542
f010180a:	50                   	push   %eaxf010180a2558,113601
f010180b:	e8 89 e8 ff ff       	call   f0100099 <_panic>f010180b2559,113645
f0101810 <page_insert>:f01018102561,113703
f0101810:	55                   	push   %ebpf01018102563,113729
f0101811:	89 e5                	mov    %esp,%ebpf01018112564,113773
f0101813:	b8 00 00 00 00       	mov    $0x0,%eaxf01018132566,113824
f0101818:	5d                   	pop    %ebpf01018182567,113873
f0101819:	c3                   	ret    f01018192568,113917
f010181a <page_lookup>:f010181a2570,113958
f010181a:	55                   	push   %ebpf010181a2572,113984
f010181b:	89 e5                	mov    %esp,%ebpf010181b2573,114028
f010181d:	b8 00 00 00 00       	mov    $0x0,%eaxf010181d2575,114079
f0101822:	5d                   	pop    %ebpf01018222576,114128
f0101823:	c3                   	ret    f01018232577,114172
f0101824 <page_remove>:f01018242579,114213
f0101824:	55                   	push   %ebpf01018242581,114239
f0101825:	89 e5                	mov    %esp,%ebpf01018252582,114283
f0101827:	5d                   	pop    %ebpf01018272584,114334
f0101828:	c3                   	ret    f01018282585,114378
f0101829 <tlb_invalidate>:f01018292587,114419
f0101829:	55                   	push   %ebpf01018292589,114448
f010182a:	89 e5                	mov    %esp,%ebpf010182a2590,114492
static inline voidstatic2593,114544
f010182c:	8b 45 0c             	mov    0xc(%ebp),%eaxf010182c2597,114640
f010182f:	0f 01 38             	invlpg (%eax)f010182f2598,114694
f0101832:	5d                   	pop    %ebpf01018322600,114742
f0101833:	c3                   	ret    f01018332601,114786
f0101834 <__x86.get_pc_thunk.dx>:f01018342603,114827
f0101834:	8b 14 24             	mov    (%esp),%edxf01018342604,114861
f0101837:	c3                   	ret    f01018372605,114912
f0101838 <__x86.get_pc_thunk.cx>:f01018382607,114953
f0101838:	8b 0c 24             	mov    (%esp),%ecxf01018382608,114987
f010183b:	c3                   	ret    f010183b2609,115038
f010183c <__x86.get_pc_thunk.si>:f010183c2611,115079
f010183c:	8b 34 24             	mov    (%esp),%esif010183c2612,115113
f010183f:	c3                   	ret    f010183f2613,115164
f0101840 <mc146818_read>:f01018402615,115205
unsignedunsigned2619,115258
f0101840:	55                   	push   %ebpf01018402622,115297
f0101841:	89 e5                	mov    %esp,%ebpf01018412623,115341
f0101843:	8b 45 08             	mov    0x8(%ebp),%eaxf01018432625,115447
f0101846:	ba 70 00 00 00       	mov    $0x70,%edxf01018462626,115501
f010184b:	ee                   	out    %al,(%dx)f010184b2627,115551
f010184c:	ba 71 00 00 00       	mov    $0x71,%edxf010184c2629,115656
f0101851:	ec                   	in     (%dx),%alf01018512630,115706
f0101852:	0f b6 c0             	movzbl %al,%eaxf01018522633,115798
f0101855:	5d                   	pop    %ebpf01018552635,115848
f0101856:	c3                   	ret    f01018562636,115892
f0101857 <mc146818_write>:f01018572638,115933
voidvoid2640,115961
f0101857:	55                   	push   %ebpf01018572643,116013
f0101858:	89 e5                	mov    %esp,%ebpf01018582644,116057
f010185a:	8b 45 08             	mov    0x8(%ebp),%eaxf010185a2646,116163
f010185d:	ba 70 00 00 00       	mov    $0x70,%edxf010185d2647,116217
f0101862:	ee                   	out    %al,(%dx)f01018622648,116267
f0101863:	8b 45 0c             	mov    0xc(%ebp),%eaxf01018632649,116316
f0101866:	ba 71 00 00 00       	mov    $0x71,%edxf01018662650,116370
f010186b:	ee                   	out    %al,(%dx)f010186b2651,116420
f010186c:	5d                   	pop    %ebpf010186c2655,116515
f010186d:	c3                   	ret    f010186d2656,116559
f010186e <putch>:f010186e2658,116600
static voidstatic2662,116644
f010186e:	55                   	push   %ebpf010186e2665,116682
f010186f:	89 e5                	mov    %esp,%ebpf010186f2666,116726
f0101871:	53                   	push   %ebxf01018712667,116775
f0101872:	83 ec 10             	sub    $0x10,%espf01018722668,116819
f0101875:	e8 d5 e8 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01018752669,116869
f010187a:	81 c3 8e 2a 01 00    	add    $0x12a8e,%ebxf010187a2670,116941
f0101880:	ff 75 08             	pushl  0x8(%ebp)f01018802672,117009
f0101883:	e8 3e ee ff ff       	call   f01006c6 <cputchar>f01018832673,117058
f0101888:	83 c4 10             	add    $0x10,%espf01018882676,117128
f010188b:	8b 5d fc             	mov    -0x4(%ebp),%ebxf010188b2677,117178
f010188e:	c9                   	leave  f010188e2678,117233
f010188f:	c3                   	ret    f010188f2679,117273
f0101890 <vcprintf>:f01018902681,117314
intint2683,117336
f0101890:	55                   	push   %ebpf01018902686,117380
f0101891:	89 e5                	mov    %esp,%ebpf01018912687,117424
f0101893:	53                   	push   %ebxf01018932688,117473
f0101894:	83 ec 14             	sub    $0x14,%espf01018942689,117517
f0101897:	e8 b3 e8 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01018972690,117567
f010189c:	81 c3 6c 2a 01 00    	add    $0x12a6c,%ebxf010189c2691,117639
f01018a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f01018a22693,117706
f01018a9:	ff 75 0c             	pushl  0xc(%ebp)f01018a92696,117803
f01018ac:	ff 75 08             	pushl  0x8(%ebp)f01018ac2697,117852
f01018af:	8d 45 f4             	lea    -0xc(%ebp),%eaxf01018af2698,117901
f01018b2:	50                   	push   %eaxf01018b22699,117956
f01018b3:	8d 83 66 d5 fe ff    	lea    -0x12a9a(%ebx),%eaxf01018b32700,118000
f01018b9:	50                   	push   %eaxf01018b92701,118059
f01018ba:	e8 18 04 00 00       	call   f0101cd7 <vprintfmt>f01018ba2702,118103
f01018bf:	8b 45 f4             	mov    -0xc(%ebp),%eaxf01018bf2705,118178
f01018c2:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01018c22706,118233
f01018c5:	c9                   	leave  f01018c52707,118288
f01018c6:	c3                   	ret    f01018c62708,118328
f01018c7 <cprintf>:f01018c72710,118369
intint2712,118390
f01018c7:	55                   	push   %ebpf01018c72715,118426
f01018c8:	89 e5                	mov    %esp,%ebpf01018c82716,118470
f01018ca:	83 ec 10             	sub    $0x10,%espf01018ca2717,118519
f01018cd:	8d 45 0c             	lea    0xc(%ebp),%eaxf01018cd2722,118613
	cnt = vcprintf(fmt, ap);cnt2723,118667
f01018d0:	50                   	push   %eaxf01018d02724,118693
f01018d1:	ff 75 08             	pushl  0x8(%ebp)f01018d12725,118737
f01018d4:	e8 b7 ff ff ff       	call   f0101890 <vcprintf>f01018d42726,118786
f01018d9:	c9                   	leave  f01018d92731,118874
f01018da:	c3                   	ret    f01018da2732,118914
f01018db <stab_binsearch>:f01018db2734,118955
static voidstatic2737,119031
f01018db:	55                   	push   %ebpf01018db2741,119157
f01018dc:	89 e5                	mov    %esp,%ebpf01018dc2742,119201
f01018de:	57                   	push   %edif01018de2743,119250
f01018df:	56                   	push   %esif01018df2744,119294
f01018e0:	53                   	push   %ebxf01018e02745,119338
f01018e1:	83 ec 14             	sub    $0x14,%espf01018e12746,119382
f01018e4:	89 45 ec             	mov    %eax,-0x14(%ebp)f01018e42747,119432
f01018e7:	89 55 e4             	mov    %edx,-0x1c(%ebp)f01018e72748,119488
f01018ea:	89 4d e0             	mov    %ecx,-0x20(%ebp)f01018ea2749,119544
f01018ed:	8b 7d 08             	mov    0x8(%ebp),%edif01018ed2750,119600
f01018f0:	8b 32                	mov    (%edx),%esif01018f02752,119713
f01018f2:	8b 01                	mov    (%ecx),%eaxf01018f22753,119764
f01018f4:	89 45 f0             	mov    %eax,-0x10(%ebp)f01018f42754,119815
f01018f7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)f01018f72755,119871
f01018fe:	eb 2f                	jmp    f010192f <stab_binsearch+0x54>f01018fe2758,119946
f0101900:	83 e8 01             	sub    $0x1,%eaxf01019002764,120155
f0101903:	39 c6                	cmp    %eax,%esif01019032766,120248
f0101905:	7f 49                	jg     f0101950 <stab_binsearch+0x75>f01019052767,120297
f0101907:	0f b6 0a             	movzbl (%edx),%ecxf01019072768,120367
f010190a:	83 ea 0c             	sub    $0xc,%edxf010190a2769,120418
f010190d:	39 f9                	cmp    %edi,%ecxf010190d2770,120467
f010190f:	75 ef                	jne    f0101900 <stab_binsearch+0x25>f010190f2771,120516
		any_matches = 1;any_matches2776,120630
f0101911:	8d 14 40             	lea    (%eax,%eax,2),%edxf01019112778,120682
f0101914:	8b 4d ec             	mov    -0x14(%ebp),%ecxf01019142779,120740
f0101917:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edxf01019172780,120796
f010191b:	3b 55 0c             	cmp    0xc(%ebp),%edxf010191b2781,120857
f010191e:	73 35                	jae    f0101955 <stab_binsearch+0x7a>f010191e2782,120911
f0101920:	8b 75 e4             	mov    -0x1c(%ebp),%esif01019202784,121002
f0101923:	89 06                	mov    %eax,(%esi)f01019232785,121058
			l = true_m + 1;l2786,121109
f0101925:	8d 73 01             	lea    0x1(%ebx),%esif01019252787,121128
		any_matches = 1;any_matches2788,121182
f0101928:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01019282789,121201
f010192f:	3b 75 f0             	cmp    -0x10(%ebp),%esif010192f2791,121275
f0101932:	7f 4e                	jg     f0101982 <stab_binsearch+0xa7>f01019322792,121331
f0101934:	8b 45 f0             	mov    -0x10(%ebp),%eaxf01019342794,121441
f0101937:	01 f0                	add    %esi,%eaxf01019372795,121497
f0101939:	89 c3                	mov    %eax,%ebxf01019392796,121546
f010193b:	c1 eb 1f             	shr    $0x1f,%ebxf010193b2797,121595
f010193e:	01 c3                	add    %eax,%ebxf010193e2798,121645
f0101940:	d1 fb                	sar    %ebxf01019402799,121694
f0101942:	8d 04 5b             	lea    (%ebx,%ebx,2),%eaxf01019422800,121738
f0101945:	8b 4d ec             	mov    -0x14(%ebp),%ecxf01019452801,121796
f0101948:	8d 54 81 04          	lea    0x4(%ecx,%eax,4),%edxf01019482802,121852
f010194c:	89 d8                	mov    %ebx,%eaxf010194c2803,121913
f010194e:	eb b3                	jmp    f0101903 <stab_binsearch+0x28>f010194e2805,122006
			l = true_m + 1;l2806,122076
f0101950:	8d 73 01             	lea    0x1(%ebx),%esif01019502807,122095
f0101953:	eb da                	jmp    f010192f <stab_binsearch+0x54>f01019532809,122162
f0101955:	3b 55 0c             	cmp    0xc(%ebp),%edxf01019552811,122272
f0101958:	76 14                	jbe    f010196e <stab_binsearch+0x93>f01019582812,122326
f010195a:	83 e8 01             	sub    $0x1,%eaxf010195a2814,122422
f010195d:	89 45 f0             	mov    %eax,-0x10(%ebp)f010195d2815,122471
f0101960:	8b 5d e0             	mov    -0x20(%ebp),%ebxf01019602816,122527
f0101963:	89 03                	mov    %eax,(%ebx)f01019632817,122583
		any_matches = 1;any_matches2818,122634
f0101965:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01019652819,122653
f010196c:	eb c1                	jmp    f010192f <stab_binsearch+0x54>f010196c2820,122709
			r = m - 1;r2821,122779
f010196e:	8b 75 e4             	mov    -0x1c(%ebp),%esif010196e2826,122901
f0101971:	89 06                	mov    %eax,(%esi)f01019712827,122957
			l = m;l2828,123008
f0101973:	83 45 0c 01          	addl   $0x1,0xc(%ebp)f01019732830,123029
f0101977:	89 c6                	mov    %eax,%esif01019772831,123083
		any_matches = 1;any_matches2832,123132
f0101979:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01019792833,123151
f0101980:	eb ad                	jmp    f010192f <stab_binsearch+0x54>f01019802834,123207
f0101982:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)f01019822839,123304
f0101986:	74 16                	je     f010199e <stab_binsearch+0xc3>f01019862840,123360
f0101988:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01019882845,123545
f010198b:	8b 00                	mov    (%eax),%eaxf010198b2846,123601
f010198d:	8b 75 e4             	mov    -0x1c(%ebp),%esif010198d2848,123704
f0101990:	8b 0e                	mov    (%esi),%ecxf01019902849,123760
f0101992:	8d 14 40             	lea    (%eax,%eax,2),%edxf01019922850,123811
f0101995:	8b 75 ec             	mov    -0x14(%ebp),%esif01019952851,123869
f0101998:	8d 54 96 04          	lea    0x4(%esi,%edx,4),%edxf01019982852,123925
f010199c:	eb 12                	jmp    f01019b0 <stab_binsearch+0xd5>f010199c2854,124012
f010199e:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf010199e2856,124118
f01019a1:	8b 00                	mov    (%eax),%eaxf01019a12857,124174
f01019a3:	83 e8 01             	sub    $0x1,%eaxf01019a32858,124225
f01019a6:	8b 7d e0             	mov    -0x20(%ebp),%edif01019a62859,124274
f01019a9:	89 07                	mov    %eax,(%edi)f01019a92860,124330
f01019ab:	eb 16                	jmp    f01019c3 <stab_binsearch+0xe8>f01019ab2861,124381
f01019ad:	83 e8 01             	sub    $0x1,%eaxf01019ad2863,124463
f01019b0:	39 c1                	cmp    %eax,%ecxf01019b02865,124538
f01019b2:	7d 0a                	jge    f01019be <stab_binsearch+0xe3>f01019b22866,124587
f01019b4:	0f b6 1a             	movzbl (%edx),%ebxf01019b42868,124709
f01019b7:	83 ea 0c             	sub    $0xc,%edxf01019b72869,124760
f01019ba:	39 fb                	cmp    %edi,%ebxf01019ba2870,124809
f01019bc:	75 ef                	jne    f01019ad <stab_binsearch+0xd2>f01019bc2871,124858
f01019be:	8b 7d e4             	mov    -0x1c(%ebp),%edif01019be2874,124969
f01019c1:	89 07                	mov    %eax,(%edi)f01019c12875,125025
f01019c3:	83 c4 14             	add    $0x14,%espf01019c32878,125081
f01019c6:	5b                   	pop    %ebxf01019c62879,125131
f01019c7:	5e                   	pop    %esif01019c72880,125175
f01019c8:	5f                   	pop    %edif01019c82881,125219
f01019c9:	5d                   	pop    %ebpf01019c92882,125263
f01019ca:	c3                   	ret    f01019ca2883,125307
f01019cb <debuginfo_eip>:f01019cb2885,125348
intint2889,125478
f01019cb:	55                   	push   %ebpf01019cb2892,125541
f01019cc:	89 e5                	mov    %esp,%ebpf01019cc2893,125585
f01019ce:	57                   	push   %edif01019ce2894,125634
f01019cf:	56                   	push   %esif01019cf2895,125678
f01019d0:	53                   	push   %ebxf01019d02896,125722
f01019d1:	83 ec 2c             	sub    $0x2c,%espf01019d12897,125766
f01019d4:	e8 5f fe ff ff       	call   f0101838 <__x86.get_pc_thunk.cx>f01019d42898,125816
f01019d9:	81 c1 2f 29 01 00    	add    $0x1292f,%ecxf01019d92899,125888
f01019df:	89 4d d4             	mov    %ecx,-0x2c(%ebp)f01019df2900,125941
f01019e2:	8b 5d 08             	mov    0x8(%ebp),%ebxf01019e22901,125997
f01019e5:	8b 7d 0c             	mov    0xc(%ebp),%edif01019e52902,126051
	const struct Stab *stabs, *stab_end;const2903,126105
f01019e8:	8d 81 06 ee fe ff    	lea    -0x111fa(%ecx),%eaxf01019e82909,126277
f01019ee:	89 07                	mov    %eax,(%edi)f01019ee2910,126336
f01019f0:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)f01019f02912,126408
f01019f7:	89 47 08             	mov    %eax,0x8(%edi)f01019f72914,126496
f01019fa:	c7 47 0c 09 00 00 00 	movl   $0x9,0xc(%edi)f01019fa2916,126577
f0101a01:	89 5f 10             	mov    %ebx,0x10(%edi)f0101a012918,126658
f0101a04:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)f0101a042920,126737
f0101a0b:	81 fb ff ff 7f ef    	cmp    $0xef7fffff,%ebxf0101a0b2924,126849
f0101a11:	0f 86 f4 00 00 00    	jbe    f0101b0b <debuginfo_eip+0x140>f0101a112925,126905
f0101a17:	c7 c0 a9 85 10 f0    	mov    $0xf01085a9,%eaxf0101a172932,127147
f0101a1d:	39 81 fc ff ff ff    	cmp    %eax,-0x4(%ecx)f0101a1d2933,127203
f0101a23:	0f 86 88 01 00 00    	jbe    f0101bb1 <debuginfo_eip+0x1e6>f0101a232934,127258
f0101a29:	8b 75 d4             	mov    -0x2c(%ebp),%esif0101a292935,127328
f0101a2c:	c7 c0 f7 a2 10 f0    	mov    $0xf010a2f7,%eaxf0101a2c2936,127384
f0101a32:	80 78 ff 00          	cmpb   $0x0,-0x1(%eax)f0101a322937,127440
f0101a36:	0f 85 7c 01 00 00    	jne    f0101bb8 <debuginfo_eip+0x1ed>f0101a362938,127495
	lfile = 0;lfile2944,127796
f0101a3c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)f0101a3c2945,127808
	rfile = (stab_end - stabs) - 1;rfile2946,127864
f0101a43:	c7 c0 28 33 10 f0    	mov    $0xf0103328,%eaxf0101a432947,127897
f0101a49:	c7 c2 a8 85 10 f0    	mov    $0xf01085a8,%edxf0101a492948,127953
f0101a4f:	29 c2                	sub    %eax,%edxf0101a4f2949,128009
f0101a51:	c1 fa 02             	sar    $0x2,%edxf0101a512950,128058
f0101a54:	69 d2 ab aa aa aa    	imul   $0xaaaaaaab,%edx,%edxf0101a542951,128107
f0101a5a:	83 ea 01             	sub    $0x1,%edxf0101a5a2952,128168
f0101a5d:	89 55 e0             	mov    %edx,-0x20(%ebp)f0101a5d2953,128217
f0101a60:	8d 4d e0             	lea    -0x20(%ebp),%ecxf0101a602955,128325
f0101a63:	8d 55 e4             	lea    -0x1c(%ebp),%edxf0101a632956,128381
f0101a66:	83 ec 08             	sub    $0x8,%espf0101a662957,128437
f0101a69:	53                   	push   %ebxf0101a692958,128486
f0101a6a:	6a 64                	push   $0x64f0101a6a2959,128530
f0101a6c:	e8 6a fe ff ff       	call   f01018db <stab_binsearch>f0101a6c2960,128575
f0101a71:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0101a712962,128657
f0101a74:	83 c4 10             	add    $0x10,%espf0101a742963,128713
f0101a77:	85 c0                	test   %eax,%eaxf0101a772964,128763
f0101a79:	0f 84 40 01 00 00    	je     f0101bbf <debuginfo_eip+0x1f4>f0101a792965,128812
	lfun = lfile;lfun2970,128973
f0101a7f:	89 45 dc             	mov    %eax,-0x24(%ebp)f0101a7f2971,128988
	rfun = rfile;rfun2972,129044
f0101a82:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0101a822973,129059
f0101a85:	89 45 d8             	mov    %eax,-0x28(%ebp)f0101a852974,129115
f0101a88:	8d 4d d8             	lea    -0x28(%ebp),%ecxf0101a882976,129222
f0101a8b:	8d 55 dc             	lea    -0x24(%ebp),%edxf0101a8b2977,129278
f0101a8e:	83 ec 08             	sub    $0x8,%espf0101a8e2978,129334
f0101a91:	53                   	push   %ebxf0101a912979,129383
f0101a92:	6a 24                	push   $0x24f0101a922980,129427
f0101a94:	89 75 d4             	mov    %esi,-0x2c(%ebp)f0101a942981,129472
f0101a97:	c7 c0 28 33 10 f0    	mov    $0xf0103328,%eaxf0101a972982,129528
f0101a9d:	e8 39 fe ff ff       	call   f01018db <stab_binsearch>f0101a9d2983,129584
f0101aa2:	8b 75 dc             	mov    -0x24(%ebp),%esif0101aa22986,129671
f0101aa5:	83 c4 10             	add    $0x10,%espf0101aa52987,129727
f0101aa8:	3b 75 d8             	cmp    -0x28(%ebp),%esif0101aa82988,129777
f0101aab:	7f 79                	jg     f0101b26 <debuginfo_eip+0x15b>f0101aab2989,129833
f0101aad:	8d 04 76             	lea    (%esi,%esi,2),%eaxf0101aad2993,130055
f0101ab0:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101ab02994,130113
f0101ab3:	c7 c2 28 33 10 f0    	mov    $0xf0103328,%edxf0101ab32995,130169
f0101ab9:	8d 0c 82             	lea    (%edx,%eax,4),%ecxf0101ab92996,130225
f0101abc:	8b 11                	mov    (%ecx),%edxf0101abc2997,130283
f0101abe:	c7 c0 f7 a2 10 f0    	mov    $0xf010a2f7,%eaxf0101abe2998,130334
f0101ac4:	81 e8 a9 85 10 f0    	sub    $0xf01085a9,%eaxf0101ac42999,130390
f0101aca:	39 c2                	cmp    %eax,%edxf0101aca3000,130446
f0101acc:	73 09                	jae    f0101ad7 <debuginfo_eip+0x10c>f0101acc3001,130495
f0101ace:	81 c2 a9 85 10 f0    	add    $0xf01085a9,%edxf0101ace3003,130618
f0101ad4:	89 57 08             	mov    %edx,0x8(%edi)f0101ad43004,130674
f0101ad7:	8b 41 08             	mov    0x8(%ecx),%eaxf0101ad73006,130771
f0101ada:	89 47 10             	mov    %eax,0x10(%edi)f0101ada3007,130825
		lline = lfile;lline3009,130908
		rline = rfile;rline3010,130925
f0101add:	83 ec 08             	sub    $0x8,%espf0101add3014,131056
f0101ae0:	6a 3a                	push   $0x3af0101ae03015,131105
f0101ae2:	ff 77 08             	pushl  0x8(%edi)f0101ae23016,131150
f0101ae5:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101ae53017,131199
f0101ae8:	e8 1a 09 00 00       	call   f0102407 <strfind>f0101ae83018,131255
f0101aed:	2b 47 08             	sub    0x8(%edi),%eaxf0101aed3019,131313
f0101af0:	89 47 0c             	mov    %eax,0xc(%edi)f0101af03020,131367
f0101af3:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf0101af33027,131691
f0101af6:	8d 04 76             	lea    (%esi,%esi,2),%eaxf0101af63028,131747
f0101af9:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101af93029,131805
f0101afc:	c7 c2 28 33 10 f0    	mov    $0xf0103328,%edxf0101afc3030,131861
f0101b02:	8d 44 82 04          	lea    0x4(%edx,%eax,4),%eaxf0101b023031,131917
f0101b06:	83 c4 10             	add    $0x10,%espf0101b063032,131978
f0101b09:	eb 29                	jmp    f0101b34 <debuginfo_eip+0x169>f0101b093033,132028
f0101b0b:	83 ec 04             	sub    $0x4,%espf0101b0b3035,132132
f0101b0e:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101b0e3036,132181
f0101b11:	8d 83 10 ee fe ff    	lea    -0x111f0(%ebx),%eaxf0101b113037,132237
f0101b17:	50                   	push   %eaxf0101b173038,132296
f0101b18:	6a 7f                	push   $0x7ff0101b183039,132340
f0101b1a:	8d 83 1d ee fe ff    	lea    -0x111e3(%ebx),%eaxf0101b1a3040,132385
f0101b20:	50                   	push   %eaxf0101b203041,132444
f0101b21:	e8 73 e5 ff ff       	call   f0100099 <_panic>f0101b213042,132488
f0101b26:	89 5f 10             	mov    %ebx,0x10(%edi)f0101b263044,132573
		lline = lfile;lline3045,132628
f0101b29:	8b 75 e4             	mov    -0x1c(%ebp),%esif0101b293046,132645
f0101b2c:	eb af                	jmp    f0101add <debuginfo_eip+0x112>f0101b2c3047,132701
f0101b2e:	83 ee 01             	sub    $0x1,%esif0101b2e3051,132889
f0101b31:	83 e8 0c             	sub    $0xc,%eaxf0101b313052,132938
f0101b34:	39 f3                	cmp    %esi,%ebxf0101b343054,133010
f0101b36:	7f 3a                	jg     f0101b72 <debuginfo_eip+0x1a7>f0101b363055,133059
f0101b38:	0f b6 10             	movzbl (%eax),%edxf0101b383057,133169
f0101b3b:	80 fa 84             	cmp    $0x84,%dlf0101b3b3058,133220
f0101b3e:	74 0b                	je     f0101b4b <debuginfo_eip+0x180>f0101b3e3059,133269
f0101b40:	80 fa 64             	cmp    $0x64,%dlf0101b403061,133406
f0101b43:	75 e9                	jne    f0101b2e <debuginfo_eip+0x163>f0101b433062,133455
f0101b45:	83 78 04 00          	cmpl   $0x0,0x4(%eax)f0101b453063,133525
f0101b49:	74 e3                	je     f0101b2e <debuginfo_eip+0x163>f0101b493064,133579
f0101b4b:	8d 14 76             	lea    (%esi,%esi,2),%edxf0101b4b3066,133717
f0101b4e:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101b4e3067,133775
f0101b51:	c7 c0 28 33 10 f0    	mov    $0xf0103328,%eaxf0101b513068,133831
f0101b57:	8b 14 90             	mov    (%eax,%edx,4),%edxf0101b573069,133887
f0101b5a:	c7 c0 f7 a2 10 f0    	mov    $0xf010a2f7,%eaxf0101b5a3070,133945
f0101b60:	81 e8 a9 85 10 f0    	sub    $0xf01085a9,%eaxf0101b603071,134001
f0101b66:	39 c2                	cmp    %eax,%edxf0101b663072,134057
f0101b68:	73 08                	jae    f0101b72 <debuginfo_eip+0x1a7>f0101b683073,134106
f0101b6a:	81 c2 a9 85 10 f0    	add    $0xf01085a9,%edxf0101b6a3075,134226
f0101b70:	89 17                	mov    %edx,(%edi)f0101b703076,134282
f0101b72:	8b 5d dc             	mov    -0x24(%ebp),%ebxf0101b723082,134469
f0101b75:	8b 4d d8             	mov    -0x28(%ebp),%ecxf0101b753083,134525
f0101b78:	b8 00 00 00 00       	mov    $0x0,%eaxf0101b783090,134712
f0101b7d:	39 cb                	cmp    %ecx,%ebxf0101b7d3092,134779
f0101b7f:	7d 4a                	jge    f0101bcb <debuginfo_eip+0x200>f0101b7f3093,134828
f0101b81:	8d 53 01             	lea    0x1(%ebx),%edxf0101b813095,134923
f0101b84:	8d 1c 5b             	lea    (%ebx,%ebx,2),%ebxf0101b843096,134977
f0101b87:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101b873097,135035
f0101b8a:	c7 c0 28 33 10 f0    	mov    $0xf0103328,%eaxf0101b8a3098,135091
f0101b90:	8d 44 98 10          	lea    0x10(%eax,%ebx,4),%eaxf0101b903099,135147
f0101b94:	eb 07                	jmp    f0101b9d <debuginfo_eip+0x1d2>f0101b943100,135209
f0101b96:	83 47 14 01          	addl   $0x1,0x14(%edi)f0101b963102,135303
f0101b9a:	83 c2 01             	add    $0x1,%edxf0101b9a3104,135374
f0101b9d:	39 d1                	cmp    %edx,%ecxf0101b9d3106,135448
f0101b9f:	74 25                	je     f0101bc6 <debuginfo_eip+0x1fb>f0101b9f3107,135497
f0101ba1:	83 c0 0c             	add    $0xc,%eaxf0101ba13108,135567
f0101ba4:	80 78 f4 a0          	cmpb   $0xa0,-0xc(%eax)f0101ba43110,135670
f0101ba8:	74 ec                	je     f0101b96 <debuginfo_eip+0x1cb>f0101ba83111,135726
f0101baa:	b8 00 00 00 00       	mov    $0x0,%eaxf0101baa3113,135807
f0101baf:	eb 1a                	jmp    f0101bcb <debuginfo_eip+0x200>f0101baf3114,135856
f0101bb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0101bb13116,135939
f0101bb6:	eb 13                	jmp    f0101bcb <debuginfo_eip+0x200>f0101bb63117,135995
f0101bb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0101bb83118,136065
f0101bbd:	eb 0c                	jmp    f0101bcb <debuginfo_eip+0x200>f0101bbd3119,136121
f0101bbf:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0101bbf3121,136204
f0101bc4:	eb 05                	jmp    f0101bcb <debuginfo_eip+0x200>f0101bc43122,136260
f0101bc6:	b8 00 00 00 00       	mov    $0x0,%eaxf0101bc63124,136341
f0101bcb:	8d 65 f4             	lea    -0xc(%ebp),%espf0101bcb3126,136392
f0101bce:	5b                   	pop    %ebxf0101bce3127,136447
f0101bcf:	5e                   	pop    %esif0101bcf3128,136491
f0101bd0:	5f                   	pop    %edif0101bd03129,136535
f0101bd1:	5d                   	pop    %ebpf0101bd13130,136579
f0101bd2:	c3                   	ret    f0101bd23131,136623
f0101bd3 <printnum>:f0101bd33133,136664
static voidstatic3136,136754
f0101bd3:	55                   	push   %ebpf0101bd33140,136880
f0101bd4:	89 e5                	mov    %esp,%ebpf0101bd43141,136924
f0101bd6:	57                   	push   %edif0101bd63142,136973
f0101bd7:	56                   	push   %esif0101bd73143,137017
f0101bd8:	53                   	push   %ebxf0101bd83144,137061
f0101bd9:	83 ec 2c             	sub    $0x2c,%espf0101bd93145,137105
f0101bdc:	e8 57 fc ff ff       	call   f0101838 <__x86.get_pc_thunk.cx>f0101bdc3146,137155
f0101be1:	81 c1 27 27 01 00    	add    $0x12727,%ecxf0101be13147,137227
f0101be7:	89 4d e4             	mov    %ecx,-0x1c(%ebp)f0101be73148,137280
f0101bea:	89 c7                	mov    %eax,%edif0101bea3149,137336
f0101bec:	89 d6                	mov    %edx,%esif0101bec3150,137385
f0101bee:	8b 45 08             	mov    0x8(%ebp),%eaxf0101bee3151,137434
f0101bf1:	8b 55 0c             	mov    0xc(%ebp),%edxf0101bf13152,137488
f0101bf4:	89 45 d0             	mov    %eax,-0x30(%ebp)f0101bf43153,137542
f0101bf7:	89 55 d4             	mov    %edx,-0x2c(%ebp)f0101bf73154,137598
f0101bfa:	8b 4d 10             	mov    0x10(%ebp),%ecxf0101bfa3157,137742
f0101bfd:	bb 00 00 00 00       	mov    $0x0,%ebxf0101bfd3158,137797
f0101c02:	89 4d d8             	mov    %ecx,-0x28(%ebp)f0101c023159,137846
f0101c05:	89 5d dc             	mov    %ebx,-0x24(%ebp)f0101c053160,137902
f0101c08:	39 d3                	cmp    %edx,%ebxf0101c083161,137958
f0101c0a:	72 09                	jb     f0101c15 <printnum+0x42>f0101c0a3162,138007
f0101c0c:	39 45 10             	cmp    %eax,0x10(%ebp)f0101c0c3163,138071
f0101c0f:	0f 87 83 00 00 00    	ja     f0101c98 <printnum+0xc5>f0101c0f3164,138126
f0101c15:	83 ec 0c             	sub    $0xc,%espf0101c153166,138252
f0101c18:	ff 75 18             	pushl  0x18(%ebp)f0101c183167,138301
f0101c1b:	8b 45 14             	mov    0x14(%ebp),%eaxf0101c1b3168,138351
f0101c1e:	8d 58 ff             	lea    -0x1(%eax),%ebxf0101c1e3169,138406
f0101c21:	53                   	push   %ebxf0101c213170,138461
f0101c22:	ff 75 10             	pushl  0x10(%ebp)f0101c223171,138505
f0101c25:	83 ec 08             	sub    $0x8,%espf0101c253172,138555
f0101c28:	ff 75 dc             	pushl  -0x24(%ebp)f0101c283173,138604
f0101c2b:	ff 75 d8             	pushl  -0x28(%ebp)f0101c2b3174,138655
f0101c2e:	ff 75 d4             	pushl  -0x2c(%ebp)f0101c2e3175,138706
f0101c31:	ff 75 d0             	pushl  -0x30(%ebp)f0101c313176,138757
f0101c34:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf0101c343177,138808
f0101c37:	e8 e4 09 00 00       	call   f0102620 <__udivdi3>f0101c373178,138864
f0101c3c:	83 c4 18             	add    $0x18,%espf0101c3c3179,138924
f0101c3f:	52                   	push   %edxf0101c3f3180,138974
f0101c40:	50                   	push   %eaxf0101c403181,139018
f0101c41:	89 f2                	mov    %esi,%edxf0101c413182,139062
f0101c43:	89 f8                	mov    %edi,%eaxf0101c433183,139111
f0101c45:	e8 89 ff ff ff       	call   f0101bd3 <printnum>f0101c453184,139160
f0101c4a:	83 c4 20             	add    $0x20,%espf0101c4a3185,139219
f0101c4d:	eb 13                	jmp    f0101c62 <printnum+0x8f>f0101c4d3186,139269
f0101c4f:	83 ec 08             	sub    $0x8,%espf0101c4f3191,139445
f0101c52:	56                   	push   %esif0101c523192,139494
f0101c53:	ff 75 18             	pushl  0x18(%ebp)f0101c533193,139538
f0101c56:	ff d7                	call   *%edif0101c563194,139588
f0101c58:	83 c4 10             	add    $0x10,%espf0101c583195,139633
f0101c5b:	83 eb 01             	sub    $0x1,%ebxf0101c5b3197,139705
f0101c5e:	85 db                	test   %ebx,%ebxf0101c5e3198,139754
f0101c60:	7f ed                	jg     f0101c4f <printnum+0x7c>f0101c603199,139803
f0101c62:	83 ec 08             	sub    $0x8,%espf0101c623204,139969
f0101c65:	56                   	push   %esif0101c653205,140018
f0101c66:	83 ec 04             	sub    $0x4,%espf0101c663206,140062
f0101c69:	ff 75 dc             	pushl  -0x24(%ebp)f0101c693207,140111
f0101c6c:	ff 75 d8             	pushl  -0x28(%ebp)f0101c6c3208,140162
f0101c6f:	ff 75 d4             	pushl  -0x2c(%ebp)f0101c6f3209,140213
f0101c72:	ff 75 d0             	pushl  -0x30(%ebp)f0101c723210,140264
f0101c75:	8b 75 e4             	mov    -0x1c(%ebp),%esif0101c753211,140315
f0101c78:	89 f3                	mov    %esi,%ebxf0101c783212,140371
f0101c7a:	e8 c1 0a 00 00       	call   f0102740 <__umoddi3>f0101c7a3213,140420
f0101c7f:	83 c4 14             	add    $0x14,%espf0101c7f3214,140480
f0101c82:	0f be 84 06 2b ee fe 	movsbl -0x111d5(%esi,%eax,1),%eaxf0101c823215,140530
f0101c89:	ff f0101c893216,140596
f0101c8a:	50                   	push   %eaxf0101c8a3217,140610
f0101c8b:	ff d7                	call   *%edif0101c8b3218,140654
f0101c8d:	83 c4 10             	add    $0x10,%espf0101c8d3220,140701
f0101c90:	8d 65 f4             	lea    -0xc(%ebp),%espf0101c903221,140751
f0101c93:	5b                   	pop    %ebxf0101c933222,140806
f0101c94:	5e                   	pop    %esif0101c943223,140850
f0101c95:	5f                   	pop    %edif0101c953224,140894
f0101c96:	5d                   	pop    %ebpf0101c963225,140938
f0101c97:	c3                   	ret    f0101c973226,140982
f0101c98:	8b 5d 14             	mov    0x14(%ebp),%ebxf0101c983227,141022
f0101c9b:	eb be                	jmp    f0101c5b <printnum+0x88>f0101c9b3228,141077
f0101c9d <sprintputch>:f0101c9d3230,141142
static voidstatic3234,141180
f0101c9d:	55                   	push   %ebpf0101c9d3237,141235
f0101c9e:	89 e5                	mov    %esp,%ebpf0101c9e3238,141279
f0101ca0:	8b 45 0c             	mov    0xc(%ebp),%eaxf0101ca03239,141328
f0101ca3:	83 40 08 01          	addl   $0x1,0x8(%eax)f0101ca33241,141393
f0101ca7:	8b 10                	mov    (%eax),%edxf0101ca73243,141470
f0101ca9:	3b 50 04             	cmp    0x4(%eax),%edxf0101ca93244,141521
f0101cac:	73 0a                	jae    f0101cb8 <sprintputch+0x1b>f0101cac3245,141575
f0101cae:	8d 4a 01             	lea    0x1(%edx),%ecxf0101cae3247,141660
f0101cb1:	89 08                	mov    %ecx,(%eax)f0101cb13248,141714
f0101cb3:	8b 45 08             	mov    0x8(%ebp),%eaxf0101cb33249,141765
f0101cb6:	88 02                	mov    %al,(%edx)f0101cb63250,141819
f0101cb8:	5d                   	pop    %ebpf0101cb83252,141871
f0101cb9:	c3                   	ret    f0101cb93253,141915
f0101cba <printfmt>:f0101cba3255,141956
f0101cba:	55                   	push   %ebpf0101cba3257,141979
f0101cbb:	89 e5                	mov    %esp,%ebpf0101cbb3258,142023
f0101cbd:	83 ec 08             	sub    $0x8,%espf0101cbd3259,142072
f0101cc0:	8d 45 14             	lea    0x14(%ebp),%eaxf0101cc03261,142141
f0101cc3:	50                   	push   %eaxf0101cc33263,142232
f0101cc4:	ff 75 10             	pushl  0x10(%ebp)f0101cc43264,142276
f0101cc7:	ff 75 0c             	pushl  0xc(%ebp)f0101cc73265,142326
f0101cca:	ff 75 08             	pushl  0x8(%ebp)f0101cca3266,142375
f0101ccd:	e8 05 00 00 00       	call   f0101cd7 <vprintfmt>f0101ccd3267,142424
f0101cd2:	83 c4 10             	add    $0x10,%espf0101cd23269,142486
f0101cd5:	c9                   	leave  f0101cd53270,142536
f0101cd6:	c3                   	ret    f0101cd63271,142576
f0101cd7 <vprintfmt>:f0101cd73273,142617
f0101cd7:	55                   	push   %ebpf0101cd73275,142641
f0101cd8:	89 e5                	mov    %esp,%ebpf0101cd83276,142685
f0101cda:	57                   	push   %edif0101cda3277,142734
f0101cdb:	56                   	push   %esif0101cdb3278,142778
f0101cdc:	53                   	push   %ebxf0101cdc3279,142822
f0101cdd:	83 ec 2c             	sub    $0x2c,%espf0101cdd3280,142866
f0101ce0:	e8 6a e4 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0101ce03281,142916
f0101ce5:	81 c3 23 26 01 00    	add    $0x12623,%ebxf0101ce53282,142988
f0101ceb:	8b 75 0c             	mov    0xc(%ebp),%esif0101ceb3283,143041
f0101cee:	8b 7d 10             	mov    0x10(%ebp),%edif0101cee3284,143095
f0101cf1:	e9 8e 03 00 00       	jmp    f0102084 <.L35+0x48>f0101cf13285,143150
		padc = ' ';padc3286,143210
f0101cf6:	c6 45 d4 20          	movb   $0x20,-0x2c(%ebp)f0101cf63287,143224
		altflag = 0;altflag3288,143281
f0101cfa:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)f0101cfa3289,143296
		precision = -1;precision3290,143352
f0101d01:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f0101d013291,143370
		width = -1;width3292,143433
f0101d08:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)f0101d083293,143447
		lflag = 0;lflag3294,143510
f0101d0f:	b9 00 00 00 00       	mov    $0x0,%ecxf0101d0f3295,143523
f0101d14:	89 4d cc             	mov    %ecx,-0x34(%ebp)f0101d143296,143572
f0101d17:	8d 47 01             	lea    0x1(%edi),%eaxf0101d173298,143671
f0101d1a:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0101d1a3299,143725
f0101d1d:	0f b6 17             	movzbl (%edi),%edxf0101d1d3300,143781
f0101d20:	8d 42 dd             	lea    -0x23(%edx),%eaxf0101d203301,143832
f0101d23:	3c 55                	cmp    $0x55,%alf0101d233302,143888
f0101d25:	0f 87 e1 03 00 00    	ja     f010210c <.L22>f0101d253303,143937
f0101d2b:	0f b6 c0             	movzbl %al,%eaxf0101d2b3304,143992
f0101d2e:	89 d9                	mov    %ebx,%ecxf0101d2e3305,144040
f0101d30:	03 8c 83 b8 ee fe ff 	add    -0x11148(%ebx,%eax,4),%ecxf0101d303306,144089
f0101d37:	ff e1                	jmp    *%ecxf0101d373307,144155
f0101d39 <.L67>:f0101d393309,144201
f0101d39:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101d393310,144218
			padc = '-';padc3311,144274
f0101d3c:	c6 45 d4 2d          	movb   $0x2d,-0x2c(%ebp)f0101d3c3312,144289
f0101d40:	eb d5                	jmp    f0101d17 <vprintfmt+0x40>f0101d403313,144346
f0101d42 <.L28>:f0101d423315,144412
f0101d42:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101d423317,144472
			padc = '0';padc3318,144528
f0101d45:	c6 45 d4 30          	movb   $0x30,-0x2c(%ebp)f0101d453319,144543
f0101d49:	eb cc                	jmp    f0101d17 <vprintfmt+0x40>f0101d493320,144600
f0101d4b <.L29>:f0101d4b3322,144666
f0101d4b:	0f b6 d2             	movzbl %dl,%edxf0101d4b3324,144726
f0101d4e:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101d4e3325,144774
f0101d51:	b8 00 00 00 00       	mov    $0x0,%eaxf0101d513327,144864
				precision = precision * 10 + ch - '0';precision3328,144913
f0101d56:	8d 04 80             	lea    (%eax,%eax,4),%eaxf0101d563329,144956
f0101d59:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eaxf0101d593330,145014
				ch = *fmt;ch3331,145077
f0101d5d:	0f be 17             	movsbl (%edi),%edxf0101d5d3332,145092
f0101d60:	8d 4a d0             	lea    -0x30(%edx),%ecxf0101d603334,145173
f0101d63:	83 f9 09             	cmp    $0x9,%ecxf0101d633335,145229
f0101d66:	77 55                	ja     f0101dbd <.L23+0xf>f0101d663336,145278
f0101d68:	83 c7 01             	add    $0x1,%edif0101d683338,145371
				precision = precision * 10 + ch - '0';precision3339,145420
f0101d6b:	eb e9                	jmp    f0101d56 <.L29+0xb>f0101d6b3340,145463
f0101d6d <.L26>:f0101d6d3342,145523
			precision = va_arg(ap, int);precision3343,145540
f0101d6d:	8b 45 14             	mov    0x14(%ebp),%eaxf0101d6d3344,145572
f0101d70:	8b 00                	mov    (%eax),%eaxf0101d703345,145627
f0101d72:	89 45 d0             	mov    %eax,-0x30(%ebp)f0101d723346,145678
f0101d75:	8b 45 14             	mov    0x14(%ebp),%eaxf0101d753347,145734
f0101d78:	8d 40 04             	lea    0x4(%eax),%eaxf0101d783348,145789
f0101d7b:	89 45 14             	mov    %eax,0x14(%ebp)f0101d7b3349,145843
f0101d7e:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101d7e3351,145941
f0101d81:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f0101d813353,146015
f0101d85:	79 90                	jns    f0101d17 <vprintfmt+0x40>f0101d853354,146071
				width = precision, precision = -1;width3355,146136
f0101d87:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101d873356,146175
f0101d8a:	89 45 e0             	mov    %eax,-0x20(%ebp)f0101d8a3357,146231
f0101d8d:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f0101d8d3358,146287
f0101d94:	eb 81                	jmp    f0101d17 <vprintfmt+0x40>f0101d943359,146350
f0101d96 <.L27>:f0101d963361,146416
f0101d96:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0101d963362,146433
f0101d99:	85 c0                	test   %eax,%eaxf0101d993363,146489
f0101d9b:	ba 00 00 00 00       	mov    $0x0,%edxf0101d9b3364,146538
f0101da0:	0f 49 d0             	cmovns %eax,%edxf0101da03365,146587
f0101da3:	89 55 e0             	mov    %edx,-0x20(%ebp)f0101da33366,146636
f0101da6:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101da63368,146735
f0101da9:	e9 69 ff ff ff       	jmp    f0101d17 <vprintfmt+0x40>f0101da93369,146791
f0101dae <.L23>:f0101dae3371,146857
f0101dae:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101dae3372,146874
			altflag = 1;altflag3373,146930
f0101db1:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)f0101db13374,146946
f0101db8:	e9 5a ff ff ff       	jmp    f0101d17 <vprintfmt+0x40>f0101db83376,147020
f0101dbd:	89 45 d0             	mov    %eax,-0x30(%ebp)f0101dbd3377,147085
f0101dc0:	eb bf                	jmp    f0101d81 <.L26+0x14>f0101dc03378,147141
f0101dc2 <.L33>:f0101dc23380,147202
f0101dc2:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f0101dc23382,147231
f0101dc6:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101dc63384,147330
f0101dc9:	e9 49 ff ff ff       	jmp    f0101d17 <vprintfmt+0x40>f0101dc93386,147404
f0101dce <.L30>:f0101dce3388,147470
f0101dce:	8b 45 14             	mov    0x14(%ebp),%eaxf0101dce3390,147522
f0101dd1:	8d 78 04             	lea    0x4(%eax),%edif0101dd13391,147577
f0101dd4:	83 ec 08             	sub    $0x8,%espf0101dd43392,147631
f0101dd7:	56                   	push   %esif0101dd73393,147680
f0101dd8:	ff 30                	pushl  (%eax)f0101dd83394,147724
f0101dda:	ff 55 08             	call   *0x8(%ebp)f0101dda3395,147770
f0101ddd:	83 c4 10             	add    $0x10,%espf0101ddd3397,147830
f0101de0:	89 7d 14             	mov    %edi,0x14(%ebp)f0101de03399,147915
f0101de3:	e9 99 02 00 00       	jmp    f0102081 <.L35+0x45>f0101de33401,147980
f0101de8 <.L32>:f0101de83403,148041
			err = va_arg(ap, int);err3404,148058
f0101de8:	8b 45 14             	mov    0x14(%ebp),%eaxf0101de83405,148084
f0101deb:	8d 78 04             	lea    0x4(%eax),%edif0101deb3406,148139
f0101dee:	8b 00                	mov    (%eax),%eaxf0101dee3407,148193
f0101df0:	99                   	cltd   f0101df03408,148244
f0101df1:	31 d0                	xor    %edx,%eaxf0101df13409,148284
f0101df3:	29 d0                	sub    %edx,%eaxf0101df33410,148333
f0101df5:	83 f8 06             	cmp    $0x6,%eaxf0101df53412,148441
f0101df8:	7f 27                	jg     f0101e21 <.L32+0x39>f0101df83413,148490
f0101dfa:	8b 94 83 20 1d 00 00 	mov    0x1d20(%ebx,%eax,4),%edxf0101dfa3414,148550
f0101e01:	85 d2                	test   %edx,%edxf0101e013415,148614
f0101e03:	74 1c                	je     f0101e21 <.L32+0x39>f0101e033416,148663
f0101e05:	52                   	push   %edxf0101e053418,148761
f0101e06:	8d 83 70 ec fe ff    	lea    -0x11390(%ebx),%eaxf0101e063419,148805
f0101e0c:	50                   	push   %eaxf0101e0c3420,148864
f0101e0d:	56                   	push   %esif0101e0d3421,148908
f0101e0e:	ff 75 08             	pushl  0x8(%ebp)f0101e0e3422,148952
f0101e11:	e8 a4 fe ff ff       	call   f0101cba <printfmt>f0101e113423,149001
f0101e16:	83 c4 10             	add    $0x10,%espf0101e163424,149060
			err = va_arg(ap, int);err3425,149110
f0101e19:	89 7d 14             	mov    %edi,0x14(%ebp)f0101e193426,149136
f0101e1c:	e9 60 02 00 00       	jmp    f0102081 <.L35+0x45>f0101e1c3427,149191
f0101e21:	50                   	push   %eaxf0101e213429,149297
f0101e22:	8d 83 43 ee fe ff    	lea    -0x111bd(%ebx),%eaxf0101e223430,149341
f0101e28:	50                   	push   %eaxf0101e283431,149400
f0101e29:	56                   	push   %esif0101e293432,149444
f0101e2a:	ff 75 08             	pushl  0x8(%ebp)f0101e2a3433,149488
f0101e2d:	e8 88 fe ff ff       	call   f0101cba <printfmt>f0101e2d3434,149537
f0101e32:	83 c4 10             	add    $0x10,%espf0101e323435,149596
			err = va_arg(ap, int);err3436,149646
f0101e35:	89 7d 14             	mov    %edi,0x14(%ebp)f0101e353437,149672
f0101e38:	e9 44 02 00 00       	jmp    f0102081 <.L35+0x45>f0101e383439,149773
f0101e3d <.L36>:f0101e3d3441,149834
f0101e3d:	8b 45 14             	mov    0x14(%ebp),%eaxf0101e3d3443,149892
f0101e40:	83 c0 04             	add    $0x4,%eaxf0101e403444,149947
f0101e43:	89 45 cc             	mov    %eax,-0x34(%ebp)f0101e433445,149996
f0101e46:	8b 45 14             	mov    0x14(%ebp),%eaxf0101e463446,150052
f0101e49:	8b 38                	mov    (%eax),%edif0101e493447,150107
				p = "(null)";p3448,150158
f0101e4b:	85 ff                	test   %edi,%edif0101e4b3449,150176
f0101e4d:	8d 83 3c ee fe ff    	lea    -0x111c4(%ebx),%eaxf0101e4d3450,150225
f0101e53:	0f 44 f8             	cmove  %eax,%edif0101e533451,150284
f0101e56:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f0101e563453,150366
f0101e5a:	0f 8e b5 00 00 00    	jle    f0101f15 <.L36+0xd8>f0101e5a3454,150422
f0101e60:	80 7d d4 2d          	cmpb   $0x2d,-0x2c(%ebp)f0101e603455,150482
f0101e64:	75 08                	jne    f0101e6e <.L36+0x31>f0101e643456,150539
f0101e66:	89 75 0c             	mov    %esi,0xc(%ebp)f0101e663457,150599
f0101e69:	8b 75 d0             	mov    -0x30(%ebp),%esif0101e693458,150653
f0101e6c:	eb 6d                	jmp    f0101edb <.L36+0x9e>f0101e6c3459,150709
f0101e6e:	83 ec 08             	sub    $0x8,%espf0101e6e3461,150830
f0101e71:	ff 75 d0             	pushl  -0x30(%ebp)f0101e713462,150879
f0101e74:	57                   	push   %edif0101e743463,150930
f0101e75:	e8 49 04 00 00       	call   f01022c3 <strnlen>f0101e753464,150974
f0101e7a:	8b 55 e0             	mov    -0x20(%ebp),%edxf0101e7a3465,151032
f0101e7d:	29 c2                	sub    %eax,%edxf0101e7d3466,151088
f0101e7f:	89 55 c8             	mov    %edx,-0x38(%ebp)f0101e7f3467,151137
f0101e82:	83 c4 10             	add    $0x10,%espf0101e823468,151193
f0101e85:	0f be 45 d4          	movsbl -0x2c(%ebp),%eaxf0101e853470,151269
f0101e89:	89 45 e0             	mov    %eax,-0x20(%ebp)f0101e893471,151325
f0101e8c:	89 7d d4             	mov    %edi,-0x2c(%ebp)f0101e8c3472,151381
f0101e8f:	89 d7                	mov    %edx,%edif0101e8f3473,151437
f0101e91:	eb 10                	jmp    f0101ea3 <.L36+0x66>f0101e913475,151547
f0101e93:	83 ec 08             	sub    $0x8,%espf0101e933477,151633
f0101e96:	56                   	push   %esif0101e963478,151682
f0101e97:	ff 75 e0             	pushl  -0x20(%ebp)f0101e973479,151726
f0101e9a:	ff 55 08             	call   *0x8(%ebp)f0101e9a3480,151777
f0101e9d:	83 ef 01             	sub    $0x1,%edif0101e9d3482,151888
f0101ea0:	83 c4 10             	add    $0x10,%espf0101ea03483,151937
f0101ea3:	85 ff                	test   %edi,%edif0101ea33484,151987
f0101ea5:	7f ec                	jg     f0101e93 <.L36+0x56>f0101ea53485,152036
f0101ea7:	8b 7d d4             	mov    -0x2c(%ebp),%edif0101ea73486,152096
f0101eaa:	8b 55 c8             	mov    -0x38(%ebp),%edxf0101eaa3487,152152
f0101ead:	85 d2                	test   %edx,%edxf0101ead3488,152208
f0101eaf:	b8 00 00 00 00       	mov    $0x0,%eaxf0101eaf3489,152257
f0101eb4:	0f 49 c2             	cmovns %edx,%eaxf0101eb43490,152306
f0101eb7:	29 c2                	sub    %eax,%edxf0101eb73491,152355
f0101eb9:	89 55 e0             	mov    %edx,-0x20(%ebp)f0101eb93492,152404
f0101ebc:	89 75 0c             	mov    %esi,0xc(%ebp)f0101ebc3493,152460
f0101ebf:	8b 75 d0             	mov    -0x30(%ebp),%esif0101ebf3494,152514
f0101ec2:	eb 17                	jmp    f0101edb <.L36+0x9e>f0101ec23495,152570
f0101ec4:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)f0101ec43497,152673
f0101ec8:	75 30                	jne    f0101efa <.L36+0xbd>f0101ec83498,152729
f0101eca:	83 ec 08             	sub    $0x8,%espf0101eca3500,152813
f0101ecd:	ff 75 0c             	pushl  0xc(%ebp)f0101ecd3501,152862
f0101ed0:	50                   	push   %eaxf0101ed03502,152911
f0101ed1:	ff 55 08             	call   *0x8(%ebp)f0101ed13503,152955
f0101ed4:	83 c4 10             	add    $0x10,%espf0101ed43504,153005
f0101ed7:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)f0101ed73506,153134
f0101edb:	83 c7 01             	add    $0x1,%edif0101edb3507,153190
f0101ede:	0f b6 57 ff          	movzbl -0x1(%edi),%edxf0101ede3508,153239
f0101ee2:	0f be c2             	movsbl %dl,%eaxf0101ee23509,153294
f0101ee5:	85 c0                	test   %eax,%eaxf0101ee53510,153342
f0101ee7:	74 52                	je     f0101f3b <.L36+0xfe>f0101ee73511,153391
f0101ee9:	85 f6                	test   %esi,%esif0101ee93512,153451
f0101eeb:	78 d7                	js     f0101ec4 <.L36+0x87>f0101eeb3513,153500
f0101eed:	83 ee 01             	sub    $0x1,%esif0101eed3514,153560
f0101ef0:	79 d2                	jns    f0101ec4 <.L36+0x87>f0101ef03515,153609
f0101ef2:	8b 75 0c             	mov    0xc(%ebp),%esif0101ef23516,153669
f0101ef5:	8b 7d e0             	mov    -0x20(%ebp),%edif0101ef53517,153723
f0101ef8:	eb 32                	jmp    f0101f2c <.L36+0xef>f0101ef83518,153779
f0101efa:	0f be d2             	movsbl %dl,%edxf0101efa3520,153882
f0101efd:	83 ea 20             	sub    $0x20,%edxf0101efd3521,153930
f0101f00:	83 fa 5e             	cmp    $0x5e,%edxf0101f003522,153980
f0101f03:	76 c5                	jbe    f0101eca <.L36+0x8d>f0101f033523,154030
f0101f05:	83 ec 08             	sub    $0x8,%espf0101f053525,154115
f0101f08:	ff 75 0c             	pushl  0xc(%ebp)f0101f083526,154164
f0101f0b:	6a 3f                	push   $0x3ff0101f0b3527,154213
f0101f0d:	ff 55 08             	call   *0x8(%ebp)f0101f0d3528,154258
f0101f10:	83 c4 10             	add    $0x10,%espf0101f103529,154308
f0101f13:	eb c2                	jmp    f0101ed7 <.L36+0x9a>f0101f133530,154358
f0101f15:	89 75 0c             	mov    %esi,0xc(%ebp)f0101f153531,154418
f0101f18:	8b 75 d0             	mov    -0x30(%ebp),%esif0101f183532,154472
f0101f1b:	eb be                	jmp    f0101edb <.L36+0x9e>f0101f1b3533,154528
f0101f1d:	83 ec 08             	sub    $0x8,%espf0101f1d3535,154612
f0101f20:	56                   	push   %esif0101f203536,154661
f0101f21:	6a 20                	push   $0x20f0101f213537,154705
f0101f23:	ff 55 08             	call   *0x8(%ebp)f0101f233538,154750
f0101f26:	83 ef 01             	sub    $0x1,%edif0101f263540,154830
f0101f29:	83 c4 10             	add    $0x10,%espf0101f293541,154879
f0101f2c:	85 ff                	test   %edi,%edif0101f2c3542,154929
f0101f2e:	7f ed                	jg     f0101f1d <.L36+0xe0>f0101f2e3543,154978
f0101f30:	8b 45 cc             	mov    -0x34(%ebp),%eaxf0101f303545,155079
f0101f33:	89 45 14             	mov    %eax,0x14(%ebp)f0101f333546,155135
f0101f36:	e9 46 01 00 00       	jmp    f0102081 <.L35+0x45>f0101f363547,155190
f0101f3b:	8b 7d e0             	mov    -0x20(%ebp),%edif0101f3b3548,155250
f0101f3e:	8b 75 0c             	mov    0xc(%ebp),%esif0101f3e3549,155306
f0101f41:	eb e9                	jmp    f0101f2c <.L36+0xef>f0101f413550,155360
f0101f43 <.L31>:f0101f433552,155421
f0101f43:	8b 4d cc             	mov    -0x34(%ebp),%ecxf0101f433553,155438
f0101f46:	83 f9 01             	cmp    $0x1,%ecxf0101f463555,155511
f0101f49:	7e 40                	jle    f0101f8b <.L31+0x48>f0101f493556,155560
f0101f4b:	8b 45 14             	mov    0x14(%ebp),%eaxf0101f4b3558,155653
f0101f4e:	8b 50 04             	mov    0x4(%eax),%edxf0101f4e3559,155708
f0101f51:	8b 00                	mov    (%eax),%eaxf0101f513560,155762
f0101f53:	89 45 d8             	mov    %eax,-0x28(%ebp)f0101f533561,155813
f0101f56:	89 55 dc             	mov    %edx,-0x24(%ebp)f0101f563562,155869
f0101f59:	8b 45 14             	mov    0x14(%ebp),%eaxf0101f593563,155925
f0101f5c:	8d 40 08             	lea    0x8(%eax),%eaxf0101f5c3564,155980
f0101f5f:	89 45 14             	mov    %eax,0x14(%ebp)f0101f5f3565,156034
f0101f62:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)f0101f623567,156119
f0101f66:	79 55                	jns    f0101fbd <.L31+0x7a>f0101f663568,156175
f0101f68:	83 ec 08             	sub    $0x8,%espf0101f683570,156259
f0101f6b:	56                   	push   %esif0101f6b3571,156308
f0101f6c:	6a 2d                	push   $0x2df0101f6c3572,156352
f0101f6e:	ff 55 08             	call   *0x8(%ebp)f0101f6e3573,156397
				num = -(long long) num;num3574,156447
f0101f71:	8b 55 d8             	mov    -0x28(%ebp),%edxf0101f713575,156475
f0101f74:	8b 4d dc             	mov    -0x24(%ebp),%ecxf0101f743576,156531
f0101f77:	f7 da                	neg    %edxf0101f773577,156587
f0101f79:	83 d1 00             	adc    $0x0,%ecxf0101f793578,156631
f0101f7c:	f7 d9                	neg    %ecxf0101f7c3579,156680
f0101f7e:	83 c4 10             	add    $0x10,%espf0101f7e3580,156724
			base = 10;base3581,156774
f0101f81:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101f813582,156788
f0101f86:	e9 db 00 00 00       	jmp    f0102066 <.L35+0x2a>f0101f863583,156837
f0101f8b:	85 c9                	test   %ecx,%ecxf0101f8b3585,156914
f0101f8d:	75 17                	jne    f0101fa6 <.L31+0x63>f0101f8d3586,156963
f0101f8f:	8b 45 14             	mov    0x14(%ebp),%eaxf0101f8f3588,157050
f0101f92:	8b 00                	mov    (%eax),%eaxf0101f923589,157105
f0101f94:	89 45 d8             	mov    %eax,-0x28(%ebp)f0101f943590,157156
f0101f97:	99                   	cltd   f0101f973591,157212
f0101f98:	89 55 dc             	mov    %edx,-0x24(%ebp)f0101f983592,157252
f0101f9b:	8b 45 14             	mov    0x14(%ebp),%eaxf0101f9b3593,157308
f0101f9e:	8d 40 04             	lea    0x4(%eax),%eaxf0101f9e3594,157363
f0101fa1:	89 45 14             	mov    %eax,0x14(%ebp)f0101fa13595,157417
f0101fa4:	eb bc                	jmp    f0101f62 <.L31+0x1f>f0101fa43596,157472
f0101fa6:	8b 45 14             	mov    0x14(%ebp),%eaxf0101fa63598,157560
f0101fa9:	8b 00                	mov    (%eax),%eaxf0101fa93599,157615
f0101fab:	89 45 d8             	mov    %eax,-0x28(%ebp)f0101fab3600,157666
f0101fae:	99                   	cltd   f0101fae3601,157722
f0101faf:	89 55 dc             	mov    %edx,-0x24(%ebp)f0101faf3602,157762
f0101fb2:	8b 45 14             	mov    0x14(%ebp),%eaxf0101fb23603,157818
f0101fb5:	8d 40 04             	lea    0x4(%eax),%eaxf0101fb53604,157873
f0101fb8:	89 45 14             	mov    %eax,0x14(%ebp)f0101fb83605,157927
f0101fbb:	eb a5                	jmp    f0101f62 <.L31+0x1f>f0101fbb3606,157982
			num = getint(&ap, lflag);num3607,158042
f0101fbd:	8b 55 d8             	mov    -0x28(%ebp),%edxf0101fbd3608,158071
f0101fc0:	8b 4d dc             	mov    -0x24(%ebp),%ecxf0101fc03609,158127
			base = 10;base3610,158183
f0101fc3:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101fc33611,158197
f0101fc8:	e9 99 00 00 00       	jmp    f0102066 <.L35+0x2a>f0101fc83612,158246
f0101fcd <.L37>:f0101fcd3614,158307
f0101fcd:	8b 4d cc             	mov    -0x34(%ebp),%ecxf0101fcd3615,158324
f0101fd0:	83 f9 01             	cmp    $0x1,%ecxf0101fd03617,158397
f0101fd3:	7e 15                	jle    f0101fea <.L37+0x1d>f0101fd33618,158446
f0101fd5:	8b 45 14             	mov    0x14(%ebp),%eaxf0101fd53620,158548
f0101fd8:	8b 10                	mov    (%eax),%edxf0101fd83621,158603
f0101fda:	8b 48 04             	mov    0x4(%eax),%ecxf0101fda3622,158654
f0101fdd:	8d 40 08             	lea    0x8(%eax),%eaxf0101fdd3623,158708
f0101fe0:	89 45 14             	mov    %eax,0x14(%ebp)f0101fe03624,158762
			base = 10;base3625,158817
f0101fe3:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101fe33626,158831
f0101fe8:	eb 7c                	jmp    f0102066 <.L35+0x2a>f0101fe83627,158880
f0101fea:	85 c9                	test   %ecx,%ecxf0101fea3629,158957
f0101fec:	75 17                	jne    f0102005 <.L37+0x38>f0101fec3630,159006
f0101fee:	8b 45 14             	mov    0x14(%ebp),%eaxf0101fee3632,159102
f0101ff1:	8b 10                	mov    (%eax),%edxf0101ff13633,159157
f0101ff3:	b9 00 00 00 00       	mov    $0x0,%ecxf0101ff33634,159208
f0101ff8:	8d 40 04             	lea    0x4(%eax),%eaxf0101ff83635,159257
f0101ffb:	89 45 14             	mov    %eax,0x14(%ebp)f0101ffb3636,159311
			base = 10;base3637,159366
f0101ffe:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101ffe3638,159380
f0102003:	eb 61                	jmp    f0102066 <.L35+0x2a>f01020033639,159429
f0102005:	8b 45 14             	mov    0x14(%ebp),%eaxf01020053641,159526
f0102008:	8b 10                	mov    (%eax),%edxf01020083642,159581
f010200a:	b9 00 00 00 00       	mov    $0x0,%ecxf010200a3643,159632
f010200f:	8d 40 04             	lea    0x4(%eax),%eaxf010200f3644,159681
f0102012:	89 45 14             	mov    %eax,0x14(%ebp)f01020123645,159735
			base = 10;base3646,159790
f0102015:	b8 0a 00 00 00       	mov    $0xa,%eaxf01020153647,159804
f010201a:	eb 4a                	jmp    f0102066 <.L35+0x2a>f010201a3648,159853
f010201c <.L34>:f010201c3650,159914
f010201c:	83 ec 08             	sub    $0x8,%espf010201c3652,159954
f010201f:	56                   	push   %esif010201f3653,160003
f0102020:	6a 58                	push   $0x58f01020203654,160047
f0102022:	ff 55 08             	call   *0x8(%ebp)f01020223655,160092
f0102025:	83 c4 08             	add    $0x8,%espf01020253657,160165
f0102028:	56                   	push   %esif01020283658,160214
f0102029:	6a 58                	push   $0x58f01020293659,160258
f010202b:	ff 55 08             	call   *0x8(%ebp)f010202b3660,160303
f010202e:	83 c4 08             	add    $0x8,%espf010202e3662,160376
f0102031:	56                   	push   %esif01020313663,160425
f0102032:	6a 58                	push   $0x58f01020323664,160469
f0102034:	ff 55 08             	call   *0x8(%ebp)f01020343665,160514
f0102037:	83 c4 10             	add    $0x10,%espf01020373667,160574
f010203a:	eb 45                	jmp    f0102081 <.L35+0x45>f010203a3668,160624
f010203c <.L35>:f010203c3670,160685
f010203c:	83 ec 08             	sub    $0x8,%espf010203c3672,160725
f010203f:	56                   	push   %esif010203f3673,160774
f0102040:	6a 30                	push   $0x30f01020403674,160818
f0102042:	ff 55 08             	call   *0x8(%ebp)f01020423675,160863
f0102045:	83 c4 08             	add    $0x8,%espf01020453677,160936
f0102048:	56                   	push   %esif01020483678,160985
f0102049:	6a 78                	push   $0x78f01020493679,161029
f010204b:	ff 55 08             	call   *0x8(%ebp)f010204b3680,161074
			num = (unsigned long long)num3681,161124
f010204e:	8b 45 14             	mov    0x14(%ebp),%eaxf010204e3682,161154
f0102051:	8b 10                	mov    (%eax),%edxf01020513683,161209
f0102053:	b9 00 00 00 00       	mov    $0x0,%ecxf01020533684,161260
f0102058:	83 c4 10             	add    $0x10,%espf01020583686,161325
f010205b:	8d 40 04             	lea    0x4(%eax),%eaxf010205b3688,161411
f010205e:	89 45 14             	mov    %eax,0x14(%ebp)f010205e3689,161465
			base = 16;base3690,161520
f0102061:	b8 10 00 00 00       	mov    $0x10,%eaxf01020613691,161534
f0102066:	83 ec 0c             	sub    $0xc,%espf01020663693,161636
f0102069:	0f be 7d d4          	movsbl -0x2c(%ebp),%edif01020693694,161685
f010206d:	57                   	push   %edif010206d3695,161741
f010206e:	ff 75 e0             	pushl  -0x20(%ebp)f010206e3696,161785
f0102071:	50                   	push   %eaxf01020713697,161836
f0102072:	51                   	push   %ecxf01020723698,161880
f0102073:	52                   	push   %edxf01020733699,161924
f0102074:	89 f2                	mov    %esi,%edxf01020743700,161968
f0102076:	8b 45 08             	mov    0x8(%ebp),%eaxf01020763701,162017
f0102079:	e8 55 fb ff ff       	call   f0101bd3 <printnum>f01020793702,162071
f010207e:	83 c4 20             	add    $0x20,%espf010207e3704,162140
			err = va_arg(ap, int);err3705,162190
f0102081:	8b 7d e4             	mov    -0x1c(%ebp),%edif01020813706,162216
f0102084:	83 c7 01             	add    $0x1,%edif01020843708,162323
f0102087:	0f b6 47 ff          	movzbl -0x1(%edi),%eaxf01020873709,162372
f010208b:	83 f8 25             	cmp    $0x25,%eaxf010208b3710,162427
f010208e:	0f 84 62 fc ff ff    	je     f0101cf6 <vprintfmt+0x1f>f010208e3711,162477
f0102094:	85 c0                	test   %eax,%eaxf01020943713,162561
f0102096:	0f 84 91 00 00 00    	je     f010212d <.L22+0x21>f01020963714,162610
f010209c:	83 ec 08             	sub    $0x8,%espf010209c3716,162692
f010209f:	56                   	push   %esif010209f3717,162741
f01020a0:	50                   	push   %eaxf01020a03718,162785
f01020a1:	ff 55 08             	call   *0x8(%ebp)f01020a13719,162829
f01020a4:	83 c4 10             	add    $0x10,%espf01020a43720,162879
f01020a7:	eb db                	jmp    f0102084 <.L35+0x48>f01020a73721,162929
f01020a9 <.L38>:f01020a93723,162990
f01020a9:	8b 4d cc             	mov    -0x34(%ebp),%ecxf01020a93724,163007
f01020ac:	83 f9 01             	cmp    $0x1,%ecxf01020ac3726,163080
f01020af:	7e 15                	jle    f01020c6 <.L38+0x1d>f01020af3727,163129
f01020b1:	8b 45 14             	mov    0x14(%ebp),%eaxf01020b13729,163231
f01020b4:	8b 10                	mov    (%eax),%edxf01020b43730,163286
f01020b6:	8b 48 04             	mov    0x4(%eax),%ecxf01020b63731,163337
f01020b9:	8d 40 08             	lea    0x8(%eax),%eaxf01020b93732,163391
f01020bc:	89 45 14             	mov    %eax,0x14(%ebp)f01020bc3733,163445
			base = 16;base3734,163500
f01020bf:	b8 10 00 00 00       	mov    $0x10,%eaxf01020bf3735,163514
f01020c4:	eb a0                	jmp    f0102066 <.L35+0x2a>f01020c43736,163564
f01020c6:	85 c9                	test   %ecx,%ecxf01020c63738,163641
f01020c8:	75 17                	jne    f01020e1 <.L38+0x38>f01020c83739,163690
f01020ca:	8b 45 14             	mov    0x14(%ebp),%eaxf01020ca3741,163786
f01020cd:	8b 10                	mov    (%eax),%edxf01020cd3742,163841
f01020cf:	b9 00 00 00 00       	mov    $0x0,%ecxf01020cf3743,163892
f01020d4:	8d 40 04             	lea    0x4(%eax),%eaxf01020d43744,163941
f01020d7:	89 45 14             	mov    %eax,0x14(%ebp)f01020d73745,163995
			base = 16;base3746,164050
f01020da:	b8 10 00 00 00       	mov    $0x10,%eaxf01020da3747,164064
f01020df:	eb 85                	jmp    f0102066 <.L35+0x2a>f01020df3748,164114
f01020e1:	8b 45 14             	mov    0x14(%ebp),%eaxf01020e13750,164211
f01020e4:	8b 10                	mov    (%eax),%edxf01020e43751,164266
f01020e6:	b9 00 00 00 00       	mov    $0x0,%ecxf01020e63752,164317
f01020eb:	8d 40 04             	lea    0x4(%eax),%eaxf01020eb3753,164366
f01020ee:	89 45 14             	mov    %eax,0x14(%ebp)f01020ee3754,164420
			base = 16;base3755,164475
f01020f1:	b8 10 00 00 00       	mov    $0x10,%eaxf01020f13756,164489
f01020f6:	e9 6b ff ff ff       	jmp    f0102066 <.L35+0x2a>f01020f63757,164539
f01020fb <.L25>:f01020fb3759,164600
f01020fb:	83 ec 08             	sub    $0x8,%espf01020fb3761,164639
f01020fe:	56                   	push   %esif01020fe3762,164688
f01020ff:	6a 25                	push   $0x25f01020ff3763,164732
f0102101:	ff 55 08             	call   *0x8(%ebp)f01021013764,164777
f0102104:	83 c4 10             	add    $0x10,%espf01021043766,164837
f0102107:	e9 75 ff ff ff       	jmp    f0102081 <.L35+0x45>f01021073767,164887
f010210c <.L22>:f010210c3769,164948
f010210c:	83 ec 08             	sub    $0x8,%espf010210c3771,164988
f010210f:	56                   	push   %esif010210f3772,165037
f0102110:	6a 25                	push   $0x25f01021103773,165081
f0102112:	ff 55 08             	call   *0x8(%ebp)f01021123774,165126
f0102115:	83 c4 10             	add    $0x10,%espf01021153776,165214
f0102118:	89 f8                	mov    %edi,%eaxf01021183777,165264
f010211a:	eb 03                	jmp    f010211f <.L22+0x13>f010211a3778,165313
f010211c:	83 e8 01             	sub    $0x1,%eaxf010211c3779,165373
f010211f:	80 78 ff 25          	cmpb   $0x25,-0x1(%eax)f010211f3780,165422
f0102123:	75 f7                	jne    f010211c <.L22+0x10>f01021233781,165478
f0102125:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01021253782,165538
f0102128:	e9 54 ff ff ff       	jmp    f0102081 <.L35+0x45>f01021283783,165594
f010212d:	8d 65 f4             	lea    -0xc(%ebp),%espf010212d3785,165656
f0102130:	5b                   	pop    %ebxf01021303786,165711
f0102131:	5e                   	pop    %esif01021313787,165755
f0102132:	5f                   	pop    %edif01021323788,165799
f0102133:	5d                   	pop    %ebpf01021333789,165843
f0102134:	c3                   	ret    f01021343790,165887
f0102135 <vsnprintf>:f01021353792,165928
intint3794,165951
f0102135:	55                   	push   %ebpf01021353797,166014
f0102136:	89 e5                	mov    %esp,%ebpf01021363798,166058
f0102138:	53                   	push   %ebxf01021383799,166107
f0102139:	83 ec 14             	sub    $0x14,%espf01021393800,166151
f010213c:	e8 0e e0 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f010213c3801,166201
f0102141:	81 c3 c7 21 01 00    	add    $0x121c7,%ebxf01021413802,166273
f0102147:	8b 45 08             	mov    0x8(%ebp),%eaxf01021473803,166326
f010214a:	8b 55 0c             	mov    0xc(%ebp),%edxf010214a3804,166380
f010214d:	89 45 ec             	mov    %eax,-0x14(%ebp)f010214d3806,166475
f0102150:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecxf01021503807,166531
f0102154:	89 4d f0             	mov    %ecx,-0x10(%ebp)f01021543808,166593
f0102157:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f01021573809,166649
f010215e:	85 c0                	test   %eax,%eaxf010215e3812,166732
f0102160:	74 2b                	je     f010218d <vsnprintf+0x58>f01021603813,166781
f0102162:	85 d2                	test   %edx,%edxf01021623814,166846
f0102164:	7e 27                	jle    f010218d <vsnprintf+0x58>f01021643815,166895
f0102166:	ff 75 14             	pushl  0x14(%ebp)f01021663820,167060
f0102169:	ff 75 10             	pushl  0x10(%ebp)f01021693821,167110
f010216c:	8d 45 ec             	lea    -0x14(%ebp),%eaxf010216c3822,167160
f010216f:	50                   	push   %eaxf010216f3823,167216
f0102170:	8d 83 95 d9 fe ff    	lea    -0x1266b(%ebx),%eaxf01021703824,167260
f0102176:	50                   	push   %eaxf01021763825,167319
f0102177:	e8 5b fb ff ff       	call   f0101cd7 <vprintfmt>f01021773826,167363
f010217c:	8b 45 ec             	mov    -0x14(%ebp),%eaxf010217c3830,167470
f010217f:	c6 00 00             	movb   $0x0,(%eax)f010217f3831,167526
f0102182:	8b 45 f4             	mov    -0xc(%ebp),%eaxf01021823834,167593
f0102185:	83 c4 10             	add    $0x10,%espf01021853835,167648
f0102188:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01021883837,167700
f010218b:	c9                   	leave  f010218b3838,167755
f010218c:	c3                   	ret    f010218c3839,167795
f010218d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eaxf010218d3841,167854
f0102192:	eb f4                	jmp    f0102188 <vsnprintf+0x53>f01021923842,167910
f0102194 <snprintf>:f01021943844,167976
intint3846,167998
f0102194:	55                   	push   %ebpf01021943849,168053
f0102195:	89 e5                	mov    %esp,%ebpf01021953850,168097
f0102197:	83 ec 08             	sub    $0x8,%espf01021973851,168146
f010219a:	8d 45 14             	lea    0x14(%ebp),%eaxf010219a3856,168238
	rc = vsnprintf(buf, n, fmt, ap);rc3857,168293
f010219d:	50                   	push   %eaxf010219d3858,168327
f010219e:	ff 75 10             	pushl  0x10(%ebp)f010219e3859,168371
f01021a1:	ff 75 0c             	pushl  0xc(%ebp)f01021a13860,168421
f01021a4:	ff 75 08             	pushl  0x8(%ebp)f01021a43861,168470
f01021a7:	e8 89 ff ff ff       	call   f0102135 <vsnprintf>f01021a73862,168519
f01021ac:	c9                   	leave  f01021ac3867,168607
f01021ad:	c3                   	ret    f01021ad3868,168647
f01021ae <readline>:f01021ae3870,168688
#define BUFLEN 1024BUFLEN3871,168709
static char buf[BUFLEN];static3872,168729
char *char3874,168755
f01021ae:	55                   	push   %ebpf01021ae3877,168793
f01021af:	89 e5                	mov    %esp,%ebpf01021af3878,168837
f01021b1:	57                   	push   %edif01021b13879,168886
f01021b2:	56                   	push   %esif01021b23880,168930
f01021b3:	53                   	push   %ebxf01021b33881,168974
f01021b4:	83 ec 1c             	sub    $0x1c,%espf01021b43882,169018
f01021b7:	e8 93 df ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01021b73883,169068
f01021bc:	81 c3 4c 21 01 00    	add    $0x1214c,%ebxf01021bc3884,169140
f01021c2:	8b 45 08             	mov    0x8(%ebp),%eaxf01021c23885,169193
f01021c5:	85 c0                	test   %eax,%eaxf01021c53889,169289
f01021c7:	74 13                	je     f01021dc <readline+0x2e>f01021c73890,169338
f01021c9:	83 ec 08             	sub    $0x8,%espf01021c93892,169427
f01021cc:	50                   	push   %eaxf01021cc3893,169476
f01021cd:	8d 83 70 ec fe ff    	lea    -0x11390(%ebx),%eaxf01021cd3894,169520
f01021d3:	50                   	push   %eaxf01021d33895,169579
f01021d4:	e8 ee f6 ff ff       	call   f01018c7 <cprintf>f01021d43896,169623
f01021d9:	83 c4 10             	add    $0x10,%espf01021d93897,169681
	i = 0;i3899,169732
	echoing = iscons(0);echoing3900,169740
f01021dc:	83 ec 0c             	sub    $0xc,%espf01021dc3901,169762
f01021df:	6a 00                	push   $0x0f01021df3902,169811
f01021e1:	e8 01 e5 ff ff       	call   f01006e7 <iscons>f01021e13903,169855
f01021e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01021e63904,169912
f01021e9:	83 c4 10             	add    $0x10,%espf01021e93905,169968
	i = 0;i3906,170018
f01021ec:	bf 00 00 00 00       	mov    $0x0,%edif01021ec3907,170026
f01021f1:	eb 46                	jmp    f0102239 <readline+0x8b>f01021f13908,170075
		c = getchar();c3910,170152
f01021f3:	83 ec 08             	sub    $0x8,%espf01021f33913,170219
f01021f6:	50                   	push   %eaxf01021f63914,170268
f01021f7:	8d 83 10 f0 fe ff    	lea    -0x10ff0(%ebx),%eaxf01021f73915,170312
f01021fd:	50                   	push   %eaxf01021fd3916,170371
f01021fe:	e8 c4 f6 ff ff       	call   f01018c7 <cprintf>f01021fe3917,170415
f0102203:	83 c4 10             	add    $0x10,%espf01022033919,170489
f0102206:	b8 00 00 00 00       	mov    $0x0,%eaxf01022063920,170539
f010220b:	8d 65 f4             	lea    -0xc(%ebp),%espf010220b3927,170647
f010220e:	5b                   	pop    %ebxf010220e3928,170702
f010220f:	5e                   	pop    %esif010220f3929,170746
f0102210:	5f                   	pop    %edif01022103930,170790
f0102211:	5d                   	pop    %ebpf01022113931,170834
f0102212:	c3                   	ret    f01022123932,170878
f0102213:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01022133934,170934
f0102217:	75 05                	jne    f010221e <readline+0x70>f01022173935,170990
f0102219:	83 ef 01             	sub    $0x1,%edif01022193937,171062
f010221c:	eb 1b                	jmp    f0102239 <readline+0x8b>f010221c3938,171111
f010221e:	83 ec 0c             	sub    $0xc,%espf010221e3940,171195
f0102221:	6a 08                	push   $0x8f01022213941,171244
f0102223:	e8 9e e4 ff ff       	call   f01006c6 <cputchar>f01022233942,171288
f0102228:	83 c4 10             	add    $0x10,%espf01022283943,171347
f010222b:	eb ec                	jmp    f0102219 <readline+0x6b>f010222b3944,171397
f010222d:	89 f0                	mov    %esi,%eaxf010222d3946,171478
f010222f:	88 84 3b b8 1f 00 00 	mov    %al,0x1fb8(%ebx,%edi,1)f010222f3947,171527
f0102236:	8d 7f 01             	lea    0x1(%edi),%edif01022363948,171590
		c = getchar();c3949,171644
f0102239:	e8 98 e4 ff ff       	call   f01006d6 <getchar>f01022393950,171661
f010223e:	89 c6                	mov    %eax,%esif010223e3951,171719
f0102240:	85 c0                	test   %eax,%eaxf01022403953,171783
f0102242:	78 af                	js     f01021f3 <readline+0x45>f01022423954,171832
f0102244:	83 f8 08             	cmp    $0x8,%eaxf01022443956,171948
f0102247:	0f 94 c2             	sete   %dlf01022473957,171997
f010224a:	83 f8 7f             	cmp    $0x7f,%eaxf010224a3958,172040
f010224d:	0f 94 c0             	sete   %alf010224d3959,172090
f0102250:	08 c2                	or     %al,%dlf01022503960,172133
f0102252:	74 04                	je     f0102258 <readline+0xaa>f01022523961,172180
f0102254:	85 ff                	test   %edi,%edif01022543962,172244
f0102256:	7f bb                	jg     f0102213 <readline+0x65>f01022563963,172293
f0102258:	83 fe 1f             	cmp    $0x1f,%esif01022583965,172398
f010225b:	7e 1c                	jle    f0102279 <readline+0xcb>f010225b3966,172448
f010225d:	81 ff fe 03 00 00    	cmp    $0x3fe,%edif010225d3967,172512
f0102263:	7f 14                	jg     f0102279 <readline+0xcb>f01022633968,172563
f0102265:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01022653970,172643
f0102269:	74 c2                	je     f010222d <readline+0x7f>f01022693971,172699
f010226b:	83 ec 0c             	sub    $0xc,%espf010226b3973,172780
f010226e:	56                   	push   %esif010226e3974,172829
f010226f:	e8 52 e4 ff ff       	call   f01006c6 <cputchar>f010226f3975,172873
f0102274:	83 c4 10             	add    $0x10,%espf01022743976,172932
f0102277:	eb b4                	jmp    f010222d <readline+0x7f>f01022773977,172982
f0102279:	83 fe 0a             	cmp    $0xa,%esif01022793979,173085
f010227c:	74 05                	je     f0102283 <readline+0xd5>f010227c3980,173134
f010227e:	83 fe 0d             	cmp    $0xd,%esif010227e3981,173198
f0102281:	75 b6                	jne    f0102239 <readline+0x8b>f01022813982,173247
f0102283:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01022833984,173327
f0102287:	75 13                	jne    f010229c <readline+0xee>f01022873985,173383
f0102289:	c6 84 3b b8 1f 00 00 	movb   $0x0,0x1fb8(%ebx,%edi,1)f01022893987,173462
f0102290:	00 f01022903988,173526
f0102291:	8d 83 b8 1f 00 00    	lea    0x1fb8(%ebx),%eaxf01022913990,173555
f0102297:	e9 6f ff ff ff       	jmp    f010220b <readline+0x5d>f01022973991,173612
f010229c:	83 ec 0c             	sub    $0xc,%espf010229c3993,173696
f010229f:	6a 0a                	push   $0xaf010229f3994,173745
f01022a1:	e8 20 e4 ff ff       	call   f01006c6 <cputchar>f01022a13995,173789
f01022a6:	83 c4 10             	add    $0x10,%espf01022a63996,173848
f01022a9:	eb de                	jmp    f0102289 <readline+0xdb>f01022a93997,173898
f01022ab <strlen>:f01022ab3999,173963
#define ASM 1ASM4001,174021
intint4003,174036
f01022ab:	55                   	push   %ebpf01022ab4006,174064
f01022ac:	89 e5                	mov    %esp,%ebpf01022ac4007,174108
f01022ae:	8b 55 08             	mov    0x8(%ebp),%edxf01022ae4008,174157
f01022b1:	b8 00 00 00 00       	mov    $0x0,%eaxf01022b14012,174250
f01022b6:	eb 03                	jmp    f01022bb <strlen+0x10>f01022b64013,174299
f01022b8:	83 c0 01             	add    $0x1,%eaxf01022b84015,174368
f01022bb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)f01022bb4017,174447
f01022bf:	75 f7                	jne    f01022b8 <strlen+0xd>f01022bf4018,174505
f01022c1:	5d                   	pop    %ebpf01022c14021,174579
f01022c2:	c3                   	ret    f01022c24022,174623
f01022c3 <strnlen>:f01022c34024,174664
intint4026,174685
f01022c3:	55                   	push   %ebpf01022c34029,174727
f01022c4:	89 e5                	mov    %esp,%ebpf01022c44030,174771
f01022c6:	8b 4d 08             	mov    0x8(%ebp),%ecxf01022c64031,174820
f01022c9:	8b 55 0c             	mov    0xc(%ebp),%edxf01022c94032,174874
f01022cc:	b8 00 00 00 00       	mov    $0x0,%eaxf01022cc4036,174987
f01022d1:	eb 03                	jmp    f01022d6 <strnlen+0x13>f01022d14037,175036
f01022d3:	83 c0 01             	add    $0x1,%eaxf01022d34039,175106
f01022d6:	39 d0                	cmp    %edx,%eaxf01022d64041,175205
f01022d8:	74 06                	je     f01022e0 <strnlen+0x1d>f01022d84042,175254
f01022da:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)f01022da4043,175317
f01022de:	75 f3                	jne    f01022d3 <strnlen+0x10>f01022de4044,175375
f01022e0:	5d                   	pop    %ebpf01022e04047,175451
f01022e1:	c3                   	ret    f01022e14048,175495
f01022e2 <strcpy>:f01022e24050,175536
char *char4052,175556
f01022e2:	55                   	push   %ebpf01022e24055,175600
f01022e3:	89 e5                	mov    %esp,%ebpf01022e34056,175644
f01022e5:	53                   	push   %ebxf01022e54057,175693
f01022e6:	8b 45 08             	mov    0x8(%ebp),%eaxf01022e64058,175737
f01022e9:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01022e94059,175791
	ret = dst;ret4062,175858
f01022ec:	89 c2                	mov    %eax,%edxf01022ec4064,175905
f01022ee:	83 c1 01             	add    $0x1,%ecxf01022ee4065,175954
f01022f1:	83 c2 01             	add    $0x1,%edxf01022f14066,176003
f01022f4:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebxf01022f44067,176052
f01022f8:	88 5a ff             	mov    %bl,-0x1(%edx)f01022f84068,176107
f01022fb:	84 db                	test   %bl,%blf01022fb4069,176161
f01022fd:	75 ef                	jne    f01022ee <strcpy+0xc>f01022fd4070,176208
f01022ff:	5b                   	pop    %ebxf01022ff4074,176304
f0102300:	5d                   	pop    %ebpf01023004075,176348
f0102301:	c3                   	ret    f01023014076,176392
f0102302 <strcat>:f01023024078,176433
char *char4080,176453
f0102302:	55                   	push   %ebpf01023024083,176497
f0102303:	89 e5                	mov    %esp,%ebpf01023034084,176541
f0102305:	53                   	push   %ebxf01023054085,176590
f0102306:	8b 5d 08             	mov    0x8(%ebp),%ebxf01023064086,176634
f0102309:	53                   	push   %ebxf01023094088,176712
f010230a:	e8 9c ff ff ff       	call   f01022ab <strlen>f010230a4089,176756
f010230f:	83 c4 04             	add    $0x4,%espf010230f4090,176813
f0102312:	ff 75 0c             	pushl  0xc(%ebp)f01023124092,176887
f0102315:	01 d8                	add    %ebx,%eaxf01023154093,176936
f0102317:	50                   	push   %eaxf01023174094,176985
f0102318:	e8 c5 ff ff ff       	call   f01022e2 <strcpy>f01023184095,177029
f010231d:	89 d8                	mov    %ebx,%eaxf010231d4098,177101
f010231f:	8b 5d fc             	mov    -0x4(%ebp),%ebxf010231f4099,177150
f0102322:	c9                   	leave  f01023224100,177205
f0102323:	c3                   	ret    f01023234101,177245
f0102324 <strncpy>:f01023244103,177286
char *char4105,177307
f0102324:	55                   	push   %ebpf01023244107,177365
f0102325:	89 e5                	mov    %esp,%ebpf01023254108,177409
f0102327:	56                   	push   %esif01023274109,177458
f0102328:	53                   	push   %ebxf01023284110,177502
f0102329:	8b 75 08             	mov    0x8(%ebp),%esif01023294111,177546
f010232c:	8b 4d 0c             	mov    0xc(%ebp),%ecxf010232c4112,177600
f010232f:	89 f3                	mov    %esi,%ebxf010232f4113,177654
f0102331:	03 5d 10             	add    0x10(%ebp),%ebxf01023314114,177703
	ret = dst;ret4118,177782
f0102334:	89 f2                	mov    %esi,%edxf01023344120,177824
f0102336:	eb 0f                	jmp    f0102347 <strncpy+0x23>f01023364121,177873
f0102338:	83 c2 01             	add    $0x1,%edxf01023384123,177953
f010233b:	0f b6 01             	movzbl (%ecx),%eaxf010233b4124,178002
f010233e:	88 42 ff             	mov    %al,-0x1(%edx)f010233e4125,178053
f0102341:	80 39 01             	cmpb   $0x1,(%ecx)f01023414129,178200
f0102344:	83 d9 ff             	sbb    $0xffffffff,%ecxf01023444130,178251
f0102347:	39 da                	cmp    %ebx,%edxf01023474132,178337
f0102349:	75 ed                	jne    f0102338 <strncpy+0x14>f01023494133,178386
f010234b:	89 f0                	mov    %esi,%eaxf010234b4137,178467
f010234d:	5b                   	pop    %ebxf010234d4138,178516
f010234e:	5e                   	pop    %esif010234e4139,178560
f010234f:	5d                   	pop    %ebpf010234f4140,178604
f0102350:	c3                   	ret    f01023504141,178648
f0102351 <strlcpy>:f01023514143,178689
size_tsize_t4145,178710
f0102351:	55                   	push   %ebpf01023514148,178768
f0102352:	89 e5                	mov    %esp,%ebpf01023524149,178812
f0102354:	56                   	push   %esif01023544150,178861
f0102355:	53                   	push   %ebxf01023554151,178905
f0102356:	8b 75 08             	mov    0x8(%ebp),%esif01023564152,178949
f0102359:	8b 55 0c             	mov    0xc(%ebp),%edxf01023594153,179003
f010235c:	8b 4d 10             	mov    0x10(%ebp),%ecxf010235c4154,179057
f010235f:	89 f0                	mov    %esi,%eaxf010235f4155,179112
f0102361:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebxf01023614156,179161
	dst_in = dst;dst_in4159,179239
f0102365:	85 c9                	test   %ecx,%ecxf01023654161,179271
f0102367:	75 0b                	jne    f0102374 <strlcpy+0x23>f01023674162,179320
f0102369:	eb 17                	jmp    f0102382 <strlcpy+0x31>f01023694163,179383
f010236b:	83 c2 01             	add    $0x1,%edxf010236b4166,179503
f010236e:	83 c0 01             	add    $0x1,%eaxf010236e4167,179552
f0102371:	88 48 ff             	mov    %cl,-0x1(%eax)f01023714168,179601
f0102374:	39 d8                	cmp    %ebx,%eaxf01023744170,179692
f0102376:	74 07                	je     f010237f <strlcpy+0x2e>f01023764171,179741
f0102378:	0f b6 0a             	movzbl (%edx),%ecxf01023784172,179804
f010237b:	84 c9                	test   %cl,%clf010237b4173,179855
f010237d:	75 ec                	jne    f010236b <strlcpy+0x1a>f010237d4174,179902
f010237f:	c6 00 00             	movb   $0x0,(%eax)f010237f4176,179980
f0102382:	29 f0                	sub    %esi,%eaxf01023824179,180056
f0102384:	5b                   	pop    %ebxf01023844181,180107
f0102385:	5e                   	pop    %esif01023854182,180151
f0102386:	5d                   	pop    %ebpf01023864183,180195
f0102387:	c3                   	ret    f01023874184,180239
f0102388 <strcmp>:f01023884186,180280
intint4188,180300
f0102388:	55                   	push   %ebpf01023884191,180343
f0102389:	89 e5                	mov    %esp,%ebpf01023894192,180387
f010238b:	8b 4d 08             	mov    0x8(%ebp),%ecxf010238b4193,180436
f010238e:	8b 55 0c             	mov    0xc(%ebp),%edxf010238e4194,180490
f0102391:	eb 06                	jmp    f0102399 <strcmp+0x11>f01023914196,180568
f0102393:	83 c1 01             	add    $0x1,%ecxf01023934198,180642
f0102396:	83 c2 01             	add    $0x1,%edxf01023964199,180691
f0102399:	0f b6 01             	movzbl (%ecx),%eaxf01023994201,180764
f010239c:	84 c0                	test   %al,%alf010239c4202,180815
f010239e:	74 04                	je     f01023a4 <strcmp+0x1c>f010239e4203,180862
f01023a0:	3a 02                	cmp    (%edx),%alf01023a04204,180924
f01023a2:	74 ef                	je     f0102393 <strcmp+0xb>f01023a24205,180974
f01023a4:	0f b6 c0             	movzbl %al,%eaxf01023a44207,181092
f01023a7:	0f b6 12             	movzbl (%edx),%edxf01023a74208,181140
f01023aa:	29 d0                	sub    %edx,%eaxf01023aa4209,181191
f01023ac:	5d                   	pop    %ebpf01023ac4211,181242
f01023ad:	c3                   	ret    f01023ad4212,181286
f01023ae <strncmp>:f01023ae4214,181327
intint4216,181348
f01023ae:	55                   	push   %ebpf01023ae4219,181402
f01023af:	89 e5                	mov    %esp,%ebpf01023af4220,181446
f01023b1:	53                   	push   %ebxf01023b14221,181495
f01023b2:	8b 45 08             	mov    0x8(%ebp),%eaxf01023b24222,181539
f01023b5:	8b 55 0c             	mov    0xc(%ebp),%edxf01023b54223,181593
f01023b8:	89 c3                	mov    %eax,%ebxf01023b84224,181647
f01023ba:	03 5d 10             	add    0x10(%ebp),%ebxf01023ba4225,181696
f01023bd:	eb 06                	jmp    f01023c5 <strncmp+0x17>f01023bd4227,181784
f01023bf:	83 c0 01             	add    $0x1,%eaxf01023bf4229,181864
f01023c2:	83 c2 01             	add    $0x1,%edxf01023c24230,181913
f01023c5:	39 d8                	cmp    %ebx,%eaxf01023c54232,181995
f01023c7:	74 16                	je     f01023df <strncmp+0x31>f01023c74233,182044
f01023c9:	0f b6 08             	movzbl (%eax),%ecxf01023c94234,182107
f01023cc:	84 c9                	test   %cl,%clf01023cc4235,182158
f01023ce:	74 04                	je     f01023d4 <strncmp+0x26>f01023ce4236,182205
f01023d0:	3a 0a                	cmp    (%edx),%clf01023d04237,182268
f01023d2:	74 eb                	je     f01023bf <strncmp+0x11>f01023d24238,182318
f01023d4:	0f b6 00             	movzbl (%eax),%eaxf01023d44243,182470
f01023d7:	0f b6 12             	movzbl (%edx),%edxf01023d74244,182521
f01023da:	29 d0                	sub    %edx,%eaxf01023da4245,182572
f01023dc:	5b                   	pop    %ebxf01023dc4247,182623
f01023dd:	5d                   	pop    %ebpf01023dd4248,182667
f01023de:	c3                   	ret    f01023de4249,182711
f01023df:	b8 00 00 00 00       	mov    $0x0,%eaxf01023df4251,182763
f01023e4:	eb f6                	jmp    f01023dc <strncmp+0x2e>f01023e44252,182812
f01023e6 <strchr>:f01023e64254,182876
char *char4258,183002
f01023e6:	55                   	push   %ebpf01023e64261,183041
f01023e7:	89 e5                	mov    %esp,%ebpf01023e74262,183085
f01023e9:	8b 45 08             	mov    0x8(%ebp),%eaxf01023e94263,183134
f01023ec:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf01023ec4264,183188
f01023f0:	0f b6 10             	movzbl (%eax),%edxf01023f04266,183259
f01023f3:	84 d2                	test   %dl,%dlf01023f34267,183310
f01023f5:	74 09                	je     f0102400 <strchr+0x1a>f01023f54268,183357
f01023f7:	38 ca                	cmp    %cl,%dlf01023f74270,183434
f01023f9:	74 0a                	je     f0102405 <strchr+0x1f>f01023f94271,183481
f01023fb:	83 c0 01             	add    $0x1,%eaxf01023fb4273,183560
f01023fe:	eb f0                	jmp    f01023f0 <strchr+0xa>f01023fe4274,183609
f0102400:	b8 00 00 00 00       	mov    $0x0,%eaxf01024004277,183703
f0102405:	5d                   	pop    %ebpf01024054279,183754
f0102406:	c3                   	ret    f01024064280,183798
f0102407 <strfind>:f01024074282,183839
char *char4286,183997
f0102407:	55                   	push   %ebpf01024074289,184037
f0102408:	89 e5                	mov    %esp,%ebpf01024084290,184081
f010240a:	8b 45 08             	mov    0x8(%ebp),%eaxf010240a4291,184130
f010240d:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf010240d4292,184184
f0102411:	eb 03                	jmp    f0102416 <strfind+0xf>f01024114294,184255
f0102413:	83 c0 01             	add    $0x1,%eaxf01024134295,184317
f0102416:	0f b6 10             	movzbl (%eax),%edxf01024164296,184366
f0102419:	38 ca                	cmp    %cl,%dlf01024194298,184432
f010241b:	74 04                	je     f0102421 <strfind+0x1a>f010241b4299,184479
f010241d:	84 d2                	test   %dl,%dlf010241d4300,184542
f010241f:	75 f2                	jne    f0102413 <strfind+0xc>f010241f4301,184589
f0102421:	5d                   	pop    %ebpf01024214305,184683
f0102422:	c3                   	ret    f01024224306,184727
f0102423 <memset>:f01024234308,184768
void *void4311,184796
f0102423:	55                   	push   %ebpf01024234314,184838
f0102424:	89 e5                	mov    %esp,%ebpf01024244315,184882
f0102426:	57                   	push   %edif01024264316,184931
f0102427:	56                   	push   %esif01024274317,184975
f0102428:	53                   	push   %ebxf01024284318,185019
f0102429:	8b 7d 08             	mov    0x8(%ebp),%edif01024294319,185063
f010242c:	8b 4d 10             	mov    0x10(%ebp),%ecxf010242c4320,185117
f010242f:	85 c9                	test   %ecx,%ecxf010242f4324,185196
f0102431:	74 13                	je     f0102446 <memset+0x23>f01024314325,185245
f0102433:	f7 c7 03 00 00 00    	test   $0x3,%edif01024334328,185353
f0102439:	75 05                	jne    f0102440 <memset+0x1d>f01024394329,185402
f010243b:	f6 c1 03             	test   $0x3,%clf010243b4330,185464
f010243e:	74 0d                	je     f010244d <memset+0x2a>f010243e4331,185512
		c = (c<<24)|(c<<16)|(c<<8)|c;c4332,185574
f0102440:	8b 45 0c             	mov    0xc(%ebp),%eaxf01024404338,185738
f0102443:	fc                   	cld    f01024434339,185792
f0102444:	f3 aa                	rep stos %al,%es:(%edi)f01024444340,185832
f0102446:	89 f8                	mov    %edi,%eaxf01024464345,185955
f0102448:	5b                   	pop    %ebxf01024484346,186004
f0102449:	5e                   	pop    %esif01024494347,186048
f010244a:	5f                   	pop    %edif010244a4348,186092
f010244b:	5d                   	pop    %ebpf010244b4349,186136
f010244c:	c3                   	ret    f010244c4350,186180
f010244d:	0f b6 55 0c          	movzbl 0xc(%ebp),%edxf010244d4352,186233
		c = (c<<24)|(c<<16)|(c<<8)|c;c4353,186287
f0102451:	89 d3                	mov    %edx,%ebxf01024514354,186319
f0102453:	c1 e3 08             	shl    $0x8,%ebxf01024534355,186368
f0102456:	89 d0                	mov    %edx,%eaxf01024564356,186417
f0102458:	c1 e0 18             	shl    $0x18,%eaxf01024584357,186466
f010245b:	89 d6                	mov    %edx,%esif010245b4358,186516
f010245d:	c1 e6 10             	shl    $0x10,%esif010245d4359,186565
f0102460:	09 f0                	or     %esi,%eaxf01024604360,186615
f0102462:	09 c2                	or     %eax,%edxf01024624361,186664
f0102464:	09 da                	or     %ebx,%edxf01024644362,186713
f0102466:	c1 e9 02             	shr    $0x2,%ecxf01024664364,186796
f0102469:	89 d0                	mov    %edx,%eaxf01024694366,186879
f010246b:	fc                   	cld    f010246b4367,186928
f010246c:	f3 ab                	rep stos %eax,%es:(%edi)f010246c4368,186968
f010246e:	eb d6                	jmp    f0102446 <memset+0x23>f010246e4369,187025
f0102470 <memmove>:f01024704371,187088
void *void4373,187109
f0102470:	55                   	push   %ebpf01024704376,187164
f0102471:	89 e5                	mov    %esp,%ebpf01024714377,187208
f0102473:	57                   	push   %edif01024734378,187257
f0102474:	56                   	push   %esif01024744379,187301
f0102475:	8b 45 08             	mov    0x8(%ebp),%eaxf01024754380,187345
f0102478:	8b 75 0c             	mov    0xc(%ebp),%esif01024784381,187399
f010247b:	8b 4d 10             	mov    0x10(%ebp),%ecxf010247b4382,187453
	s = src;s4386,187535
	d = dst;d4387,187545
f010247e:	39 c6                	cmp    %eax,%esif010247e4389,187582
f0102480:	73 35                	jae    f01024b7 <memmove+0x47>f01024804390,187631
f0102482:	8d 14 0e             	lea    (%esi,%ecx,1),%edxf01024824391,187694
f0102485:	39 c2                	cmp    %eax,%edxf01024854392,187752
f0102487:	76 2e                	jbe    f01024b7 <memmove+0x47>f01024874393,187801
f0102489:	8d 3c 08             	lea    (%eax,%ecx,1),%edif01024894396,187884
f010248c:	89 d6                	mov    %edx,%esif010248c4398,187992
f010248e:	09 fe                	or     %edi,%esif010248e4399,188041
f0102490:	f7 c6 03 00 00 00    	test   $0x3,%esif01024904400,188090
f0102496:	74 0c                	je     f01024a4 <memmove+0x34>f01024964401,188139
f0102498:	83 ef 01             	sub    $0x1,%edif01024984407,188393
f010249b:	8d 72 ff             	lea    -0x1(%edx),%esif010249b4408,188442
f010249e:	fd                   	std    f010249e4410,188532
f010249f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f010249f4411,188572
f01024a1:	fc                   	cld    f01024a14414,188717
f01024a2:	eb 21                	jmp    f01024c5 <memmove+0x55>f01024a24415,188757
f01024a4:	f6 c1 03             	test   $0x3,%clf01024a44417,188870
f01024a7:	75 ef                	jne    f0102498 <memmove+0x28>f01024a74418,188918
f01024a9:	83 ef 04             	sub    $0x4,%edif01024a94420,189039
f01024ac:	8d 72 fc             	lea    -0x4(%edx),%esif01024ac4421,189088
f01024af:	c1 e9 02             	shr    $0x2,%ecxf01024af4422,189143
f01024b2:	fd                   	std    f01024b24424,189227
f01024b3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01024b34425,189267
f01024b5:	eb ea                	jmp    f01024a1 <memmove+0x31>f01024b54426,189331
f01024b7:	89 f2                	mov    %esi,%edxf01024b74429,189454
f01024b9:	09 c2                	or     %eax,%edxf01024b94430,189503
f01024bb:	f6 c2 03             	test   $0x3,%dlf01024bb4431,189552
f01024be:	74 09                	je     f01024c9 <memmove+0x59>f01024be4432,189600
f01024c0:	89 c7                	mov    %eax,%edif01024c04437,189794
f01024c2:	fc                   	cld    f01024c24438,189843
f01024c3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f01024c34439,189883
f01024c5:	5e                   	pop    %esif01024c54444,190017
f01024c6:	5f                   	pop    %edif01024c64445,190061
f01024c7:	5d                   	pop    %ebpf01024c74446,190105
f01024c8:	c3                   	ret    f01024c84447,190149
f01024c9:	f6 c1 03             	test   $0x3,%clf01024c94449,190239
f01024cc:	75 f2                	jne    f01024c0 <memmove+0x50>f01024cc4450,190287
f01024ce:	c1 e9 02             	shr    $0x2,%ecxf01024ce4452,190404
f01024d1:	89 c7                	mov    %eax,%edif01024d14454,190488
f01024d3:	fc                   	cld    f01024d34455,190537
f01024d4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01024d44456,190577
f01024d6:	eb ed                	jmp    f01024c5 <memmove+0x55>f01024d64457,190641
f01024d8 <memcpy>:f01024d84459,190705
void *void4463,190734
f01024d8:	55                   	push   %ebpf01024d84466,190788
f01024d9:	89 e5                	mov    %esp,%ebpf01024d94467,190832
f01024db:	ff 75 10             	pushl  0x10(%ebp)f01024db4469,190911
f01024de:	ff 75 0c             	pushl  0xc(%ebp)f01024de4470,190961
f01024e1:	ff 75 08             	pushl  0x8(%ebp)f01024e14471,191010
f01024e4:	e8 87 ff ff ff       	call   f0102470 <memmove>f01024e44472,191059
f01024e9:	c9                   	leave  f01024e94474,191119
f01024ea:	c3                   	ret    f01024ea4475,191159
f01024eb <memcmp>:f01024eb4477,191200
intint4479,191220
f01024eb:	55                   	push   %ebpf01024eb4482,191275
f01024ec:	89 e5                	mov    %esp,%ebpf01024ec4483,191319
f01024ee:	56                   	push   %esif01024ee4484,191368
f01024ef:	53                   	push   %ebxf01024ef4485,191412
f01024f0:	8b 45 08             	mov    0x8(%ebp),%eaxf01024f04486,191456
f01024f3:	8b 55 0c             	mov    0xc(%ebp),%edxf01024f34487,191510
f01024f6:	89 c6                	mov    %eax,%esif01024f64488,191564
f01024f8:	03 75 10             	add    0x10(%ebp),%esif01024f84489,191613
f01024fb:	39 f0                	cmp    %esi,%eaxf01024fb4494,191774
f01024fd:	74 1c                	je     f010251b <memcmp+0x30>f01024fd4495,191823
f01024ff:	0f b6 08             	movzbl (%eax),%ecxf01024ff4497,191903
f0102502:	0f b6 1a             	movzbl (%edx),%ebxf01025024498,191954
f0102505:	38 d9                	cmp    %bl,%clf01025054499,192005
f0102507:	75 08                	jne    f0102511 <memcmp+0x26>f01025074500,192052
f0102509:	83 c0 01             	add    $0x1,%eaxf01025094503,192161
f010250c:	83 c2 01             	add    $0x1,%edxf010250c4504,192210
f010250f:	eb ea                	jmp    f01024fb <memcmp+0x10>f010250f4505,192259
f0102511:	0f b6 c1             	movzbl %cl,%eaxf01025114507,192354
f0102514:	0f b6 db             	movzbl %bl,%ebxf01025144508,192402
f0102517:	29 d8                	sub    %ebx,%eaxf01025174509,192450
f0102519:	eb 05                	jmp    f0102520 <memcmp+0x35>f01025194510,192499
f010251b:	b8 00 00 00 00       	mov    $0x0,%eaxf010251b4514,192576
f0102520:	5b                   	pop    %ebxf01025204516,192627
f0102521:	5e                   	pop    %esif01025214517,192671
f0102522:	5d                   	pop    %ebpf01025224518,192715
f0102523:	c3                   	ret    f01025234519,192759
f0102524 <memfind>:f01025244521,192800
void *void4523,192821
f0102524:	55                   	push   %ebpf01025244526,192870
f0102525:	89 e5                	mov    %esp,%ebpf01025254527,192914
f0102527:	8b 45 08             	mov    0x8(%ebp),%eaxf01025274528,192963
f010252a:	8b 4d 0c             	mov    0xc(%ebp),%ecxf010252a4529,193017
f010252d:	89 c2                	mov    %eax,%edxf010252d4531,193113
f010252f:	03 55 10             	add    0x10(%ebp),%edxf010252f4532,193162
f0102532:	39 d0                	cmp    %edx,%eaxf01025324534,193240
f0102534:	73 09                	jae    f010253f <memfind+0x1b>f01025344535,193289
f0102536:	38 08                	cmp    %cl,(%eax)f01025364537,193407
f0102538:	74 05                	je     f010253f <memfind+0x1b>f01025384538,193457
f010253a:	83 c0 01             	add    $0x1,%eaxf010253a4540,193543
f010253d:	eb f3                	jmp    f0102532 <memfind+0xe>f010253d4541,193592
f010253f:	5d                   	pop    %ebpf010253f4545,193686
f0102540:	c3                   	ret    f01025404546,193730
f0102541 <strtol>:f01025414548,193771
longlong4550,193791
f0102541:	55                   	push   %ebpf01025414553,193845
f0102542:	89 e5                	mov    %esp,%ebpf01025424554,193889
f0102544:	57                   	push   %edif01025444555,193938
f0102545:	56                   	push   %esif01025454556,193982
f0102546:	53                   	push   %ebxf01025464557,194026
f0102547:	8b 4d 08             	mov    0x8(%ebp),%ecxf01025474558,194070
f010254a:	8b 5d 10             	mov    0x10(%ebp),%ebxf010254a4559,194124
f010254d:	eb 03                	jmp    f0102552 <strtol+0x11>f010254d4565,194272
f010254f:	83 c1 01             	add    $0x1,%ecxf010254f4567,194341
f0102552:	0f b6 01             	movzbl (%ecx),%eaxf01025524569,194423
f0102555:	3c 20                	cmp    $0x20,%alf01025554570,194474
f0102557:	74 f6                	je     f010254f <strtol+0xe>f01025574571,194523
f0102559:	3c 09                	cmp    $0x9,%alf01025594572,194584
f010255b:	74 f2                	je     f010254f <strtol+0xe>f010255b4573,194632
f010255d:	3c 2b                	cmp    $0x2b,%alf010255d4577,194730
f010255f:	74 2e                	je     f010258f <strtol+0x4e>f010255f4578,194779
f0102561:	bf 00 00 00 00       	mov    $0x0,%edif01025614580,194855
f0102566:	3c 2d                	cmp    $0x2d,%alf01025664583,194932
f0102568:	74 2f                	je     f0102599 <strtol+0x58>f01025684584,194981
f010256a:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebxf010256a4589,195153
f0102570:	75 05                	jne    f0102577 <strtol+0x36>f01025704590,195209
f0102572:	80 39 30             	cmpb   $0x30,(%ecx)f01025724591,195271
f0102575:	74 2c                	je     f01025a3 <strtol+0x62>f01025754592,195323
f0102577:	85 db                	test   %ebx,%ebxf01025774595,195442
f0102579:	75 0a                	jne    f0102585 <strtol+0x44>f01025794596,195491
		base = 10;base4599,195591
f010257b:	bb 0a 00 00 00       	mov    $0xa,%ebxf010257b4600,195604
f0102580:	80 39 30             	cmpb   $0x30,(%ecx)f01025804602,195689
f0102583:	74 28                	je     f01025ad <strtol+0x6c>f01025834603,195741
		base = 10;base4604,195803
f0102585:	b8 00 00 00 00       	mov    $0x0,%eaxf01025854605,195816
f010258a:	89 5d 10             	mov    %ebx,0x10(%ebp)f010258a4606,195865
f010258d:	eb 50                	jmp    f01025df <strtol+0x9e>f010258d4607,195920
f010258f:	83 c1 01             	add    $0x1,%ecxf010258f4609,195989
f0102592:	bf 00 00 00 00       	mov    $0x0,%edif01025924611,196052
f0102597:	eb d1                	jmp    f010256a <strtol+0x29>f01025974612,196101
f0102599:	83 c1 01             	add    $0x1,%ecxf01025994614,196179
f010259c:	bf 01 00 00 00       	mov    $0x1,%edif010259c4615,196228
f01025a1:	eb c7                	jmp    f010256a <strtol+0x29>f01025a14616,196277
f01025a3:	80 79 01 78          	cmpb   $0x78,0x1(%ecx)f01025a34618,196403
f01025a7:	74 0e                	je     f01025b7 <strtol+0x76>f01025a74619,196458
f01025a9:	85 db                	test   %ebx,%ebxf01025a94621,196556
f01025ab:	75 d8                	jne    f0102585 <strtol+0x44>f01025ab4622,196605
f01025ad:	83 c1 01             	add    $0x1,%ecxf01025ad4624,196684
f01025b0:	bb 08 00 00 00       	mov    $0x8,%ebxf01025b04625,196733
f01025b5:	eb ce                	jmp    f0102585 <strtol+0x44>f01025b54626,196782
f01025b7:	83 c1 02             	add    $0x2,%ecxf01025b74628,196865
f01025ba:	bb 10 00 00 00       	mov    $0x10,%ebxf01025ba4629,196914
f01025bf:	eb c4                	jmp    f0102585 <strtol+0x44>f01025bf4630,196964
			dig = *s - '0';dig4635,197081
f01025c1:	8d 72 9f             	lea    -0x61(%edx),%esif01025c14637,197135
f01025c4:	89 f3                	mov    %esi,%ebxf01025c44638,197191
f01025c6:	80 fb 19             	cmp    $0x19,%blf01025c64639,197240
f01025c9:	77 29                	ja     f01025f4 <strtol+0xb3>f01025c94640,197289
			dig = *s - 'a' + 10;dig4641,197351
f01025cb:	0f be d2             	movsbl %dl,%edxf01025cb4642,197375
f01025ce:	83 ea 57             	sub    $0x57,%edxf01025ce4643,197423
			dig = *s - 'A' + 10;dig4645,197508
f01025d1:	3b 55 10             	cmp    0x10(%ebp),%edxf01025d14649,197568
f01025d4:	7d 30                	jge    f0102606 <strtol+0xc5>f01025d44650,197623
f01025d6:	83 c1 01             	add    $0x1,%ecxf01025d64653,197728
f01025d9:	0f af 45 10          	imul   0x10(%ebp),%eaxf01025d94654,197777
f01025dd:	01 d0                	add    %edx,%eaxf01025dd4655,197832
f01025df:	0f b6 11             	movzbl (%ecx),%edxf01025df4657,197911
f01025e2:	8d 72 d0             	lea    -0x30(%edx),%esif01025e24658,197962
f01025e5:	89 f3                	mov    %esi,%ebxf01025e54659,198018
f01025e7:	80 fb 09             	cmp    $0x9,%blf01025e74660,198067
f01025ea:	77 d5                	ja     f01025c1 <strtol+0x80>f01025ea4661,198115
			dig = *s - '0';dig4662,198177
f01025ec:	0f be d2             	movsbl %dl,%edxf01025ec4663,198196
f01025ef:	83 ea 30             	sub    $0x30,%edxf01025ef4664,198244
f01025f2:	eb dd                	jmp    f01025d1 <strtol+0x90>f01025f24665,198294
f01025f4:	8d 72 bf             	lea    -0x41(%edx),%esif01025f44667,198391
f01025f7:	89 f3                	mov    %esi,%ebxf01025f74668,198447
f01025f9:	80 fb 19             	cmp    $0x19,%blf01025f94669,198496
f01025fc:	77 08                	ja     f0102606 <strtol+0xc5>f01025fc4670,198545
			dig = *s - 'A' + 10;dig4671,198607
f01025fe:	0f be d2             	movsbl %dl,%edxf01025fe4672,198631
f0102601:	83 ea 37             	sub    $0x37,%edxf01026014673,198679
f0102604:	eb cb                	jmp    f01025d1 <strtol+0x90>f01026044674,198729
f0102606:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)f01026064679,198848
f010260a:	74 05                	je     f0102611 <strtol+0xd0>f010260a4680,198902
f010260c:	8b 75 0c             	mov    0xc(%ebp),%esif010260c4682,198988
f010260f:	89 0e                	mov    %ecx,(%esi)f010260f4683,199042
f0102611:	89 c2                	mov    %eax,%edxf01026114685,199121
f0102613:	f7 da                	neg    %edxf01026134686,199170
f0102615:	85 ff                	test   %edi,%edif01026154687,199214
f0102617:	0f 45 c2             	cmovne %edx,%eaxf01026174688,199263
f010261a:	5b                   	pop    %ebxf010261a4690,199314
f010261b:	5e                   	pop    %esif010261b4691,199358
f010261c:	5f                   	pop    %edif010261c4692,199402
f010261d:	5d                   	pop    %ebpf010261d4693,199446
f010261e:	c3                   	ret    f010261e4694,199490
f010261f:	90                   	nopf010261f4695,199530
f0102620 <__udivdi3>:f01026204697,199567
f0102620:	55                   	push   %ebpf01026204698,199589
f0102621:	57                   	push   %edif01026214699,199633
f0102622:	56                   	push   %esif01026224700,199677
f0102623:	53                   	push   %ebxf01026234701,199721
f0102624:	83 ec 1c             	sub    $0x1c,%espf01026244702,199765
f0102627:	8b 54 24 3c          	mov    0x3c(%esp),%edxf01026274703,199815
f010262b:	8b 6c 24 30          	mov    0x30(%esp),%ebpf010262b4704,199870
f010262f:	8b 74 24 34          	mov    0x34(%esp),%esif010262f4705,199925
f0102633:	8b 5c 24 38          	mov    0x38(%esp),%ebxf01026334706,199980
f0102637:	85 d2                	test   %edx,%edxf01026374707,200035
f0102639:	75 35                	jne    f0102670 <__udivdi3+0x50>f01026394708,200084
f010263b:	39 f3                	cmp    %esi,%ebxf010263b4709,200149
f010263d:	0f 87 bd 00 00 00    	ja     f0102700 <__udivdi3+0xe0>f010263d4710,200198
f0102643:	85 db                	test   %ebx,%ebxf01026434711,200263
f0102645:	89 d9                	mov    %ebx,%ecxf01026454712,200312
f0102647:	75 0b                	jne    f0102654 <__udivdi3+0x34>f01026474713,200361
f0102649:	b8 01 00 00 00       	mov    $0x1,%eaxf01026494714,200426
f010264e:	31 d2                	xor    %edx,%edxf010264e4715,200475
f0102650:	f7 f3                	div    %ebxf01026504716,200524
f0102652:	89 c1                	mov    %eax,%ecxf01026524717,200568
f0102654:	31 d2                	xor    %edx,%edxf01026544718,200617
f0102656:	89 f0                	mov    %esi,%eaxf01026564719,200666
f0102658:	f7 f1                	div    %ecxf01026584720,200715
f010265a:	89 c6                	mov    %eax,%esif010265a4721,200759
f010265c:	89 e8                	mov    %ebp,%eaxf010265c4722,200808
f010265e:	89 f7                	mov    %esi,%edif010265e4723,200857
f0102660:	f7 f1                	div    %ecxf01026604724,200906
f0102662:	89 fa                	mov    %edi,%edxf01026624725,200950
f0102664:	83 c4 1c             	add    $0x1c,%espf01026644726,200999
f0102667:	5b                   	pop    %ebxf01026674727,201049
f0102668:	5e                   	pop    %esif01026684728,201093
f0102669:	5f                   	pop    %edif01026694729,201137
f010266a:	5d                   	pop    %ebpf010266a4730,201181
f010266b:	c3                   	ret    f010266b4731,201225
f010266c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif010266c4732,201265
f0102670:	39 f2                	cmp    %esi,%edxf01026704733,201326
f0102672:	77 7c                	ja     f01026f0 <__udivdi3+0xd0>f01026724734,201375
f0102674:	0f bd fa             	bsr    %edx,%edif01026744735,201440
f0102677:	83 f7 1f             	xor    $0x1f,%edif01026774736,201489
f010267a:	0f 84 98 00 00 00    	je     f0102718 <__udivdi3+0xf8>f010267a4737,201539
f0102680:	89 f9                	mov    %edi,%ecxf01026804738,201604
f0102682:	b8 20 00 00 00       	mov    $0x20,%eaxf01026824739,201653
f0102687:	29 f8                	sub    %edi,%eaxf01026874740,201703
f0102689:	d3 e2                	shl    %cl,%edxf01026894741,201752
f010268b:	89 54 24 08          	mov    %edx,0x8(%esp)f010268b4742,201800
f010268f:	89 c1                	mov    %eax,%ecxf010268f4743,201854
f0102691:	89 da                	mov    %ebx,%edxf01026914744,201903
f0102693:	d3 ea                	shr    %cl,%edxf01026934745,201952
f0102695:	8b 4c 24 08          	mov    0x8(%esp),%ecxf01026954746,202000
f0102699:	09 d1                	or     %edx,%ecxf01026994747,202054
f010269b:	89 f2                	mov    %esi,%edxf010269b4748,202103
f010269d:	89 4c 24 08          	mov    %ecx,0x8(%esp)f010269d4749,202152
f01026a1:	89 f9                	mov    %edi,%ecxf01026a14750,202206
f01026a3:	d3 e3                	shl    %cl,%ebxf01026a34751,202255
f01026a5:	89 c1                	mov    %eax,%ecxf01026a54752,202303
f01026a7:	d3 ea                	shr    %cl,%edxf01026a74753,202352
f01026a9:	89 f9                	mov    %edi,%ecxf01026a94754,202400
f01026ab:	89 5c 24 0c          	mov    %ebx,0xc(%esp)f01026ab4755,202449
f01026af:	d3 e6                	shl    %cl,%esif01026af4756,202503
f01026b1:	89 eb                	mov    %ebp,%ebxf01026b14757,202551
f01026b3:	89 c1                	mov    %eax,%ecxf01026b34758,202600
f01026b5:	d3 eb                	shr    %cl,%ebxf01026b54759,202649
f01026b7:	09 de                	or     %ebx,%esif01026b74760,202697
f01026b9:	89 f0                	mov    %esi,%eaxf01026b94761,202746
f01026bb:	f7 74 24 08          	divl   0x8(%esp)f01026bb4762,202795
f01026bf:	89 d6                	mov    %edx,%esif01026bf4763,202844
f01026c1:	89 c3                	mov    %eax,%ebxf01026c14764,202893
f01026c3:	f7 64 24 0c          	mull   0xc(%esp)f01026c34765,202942
f01026c7:	39 d6                	cmp    %edx,%esif01026c74766,202991
f01026c9:	72 0c                	jb     f01026d7 <__udivdi3+0xb7>f01026c94767,203040
f01026cb:	89 f9                	mov    %edi,%ecxf01026cb4768,203105
f01026cd:	d3 e5                	shl    %cl,%ebpf01026cd4769,203154
f01026cf:	39 c5                	cmp    %eax,%ebpf01026cf4770,203202
f01026d1:	73 5d                	jae    f0102730 <__udivdi3+0x110>f01026d14771,203251
f01026d3:	39 d6                	cmp    %edx,%esif01026d34772,203317
f01026d5:	75 59                	jne    f0102730 <__udivdi3+0x110>f01026d54773,203366
f01026d7:	8d 43 ff             	lea    -0x1(%ebx),%eaxf01026d74774,203432
f01026da:	31 ff                	xor    %edi,%edif01026da4775,203487
f01026dc:	89 fa                	mov    %edi,%edxf01026dc4776,203536
f01026de:	83 c4 1c             	add    $0x1c,%espf01026de4777,203585
f01026e1:	5b                   	pop    %ebxf01026e14778,203635
f01026e2:	5e                   	pop    %esif01026e24779,203679
f01026e3:	5f                   	pop    %edif01026e34780,203723
f01026e4:	5d                   	pop    %ebpf01026e44781,203767
f01026e5:	c3                   	ret    f01026e54782,203811
f01026e6:	8d 76 00             	lea    0x0(%esi),%esif01026e64783,203851
f01026e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif01026e94784,203905
f01026f0:	31 ff                	xor    %edi,%edif01026f04785,203966
f01026f2:	31 c0                	xor    %eax,%eaxf01026f24786,204015
f01026f4:	89 fa                	mov    %edi,%edxf01026f44787,204064
f01026f6:	83 c4 1c             	add    $0x1c,%espf01026f64788,204113
f01026f9:	5b                   	pop    %ebxf01026f94789,204163
f01026fa:	5e                   	pop    %esif01026fa4790,204207
f01026fb:	5f                   	pop    %edif01026fb4791,204251
f01026fc:	5d                   	pop    %ebpf01026fc4792,204295
f01026fd:	c3                   	ret    f01026fd4793,204339
f01026fe:	66 90                	xchg   %ax,%axf01026fe4794,204379
f0102700:	31 ff                	xor    %edi,%edif01027004795,204426
f0102702:	89 e8                	mov    %ebp,%eaxf01027024796,204475
f0102704:	89 f2                	mov    %esi,%edxf01027044797,204524
f0102706:	f7 f3                	div    %ebxf01027064798,204573
f0102708:	89 fa                	mov    %edi,%edxf01027084799,204617
f010270a:	83 c4 1c             	add    $0x1c,%espf010270a4800,204666
f010270d:	5b                   	pop    %ebxf010270d4801,204716
f010270e:	5e                   	pop    %esif010270e4802,204760
f010270f:	5f                   	pop    %edif010270f4803,204804
f0102710:	5d                   	pop    %ebpf01027104804,204848
f0102711:	c3                   	ret    f01027114805,204892
f0102712:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif01027124806,204932
f0102718:	39 f2                	cmp    %esi,%edxf01027184807,204986
f010271a:	72 06                	jb     f0102722 <__udivdi3+0x102>f010271a4808,205035
f010271c:	31 c0                	xor    %eax,%eaxf010271c4809,205101
f010271e:	39 eb                	cmp    %ebp,%ebxf010271e4810,205150
f0102720:	77 d2                	ja     f01026f4 <__udivdi3+0xd4>f01027204811,205199
f0102722:	b8 01 00 00 00       	mov    $0x1,%eaxf01027224812,205264
f0102727:	eb cb                	jmp    f01026f4 <__udivdi3+0xd4>f01027274813,205313
f0102729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01027294814,205378
f0102730:	89 d8                	mov    %ebx,%eaxf01027304815,205439
f0102732:	31 ff                	xor    %edi,%edif01027324816,205488
f0102734:	eb be                	jmp    f01026f4 <__udivdi3+0xd4>f01027344817,205537
f0102736:	66 90                	xchg   %ax,%axf01027364818,205602
f0102738:	66 90                	xchg   %ax,%axf01027384819,205649
f010273a:	66 90                	xchg   %ax,%axf010273a4820,205696
f010273c:	66 90                	xchg   %ax,%axf010273c4821,205743
f010273e:	66 90                	xchg   %ax,%axf010273e4822,205790
f0102740 <__umoddi3>:f01027404824,205838
f0102740:	55                   	push   %ebpf01027404825,205860
f0102741:	57                   	push   %edif01027414826,205904
f0102742:	56                   	push   %esif01027424827,205948
f0102743:	53                   	push   %ebxf01027434828,205992
f0102744:	83 ec 1c             	sub    $0x1c,%espf01027444829,206036
f0102747:	8b 6c 24 3c          	mov    0x3c(%esp),%ebpf01027474830,206086
f010274b:	8b 74 24 30          	mov    0x30(%esp),%esif010274b4831,206141
f010274f:	8b 5c 24 34          	mov    0x34(%esp),%ebxf010274f4832,206196
f0102753:	8b 7c 24 38          	mov    0x38(%esp),%edif01027534833,206251
f0102757:	85 ed                	test   %ebp,%ebpf01027574834,206306
f0102759:	89 f0                	mov    %esi,%eaxf01027594835,206355
f010275b:	89 da                	mov    %ebx,%edxf010275b4836,206404
f010275d:	75 19                	jne    f0102778 <__umoddi3+0x38>f010275d4837,206453
f010275f:	39 df                	cmp    %ebx,%edif010275f4838,206518
f0102761:	0f 86 b1 00 00 00    	jbe    f0102818 <__umoddi3+0xd8>f01027614839,206567
f0102767:	f7 f7                	div    %edif01027674840,206632
f0102769:	89 d0                	mov    %edx,%eaxf01027694841,206676
f010276b:	31 d2                	xor    %edx,%edxf010276b4842,206725
f010276d:	83 c4 1c             	add    $0x1c,%espf010276d4843,206774
f0102770:	5b                   	pop    %ebxf01027704844,206824
f0102771:	5e                   	pop    %esif01027714845,206868
f0102772:	5f                   	pop    %edif01027724846,206912
f0102773:	5d                   	pop    %ebpf01027734847,206956
f0102774:	c3                   	ret    f01027744848,207000
f0102775:	8d 76 00             	lea    0x0(%esi),%esif01027754849,207040
f0102778:	39 dd                	cmp    %ebx,%ebpf01027784850,207094
f010277a:	77 f1                	ja     f010276d <__umoddi3+0x2d>f010277a4851,207143
f010277c:	0f bd cd             	bsr    %ebp,%ecxf010277c4852,207208
f010277f:	83 f1 1f             	xor    $0x1f,%ecxf010277f4853,207257
f0102782:	89 4c 24 04          	mov    %ecx,0x4(%esp)f01027824854,207307
f0102786:	0f 84 b4 00 00 00    	je     f0102840 <__umoddi3+0x100>f01027864855,207361
f010278c:	b8 20 00 00 00       	mov    $0x20,%eaxf010278c4856,207427
f0102791:	89 c2                	mov    %eax,%edxf01027914857,207477
f0102793:	8b 44 24 04          	mov    0x4(%esp),%eaxf01027934858,207526
f0102797:	29 c2                	sub    %eax,%edxf01027974859,207580
f0102799:	89 c1                	mov    %eax,%ecxf01027994860,207629
f010279b:	89 f8                	mov    %edi,%eaxf010279b4861,207678
f010279d:	d3 e5                	shl    %cl,%ebpf010279d4862,207727
f010279f:	89 d1                	mov    %edx,%ecxf010279f4863,207775
f01027a1:	89 54 24 0c          	mov    %edx,0xc(%esp)f01027a14864,207824
f01027a5:	d3 e8                	shr    %cl,%eaxf01027a54865,207878
f01027a7:	09 c5                	or     %eax,%ebpf01027a74866,207926
f01027a9:	8b 44 24 04          	mov    0x4(%esp),%eaxf01027a94867,207975
f01027ad:	89 c1                	mov    %eax,%ecxf01027ad4868,208029
f01027af:	d3 e7                	shl    %cl,%edif01027af4869,208078
f01027b1:	89 d1                	mov    %edx,%ecxf01027b14870,208126
f01027b3:	89 7c 24 08          	mov    %edi,0x8(%esp)f01027b34871,208175
f01027b7:	89 df                	mov    %ebx,%edif01027b74872,208229
f01027b9:	d3 ef                	shr    %cl,%edif01027b94873,208278
f01027bb:	89 c1                	mov    %eax,%ecxf01027bb4874,208326
f01027bd:	89 f0                	mov    %esi,%eaxf01027bd4875,208375
f01027bf:	d3 e3                	shl    %cl,%ebxf01027bf4876,208424
f01027c1:	89 d1                	mov    %edx,%ecxf01027c14877,208472
f01027c3:	89 fa                	mov    %edi,%edxf01027c34878,208521
f01027c5:	d3 e8                	shr    %cl,%eaxf01027c54879,208570
f01027c7:	0f b6 4c 24 04       	movzbl 0x4(%esp),%ecxf01027c74880,208618
f01027cc:	09 d8                	or     %ebx,%eaxf01027cc4881,208672
f01027ce:	f7 f5                	div    %ebpf01027ce4882,208721
f01027d0:	d3 e6                	shl    %cl,%esif01027d04883,208765
f01027d2:	89 d1                	mov    %edx,%ecxf01027d24884,208813
f01027d4:	f7 64 24 08          	mull   0x8(%esp)f01027d44885,208862
f01027d8:	39 d1                	cmp    %edx,%ecxf01027d84886,208911
f01027da:	89 c3                	mov    %eax,%ebxf01027da4887,208960
f01027dc:	89 d7                	mov    %edx,%edif01027dc4888,209009
f01027de:	72 06                	jb     f01027e6 <__umoddi3+0xa6>f01027de4889,209058
f01027e0:	75 0e                	jne    f01027f0 <__umoddi3+0xb0>f01027e04890,209123
f01027e2:	39 c6                	cmp    %eax,%esif01027e24891,209188
f01027e4:	73 0a                	jae    f01027f0 <__umoddi3+0xb0>f01027e44892,209237
f01027e6:	2b 44 24 08          	sub    0x8(%esp),%eaxf01027e64893,209302
f01027ea:	19 ea                	sbb    %ebp,%edxf01027ea4894,209356
f01027ec:	89 d7                	mov    %edx,%edif01027ec4895,209405
f01027ee:	89 c3                	mov    %eax,%ebxf01027ee4896,209454
f01027f0:	89 ca                	mov    %ecx,%edxf01027f04897,209503
f01027f2:	0f b6 4c 24 0c       	movzbl 0xc(%esp),%ecxf01027f24898,209552
f01027f7:	29 de                	sub    %ebx,%esif01027f74899,209606
f01027f9:	19 fa                	sbb    %edi,%edxf01027f94900,209655
f01027fb:	8b 5c 24 04          	mov    0x4(%esp),%ebxf01027fb4901,209704
f01027ff:	89 d0                	mov    %edx,%eaxf01027ff4902,209758
f0102801:	d3 e0                	shl    %cl,%eaxf01028014903,209807
f0102803:	89 d9                	mov    %ebx,%ecxf01028034904,209855
f0102805:	d3 ee                	shr    %cl,%esif01028054905,209904
f0102807:	d3 ea                	shr    %cl,%edxf01028074906,209952
f0102809:	09 f0                	or     %esi,%eaxf01028094907,210000
f010280b:	83 c4 1c             	add    $0x1c,%espf010280b4908,210049
f010280e:	5b                   	pop    %ebxf010280e4909,210099
f010280f:	5e                   	pop    %esif010280f4910,210143
f0102810:	5f                   	pop    %edif01028104911,210187
f0102811:	5d                   	pop    %ebpf01028114912,210231
f0102812:	c3                   	ret    f01028124913,210275
f0102813:	90                   	nopf01028134914,210315
f0102814:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif01028144915,210351
f0102818:	85 ff                	test   %edi,%edif01028184916,210412
f010281a:	89 f9                	mov    %edi,%ecxf010281a4917,210461
f010281c:	75 0b                	jne    f0102829 <__umoddi3+0xe9>f010281c4918,210510
f010281e:	b8 01 00 00 00       	mov    $0x1,%eaxf010281e4919,210575
f0102823:	31 d2                	xor    %edx,%edxf01028234920,210624
f0102825:	f7 f7                	div    %edif01028254921,210673
f0102827:	89 c1                	mov    %eax,%ecxf01028274922,210717
f0102829:	89 d8                	mov    %ebx,%eaxf01028294923,210766
f010282b:	31 d2                	xor    %edx,%edxf010282b4924,210815
f010282d:	f7 f1                	div    %ecxf010282d4925,210864
f010282f:	89 f0                	mov    %esi,%eaxf010282f4926,210908
f0102831:	f7 f1                	div    %ecxf01028314927,210957
f0102833:	e9 31 ff ff ff       	jmp    f0102769 <__umoddi3+0x29>f01028334928,211001
f0102838:	90                   	nopf01028384929,211066
f0102839:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01028394930,211102
f0102840:	39 dd                	cmp    %ebx,%ebpf01028404931,211163
f0102842:	72 08                	jb     f010284c <__umoddi3+0x10c>f01028424932,211212
f0102844:	39 f7                	cmp    %esi,%edif01028444933,211278
f0102846:	0f 87 21 ff ff ff    	ja     f010276d <__umoddi3+0x2d>f01028464934,211327
f010284c:	89 da                	mov    %ebx,%edxf010284c4935,211392
f010284e:	89 f0                	mov    %esi,%eaxf010284e4936,211441
f0102850:	29 f8                	sub    %edi,%eaxf01028504937,211490
f0102852:	19 ea                	sbb    %ebp,%edxf01028524938,211539
f0102854:	e9 14 ff ff ff       	jmp    f010276d <__umoddi3+0x2d>f01028544939,211588

fs/test.c,99
static char *msg = "This is the NEW message of the day!\n\n";msg6,63
fs_test(void)fs_test9,131

user/sendpage.c,265
const char *str1 = "hello child environment! how are you?";str16,128
const char *str2 = "hello parent environment! I'm good.";str27,188
#define TEMP_ADDR	TEMP_ADDR9,247
#define TEMP_ADDR_CHILD	TEMP_ADDR_CHILD10,283
umain(int argc, char **argv)umain13,331

conf/env.mk,14
V = @V9,359

conf/lab.mk,71
LAB=2LAB1,0
PACKAGEDATE=Wed Sep 12 14:51:29 EDT 2018PACKAGEDATE2,6

kern/console.h,275
#define _CONSOLE_H__CONSOLE_H_4,68
#define MONO_BASE	MONO_BASE11,215
#define MONO_BUF	MONO_BUF12,239
#define CGA_BASE	CGA_BASE13,264
#define CGA_BUF	CGA_BUF14,287
#define CRT_ROWS	CRT_ROWS16,313
#define CRT_COLS	CRT_COLS17,333
#define CRT_SIZE	CRT_SIZE18,353

kern/kclock.c,116
mc146818_read(unsigned reg)mc146818_read11,169
mc146818_write(unsigned reg, unsigned datum)mc146818_write18,250

kern/monitor.c,821
#define CMDBUF_SIZE	CMDBUF_SIZE14,314
struct Command {Command17,371
	const char *name;name18,388
	const char *name;Command::name18,388
	const char *desc;desc19,407
	const char *desc;Command::desc19,407
	int (*func)(int argc, char** argv, struct Trapframe* tf);func21,465
	int (*func)(int argc, char** argv, struct Trapframe* tf);Command::func21,465
static struct Command commands[] = {commands24,528
mon_help(int argc, char **argv, struct Trapframe *tf)mon_help32,764
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)mon_kerninfo42,951
mon_backtrace(int argc, char **argv, struct Trapframe *tf)mon_backtrace58,1572
#define WHITESPACE WHITESPACE68,1719
#define MAXARGS MAXARGS69,1748
runcmd(char *buf, struct Trapframe *tf)runcmd72,1779
monitor(struct Trapframe *tf)monitor111,2571

kern/kdebug.h,1042
#define JOS_KERN_KDEBUG_HJOS_KERN_KDEBUG_H2,26
struct Eipdebuginfo {Eipdebuginfo7,137
	const char *eip_file;		// Source code filename for EIPeip_file8,159
	const char *eip_file;		// Source code filename for EIPEipdebuginfo::eip_file8,159
	int eip_line;			// Source code linenumber for EIPeip_line9,215
	int eip_line;			// Source code linenumber for EIPEipdebuginfo::eip_line9,215
	const char *eip_fn_name;	// Name of function containing EIPeip_fn_name11,267
	const char *eip_fn_name;	// Name of function containing EIPEipdebuginfo::eip_fn_name11,267
	int eip_fn_namelen;		// Length of function nameeip_fn_namelen13,366
	int eip_fn_namelen;		// Length of function nameEipdebuginfo::eip_fn_namelen13,366
	uintptr_t eip_fn_addr;		// Address of start of functioneip_fn_addr14,415
	uintptr_t eip_fn_addr;		// Address of start of functionEipdebuginfo::eip_fn_addr14,415
	int eip_fn_narg;		// Number of function argumentseip_fn_narg15,472
	int eip_fn_narg;		// Number of function argumentsEipdebuginfo::eip_fn_narg15,472

kern/console.c,2436
delay(void)delay16,352
#define COM1	COM126,448
#define COM_RX	COM_RX28,469
#define COM_TX	COM_TX29,518
#define COM_DLL	COM_DLL30,569
#define COM_DLM	COM_DLM31,623
#define COM_IER	COM_IER32,678
#define   COM_IER_RDI	COM_IER_RDI33,731
#define COM_IIR	COM_IIR34,794
#define COM_FCR	COM_FCR35,842
#define COM_LCR	COM_LCR36,891
#define	  COM_LCR_DLAB	COM_LCR_DLAB37,940
#define	  COM_LCR_WLEN8	COM_LCR_WLEN838,998
#define COM_MCR	COM_MCR39,1051
#define	  COM_MCR_RTS	COM_MCR_RTS40,1101
#define	  COM_MCR_DTR	COM_MCR_DTR41,1146
#define	  COM_MCR_OUT2	COM_MCR_OUT242,1191
#define COM_LSR	COM_LSR43,1238
#define   COM_LSR_DATA	COM_LSR_DATA44,1285
#define   COM_LSR_TXRDY	COM_LSR_TXRDY45,1333
#define   COM_LSR_TSRE	COM_LSR_TSRE46,1389
static bool serial_exists;serial_exists48,1439
serial_proc_data(void)serial_proc_data51,1478
serial_intr(void)serial_intr59,1592
serial_putc(int c)serial_putc66,1678
serial_init(void)serial_init79,1843
lpt_putc(int c)lpt_putc112,2633
static unsigned addr_6845;addr_6845128,2853
static uint16_t *crt_buf;crt_buf129,2880
static uint16_t crt_pos;crt_pos130,2906
cga_init(void)cga_init133,2944
cga_putc(int c)cga_putc163,3430
#define NO	NO214,4399
#define SHIFT	SHIFT216,4414
#define CTL	CTL217,4436
#define ALT	ALT218,4456
#define CAPSLOCK	CAPSLOCK220,4477
#define NUMLOCK	NUMLOCK221,4501
#define SCROLLLOCK	SCROLLLOCK222,4525
#define E0ESC	E0ESC224,4552
static uint8_t shiftcode[256] =shiftcode226,4575
static uint8_t togglecode[256] =togglecode236,4706
static uint8_t normalmap[256] =normalmap243,4805
static uint8_t shiftmap[256] =shiftmap264,5690
#define C(C285,6574
static uint8_t ctlmap[256] =ctlmap287,6598
static uint8_t *charcode[4] = {charcode304,7327
kbd_proc_data(void)kbd_proc_data316,7524
kbd_intr(void)kbd_intr368,8510
kbd_init(void)kbd_init374,8569
#define CONSBUFSIZE CONSBUFSIZE385,8809
	uint8_t buf[CONSBUFSIZE];buf388,8850
	uint8_t buf[CONSBUFSIZE];__anon3::buf388,8850
	uint32_t rpos;rpos389,8877
	uint32_t rpos;__anon3::rpos389,8877
	uint32_t wpos;wpos390,8893
	uint32_t wpos;__anon3::wpos390,8893
} cons;cons391,8909
cons_intr(int (*proc)(void))cons_intr396,9037
cons_getc(void)cons_getc411,9300
cons_putc(int c)cons_putc433,9754
cons_init(void)cons_init442,9860
cputchar(int c)cputchar456,10056
getchar(void)getchar462,10096
iscons(int fdnum)iscons472,10191

kern/entrypgdir.c,163
pte_t entry_pgtable[NPTENTRIES];entry_pgtable4,49
pde_t entry_pgdir[NPDENTRIES] = {entry_pgdir21,934
pte_t entry_pgtable[NPTENTRIES] = {entry_pgtable33,1329

kern/monitor.h,51
#define JOS_KERN_MONITOR_HJOS_KERN_MONITOR_H2,27

kern/pmap.h,397
#define JOS_KERN_PMAP_HJOS_KERN_PMAP_H4,72
#define PADDR(PADDR25,645
_paddr(const char *file, int line, void *kva)_paddr28,722
#define KADDR(KADDR37,1057
_kaddr(const char *file, int line, physaddr_t pa)_kaddr40,1127
	ALLOC_ZERO = 1<<0,ALLOC_ZERO50,1366
page2pa(struct PageInfo *pp)page2pa66,1815
pa2page(physaddr_t pa)pa2page72,1913
page2kva(struct PageInfo *pp)page2kva80,2057

kern/pmap.c,1558
size_t npages;			// Amount of physical memory (in pages)npages13,262
static size_t npages_basemem;	// Amount of base memory (in pages)npages_basemem14,319
pde_t *kern_pgdir;		// Kernel's initial page directorykern_pgdir17,427
struct PageInfo *pages;		// Physical page state arraypages18,482
static struct PageInfo *page_free_list;	// Free list of physical pagespage_free_list19,536
nvram_read(int r)nvram_read27,796
i386_detect_memory(void)i386_detect_memory33,887
boot_alloc(uint32_t n)boot_alloc85,2707
mem_init(void)mem_init126,4082
page_init(void)page_init240,8644
page_alloc(int alloc_flags)page_alloc292,10453
page_free(struct PageInfo *pp)page_free313,10849
page_decref(struct PageInfo* pp)page_decref332,11314
pgdir_walk(pde_t *pgdir, const void *va, int create)pgdir_walk361,12450
boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)boot_map_region404,13438
page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)page_insert435,14534
page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)page_lookup453,15058
page_remove(pde_t *pgdir, void *va)page_remove475,15720
tlb_invalidate(pde_t *pgdir, void *va)tlb_invalidate485,15917
check_page_free_list(bool only_low_memory)check_page_free_list501,16350
check_page_alloc(void)check_page_alloc563,18111
check_kern_pgdir(void)check_kern_pgdir645,19928
check_va2pa(pde_t *pgdir, uintptr_t va)check_va2pa693,21183
check_page(void)check_page709,21464
check_page_installed_pgdir(void)check_page_installed_pgdir862,26286

kern/entry.S,533
#define SRL(val, shamt)		(((val) >> (shamt)) & ~(-1 << (32 - (shamt))))SRL7,120
#define	RELOC(x) ((x) - KERNBASE)RELOC18,566
#define MULTIBOOT_HEADER_MAGIC (0x1BADB002)MULTIBOOT_HEADER_MAGIC20,601
#define MULTIBOOT_HEADER_FLAGS (0)MULTIBOOT_HEADER_FLAGS21,645
#define CHECKSUM (-(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS))CHECKSUM22,680
_start = RELOC(entry)_start40,1231
entry:entry43,1267
relocated:relocated69,2169
spin:	jmp	spinspin83,2501
bootstack:bootstack92,2734
bootstacktop:bootstacktop95,2788

kern/init.c,211
i386_init(void)i386_init14,227
const char *panicstr;panicstr42,921
_panic(const char *file, int line, const char *fmt,...)_panic49,1069
_warn(const char *file, int line, const char *fmt,...)_warn74,1502

kern/kdebug.c,181
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,stab_binsearch51,1753
debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)debuginfo_eip105,3021

kern/kclock.h,420
#define JOS_KERN_KCLOCK_HJOS_KERN_KCLOCK_H4,74
#define	IO_RTC	IO_RTC9,203
#define	MC_NVRAM_START	MC_NVRAM_START11,242
#define	MC_NVRAM_SIZE	MC_NVRAM_SIZE12,301
#define NVRAM_BASELO	NVRAM_BASELO15,393
#define NVRAM_BASEHI	NVRAM_BASEHI16,465
#define NVRAM_EXTLO	NVRAM_EXTLO19,609
#define NVRAM_EXTHI	NVRAM_EXTHI20,680
#define NVRAM_EXT16LO	NVRAM_EXT16LO23,826
#define NVRAM_EXT16HI	NVRAM_EXT16HI24,900

kern/printf.c,136
putch(int ch, int *cnt)putch10,212
vcprintf(const char *fmt, va_list ap)vcprintf17,269
cprintf(const char *fmt, ...)cprintf26,385

grade-lab2,306
r = Runner(save("jos.out"),r5,47
def test_jos():test_jos9,140
def test_check_page_alloc():test_check_page_alloc13,228
def test_check_page():test_check_page17,352
def test_check_kern_pgdir():test_check_kern_pgdir21,470
def test_check_page_installed_pgdir():test_check_page_installed_pgdir25,596

gradelib.py,2816
__all__ = []__all__7,194
TESTS = []TESTS15,361
CURRENT_TEST = NoneCURRENT_TEST18,424
def test(points, title=None, parent=None):test20,445
    def register_test(fn, title=title):register_test26,703
        def run_test():run_test33,923
def end_part(name):end_part79,2398
    def show_part():show_part80,2418
def run_tests():run_tests89,2709
def get_current_test():get_current_test120,3671
def assert_equal(got, expect, msg=""):assert_equal131,3928
def assert_lines_match(text, *regexps, **kw):assert_lines_match140,4221
    def assert_lines_match_kw(no=[]):assert_lines_match_kw145,4445
MAKE_TIMESTAMP = 0MAKE_TIMESTAMP196,6022
def pre_make():pre_make198,6042
def post_make():post_make203,6197
def make(*target):make209,6385
def show_command(cmd):show_command215,6497
def maybe_unlink(*paths):maybe_unlink219,6593
COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m"}COLORS227,6784
def color(name, text):color229,6857
def reset_fs():reset_fs234,7032
class QEMU(object):QEMU244,7277
    _GDBPORT = None_GDBPORT245,7297
    def __init__(self, *make_args):__init__247,7318
    def get_gdb_port():get_gdb_port273,8258
    def fileno(self):fileno285,8713
    def handle_read(self):handle_read289,8803
    def wait(self):wait299,9115
    def kill(self):kill304,9216
class GDBClient(object):GDBClient308,9293
    def __init__(self, port, timeout=15):__init__309,9318
    def fileno(self):fileno322,9717
    def handle_read(self):handle_read326,9800
    def __send(self, cmd):__send348,10398
    def __send_break(self):__send_break352,10538
    def close(self):close355,10602
    def cont(self):cont360,10705
    def breakpoint(self, addr):breakpoint363,10751
class TerminateTest(Exception):TerminateTest373,10952
class Runner():Runner376,10994
    def __init__(self, *default_monitors):__init__377,11010
    def run_qemu(self, *monitors, **kw):run_qemu380,11105
        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):run_qemu_kw389,11629
    def __monitor_start(self, output):__monitor_start436,13129
    def __react(self, reactors, timeout):__react446,13439
    def user_test(self, binary, *monitors, **kw):user_test466,14081
    def match(self, *args, **kwargs):match476,14579
def save(path):save488,14924
    def setup_save(runner):setup_save492,15062
    def save_on_finish(fail):save_on_finish498,15236
def stop_breakpoint(addr):stop_breakpoint511,15660
    def setup_breakpoint(runner):setup_breakpoint515,15800
def call_on_line(regexp, callback):call_on_line525,16182
    def setup_call_on_line(runner):setup_call_on_line529,16316
        def handle_output(output):handle_output531,16378
def stop_on_line(regexp):stop_on_line541,16743
    def stop(line):stop545,16856

.dir-locals.el,0

GNUmakefile,1598
OBJDIR := objOBJDIR8,197
LABSETUP ?= ./LABSETUP22,403
TOP = .TOP24,419
GCCPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \GCCPREFIX36,874
QEMU := $(shell if which qemu >/dev/null 2>&1; \QEMU52,1637
GDBPORT	:= $(shell expr `id -u` % 5000 + 25000)GDBPORT67,2275
CC	:= $(GCCPREFIX)gcc -pipeCC69,2324
GDB	:= $(GCCPREFIX)gdbGDB70,2352
AS	:= $(GCCPREFIX)asAS71,2375
AR	:= $(GCCPREFIX)arAR72,2396
LD	:= $(GCCPREFIX)ldLD73,2417
OBJCOPY	:= $(GCCPREFIX)objcopyOBJCOPY74,2438
OBJDUMP	:= $(GCCPREFIX)objdumpOBJDUMP75,2469
NM	:= $(GCCPREFIX)nmNM76,2500
NCC	:= gcc $(CC_VER) -pipeNCC79,2540
NATIVE_CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -I$(TOP) -MD -WallNATIVE_CFLAGS80,2567
TAR	:= gtarTAR81,2632
PERL	:= perlPERL82,2644
CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -O1 -fno-builtin -I$(TOP) -MDCFLAGS87,2831
LDFLAGS := -m elf_i386LDFLAGS100,3389
ULDFLAGS := -T user/user.ldULDFLAGS103,3450
GCC_LIB := $(shell $(CC) $(CFLAGS) -print-libgcc-file-name)GCC_LIB105,3479
OBJDIRS :=OBJDIRS108,3599
KERN_CFLAGS := $(CFLAGS) -DJOS_KERNEL -gstabsKERN_CFLAGS124,3990
USER_CFLAGS := $(CFLAGS) -DJOS_USER -gstabsUSER_CFLAGS125,4036
QEMUOPTS = -drive file=$(OBJDIR)/kern/kernel.img,index=0,media=disk,format=raw -serial mon:stdio -gdb tcp::$(GDBPORT)QEMUOPTS143,4546
IMAGES = $(OBJDIR)/kern/kernel.imgIMAGES145,4759
WEBSUB := https://6828.scripts.mit.edu/2018/handin.pyWEBSUB223,6476
UPSTREAM := $(shell git remote -v | grep "pdos.csail.mit.edu/6.828/2018/jos.git (fetch)" | awk '{split($$0,a," "); print a[1]}')UPSTREAM256,7498
