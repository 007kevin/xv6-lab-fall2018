
grade-lab1,445
r = Runner(save("jos.out"),r6,57
def test_jos():test_jos10,150
def test_printf():test_printf14,211
BACKTRACE_RE = r"^ *ebp +f01[0-9a-z]{5} +eip +f0100[0-9a-z]{3} +args +([0-9a-z]+)"BACKTRACE_RE17,275
def test_backtrace_count():test_backtrace_count20,386
def test_backtrace_arguments():test_backtrace_arguments25,544
def test_backtrace_symbols():test_backtrace_symbols31,777
def test_backtrace_lines():test_backtrace_lines37,1018

mergedep.pl,31
sub readdeps {readdeps27,909

lib/console.c,60
cputchar(int ch)cputchar6,52
getchar(void)getchar16,214

lib/syscall.c,289
syscall(int num, int check, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)syscall7,92
sys_cputs(const char *s, size_t len)sys_cputs41,922
sys_cgetc(void)sys_cgetc47,1019
sys_env_destroy(envid_t envid)sys_env_destroy53,1090
sys_getenvid(void)sys_getenvid59,1190

lib/panic.c,71
_panic(const char *file, int line, const char *fmt, ...)_panic10,206

lib/entry.S,52
_start:_start21,498
args_exist:args_exist32,779

lib/readline.c,106
#define BUFLEN BUFLEN4,47
static char buf[BUFLEN];buf5,67
readline(const char *prompt)readline8,100

lib/string.c,1018
#define ASM ASM9,264
strlen(const char *s)strlen12,283
strnlen(const char *s, size_t size)strnlen22,371
strcpy(char *dst, const char *src)strcpy32,496
strcat(char *dst, const char *src)strcat43,636
strncpy(char *dst, const char *src, size_t size) {strncpy51,745
strlcpy(char *dst, const char *src, size_t size)strlcpy66,998
strcmp(const char *p, const char *q)strcmp80,1201
strncmp(const char *p, const char *q, size_t n)strncmp88,1340
strchr(const char *s, char c)strchr101,1645
strfind(const char *s, char c)strfind112,1889
memset(void *v, int c, size_t n)memset122,2002
memmove(void *dst, const void *src, size_t n)memmove142,2359
memset(void *v, int c, size_t n)memset174,3099
memmove(void *dst, const void *src, size_t n)memmove188,3221
memcpy(void *dst, const void *src, size_t n)memcpy209,3470
memcmp(const void *v1, const void *v2, size_t n)memcmp215,3554
memfind(const void *s, int c, size_t n)memfind230,3801
strtol(const char *s, char **endptr, int base)strtol240,4001

lib/printfmt.c,845
static const char * const error_string[MAXERROR] =error_string21,589
printnum(void (*putch)(int, void*), void *putdat,printnum36,995
getuint(va_list *ap, int lflag)getuint55,1609
getint(va_list *ap, int lflag)getint68,1897
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)vprintfmt83,2193
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)printfmt247,5283
struct sprintbuf {sprintbuf256,5443
	char *buf;buf257,5462
	char *buf;sprintbuf::buf257,5462
	char *ebuf;ebuf258,5474
	char *ebuf;sprintbuf::ebuf258,5474
	int cnt;cnt259,5487
	int cnt;sprintbuf::cnt259,5487
sprintputch(int ch, struct sprintbuf *b)sprintputch263,5513
vsnprintf(char *buf, int n, const char *fmt, va_list ap)vsnprintf271,5615
snprintf(char *buf, int n, const char *fmt, ...)snprintf288,5913

lib/libmain.c,151
const volatile struct Env *thisenv;thisenv8,176
const char *binaryname = "<unknown>";binaryname9,212
libmain(int argc, char **argv)libmain12,256

lib/exit.c,21
exit(void)exit5,28

lib/printf.c,457
struct printbuf {printbuf19,664
	int idx;	// current buffer indexidx20,682
	int idx;	// current buffer indexprintbuf::idx20,682
	int cnt;	// total bytes printed so farcnt21,716
	int cnt;	// total bytes printed so farprintbuf::cnt21,716
	char buf[256];buf22,756
	char buf[256];printbuf::buf22,756
putch(int ch, struct printbuf *b)putch27,789
vcprintf(const char *fmt, va_list ap)vcprintf38,937
cprintf(const char *fmt, ...)cprintf51,1110

inc/memlayout.h,1127
#define JOS_INC_MEMLAYOUT_HJOS_INC_MEMLAYOUT_H2,28
#define GD_KT GD_KT15,324
#define GD_KD GD_KD16,366
#define GD_UT GD_UT17,408
#define GD_UD GD_UD18,448
#define GD_TSS0 GD_TSS019,488
#define	KERNBASE	KERNBASE87,4609
#define IOPHYSMEM	IOPHYSMEM92,4814
#define EXTPHYSMEM	EXTPHYSMEM93,4841
#define KSTACKTOP	KSTACKTOP96,4887
#define KSTKSIZE	KSTKSIZE97,4914
#define KSTKGAP	KSTKGAP98,4972
#define MMIOLIM	MMIOLIM101,5058
#define MMIOBASE	MMIOBASE102,5096
#define ULIM	ULIM104,5133
#define UVPT	UVPT112,5361
#define UPAGES	UPAGES114,5434
#define UENVS	UENVS116,5515
#define UTOP	UTOP123,5650
#define UXSTACKTOP	UXSTACKTOP125,5710
#define USTACKTOP	USTACKTOP128,5837
#define UTEXT	UTEXT131,5913
#define UTEMP	UTEMP134,6008
#define PFTEMP	PFTEMP137,6168
#define USTABDATA	USTABDATA139,6265
typedef uint32_t pte_t;pte_t143,6320
typedef uint32_t pde_t;pde_t144,6344
struct PageInfo {PageInfo175,7643
	struct PageInfo *pp_link;pp_link177,7693
	struct PageInfo *pp_link;PageInfo::pp_link177,7693
	uint16_t pp_ref;pp_ref184,7951
	uint16_t pp_ref;PageInfo::pp_ref184,7951

inc/stab.h,1529
#define JOS_STAB_HJOS_STAB_H2,19
#define	N_GSYM	N_GSYM15,436
#define	N_FNAME	N_FNAME16,474
#define	N_FUN	N_FUN17,517
#define	N_STSYM	N_STSYM18,555
#define	N_LCSYM	N_LCSYM19,602
#define	N_MAIN	N_MAIN20,648
#define	N_PC	N_PC21,691
#define	N_RSYM	N_RSYM22,734
#define	N_SLINE	N_SLINE23,776
#define	N_DSLINE	N_DSLINE24,826
#define	N_BSLINE	N_BSLINE25,876
#define	N_SSYM	N_SSYM26,925
#define	N_SO	N_SO27,973
#define	N_LSYM	N_LSYM28,1017
#define	N_BINCL	N_BINCL29,1056
#define	N_SOL	N_SOL30,1104
#define	N_PSYM	N_PSYM31,1153
#define	N_EINCL	N_EINCL32,1196
#define	N_ENTRY	N_ENTRY33,1238
#define	N_LBRAC	N_LBRAC34,1285
#define	N_EXCL	N_EXCL35,1323
#define	N_RBRAC	N_RBRAC36,1368
#define	N_BCOMM	N_BCOMM37,1407
#define	N_ECOMM	N_ECOMM38,1445
#define	N_ECOML	N_ECOML39,1481
#define	N_LENG	N_LENG40,1530
struct Stab {Stab43,1637
	uint32_t n_strx;	// index into string table of namen_strx44,1651
	uint32_t n_strx;	// index into string table of nameStab::n_strx44,1651
	uint8_t n_type;         // type of symboln_type45,1704
	uint8_t n_type;         // type of symbolStab::n_type45,1704
	uint8_t n_other;        // misc info (usually empty)n_other46,1747
	uint8_t n_other;        // misc info (usually empty)Stab::n_other46,1747
	uint16_t n_desc;        // description fieldn_desc47,1801
	uint16_t n_desc;        // description fieldStab::n_desc47,1801
	uintptr_t n_value;	// value of symboln_value48,1847
	uintptr_t n_value;	// value of symbolStab::n_value48,1847

inc/string.h,47
#define JOS_INC_STRING_HJOS_INC_STRING_H2,25

inc/lib.h,337
#define JOS_INC_LIB_H JOS_INC_LIB_H8,296
#define USED(USED20,536
#define	O_RDONLY	O_RDONLY46,1053
#define	O_WRONLY	O_WRONLY47,1106
#define	O_RDWR	O_RDWR48,1159
#define	O_ACCMODE	O_ACCMODE49,1218
#define	O_CREAT	O_CREAT51,1272
#define	O_TRUNC	O_TRUNC52,1325
#define	O_EXCL	O_EXCL53,1380
#define O_MKDIR	O_MKDIR54,1434

inc/stdio.h,69
#define JOS_INC_STDIO_HJOS_INC_STDIO_H2,24
#define NULL	NULL7,87

inc/x86.h,1331
#define JOS_INC_X86_HJOS_INC_X86_H2,22
breakpoint(void)breakpoint7,88
inb(int port)inb13,155
insb(int port, void *addr, int cnt)insb21,278
inw(int port)inw30,481
insw(int port, void *addr, int cnt)insw38,605
inl(int port)inl47,808
insl(int port, void *addr, int cnt)insl55,932
outb(int port, uint8_t data)outb64,1131
outsb(int port, const void *addr, int cnt)outsb70,1241
outw(int port, uint16_t data)outw79,1438
outsw(int port, const void *addr, int cnt)outsw85,1549
outsl(int port, const void *addr, int cnt)outsl94,1746
outl(int port, uint32_t data)outl103,1943
invlpg(void *addr)invlpg109,2054
lidt(void *p)lidt115,2153
lgdt(void *p)lgdt121,2231
lldt(uint16_t sel)lldt127,2309
ltr(uint16_t sel)ltr133,2392
lcr0(uint32_t val)lcr0139,2473
rcr0(void)rcr0145,2566
rcr2(void)rcr2153,2678
lcr3(uint32_t val)lcr3161,2786
rcr3(void)rcr3167,2879
lcr4(uint32_t val)lcr4175,2987
rcr4(void)rcr4181,3080
tlbflush(void)tlbflush189,3188
read_eflags(void)read_eflags197,3337
write_eflags(uint32_t eflags)write_eflags205,3463
read_ebp(void)read_ebp211,3572
read_esp(void)read_esp219,3688
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)cpuid227,3800
read_tsc(void)read_tsc244,4147
xchg(volatile uint32_t *addr, uint32_t newval)xchg252,4255

inc/env.h,1621
#define JOS_INC_ENV_HJOS_INC_ENV_H4,70
typedef int32_t envid_t;envid_t10,166
#define LOG2NENV	LOG2NENV28,953
#define NENV	NENV29,974
#define ENVX(ENVX30,1005
	ENV_FREE = 0,ENV_FREE34,1095
	ENV_DYING,ENV_DYING35,1110
	ENV_RUNNABLE,ENV_RUNNABLE36,1122
	ENV_RUNNING,ENV_RUNNING37,1137
	ENV_NOT_RUNNABLEENV_NOT_RUNNABLE38,1151
enum EnvType {EnvType42,1202
	ENV_TYPE_USER = 0,ENV_TYPE_USER43,1217
struct Env {Env46,1241
	struct Trapframe env_tf;	// Saved registersenv_tf47,1254
	struct Trapframe env_tf;	// Saved registersEnv::env_tf47,1254
	struct Env *env_link;		// Next free Envenv_link48,1299
	struct Env *env_link;		// Next free EnvEnv::env_link48,1299
	envid_t env_id;			// Unique environment identifierenv_id49,1340
	envid_t env_id;			// Unique environment identifierEnv::env_id49,1340
	envid_t env_parent_id;		// env_id of this env's parentenv_parent_id50,1392
	envid_t env_parent_id;		// env_id of this env's parentEnv::env_parent_id50,1392
	enum EnvType env_type;		// Indicates special system environmentsenv_type51,1448
	enum EnvType env_type;		// Indicates special system environmentsEnv::env_type51,1448
	unsigned env_status;		// Status of the environmentenv_status52,1514
	unsigned env_status;		// Status of the environmentEnv::env_status52,1514
	uint32_t env_runs;		// Number of times environment has runenv_runs53,1566
	uint32_t env_runs;		// Number of times environment has runEnv::env_runs53,1566
	pde_t *env_pgdir;		// Kernel virtual address of page direnv_pgdir56,1645
	pde_t *env_pgdir;		// Kernel virtual address of page dirEnv::env_pgdir56,1645

inc/elf.h,3208
#define JOS_INC_ELF_HJOS_INC_ELF_H2,22
#define ELF_MAGIC ELF_MAGIC4,45
struct Elf {Elf6,109
	uint32_t e_magic;	// must equal ELF_MAGICe_magic7,122
	uint32_t e_magic;	// must equal ELF_MAGICElf::e_magic7,122
	uint8_t e_elf[12];e_elf8,165
	uint8_t e_elf[12];Elf::e_elf8,165
	uint16_t e_type;e_type9,185
	uint16_t e_type;Elf::e_type9,185
	uint16_t e_machine;e_machine10,203
	uint16_t e_machine;Elf::e_machine10,203
	uint32_t e_version;e_version11,224
	uint32_t e_version;Elf::e_version11,224
	uint32_t e_entry;e_entry12,245
	uint32_t e_entry;Elf::e_entry12,245
	uint32_t e_phoff;e_phoff13,264
	uint32_t e_phoff;Elf::e_phoff13,264
	uint32_t e_shoff;e_shoff14,283
	uint32_t e_shoff;Elf::e_shoff14,283
	uint32_t e_flags;e_flags15,302
	uint32_t e_flags;Elf::e_flags15,302
	uint16_t e_ehsize;e_ehsize16,321
	uint16_t e_ehsize;Elf::e_ehsize16,321
	uint16_t e_phentsize;e_phentsize17,341
	uint16_t e_phentsize;Elf::e_phentsize17,341
	uint16_t e_phnum;e_phnum18,364
	uint16_t e_phnum;Elf::e_phnum18,364
	uint16_t e_shentsize;e_shentsize19,383
	uint16_t e_shentsize;Elf::e_shentsize19,383
	uint16_t e_shnum;e_shnum20,406
	uint16_t e_shnum;Elf::e_shnum20,406
	uint16_t e_shstrndx;e_shstrndx21,425
	uint16_t e_shstrndx;Elf::e_shstrndx21,425
struct Proghdr {Proghdr24,451
	uint32_t p_type;p_type25,468
	uint32_t p_type;Proghdr::p_type25,468
	uint32_t p_offset;p_offset26,486
	uint32_t p_offset;Proghdr::p_offset26,486
	uint32_t p_va;p_va27,506
	uint32_t p_va;Proghdr::p_va27,506
	uint32_t p_pa;p_pa28,522
	uint32_t p_pa;Proghdr::p_pa28,522
	uint32_t p_filesz;p_filesz29,538
	uint32_t p_filesz;Proghdr::p_filesz29,538
	uint32_t p_memsz;p_memsz30,558
	uint32_t p_memsz;Proghdr::p_memsz30,558
	uint32_t p_flags;p_flags31,577
	uint32_t p_flags;Proghdr::p_flags31,577
	uint32_t p_align;p_align32,596
	uint32_t p_align;Proghdr::p_align32,596
struct Secthdr {Secthdr35,619
	uint32_t sh_name;sh_name36,636
	uint32_t sh_name;Secthdr::sh_name36,636
	uint32_t sh_type;sh_type37,655
	uint32_t sh_type;Secthdr::sh_type37,655
	uint32_t sh_flags;sh_flags38,674
	uint32_t sh_flags;Secthdr::sh_flags38,674
	uint32_t sh_addr;sh_addr39,694
	uint32_t sh_addr;Secthdr::sh_addr39,694
	uint32_t sh_offset;sh_offset40,713
	uint32_t sh_offset;Secthdr::sh_offset40,713
	uint32_t sh_size;sh_size41,734
	uint32_t sh_size;Secthdr::sh_size41,734
	uint32_t sh_link;sh_link42,753
	uint32_t sh_link;Secthdr::sh_link42,753
	uint32_t sh_info;sh_info43,772
	uint32_t sh_info;Secthdr::sh_info43,772
	uint32_t sh_addralign;sh_addralign44,791
	uint32_t sh_addralign;Secthdr::sh_addralign44,791
	uint32_t sh_entsize;sh_entsize45,815
	uint32_t sh_entsize;Secthdr::sh_entsize45,815
#define ELF_PROG_LOAD	ELF_PROG_LOAD49,871
#define ELF_PROG_FLAG_EXEC	ELF_PROG_FLAG_EXEC52,931
#define ELF_PROG_FLAG_WRITE	ELF_PROG_FLAG_WRITE53,960
#define ELF_PROG_FLAG_READ	ELF_PROG_FLAG_READ54,990
#define ELF_SHT_NULL	ELF_SHT_NULL57,1051
#define ELF_SHT_PROGBITS	ELF_SHT_PROGBITS58,1075
#define ELF_SHT_SYMTAB	ELF_SHT_SYMTAB59,1102
#define ELF_SHT_STRTAB	ELF_SHT_STRTAB60,1128
#define ELF_SHN_UNDEF	ELF_SHN_UNDEF63,1186

inc/mmu.h,10794
#define JOS_INC_MMU_HJOS_INC_MMU_H2,22
#define PGNUM(PGNUM30,964
#define PDX(PDX33,1040
#define PTX(PTX36,1121
#define PGOFF(PGOFF39,1200
#define PGADDR(PGADDR42,1300
#define NPDENTRIES	NPDENTRIES45,1421
#define NPTENTRIES	NPTENTRIES46,1491
#define PGSIZE	PGSIZE48,1554
#define PGSHIFT	PGSHIFT49,1602
#define PTSIZE	PTSIZE51,1640
#define PTSHIFT	PTSHIFT52,1718
#define PTXSHIFT	PTXSHIFT54,1756
#define PDXSHIFT	PDXSHIFT55,1814
#define PTE_P	PTE_P58,1910
#define PTE_W	PTE_W59,1942
#define PTE_U	PTE_U60,1976
#define PTE_PWT	PTE_PWT61,2005
#define PTE_PCD	PTE_PCD62,2045
#define PTE_A	PTE_A63,2085
#define PTE_D	PTE_D64,2118
#define PTE_PS	PTE_PS65,2148
#define PTE_G	PTE_G66,2183
#define PTE_AVAIL	PTE_AVAIL70,2353
#define PTE_SYSCALL	PTE_SYSCALL73,2480
#define PTE_ADDR(PTE_ADDR76,2586
#define CR0_PE	CR0_PE79,2665
#define CR0_MP	CR0_MP80,2713
#define CR0_EM	CR0_EM81,2763
#define CR0_TS	CR0_TS82,2803
#define CR0_ET	CR0_ET83,2847
#define CR0_NE	CR0_NE84,2892
#define CR0_WP	CR0_WP85,2937
#define CR0_AM	CR0_AM86,2981
#define CR0_NW	CR0_NW87,3026
#define CR0_CD	CR0_CD88,3073
#define CR0_PG	CR0_PG89,3117
#define CR4_PCE	CR4_PCE91,3155
#define CR4_MCE	CR4_MCE92,3213
#define CR4_PSE	CR4_PSE93,3265
#define CR4_DE	CR4_DE94,3317
#define CR4_TSD	CR4_TSD95,3368
#define CR4_PVI	CR4_PVI96,3418
#define CR4_VME	CR4_VME97,3483
#define FL_CF	FL_CF100,3554
#define FL_PF	FL_PF101,3594
#define FL_AF	FL_AF102,3635
#define FL_ZF	FL_ZF103,3685
#define FL_SF	FL_SF104,3724
#define FL_TF	FL_TF105,3763
#define FL_IF	FL_IF106,3802
#define FL_DF	FL_DF107,3846
#define FL_OF	FL_OF108,3890
#define FL_IOPL_MASK	FL_IOPL_MASK109,3933
#define FL_IOPL_0	FL_IOPL_0110,3996
#define FL_IOPL_1	FL_IOPL_1111,4040
#define FL_IOPL_2	FL_IOPL_2112,4084
#define FL_IOPL_3	FL_IOPL_3113,4128
#define FL_NT	FL_NT114,4172
#define FL_RF	FL_RF115,4213
#define FL_VM	FL_VM116,4254
#define FL_AC	FL_AC117,4301
#define FL_VIF	FL_VIF118,4346
#define FL_VIP	FL_VIP119,4399
#define FL_ID	FL_ID120,4455
#define FEC_PR	FEC_PR123,4519
#define FEC_WR	FEC_WR124,4584
#define FEC_U	FEC_U125,4636
#define SEG_NULL	SEG_NULL139,4841
#define SEG(SEG142,4903
struct Segdesc {Segdesc152,5176
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitsd_lim_15_0153,5193
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitSegdesc::sd_lim_15_0153,5193
	unsigned sd_base_15_0 : 16; // Low bits of segment base addresssd_base_15_0154,5251
	unsigned sd_base_15_0 : 16; // Low bits of segment base addressSegdesc::sd_base_15_0154,5251
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addresssd_base_23_16155,5316
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addressSegdesc::sd_base_23_16155,5316
	unsigned sd_type : 4;       // Segment type (see STS_ constants)sd_type156,5384
	unsigned sd_type : 4;       // Segment type (see STS_ constants)Segdesc::sd_type156,5384
	unsigned sd_s : 1;          // 0 = system, 1 = applicationsd_s157,5450
	unsigned sd_s : 1;          // 0 = system, 1 = applicationSegdesc::sd_s157,5450
	unsigned sd_dpl : 2;        // Descriptor Privilege Levelsd_dpl158,5510
	unsigned sd_dpl : 2;        // Descriptor Privilege LevelSegdesc::sd_dpl158,5510
	unsigned sd_p : 1;          // Presentsd_p159,5569
	unsigned sd_p : 1;          // PresentSegdesc::sd_p159,5569
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitsd_lim_19_16160,5609
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitSegdesc::sd_lim_19_16160,5609
	unsigned sd_avl : 1;        // Unused (available for software use)sd_avl161,5668
	unsigned sd_avl : 1;        // Unused (available for software use)Segdesc::sd_avl161,5668
	unsigned sd_rsv1 : 1;       // Reservedsd_rsv1162,5736
	unsigned sd_rsv1 : 1;       // ReservedSegdesc::sd_rsv1162,5736
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentsd_db163,5777
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentSegdesc::sd_db163,5777
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setsd_g164,5848
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setSegdesc::sd_g164,5848
	unsigned sd_base_31_24 : 8; // High bits of segment base addresssd_base_31_24165,5921
	unsigned sd_base_31_24 : 8; // High bits of segment base addressSegdesc::sd_base_31_24165,5921
#define SEG_NULL	SEG_NULL168,6006
#define SEG_FAULT	SEG_FAULT170,6114
#define SEG(SEG172,6192
#define SEG16(SEG16176,6391
#define STA_X	STA_X184,6662
#define STA_E	STA_E185,6707
#define STA_C	STA_C186,6771
#define STA_W	STA_W187,6839
#define STA_R	STA_R188,6901
#define STA_A	STA_A189,6958
#define STS_T16A	STS_T16A192,7022
#define STS_LDT	STS_LDT193,7071
#define STS_T16B	STS_T16B194,7122
#define STS_CG16	STS_CG16195,7166
#define STS_TG	STS_TG196,7211
#define STS_IG16	STS_IG16197,7268
#define STS_TG16	STS_TG16198,7318
#define STS_T32A	STS_T32A199,7363
#define STS_T32B	STS_T32B200,7412
#define STS_CG32	STS_CG32201,7456
#define STS_IG32	STS_IG32202,7501
#define STS_TG32	STS_TG32203,7551
struct Taskstate {Taskstate215,7731
	uint32_t ts_link;	// Old ts selectorts_link216,7750
	uint32_t ts_link;	// Old ts selectorTaskstate::ts_link216,7750
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsts_esp0217,7788
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsTaskstate::ts_esp0217,7788
	uint16_t ts_ss0;	//   after an increase in privilege levelts_ss0218,7848
	uint16_t ts_ss0;	//   after an increase in privilege levelTaskstate::ts_ss0218,7848
	uint16_t ts_padding1;ts_padding1219,7908
	uint16_t ts_padding1;Taskstate::ts_padding1219,7908
	uintptr_t ts_esp1;ts_esp1220,7931
	uintptr_t ts_esp1;Taskstate::ts_esp1220,7931
	uint16_t ts_ss1;ts_ss1221,7951
	uint16_t ts_ss1;Taskstate::ts_ss1221,7951
	uint16_t ts_padding2;ts_padding2222,7969
	uint16_t ts_padding2;Taskstate::ts_padding2222,7969
	uintptr_t ts_esp2;ts_esp2223,7992
	uintptr_t ts_esp2;Taskstate::ts_esp2223,7992
	uint16_t ts_ss2;ts_ss2224,8012
	uint16_t ts_ss2;Taskstate::ts_ss2224,8012
	uint16_t ts_padding3;ts_padding3225,8030
	uint16_t ts_padding3;Taskstate::ts_padding3225,8030
	physaddr_t ts_cr3;	// Page directory basets_cr3226,8053
	physaddr_t ts_cr3;	// Page directory baseTaskstate::ts_cr3226,8053
	uintptr_t ts_eip;	// Saved state from last task switchts_eip227,8096
	uintptr_t ts_eip;	// Saved state from last task switchTaskstate::ts_eip227,8096
	uint32_t ts_eflags;ts_eflags228,8152
	uint32_t ts_eflags;Taskstate::ts_eflags228,8152
	uint32_t ts_eax;	// More saved state (registers)ts_eax229,8173
	uint32_t ts_eax;	// More saved state (registers)Taskstate::ts_eax229,8173
	uint32_t ts_ecx;ts_ecx230,8223
	uint32_t ts_ecx;Taskstate::ts_ecx230,8223
	uint32_t ts_edx;ts_edx231,8241
	uint32_t ts_edx;Taskstate::ts_edx231,8241
	uint32_t ts_ebx;ts_ebx232,8259
	uint32_t ts_ebx;Taskstate::ts_ebx232,8259
	uintptr_t ts_esp;ts_esp233,8277
	uintptr_t ts_esp;Taskstate::ts_esp233,8277
	uintptr_t ts_ebp;ts_ebp234,8296
	uintptr_t ts_ebp;Taskstate::ts_ebp234,8296
	uint32_t ts_esi;ts_esi235,8315
	uint32_t ts_esi;Taskstate::ts_esi235,8315
	uint32_t ts_edi;ts_edi236,8333
	uint32_t ts_edi;Taskstate::ts_edi236,8333
	uint16_t ts_es;		// Even more saved state (segment selectors)ts_es237,8351
	uint16_t ts_es;		// Even more saved state (segment selectors)Taskstate::ts_es237,8351
	uint16_t ts_padding4;ts_padding4238,8414
	uint16_t ts_padding4;Taskstate::ts_padding4238,8414
	uint16_t ts_cs;ts_cs239,8437
	uint16_t ts_cs;Taskstate::ts_cs239,8437
	uint16_t ts_padding5;ts_padding5240,8454
	uint16_t ts_padding5;Taskstate::ts_padding5240,8454
	uint16_t ts_ss;ts_ss241,8477
	uint16_t ts_ss;Taskstate::ts_ss241,8477
	uint16_t ts_padding6;ts_padding6242,8494
	uint16_t ts_padding6;Taskstate::ts_padding6242,8494
	uint16_t ts_ds;ts_ds243,8517
	uint16_t ts_ds;Taskstate::ts_ds243,8517
	uint16_t ts_padding7;ts_padding7244,8534
	uint16_t ts_padding7;Taskstate::ts_padding7244,8534
	uint16_t ts_fs;ts_fs245,8557
	uint16_t ts_fs;Taskstate::ts_fs245,8557
	uint16_t ts_padding8;ts_padding8246,8574
	uint16_t ts_padding8;Taskstate::ts_padding8246,8574
	uint16_t ts_gs;ts_gs247,8597
	uint16_t ts_gs;Taskstate::ts_gs247,8597
	uint16_t ts_padding9;ts_padding9248,8614
	uint16_t ts_padding9;Taskstate::ts_padding9248,8614
	uint16_t ts_ldt;ts_ldt249,8637
	uint16_t ts_ldt;Taskstate::ts_ldt249,8637
	uint16_t ts_padding10;ts_padding10250,8655
	uint16_t ts_padding10;Taskstate::ts_padding10250,8655
	uint16_t ts_t;		// Trap on task switchts_t251,8679
	uint16_t ts_t;		// Trap on task switchTaskstate::ts_t251,8679
	uint16_t ts_iomb;	// I/O map base addressts_iomb252,8719
	uint16_t ts_iomb;	// I/O map base addressTaskstate::ts_iomb252,8719
struct Gatedesc {Gatedesc256,8811
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentgd_off_15_0257,8829
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentGatedesc::gd_off_15_0257,8829
	unsigned gd_sel : 16;        // segment selectorgd_sel258,8895
	unsigned gd_sel : 16;        // segment selectorGatedesc::gd_sel258,8895
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesgd_args259,8945
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesGatedesc::gd_args259,8945
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)gd_rsv1260,9013
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)Gatedesc::gd_rsv1260,9013
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})gd_type261,9079
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})Gatedesc::gd_type261,9079
	unsigned gd_s : 1;           // must be 0 (system)gd_s262,9137
	unsigned gd_s : 1;           // must be 0 (system)Gatedesc::gd_s262,9137
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelgd_dpl263,9189
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelGatedesc::gd_dpl263,9189
	unsigned gd_p : 1;           // Presentgd_p264,9262
	unsigned gd_p : 1;           // PresentGatedesc::gd_p264,9262
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentgd_off_31_16265,9303
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentGatedesc::gd_off_31_16265,9303
#define SETGATE(SETGATE282,10286
#define SETCALLGATE(SETCALLGATE296,10699
struct Pseudodesc {Pseudodesc310,11137
	uint16_t pd_lim;		// Limitpd_lim311,11157
	uint16_t pd_lim;		// LimitPseudodesc::pd_lim311,11157
	uint32_t pd_base;		// Base addresspd_base312,11185
	uint32_t pd_base;		// Base addressPseudodesc::pd_base312,11185

inc/stdarg.h,189
#define	JOS_INC_STDARG_HJOS_INC_STDARG_H4,91
typedef __builtin_va_list va_list;va_list6,117
#define va_start(va_start8,153
#define va_arg(va_arg10,210
#define va_end(va_end12,263

inc/error.h,460
#define JOS_INC_ERROR_HJOS_INC_ERROR_H4,72
	E_UNSPECIFIED	= 1,	// Unspecified or unknown problemE_UNSPECIFIED8,172
	E_BAD_ENV	,	// Environment doesn't exist or otherwiseE_BAD_ENV9,226
	E_INVAL		,	// Invalid parameterE_INVAL11,323
	E_NO_MEM	,	// Request failed due to memory shortageE_NO_MEM12,356
	E_NO_FREE_ENV	,	// Attempt to create a new environment beyondE_NO_FREE_ENV13,409
	E_FAULT		,	// Memory faultE_FAULT15,499
	MAXERRORMAXERROR17,528

inc/trap.h,2883
#define JOS_INC_TRAP_HJOS_INC_TRAP_H2,23
#define T_DIVIDE T_DIVIDE6,95
#define T_DEBUG T_DEBUG7,135
#define T_NMI T_NMI8,178
#define T_BRKPT T_BRKPT9,228
#define T_OFLOW T_OFLOW10,266
#define T_BOUND T_BOUND11,302
#define T_ILLOP T_ILLOP12,342
#define T_DEVICE T_DEVICE13,384
#define T_DBLFLT T_DBLFLT14,432
#define T_TSS T_TSS16,547
#define T_SEGNP T_SEGNP17,602
#define T_STACK T_STACK18,649
#define T_GPFLT T_GPFLT19,692
#define T_PGFLT T_PGFLT20,744
#define T_FPERR T_FPERR22,820
#define T_ALIGN T_ALIGN23,868
#define T_MCHK T_MCHK24,910
#define T_SIMDERR T_SIMDERR25,951
#define T_SYSCALL T_SYSCALL29,1121
#define T_DEFAULT T_DEFAULT30,1160
#define IRQ_OFFSET	IRQ_OFFSET32,1198
#define IRQ_TIMER IRQ_TIMER35,1331
#define IRQ_KBD IRQ_KBD36,1358
#define IRQ_SERIAL IRQ_SERIAL37,1385
#define IRQ_SPURIOUS IRQ_SPURIOUS38,1412
#define IRQ_IDE IRQ_IDE39,1439
#define IRQ_ERROR IRQ_ERROR40,1466
struct PushRegs {PushRegs46,1541
	uint32_t reg_edi;reg_edi48,1595
	uint32_t reg_edi;PushRegs::reg_edi48,1595
	uint32_t reg_esi;reg_esi49,1614
	uint32_t reg_esi;PushRegs::reg_esi49,1614
	uint32_t reg_ebp;reg_ebp50,1633
	uint32_t reg_ebp;PushRegs::reg_ebp50,1633
	uint32_t reg_oesp;		/* Useless */reg_oesp51,1652
	uint32_t reg_oesp;		/* Useless */PushRegs::reg_oesp51,1652
	uint32_t reg_ebx;reg_ebx52,1687
	uint32_t reg_ebx;PushRegs::reg_ebx52,1687
	uint32_t reg_edx;reg_edx53,1706
	uint32_t reg_edx;PushRegs::reg_edx53,1706
	uint32_t reg_ecx;reg_ecx54,1725
	uint32_t reg_ecx;PushRegs::reg_ecx54,1725
	uint32_t reg_eax;reg_eax55,1744
	uint32_t reg_eax;PushRegs::reg_eax55,1744
struct Trapframe {Trapframe58,1791
	struct PushRegs tf_regs;tf_regs59,1810
	struct PushRegs tf_regs;Trapframe::tf_regs59,1810
	uint16_t tf_es;tf_es60,1836
	uint16_t tf_es;Trapframe::tf_es60,1836
	uint16_t tf_padding1;tf_padding161,1853
	uint16_t tf_padding1;Trapframe::tf_padding161,1853
	uint16_t tf_ds;tf_ds62,1876
	uint16_t tf_ds;Trapframe::tf_ds62,1876
	uint16_t tf_padding2;tf_padding263,1893
	uint16_t tf_padding2;Trapframe::tf_padding263,1893
	uint32_t tf_trapno;tf_trapno64,1916
	uint32_t tf_trapno;Trapframe::tf_trapno64,1916
	uint32_t tf_err;tf_err66,1979
	uint32_t tf_err;Trapframe::tf_err66,1979
	uintptr_t tf_eip;tf_eip67,1997
	uintptr_t tf_eip;Trapframe::tf_eip67,1997
	uint16_t tf_cs;tf_cs68,2016
	uint16_t tf_cs;Trapframe::tf_cs68,2016
	uint16_t tf_padding3;tf_padding369,2033
	uint16_t tf_padding3;Trapframe::tf_padding369,2033
	uint32_t tf_eflags;tf_eflags70,2056
	uint32_t tf_eflags;Trapframe::tf_eflags70,2056
	uintptr_t tf_esp;tf_esp72,2149
	uintptr_t tf_esp;Trapframe::tf_esp72,2149
	uint16_t tf_ss;tf_ss73,2168
	uint16_t tf_ss;Trapframe::tf_ss73,2168
	uint16_t tf_padding4;tf_padding474,2185
	uint16_t tf_padding4;Trapframe::tf_padding474,2185

inc/syscall.h,210
#define JOS_INC_SYSCALL_HJOS_INC_SYSCALL_H2,26
	SYS_cputs = 0,SYS_cputs6,86
	SYS_cgetc,SYS_cgetc7,102
	SYS_getenvid,SYS_getenvid8,114
	SYS_env_destroy,SYS_env_destroy9,129
	NSYSCALLSNSYSCALLS10,147

inc/kbdreg.h,2510
#define JOS_KBDREG_HJOS_KBDREG_H2,21
#define KEY_HOME	KEY_HOME5,63
#define KEY_END	KEY_END6,85
#define KEY_UP	KEY_UP7,107
#define KEY_DN	KEY_DN8,128
#define KEY_LF	KEY_LF9,149
#define KEY_RT	KEY_RT10,170
#define KEY_PGUP	KEY_PGUP11,191
#define KEY_PGDN	KEY_PGDN12,213
#define KEY_INS	KEY_INS13,235
#define KEY_DEL	KEY_DEL14,257
#define	KBSTATP	KBSTATP19,331
#define	 KBS_DIB	KBS_DIB20,389
#define	 KBS_IBF	KBS_IBF21,436
#define	 KBS_WARM	KBS_WARM22,485
#define	 KBS_OCMD	KBS_OCMD23,535
#define	 KBS_NOSEC	KBS_NOSEC24,594
#define	 KBS_TERR	KBS_TERR25,654
#define	 KBS_RERR	KBS_RERR26,720
#define	 KBS_PERR	KBS_PERR27,767
#define	KBCMDP	KBCMDP29,814
#define	 KBC_RAMREAD	KBC_RAMREAD30,864
#define	 KBC_RAMWRITE	KBC_RAMWRITE31,910
#define	 KBC_AUXDISABLE	KBC_AUXDISABLE32,956
#define	 KBC_AUXENABLE	KBC_AUXENABLE33,1014
#define	 KBC_AUXTEST	KBC_AUXTEST34,1070
#define	 KBC_KBDECHO	KBC_KBDECHO35,1122
#define	 KBC_AUXECHO	KBC_AUXECHO36,1176
#define	 KBC_AUXWRITE	KBC_AUXWRITE37,1231
#define	 KBC_SELFTEST	KBC_SELFTEST38,1288
#define	 KBC_KBDTEST	KBC_KBDTEST39,1337
#define	 KBC_KBDDISABLE	KBC_KBDDISABLE40,1388
#define	 KBC_KBDENABLE	KBC_KBDENABLE41,1445
#define	 KBC_PULSE0	KBC_PULSE042,1500
#define	 KBC_PULSE1	KBC_PULSE143,1550
#define	 KBC_PULSE2	KBC_PULSE244,1600
#define	 KBC_PULSE3	KBC_PULSE345,1650
#define	KBDATAP	KBDATAP47,1701
#define	KBOUTP	KBOUTP48,1746
#define	K_RDCMDBYTE	K_RDCMDBYTE50,1791
#define	K_LDCMDBYTE	K_LDCMDBYTE51,1816
#define	KC8_TRANS	KC8_TRANS53,1842
#define	KC8_MDISABLE	KC8_MDISABLE54,1897
#define	KC8_KDISABLE	KC8_KDISABLE55,1943
#define	KC8_IGNSEC	KC8_IGNSEC56,1992
#define	KC8_CPU	KC8_CPU57,2043
#define	KC8_MENABLE	KC8_MENABLE58,2102
#define	KC8_KENABLE	KC8_KENABLE59,2156
#define	CMDBYTE	CMDBYTE60,2213
#define	KBC_RESET	KBC_RESET63,2299
#define	KBC_RESEND	KBC_RESEND64,2347
#define	KBC_SETDEFAULT	KBC_SETDEFAULT65,2419
#define	KBC_DISABLE	KBC_DISABLE66,2494
#define	KBC_ENABLE	KBC_ENABLE67,2578
#define	KBC_TYPEMATIC	KBC_TYPEMATIC68,2628
#define	KBC_SETTABLE	KBC_SETTABLE69,2690
#define	KBC_MODEIND	KBC_MODEIND70,2753
#define	KBC_ECHO	KBC_ECHO71,2815
#define	KBR_EXTENDED	KBR_EXTENDED74,2903
#define	KBR_RESEND	KBR_RESEND75,2957
#define	KBR_ACK	KBR_ACK76,3011
#define	KBR_OVERRUN	KBR_OVERRUN77,3064
#define	KBR_FAILURE	KBR_FAILURE78,3103
#define	KBR_BREAK	KBR_BREAK79,3152
#define	KBR_RSTDONE	KBR_RSTDONE80,3221
#define	KBR_ECHO	KBR_ECHO81,3267

inc/types.h,1005
#define JOS_INC_TYPES_HJOS_INC_TYPES_H2,24
#define NULL NULL5,62
typedef _Bool bool;bool9,130
enum { false, true };false10,150
enum { false, true };true10,150
typedef __signed char int8_t;int8_t13,219
typedef unsigned char uint8_t;uint8_t14,249
typedef short int16_t;int16_t15,280
typedef unsigned short uint16_t;uint16_t16,303
typedef int int32_t;int32_t17,336
typedef unsigned int uint32_t;uint32_t18,357
typedef long long int64_t;int64_t19,388
typedef unsigned long long uint64_t;uint64_t20,415
typedef int32_t intptr_t;intptr_t26,673
typedef uint32_t uintptr_t;uintptr_t27,699
typedef uint32_t physaddr_t;physaddr_t28,727
typedef uint32_t ppn_t;ppn_t31,791
typedef uint32_t size_t;size_t34,859
typedef int32_t ssize_t;ssize_t37,975
typedef int32_t off_t;off_t40,1048
#define MIN(MIN43,1108
#define MAX(MAX49,1241
#define ROUNDDOWN(ROUNDDOWN58,1476
#define ROUNDUP(ROUNDUP64,1637
#define ARRAY_SIZE(ARRAY_SIZE70,1778
#define offsetof(offsetof73,1904

inc/assert.h,175
#define JOS_INC_ASSERT_HJOS_INC_ASSERT_H4,73
#define warn(warn11,247
#define panic(panic12,304
#define assert(assert14,364
#define static_assert(static_assert18,521

boot/sign.pl,0

boot/main.c,255
#define SECTSIZE	SECTSIZE32,1131
#define ELFHDR	ELFHDR33,1152
bootmain(void)bootmain39,1293
readseg(uint32_t pa, uint32_t count, uint32_t offset)readseg72,2092
waitdisk(void)waitdisk99,2821
readsect(void *dst, uint32_t offset)readsect107,2928

boot/boot.S,108
start:start13,454
protcseg:protcseg58,1983
spin:spin72,2497
gdt:gdt77,2598
gdtdesc:gdtdesc82,2757

obj/boot/boot.asm,729
Disassembly of section .text:Disassembly5,49
start:start11,174
protcseg:protcseg84,2893
spin:spin108,3821
voidvoid132,4396
static inline uint8_tstatic137,4463
voidvoid157,5076
static inline voidstatic169,5412
	offset = (offset / SECTSIZE) + 1;offset226,7583
	end_pa = pa + count;end_pa230,7719
	offset = (offset / SECTSIZE) + 1;offset234,7851
	end_pa = pa + count;end_pa236,7935
	offset = (offset / SECTSIZE) + 1;offset238,8006
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph282,9731
	eph = ph + ELFHDR->e_phnum;eph284,9848
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph286,9929
	eph = ph + ELFHDR->e_phnum;eph288,10052
static inline voidstatic309,10911

obj/user/faultread.asm,2611
Disassembly of section .text:Disassembly5,50
_start:_start11,194
args_exist:args_exist28,702
voidvoid38,899
const volatile struct Env *thisenv;const63,1837
const char *binaryname = "<unknown>";const64,1873
voidvoid66,1912
	thisenv = 0;thisenv79,2450
		binaryname = argv[0];binaryname87,2755
voidvoid111,3434
static voidstatic133,4101
intint176,5749
intint217,7218
	cnt = vcprintf(fmt, ap);cnt228,7495
static voidstatic242,7871
static voidstatic340,12277
		padc = ' ';padc392,14298
		altflag = 0;altflag394,14369
		precision = -1;precision396,14440
		width = -1;width398,14521
		lflag = 0;lflag400,14598
			padc = '-';padc417,15359
			padc = '0';padc424,15611
				precision = precision * 10 + ch - '0';precision434,15994
				ch = *fmt;ch437,16158
				precision = precision * 10 + ch - '0';precision445,16499
			precision = va_arg(ap, int);precision449,16617
				width = precision, precision = -1;width461,17211
			altflag = 1;altflag479,18001
			err = va_arg(ap, int);err510,19121
			err = va_arg(ap, int);err531,20164
			err = va_arg(ap, int);err542,20695
				p = "(null)";p554,21205
				num = -(long long) num;num680,27453
			base = 10;base687,27780
			num = getint(&ap, lflag);num713,29040
			base = 10;base716,29181
			base = 10;base731,29811
			base = 10;base743,30356
			base = 10;base752,30778
			num = (unsigned long long)num787,32108
			base = 16;base796,32504
			err = va_arg(ap, int);err811,33172
			base = 16;base840,34474
			base = 16;base852,35020
			base = 16;base861,35443
intint900,36909
intint952,38944
	rc = vsnprintf(buf, n, fmt, ap);rc963,39239
#define ASM 1ASM982,39816
intint984,39831
intint1007,40476
char *char1033,41341
	ret = dst;ret1043,41643
char *char1061,42236
char *char1086,43086
	ret = dst;ret1099,43561
size_tsize_t1126,44485
	dst_in = dst;dst_in1140,45014
intint1169,46067
intint1197,47109
char *char1239,48753
char *char1267,49742
void *void1292,50535
		c = (c<<24)|(c<<16)|(c<<8)|c;c1313,51307
		c = (c<<24)|(c<<16)|(c<<8)|c;c1334,52020
void *void1354,52840
	s = src;s1367,53266
	d = dst;d1368,53276
void *void1444,56447
intint1460,56931
void *void1504,58524
longlong1531,59488
		base = 10;base1580,61272
		base = 10;base1585,61482
			dig = *s - '0';dig1616,62746
			dig = *s - 'a' + 10;dig1622,63014
			dig = *s - 'A' + 10;dig1626,63171
			dig = *s - '0';dig1643,63836
			dig = *s - 'A' + 10;dig1652,64262
voidvoid1681,65220
intint1707,66156
intint1733,67061
envid_tenvid_t1778,68962
voidvoid1810,70120

obj/user/testbss.asm,2669
Disassembly of section .text:Disassembly5,48
_start:_start11,192
args_exist:args_exist28,700
uint32_t bigarray[ARRAYSIZE];uint32_t36,875
voidvoid38,906
const volatile struct Env *thisenv;const125,4733
const char *binaryname = "<unknown>";const126,4769
voidvoid128,4808
	thisenv = 0;thisenv141,5346
		binaryname = argv[0];binaryname149,5651
voidvoid173,6330
voidvoid195,7119
static voidstatic246,8991
intint289,10639
intint330,12108
	cnt = vcprintf(fmt, ap);cnt341,12385
static voidstatic355,12761
static voidstatic453,17167
		padc = ' ';padc505,19188
		altflag = 0;altflag507,19259
		precision = -1;precision509,19330
		width = -1;width511,19411
		lflag = 0;lflag513,19488
			padc = '-';padc530,20248
			padc = '0';padc537,20500
				precision = precision * 10 + ch - '0';precision547,20883
				ch = *fmt;ch550,21047
				precision = precision * 10 + ch - '0';precision558,21388
			precision = va_arg(ap, int);precision562,21506
				width = precision, precision = -1;width574,22100
			altflag = 1;altflag592,22890
			err = va_arg(ap, int);err623,24010
			err = va_arg(ap, int);err644,25053
			err = va_arg(ap, int);err655,25584
				p = "(null)";p667,26094
				num = -(long long) num;num793,32342
			base = 10;base800,32669
			num = getint(&ap, lflag);num826,33929
			base = 10;base829,34070
			base = 10;base844,34700
			base = 10;base856,35245
			base = 10;base865,35667
			num = (unsigned long long)num900,36997
			base = 16;base909,37393
			err = va_arg(ap, int);err924,38061
			base = 16;base953,39363
			base = 16;base965,39909
			base = 16;base974,40332
intint1013,41798
intint1065,43833
	rc = vsnprintf(buf, n, fmt, ap);rc1076,44128
#define ASM 1ASM1095,44705
intint1097,44720
intint1120,45365
char *char1146,46230
	ret = dst;ret1156,46532
char *char1174,47125
char *char1199,47975
	ret = dst;ret1212,48450
size_tsize_t1239,49374
	dst_in = dst;dst_in1253,49903
intint1282,50956
intint1310,51998
char *char1352,53642
char *char1380,54631
void *void1405,55424
		c = (c<<24)|(c<<16)|(c<<8)|c;c1426,56196
		c = (c<<24)|(c<<16)|(c<<8)|c;c1447,56909
void *void1467,57729
	s = src;s1480,58155
	d = dst;d1481,58165
void *void1557,61336
intint1573,61820
void *void1617,63413
longlong1644,64377
		base = 10;base1693,66161
		base = 10;base1698,66371
			dig = *s - '0';dig1729,67635
			dig = *s - 'a' + 10;dig1735,67903
			dig = *s - 'A' + 10;dig1739,68060
			dig = *s - '0';dig1756,68725
			dig = *s - 'A' + 10;dig1765,69151
voidvoid1794,70109
intint1820,71045
intint1846,71950
envid_tenvid_t1891,73851

obj/user/divzero.asm,2656
Disassembly of section .text:Disassembly5,48
_start:_start11,192
args_exist:args_exist28,700
int zero;int36,875
voidvoid38,886
	zero = 0;zero47,1230
const volatile struct Env *thisenv;const70,2100
const char *binaryname = "<unknown>";const71,2136
voidvoid73,2175
	thisenv = 0;thisenv86,2713
		binaryname = argv[0];binaryname94,3018
voidvoid118,3697
static voidstatic140,4364
intint183,6012
intint224,7481
	cnt = vcprintf(fmt, ap);cnt235,7758
static voidstatic249,8134
static voidstatic347,12540
		padc = ' ';padc399,14561
		altflag = 0;altflag401,14632
		precision = -1;precision403,14703
		width = -1;width405,14784
		lflag = 0;lflag407,14861
			padc = '-';padc424,15622
			padc = '0';padc431,15874
				precision = precision * 10 + ch - '0';precision441,16257
				ch = *fmt;ch444,16421
				precision = precision * 10 + ch - '0';precision452,16762
			precision = va_arg(ap, int);precision456,16880
				width = precision, precision = -1;width468,17474
			altflag = 1;altflag486,18264
			err = va_arg(ap, int);err517,19384
			err = va_arg(ap, int);err538,20427
			err = va_arg(ap, int);err549,20958
				p = "(null)";p561,21468
				num = -(long long) num;num687,27716
			base = 10;base694,28043
			num = getint(&ap, lflag);num720,29303
			base = 10;base723,29444
			base = 10;base738,30074
			base = 10;base750,30619
			base = 10;base759,31041
			num = (unsigned long long)num794,32371
			base = 16;base803,32767
			err = va_arg(ap, int);err818,33435
			base = 16;base847,34737
			base = 16;base859,35283
			base = 16;base868,35706
intint907,37172
intint959,39207
	rc = vsnprintf(buf, n, fmt, ap);rc970,39502
#define ASM 1ASM989,40079
intint991,40094
intint1014,40739
char *char1040,41604
	ret = dst;ret1050,41906
char *char1068,42499
char *char1093,43349
	ret = dst;ret1106,43824
size_tsize_t1133,44748
	dst_in = dst;dst_in1147,45277
intint1176,46330
intint1204,47372
char *char1246,49016
char *char1274,50005
void *void1299,50798
		c = (c<<24)|(c<<16)|(c<<8)|c;c1320,51570
		c = (c<<24)|(c<<16)|(c<<8)|c;c1341,52283
void *void1361,53103
	s = src;s1374,53529
	d = dst;d1375,53539
void *void1451,56710
intint1467,57194
void *void1511,58787
longlong1538,59751
		base = 10;base1587,61535
		base = 10;base1592,61745
			dig = *s - '0';dig1623,63009
			dig = *s - 'a' + 10;dig1629,63277
			dig = *s - 'A' + 10;dig1633,63434
			dig = *s - '0';dig1650,64099
			dig = *s - 'A' + 10;dig1659,64525
voidvoid1688,65483
intint1714,66419
intint1740,67324
envid_tenvid_t1785,69225
voidvoid1817,70383

obj/user/faultwrite.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const51,1224
const char *binaryname = "<unknown>";const52,1260
voidvoid54,1299
	thisenv = 0;thisenv67,1837
		binaryname = argv[0];binaryname75,2142
voidvoid103,2947
voidvoid125,3629
intint151,4565
intint177,5470
envid_tenvid_t222,7373
voidvoid254,8531
static voidstatic305,10403
intint348,12051
intint389,13520
	cnt = vcprintf(fmt, ap);cnt400,13797
static voidstatic414,14173
static voidstatic512,18579
		padc = ' ';padc564,20600
		altflag = 0;altflag566,20671
		precision = -1;precision568,20742
		width = -1;width570,20823
		lflag = 0;lflag572,20900
			padc = '-';padc589,21661
			padc = '0';padc596,21913
				precision = precision * 10 + ch - '0';precision606,22296
				ch = *fmt;ch609,22460
				precision = precision * 10 + ch - '0';precision617,22801
			precision = va_arg(ap, int);precision621,22919
				width = precision, precision = -1;width633,23513
			altflag = 1;altflag651,24303
			err = va_arg(ap, int);err682,25423
			err = va_arg(ap, int);err703,26466
			err = va_arg(ap, int);err714,26997
				p = "(null)";p726,27507
				num = -(long long) num;num852,33755
			base = 10;base859,34082
			num = getint(&ap, lflag);num885,35342
			base = 10;base888,35483
			base = 10;base903,36113
			base = 10;base915,36658
			base = 10;base924,37080
			num = (unsigned long long)num959,38410
			base = 16;base968,38806
			err = va_arg(ap, int);err983,39474
			base = 16;base1012,40776
			base = 16;base1024,41322
			base = 16;base1033,41745
intint1072,43211
intint1124,45246
	rc = vsnprintf(buf, n, fmt, ap);rc1135,45541
#define ASM 1ASM1154,46118
intint1156,46133
intint1179,46778
char *char1205,47643
	ret = dst;ret1215,47945
char *char1233,48538
char *char1258,49388
	ret = dst;ret1271,49863
size_tsize_t1298,50787
	dst_in = dst;dst_in1312,51316
intint1341,52369
intint1369,53411
char *char1411,55055
char *char1439,56044
void *void1464,56837
		c = (c<<24)|(c<<16)|(c<<8)|c;c1485,57609
		c = (c<<24)|(c<<16)|(c<<8)|c;c1506,58322
void *void1526,59142
	s = src;s1539,59568
	d = dst;d1540,59578
void *void1616,62749
intint1632,63233
void *void1676,64826
longlong1703,65790
		base = 10;base1752,67574
		base = 10;base1757,67784
			dig = *s - '0';dig1788,69048
			dig = *s - 'a' + 10;dig1794,69316
			dig = *s - 'A' + 10;dig1798,69473
			dig = *s - '0';dig1815,70138
			dig = *s - 'A' + 10;dig1824,70564

obj/user/badsegment.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const52,1344
const char *binaryname = "<unknown>";const53,1380
voidvoid55,1419
	thisenv = 0;thisenv68,1957
		binaryname = argv[0];binaryname76,2262
voidvoid104,3067
voidvoid126,3749
intint152,4685
intint178,5590
envid_tenvid_t223,7493
voidvoid255,8651
static voidstatic306,10523
intint349,12171
intint390,13640
	cnt = vcprintf(fmt, ap);cnt401,13917
static voidstatic415,14293
static voidstatic513,18699
		padc = ' ';padc565,20720
		altflag = 0;altflag567,20791
		precision = -1;precision569,20862
		width = -1;width571,20943
		lflag = 0;lflag573,21020
			padc = '-';padc590,21781
			padc = '0';padc597,22033
				precision = precision * 10 + ch - '0';precision607,22416
				ch = *fmt;ch610,22580
				precision = precision * 10 + ch - '0';precision618,22921
			precision = va_arg(ap, int);precision622,23039
				width = precision, precision = -1;width634,23633
			altflag = 1;altflag652,24423
			err = va_arg(ap, int);err683,25543
			err = va_arg(ap, int);err704,26586
			err = va_arg(ap, int);err715,27117
				p = "(null)";p727,27627
				num = -(long long) num;num853,33875
			base = 10;base860,34202
			num = getint(&ap, lflag);num886,35462
			base = 10;base889,35603
			base = 10;base904,36233
			base = 10;base916,36778
			base = 10;base925,37200
			num = (unsigned long long)num960,38530
			base = 16;base969,38926
			err = va_arg(ap, int);err984,39594
			base = 16;base1013,40896
			base = 16;base1025,41442
			base = 16;base1034,41865
intint1073,43331
intint1125,45366
	rc = vsnprintf(buf, n, fmt, ap);rc1136,45661
#define ASM 1ASM1155,46238
intint1157,46253
intint1180,46898
char *char1206,47763
	ret = dst;ret1216,48065
char *char1234,48658
char *char1259,49508
	ret = dst;ret1272,49983
size_tsize_t1299,50907
	dst_in = dst;dst_in1313,51436
intint1342,52489
intint1370,53531
char *char1412,55175
char *char1440,56164
void *void1465,56957
		c = (c<<24)|(c<<16)|(c<<8)|c;c1486,57729
		c = (c<<24)|(c<<16)|(c<<8)|c;c1507,58442
void *void1527,59262
	s = src;s1540,59688
	d = dst;d1541,59698
void *void1617,62869
intint1633,63353
void *void1677,64946
longlong1704,65910
		base = 10;base1753,67694
		base = 10;base1758,67904
			dig = *s - '0';dig1789,69168
			dig = *s - 'a' + 10;dig1795,69436
			dig = *s - 'A' + 10;dig1799,69593
			dig = *s - '0';dig1816,70258
			dig = *s - 'A' + 10;dig1825,70684

obj/user/faultreadkernel.asm,2611
Disassembly of section .text:Disassembly5,56
_start:_start11,200
args_exist:args_exist28,708
voidvoid38,905
const volatile struct Env *thisenv;const63,1868
const char *binaryname = "<unknown>";const64,1904
voidvoid66,1943
	thisenv = 0;thisenv79,2481
		binaryname = argv[0];binaryname87,2786
voidvoid111,3465
static voidstatic133,4132
intint176,5780
intint217,7249
	cnt = vcprintf(fmt, ap);cnt228,7526
static voidstatic242,7902
static voidstatic340,12308
		padc = ' ';padc392,14329
		altflag = 0;altflag394,14400
		precision = -1;precision396,14471
		width = -1;width398,14552
		lflag = 0;lflag400,14629
			padc = '-';padc417,15390
			padc = '0';padc424,15642
				precision = precision * 10 + ch - '0';precision434,16025
				ch = *fmt;ch437,16189
				precision = precision * 10 + ch - '0';precision445,16530
			precision = va_arg(ap, int);precision449,16648
				width = precision, precision = -1;width461,17242
			altflag = 1;altflag479,18032
			err = va_arg(ap, int);err510,19152
			err = va_arg(ap, int);err531,20195
			err = va_arg(ap, int);err542,20726
				p = "(null)";p554,21236
				num = -(long long) num;num680,27484
			base = 10;base687,27811
			num = getint(&ap, lflag);num713,29071
			base = 10;base716,29212
			base = 10;base731,29842
			base = 10;base743,30387
			base = 10;base752,30809
			num = (unsigned long long)num787,32139
			base = 16;base796,32535
			err = va_arg(ap, int);err811,33203
			base = 16;base840,34505
			base = 16;base852,35051
			base = 16;base861,35474
intint900,36940
intint952,38975
	rc = vsnprintf(buf, n, fmt, ap);rc963,39270
#define ASM 1ASM982,39847
intint984,39862
intint1007,40507
char *char1033,41372
	ret = dst;ret1043,41674
char *char1061,42267
char *char1086,43117
	ret = dst;ret1099,43592
size_tsize_t1126,44516
	dst_in = dst;dst_in1140,45045
intint1169,46098
intint1197,47140
char *char1239,48784
char *char1267,49773
void *void1292,50566
		c = (c<<24)|(c<<16)|(c<<8)|c;c1313,51338
		c = (c<<24)|(c<<16)|(c<<8)|c;c1334,52051
void *void1354,52871
	s = src;s1367,53297
	d = dst;d1368,53307
void *void1444,56478
intint1460,56962
void *void1504,58555
longlong1531,59519
		base = 10;base1580,61303
		base = 10;base1585,61513
			dig = *s - '0';dig1616,62777
			dig = *s - 'a' + 10;dig1622,63045
			dig = *s - 'A' + 10;dig1626,63202
			dig = *s - '0';dig1643,63867
			dig = *s - 'A' + 10;dig1652,64293
voidvoid1681,65251
intint1707,66187
intint1733,67092
envid_tenvid_t1778,68993
voidvoid1810,70151

obj/user/evilhello.asm,2614
Disassembly of section .text:Disassembly5,50
_start:_start11,194
args_exist:args_exist28,702
voidvoid38,899
const volatile struct Env *thisenv;const63,1832
const char *binaryname = "<unknown>";const64,1868
voidvoid66,1907
	thisenv = 0;thisenv79,2445
		binaryname = argv[0];binaryname87,2750
voidvoid111,3429
voidvoid133,4111
intint159,5047
intint185,5952
envid_tenvid_t230,7855
voidvoid262,9013
static voidstatic313,10885
intint356,12533
intint397,14002
	cnt = vcprintf(fmt, ap);cnt408,14279
static voidstatic422,14655
static voidstatic520,19061
		padc = ' ';padc572,21082
		altflag = 0;altflag574,21153
		precision = -1;precision576,21224
		width = -1;width578,21305
		lflag = 0;lflag580,21382
			padc = '-';padc597,22143
			padc = '0';padc604,22395
				precision = precision * 10 + ch - '0';precision614,22778
				ch = *fmt;ch617,22942
				precision = precision * 10 + ch - '0';precision625,23283
			precision = va_arg(ap, int);precision629,23401
				width = precision, precision = -1;width641,23995
			altflag = 1;altflag659,24785
			err = va_arg(ap, int);err690,25905
			err = va_arg(ap, int);err711,26948
			err = va_arg(ap, int);err722,27479
				p = "(null)";p734,27989
				num = -(long long) num;num860,34237
			base = 10;base867,34564
			num = getint(&ap, lflag);num893,35824
			base = 10;base896,35965
			base = 10;base911,36595
			base = 10;base923,37140
			base = 10;base932,37562
			num = (unsigned long long)num967,38892
			base = 16;base976,39288
			err = va_arg(ap, int);err991,39956
			base = 16;base1020,41258
			base = 16;base1032,41804
			base = 16;base1041,42227
intint1080,43693
intint1132,45728
	rc = vsnprintf(buf, n, fmt, ap);rc1143,46023
#define ASM 1ASM1162,46600
intint1164,46615
intint1187,47260
char *char1213,48125
	ret = dst;ret1223,48427
char *char1241,49020
char *char1266,49870
	ret = dst;ret1279,50345
size_tsize_t1306,51269
	dst_in = dst;dst_in1320,51798
intint1349,52851
intint1377,53893
char *char1419,55537
char *char1447,56526
void *void1472,57319
		c = (c<<24)|(c<<16)|(c<<8)|c;c1493,58091
		c = (c<<24)|(c<<16)|(c<<8)|c;c1514,58804
void *void1534,59624
	s = src;s1547,60050
	d = dst;d1548,60060
void *void1624,63231
intint1640,63715
void *void1684,65308
longlong1711,66272
		base = 10;base1760,68056
		base = 10;base1765,68266
			dig = *s - '0';dig1796,69530
			dig = *s - 'a' + 10;dig1802,69798
			dig = *s - 'A' + 10;dig1806,69955
			dig = *s - '0';dig1823,70620
			dig = *s - 'A' + 10;dig1832,71046

obj/user/breakpoint.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const50,1201
const char *binaryname = "<unknown>";const51,1237
voidvoid53,1276
	thisenv = 0;thisenv66,1814
		binaryname = argv[0];binaryname74,2119
voidvoid102,2924
voidvoid124,3606
intint150,4542
intint176,5447
envid_tenvid_t221,7350
voidvoid253,8508
static voidstatic304,10380
intint347,12028
intint388,13497
	cnt = vcprintf(fmt, ap);cnt399,13774
static voidstatic413,14150
static voidstatic511,18556
		padc = ' ';padc563,20577
		altflag = 0;altflag565,20648
		precision = -1;precision567,20719
		width = -1;width569,20800
		lflag = 0;lflag571,20877
			padc = '-';padc588,21638
			padc = '0';padc595,21890
				precision = precision * 10 + ch - '0';precision605,22273
				ch = *fmt;ch608,22437
				precision = precision * 10 + ch - '0';precision616,22778
			precision = va_arg(ap, int);precision620,22896
				width = precision, precision = -1;width632,23490
			altflag = 1;altflag650,24280
			err = va_arg(ap, int);err681,25400
			err = va_arg(ap, int);err702,26443
			err = va_arg(ap, int);err713,26974
				p = "(null)";p725,27484
				num = -(long long) num;num851,33732
			base = 10;base858,34059
			num = getint(&ap, lflag);num884,35319
			base = 10;base887,35460
			base = 10;base902,36090
			base = 10;base914,36635
			base = 10;base923,37057
			num = (unsigned long long)num958,38387
			base = 16;base967,38783
			err = va_arg(ap, int);err982,39451
			base = 16;base1011,40753
			base = 16;base1023,41299
			base = 16;base1032,41722
intint1071,43188
intint1123,45223
	rc = vsnprintf(buf, n, fmt, ap);rc1134,45518
#define ASM 1ASM1153,46095
intint1155,46110
intint1178,46755
char *char1204,47620
	ret = dst;ret1214,47922
char *char1232,48515
char *char1257,49365
	ret = dst;ret1270,49840
size_tsize_t1297,50764
	dst_in = dst;dst_in1311,51293
intint1340,52346
intint1368,53388
char *char1410,55032
char *char1438,56021
void *void1463,56814
		c = (c<<24)|(c<<16)|(c<<8)|c;c1484,57586
		c = (c<<24)|(c<<16)|(c<<8)|c;c1505,58299
void *void1525,59119
	s = src;s1538,59545
	d = dst;d1539,59555
void *void1615,62726
intint1631,63210
void *void1675,64803
longlong1702,65767
		base = 10;base1751,67551
		base = 10;base1756,67761
			dig = *s - '0';dig1787,69025
			dig = *s - 'a' + 10;dig1793,69293
			dig = *s - 'A' + 10;dig1797,69450
			dig = *s - '0';dig1814,70115
			dig = *s - 'A' + 10;dig1823,70541

obj/user/buggyhello2.asm,2665
Disassembly of section .text:Disassembly5,52
_start:_start11,196
args_exist:args_exist28,704
const char *hello = "hello, world\n";const36,879
voidvoid38,918
const volatile struct Env *thisenv;const62,1782
const char *binaryname = "<unknown>";const63,1818
voidvoid65,1857
	thisenv = 0;thisenv78,2395
		binaryname = argv[0];binaryname86,2700
voidvoid110,3380
voidvoid132,4062
intint158,4998
intint184,5903
envid_tenvid_t229,7806
voidvoid261,8964
static voidstatic312,10836
intint355,12484
intint396,13953
	cnt = vcprintf(fmt, ap);cnt407,14230
static voidstatic421,14606
static voidstatic519,19012
		padc = ' ';padc571,21033
		altflag = 0;altflag573,21104
		precision = -1;precision575,21175
		width = -1;width577,21256
		lflag = 0;lflag579,21333
			padc = '-';padc596,22094
			padc = '0';padc603,22346
				precision = precision * 10 + ch - '0';precision613,22729
				ch = *fmt;ch616,22893
				precision = precision * 10 + ch - '0';precision624,23234
			precision = va_arg(ap, int);precision628,23352
				width = precision, precision = -1;width640,23946
			altflag = 1;altflag658,24736
			err = va_arg(ap, int);err689,25856
			err = va_arg(ap, int);err710,26899
			err = va_arg(ap, int);err721,27430
				p = "(null)";p733,27940
				num = -(long long) num;num859,34188
			base = 10;base866,34515
			num = getint(&ap, lflag);num892,35775
			base = 10;base895,35916
			base = 10;base910,36546
			base = 10;base922,37091
			base = 10;base931,37513
			num = (unsigned long long)num966,38843
			base = 16;base975,39239
			err = va_arg(ap, int);err990,39907
			base = 16;base1019,41209
			base = 16;base1031,41755
			base = 16;base1040,42178
intint1079,43644
intint1131,45679
	rc = vsnprintf(buf, n, fmt, ap);rc1142,45974
#define ASM 1ASM1161,46551
intint1163,46566
intint1186,47211
char *char1212,48076
	ret = dst;ret1222,48378
char *char1240,48971
char *char1265,49821
	ret = dst;ret1278,50296
size_tsize_t1305,51220
	dst_in = dst;dst_in1319,51749
intint1348,52802
intint1376,53844
char *char1418,55488
char *char1446,56477
void *void1471,57270
		c = (c<<24)|(c<<16)|(c<<8)|c;c1492,58042
		c = (c<<24)|(c<<16)|(c<<8)|c;c1513,58755
void *void1533,59575
	s = src;s1546,60001
	d = dst;d1547,60011
void *void1623,63182
intint1639,63666
void *void1683,65259
longlong1710,66223
		base = 10;base1759,68007
		base = 10;base1764,68217
			dig = *s - '0';dig1795,69481
			dig = *s - 'a' + 10;dig1801,69749
			dig = *s - 'A' + 10;dig1805,69906
			dig = *s - '0';dig1822,70571
			dig = *s - 'A' + 10;dig1831,70997

obj/user/buggyhello.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const62,1749
const char *binaryname = "<unknown>";const63,1785
voidvoid65,1824
	thisenv = 0;thisenv78,2362
		binaryname = argv[0];binaryname86,2667
voidvoid110,3346
voidvoid132,4028
intint158,4964
intint184,5869
envid_tenvid_t229,7772
voidvoid261,8930
static voidstatic312,10802
intint355,12450
intint396,13919
	cnt = vcprintf(fmt, ap);cnt407,14196
static voidstatic421,14572
static voidstatic519,18978
		padc = ' ';padc571,20999
		altflag = 0;altflag573,21070
		precision = -1;precision575,21141
		width = -1;width577,21222
		lflag = 0;lflag579,21299
			padc = '-';padc596,22060
			padc = '0';padc603,22312
				precision = precision * 10 + ch - '0';precision613,22695
				ch = *fmt;ch616,22859
				precision = precision * 10 + ch - '0';precision624,23200
			precision = va_arg(ap, int);precision628,23318
				width = precision, precision = -1;width640,23912
			altflag = 1;altflag658,24702
			err = va_arg(ap, int);err689,25822
			err = va_arg(ap, int);err710,26865
			err = va_arg(ap, int);err721,27396
				p = "(null)";p733,27906
				num = -(long long) num;num859,34154
			base = 10;base866,34481
			num = getint(&ap, lflag);num892,35741
			base = 10;base895,35882
			base = 10;base910,36512
			base = 10;base922,37057
			base = 10;base931,37479
			num = (unsigned long long)num966,38809
			base = 16;base975,39205
			err = va_arg(ap, int);err990,39873
			base = 16;base1019,41175
			base = 16;base1031,41721
			base = 16;base1040,42144
intint1079,43610
intint1131,45645
	rc = vsnprintf(buf, n, fmt, ap);rc1142,45940
#define ASM 1ASM1161,46517
intint1163,46532
intint1186,47177
char *char1212,48042
	ret = dst;ret1222,48344
char *char1240,48937
char *char1265,49787
	ret = dst;ret1278,50262
size_tsize_t1305,51186
	dst_in = dst;dst_in1319,51715
intint1348,52768
intint1376,53810
char *char1418,55454
char *char1446,56443
void *void1471,57236
		c = (c<<24)|(c<<16)|(c<<8)|c;c1492,58008
		c = (c<<24)|(c<<16)|(c<<8)|c;c1513,58721
void *void1533,59541
	s = src;s1546,59967
	d = dst;d1547,59977
void *void1623,63148
intint1639,63632
void *void1683,65225
longlong1710,66189
		base = 10;base1759,67973
		base = 10;base1764,68183
			dig = *s - '0';dig1795,69447
			dig = *s - 'a' + 10;dig1801,69715
			dig = *s - 'A' + 10;dig1805,69872
			dig = *s - '0';dig1822,70537
			dig = *s - 'A' + 10;dig1831,70963

obj/user/hello.asm,2611
Disassembly of section .text:Disassembly5,46
_start:_start11,190
args_exist:args_exist28,698
voidvoid38,910
const volatile struct Env *thisenv;const71,2240
const char *binaryname = "<unknown>";const72,2276
voidvoid74,2315
	thisenv = 0;thisenv87,2853
		binaryname = argv[0];binaryname95,3158
voidvoid119,3837
static voidstatic141,4504
intint184,6152
intint225,7621
	cnt = vcprintf(fmt, ap);cnt236,7898
static voidstatic250,8274
static voidstatic348,12680
		padc = ' ';padc400,14701
		altflag = 0;altflag402,14772
		precision = -1;precision404,14843
		width = -1;width406,14924
		lflag = 0;lflag408,15001
			padc = '-';padc425,15762
			padc = '0';padc432,16014
				precision = precision * 10 + ch - '0';precision442,16397
				ch = *fmt;ch445,16561
				precision = precision * 10 + ch - '0';precision453,16902
			precision = va_arg(ap, int);precision457,17020
				width = precision, precision = -1;width469,17614
			altflag = 1;altflag487,18404
			err = va_arg(ap, int);err518,19524
			err = va_arg(ap, int);err539,20567
			err = va_arg(ap, int);err550,21098
				p = "(null)";p562,21608
				num = -(long long) num;num688,27856
			base = 10;base695,28183
			num = getint(&ap, lflag);num721,29443
			base = 10;base724,29584
			base = 10;base739,30214
			base = 10;base751,30759
			base = 10;base760,31181
			num = (unsigned long long)num795,32511
			base = 16;base804,32907
			err = va_arg(ap, int);err819,33575
			base = 16;base848,34877
			base = 16;base860,35423
			base = 16;base869,35846
intint908,37312
intint960,39347
	rc = vsnprintf(buf, n, fmt, ap);rc971,39642
#define ASM 1ASM990,40219
intint992,40234
intint1015,40879
char *char1041,41744
	ret = dst;ret1051,42046
char *char1069,42639
char *char1094,43489
	ret = dst;ret1107,43964
size_tsize_t1134,44888
	dst_in = dst;dst_in1148,45417
intint1177,46470
intint1205,47512
char *char1247,49156
char *char1275,50145
void *void1300,50938
		c = (c<<24)|(c<<16)|(c<<8)|c;c1321,51710
		c = (c<<24)|(c<<16)|(c<<8)|c;c1342,52423
void *void1362,53243
	s = src;s1375,53669
	d = dst;d1376,53679
void *void1452,56850
intint1468,57334
void *void1512,58927
longlong1539,59891
		base = 10;base1588,61675
		base = 10;base1593,61885
			dig = *s - '0';dig1624,63149
			dig = *s - 'a' + 10;dig1630,63417
			dig = *s - 'A' + 10;dig1634,63574
			dig = *s - '0';dig1651,64239
			dig = *s - 'A' + 10;dig1660,64665
voidvoid1689,65623
intint1715,66559
intint1741,67464
envid_tenvid_t1786,69365
voidvoid1818,70523

obj/user/softint.asm,2614
Disassembly of section .text:Disassembly5,48
_start:_start11,192
args_exist:args_exist28,700
voidvoid38,897
const volatile struct Env *thisenv;const50,1217
const char *binaryname = "<unknown>";const51,1253
voidvoid53,1292
	thisenv = 0;thisenv66,1830
		binaryname = argv[0];binaryname74,2135
voidvoid102,2940
voidvoid124,3622
intint150,4558
intint176,5463
envid_tenvid_t221,7366
voidvoid253,8524
static voidstatic304,10396
intint347,12044
intint388,13513
	cnt = vcprintf(fmt, ap);cnt399,13790
static voidstatic413,14166
static voidstatic511,18572
		padc = ' ';padc563,20593
		altflag = 0;altflag565,20664
		precision = -1;precision567,20735
		width = -1;width569,20816
		lflag = 0;lflag571,20893
			padc = '-';padc588,21654
			padc = '0';padc595,21906
				precision = precision * 10 + ch - '0';precision605,22289
				ch = *fmt;ch608,22453
				precision = precision * 10 + ch - '0';precision616,22794
			precision = va_arg(ap, int);precision620,22912
				width = precision, precision = -1;width632,23506
			altflag = 1;altflag650,24296
			err = va_arg(ap, int);err681,25416
			err = va_arg(ap, int);err702,26459
			err = va_arg(ap, int);err713,26990
				p = "(null)";p725,27500
				num = -(long long) num;num851,33748
			base = 10;base858,34075
			num = getint(&ap, lflag);num884,35335
			base = 10;base887,35476
			base = 10;base902,36106
			base = 10;base914,36651
			base = 10;base923,37073
			num = (unsigned long long)num958,38403
			base = 16;base967,38799
			err = va_arg(ap, int);err982,39467
			base = 16;base1011,40769
			base = 16;base1023,41315
			base = 16;base1032,41738
intint1071,43204
intint1123,45239
	rc = vsnprintf(buf, n, fmt, ap);rc1134,45534
#define ASM 1ASM1153,46111
intint1155,46126
intint1178,46771
char *char1204,47636
	ret = dst;ret1214,47938
char *char1232,48531
char *char1257,49381
	ret = dst;ret1270,49856
size_tsize_t1297,50780
	dst_in = dst;dst_in1311,51309
intint1340,52362
intint1368,53404
char *char1410,55048
char *char1438,56037
void *void1463,56830
		c = (c<<24)|(c<<16)|(c<<8)|c;c1484,57602
		c = (c<<24)|(c<<16)|(c<<8)|c;c1505,58315
void *void1525,59135
	s = src;s1538,59561
	d = dst;d1539,59571
void *void1615,62742
intint1631,63226
void *void1675,64819
longlong1702,65783
		base = 10;base1751,67567
		base = 10;base1756,67777
			dig = *s - '0';dig1787,69041
			dig = *s - 'a' + 10;dig1793,69309
			dig = *s - 'A' + 10;dig1797,69466
			dig = *s - '0';dig1814,70131
			dig = *s - 'A' + 10;dig1823,70557

obj/user/faultwritekernel.asm,2614
Disassembly of section .text:Disassembly5,57
_start:_start11,201
args_exist:args_exist28,709
voidvoid38,906
const volatile struct Env *thisenv;const51,1246
const char *binaryname = "<unknown>";const52,1282
voidvoid54,1321
	thisenv = 0;thisenv67,1859
		binaryname = argv[0];binaryname75,2164
voidvoid103,2969
voidvoid125,3651
intint151,4587
intint177,5492
envid_tenvid_t222,7395
voidvoid254,8553
static voidstatic305,10425
intint348,12073
intint389,13542
	cnt = vcprintf(fmt, ap);cnt400,13819
static voidstatic414,14195
static voidstatic512,18601
		padc = ' ';padc564,20622
		altflag = 0;altflag566,20693
		precision = -1;precision568,20764
		width = -1;width570,20845
		lflag = 0;lflag572,20922
			padc = '-';padc589,21683
			padc = '0';padc596,21935
				precision = precision * 10 + ch - '0';precision606,22318
				ch = *fmt;ch609,22482
				precision = precision * 10 + ch - '0';precision617,22823
			precision = va_arg(ap, int);precision621,22941
				width = precision, precision = -1;width633,23535
			altflag = 1;altflag651,24325
			err = va_arg(ap, int);err682,25445
			err = va_arg(ap, int);err703,26488
			err = va_arg(ap, int);err714,27019
				p = "(null)";p726,27529
				num = -(long long) num;num852,33777
			base = 10;base859,34104
			num = getint(&ap, lflag);num885,35364
			base = 10;base888,35505
			base = 10;base903,36135
			base = 10;base915,36680
			base = 10;base924,37102
			num = (unsigned long long)num959,38432
			base = 16;base968,38828
			err = va_arg(ap, int);err983,39496
			base = 16;base1012,40798
			base = 16;base1024,41344
			base = 16;base1033,41767
intint1072,43233
intint1124,45268
	rc = vsnprintf(buf, n, fmt, ap);rc1135,45563
#define ASM 1ASM1154,46140
intint1156,46155
intint1179,46800
char *char1205,47665
	ret = dst;ret1215,47967
char *char1233,48560
char *char1258,49410
	ret = dst;ret1271,49885
size_tsize_t1298,50809
	dst_in = dst;dst_in1312,51338
intint1341,52391
intint1369,53433
char *char1411,55077
char *char1439,56066
void *void1464,56859
		c = (c<<24)|(c<<16)|(c<<8)|c;c1485,57631
		c = (c<<24)|(c<<16)|(c<<8)|c;c1506,58344
void *void1526,59164
	s = src;s1539,59590
	d = dst;d1540,59600
void *void1616,62771
intint1632,63255
void *void1676,64848
longlong1703,65812
		base = 10;base1752,67596
		base = 10;base1757,67806
			dig = *s - '0';dig1788,69070
			dig = *s - 'a' + 10;dig1794,69338
			dig = *s - 'A' + 10;dig1798,69495
			dig = *s - '0';dig1815,70160
			dig = *s - 'A' + 10;dig1824,70586

obj/kern/kernel.asm,400263
Disassembly of section .text:Disassembly5,47
f0100000 <_start+0xeffffff4>:f01000007,78
_start = RELOC(entry)_start9,123
entry:entry12,159
f0100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dhf010000014,200
f0100006:	00 00                	add    %al,(%eax)f010000615,256
f0100008:	fe 4f 52             	decb   0x52(%edi)f010000816,306
f010000b:	e4                   	.byte 0xe4f010000b17,356
f010000c <entry>:f010000c19,400
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472f010000c20,418
f0100013:	34 12 f010001321,471
f0100015:	b8 00 f0 17 00       	mov    $0x17f000,%eaxf010001528,696
f010001a:	0f 22 d8             	mov    %eax,%cr3f010001a30,767
f010001d:	0f 20 c0             	mov    %cr0,%eaxf010001d33,852
f0100020:	0d 01 00 01 80       	or     $0x80010001,%eaxf010002035,936
f0100025:	0f 22 c0             	mov    %eax,%cr0f010002537,1009
f0100028:	b8 2f 00 10 f0       	mov    $0xf010002f,%eaxf010002843,1219
f010002d:	ff e0                	jmp    *%eaxf010002d45,1286
f010002f <relocated>:f010002f47,1332
relocated:relocated48,1354
f010002f:	bd 00 00 00 00       	mov    $0x0,%ebpf010002f54,1542
f0100034:	bc 00 80 11 f0       	mov    $0xf0118000,%espf010003458,1644
f0100039:	e8 02 00 00 00       	call   f0100040 <i386_init>f010003962,1734
f010003e <spin>:f010003e64,1795
spin:	jmp	spinspin67,1869
f010003e:	eb fe                	jmp    f010003e <spin>f010003e68,1884
f0100040 <i386_init>:f010004070,1940
voidvoid74,1987
f0100040:	55                   	push   %ebpf010004077,2010
f0100041:	89 e5                	mov    %esp,%ebpf010004178,2054
f0100043:	53                   	push   %ebxf010004379,2103
f0100044:	83 ec 08             	sub    $0x8,%espf010004480,2147
f0100047:	e8 1b 01 00 00       	call   f0100167 <__x86.get_pc_thunk.bx>f010004781,2196
f010004c:	81 c3 d0 df 07 00    	add    $0x7dfd0,%ebxf010004c82,2268
f0100052:	c7 c0 14 10 18 f0    	mov    $0xf0181014,%eaxf010005289,2585
f0100058:	c7 c2 00 01 18 f0    	mov    $0xf0180100,%edxf010005890,2641
f010005e:	29 d0                	sub    %edx,%eaxf010005e91,2697
f0100060:	50                   	push   %eaxf010006092,2746
f0100061:	6a 00                	push   $0x0f010006193,2790
f0100063:	52                   	push   %edxf010006394,2834
f0100064:	e8 b5 3d 00 00       	call   f0103e1e <memset>f010006495,2878
f0100069:	e8 4e 05 00 00       	call   f01005bc <cons_init>f0100069100,3025
f010006e:	83 c4 08             	add    $0x8,%espf010006e103,3133
f0100071:	68 ac 1a 00 00       	push   $0x1aacf0100071104,3182
f0100076:	8d 83 44 62 f8 ff    	lea    -0x79dbc(%ebx),%eaxf0100076105,3229
f010007c:	50                   	push   %eaxf010007c106,3288
f010007d:	e8 c2 2d 00 00       	call   f0102e44 <cprintf>f010007d107,3332
f0100082:	e8 c0 10 00 00       	call   f0101147 <mem_init>f0100082111,3457
f0100087:	e8 24 29 00 00       	call   f01029b0 <env_init>f0100087115,3582
f010008c:	e8 66 2e 00 00       	call   f0102ef7 <trap_init>f010008c117,3655
f0100091:	83 c4 08             	add    $0x8,%espf0100091124,3880
f0100094:	6a 00                	push   $0x0f0100094125,3929
f0100096:	ff b3 f8 ff ff ff    	pushl  -0x8(%ebx)f0100096126,3973
f010009c:	e8 78 2a 00 00       	call   f0102b19 <env_create>f010009c127,4023
f01000a1:	83 c4 04             	add    $0x4,%espf01000a1132,4184
f01000a4:	c7 c0 48 03 18 f0    	mov    $0xf0180348,%eaxf01000a4133,4233
f01000aa:	ff 30                	pushl  (%eax)f01000aa134,4289
f01000ac:	e8 e2 2c 00 00       	call   f0102d93 <env_run>f01000ac135,4335
f01000b1 <_panic>:f01000b1137,4394
voidvoid141,4530
f01000b1:	55                   	push   %ebpf01000b1144,4593
f01000b2:	89 e5                	mov    %esp,%ebpf01000b2145,4637
f01000b4:	57                   	push   %edif01000b4146,4686
f01000b5:	56                   	push   %esif01000b5147,4730
f01000b6:	53                   	push   %ebxf01000b6148,4774
f01000b7:	83 ec 0c             	sub    $0xc,%espf01000b7149,4818
f01000ba:	e8 a8 00 00 00       	call   f0100167 <__x86.get_pc_thunk.bx>f01000ba150,4867
f01000bf:	81 c3 5d df 07 00    	add    $0x7df5d,%ebxf01000bf151,4939
f01000c5:	8b 7d 10             	mov    0x10(%ebp),%edif01000c5152,4992
f01000c8:	c7 c0 04 10 18 f0    	mov    $0xf0181004,%eaxf01000c8156,5076
f01000ce:	83 38 00             	cmpl   $0x0,(%eax)f01000ce157,5132
f01000d1:	74 0f                	je     f01000e2 <_panic+0x31>f01000d1158,5183
dead:dead161,5259
f01000d3:	83 ec 0c             	sub    $0xc,%espf01000d3165,5330
f01000d6:	6a 00                	push   $0x0f01000d6166,5379
f01000d8:	e8 67 08 00 00       	call   f0100944 <monitor>f01000d8167,5423
f01000dd:	83 c4 10             	add    $0x10,%espf01000dd168,5481
f01000e0:	eb f1                	jmp    f01000d3 <_panic+0x22>f01000e0169,5531
	panicstr = fmt;panicstr170,5593
f01000e2:	89 38                	mov    %edi,(%eax)f01000e2171,5610
f01000e4:	fa                   	cli    f01000e4173,5688
f01000e5:	fc                   	cld    f01000e5174,5728
f01000e6:	8d 75 14             	lea    0x14(%ebp),%esif01000e6176,5788
f01000e9:	83 ec 04             	sub    $0x4,%espf01000e9178,5892
f01000ec:	ff 75 0c             	pushl  0xc(%ebp)f01000ec179,5941
f01000ef:	ff 75 08             	pushl  0x8(%ebp)f01000ef180,5990
f01000f2:	8d 83 5f 62 f8 ff    	lea    -0x79da1(%ebx),%eaxf01000f2181,6039
f01000f8:	50                   	push   %eaxf01000f8182,6098
f01000f9:	e8 46 2d 00 00       	call   f0102e44 <cprintf>f01000f9183,6142
f01000fe:	83 c4 08             	add    $0x8,%espf01000fe185,6220
f0100101:	56                   	push   %esif0100101186,6269
f0100102:	57                   	push   %edif0100102187,6313
f0100103:	e8 05 2d 00 00       	call   f0102e0d <vcprintf>f0100103188,6357
f0100108:	8d 83 4b 71 f8 ff    	lea    -0x78eb5(%ebx),%eaxf0100108190,6432
f010010e:	89 04 24             	mov    %eax,(%esp)f010010e191,6491
f0100111:	e8 2e 2d 00 00       	call   f0102e44 <cprintf>f0100111192,6542
f0100116:	83 c4 10             	add    $0x10,%espf0100116193,6600
f0100119:	eb b8                	jmp    f01000d3 <_panic+0x22>f0100119194,6650
f010011b <_warn>:f010011b196,6713
voidvoid200,6762
f010011b:	55                   	push   %ebpf010011b203,6824
f010011c:	89 e5                	mov    %esp,%ebpf010011c204,6868
f010011e:	56                   	push   %esif010011e205,6917
f010011f:	53                   	push   %ebxf010011f206,6961
f0100120:	e8 42 00 00 00       	call   f0100167 <__x86.get_pc_thunk.bx>f0100120207,7005
f0100125:	81 c3 f7 de 07 00    	add    $0x7def7,%ebxf0100125208,7077
f010012b:	8d 75 14             	lea    0x14(%ebp),%esif010012b212,7164
f010012e:	83 ec 04             	sub    $0x4,%espf010012e214,7270
f0100131:	ff 75 0c             	pushl  0xc(%ebp)f0100131215,7319
f0100134:	ff 75 08             	pushl  0x8(%ebp)f0100134216,7368
f0100137:	8d 83 77 62 f8 ff    	lea    -0x79d89(%ebx),%eaxf0100137217,7417
f010013d:	50                   	push   %eaxf010013d218,7476
f010013e:	e8 01 2d 00 00       	call   f0102e44 <cprintf>f010013e219,7520
f0100143:	83 c4 08             	add    $0x8,%espf0100143221,7598
f0100146:	56                   	push   %esif0100146222,7647
f0100147:	ff 75 10             	pushl  0x10(%ebp)f0100147223,7691
f010014a:	e8 be 2c 00 00       	call   f0102e0d <vcprintf>f010014a224,7741
f010014f:	8d 83 4b 71 f8 ff    	lea    -0x78eb5(%ebx),%eaxf010014f226,7816
f0100155:	89 04 24             	mov    %eax,(%esp)f0100155227,7875
f0100158:	e8 e7 2c 00 00       	call   f0102e44 <cprintf>f0100158228,7926
f010015d:	83 c4 10             	add    $0x10,%espf010015d231,7999
f0100160:	8d 65 f8             	lea    -0x8(%ebp),%espf0100160232,8049
f0100163:	5b                   	pop    %ebxf0100163233,8104
f0100164:	5e                   	pop    %esif0100164234,8148
f0100165:	5d                   	pop    %ebpf0100165235,8192
f0100166:	c3                   	ret    f0100166236,8236
f0100167 <__x86.get_pc_thunk.bx>:f0100167238,8277
f0100167:	8b 1c 24             	mov    (%esp),%ebxf0100167239,8311
f010016a:	c3                   	ret    f010016a240,8362
f010016b <serial_proc_data>:f010016b242,8403
static bool serial_exists;static244,8433
static intstatic246,8461
f010016b:	55                   	push   %ebpf010016b249,8497
f010016c:	89 e5                	mov    %esp,%ebpf010016c250,8541
static inline uint8_tstatic252,8591
f010016e:	ba fd 03 00 00       	mov    $0x3fd,%edxf010016e257,8700
f0100173:	ec                   	in     (%dx),%alf0100173258,8751
f0100174:	a8 01                	test   $0x1,%alf0100174260,8842
f0100176:	74 0b                	je     f0100183 <serial_proc_data+0x18>f0100176261,8890
f0100178:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100178262,8962
f010017d:	ec                   	in     (%dx),%alf010017d263,9013
f010017e:	0f b6 c0             	movzbl %al,%eaxf010017e266,9101
f0100181:	5d                   	pop    %ebpf0100181268,9151
f0100182:	c3                   	ret    f0100182269,9195
f0100183:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100183271,9248
f0100188:	eb f7                	jmp    f0100181 <serial_proc_data+0x16>f0100188272,9304
f010018a <cons_intr>:f010018a274,9377
static voidstatic278,9507
f010018a:	55                   	push   %ebpf010018a281,9550
f010018b:	89 e5                	mov    %esp,%ebpf010018b282,9594
f010018d:	56                   	push   %esif010018d283,9643
f010018e:	53                   	push   %ebxf010018e284,9687
f010018f:	e8 d3 ff ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010018f285,9731
f0100194:	81 c3 88 de 07 00    	add    $0x7de88,%ebxf0100194286,9803
f010019a:	89 c6                	mov    %eax,%esif010019a287,9856
f010019c:	ff d6                	call   *%esif010019c291,9947
f010019e:	83 f8 ff             	cmp    $0xffffffff,%eaxf010019e292,9992
f01001a1:	74 2e                	je     f01001d1 <cons_intr+0x47>f01001a1293,10048
f01001a3:	85 c0                	test   %eax,%eaxf01001a3295,10127
f01001a5:	74 f5                	je     f010019c <cons_intr+0x12>f01001a5296,10176
f01001a7:	8b 8b 08 23 00 00    	mov    0x2308(%ebx),%ecxf01001a7299,10283
f01001ad:	8d 51 01             	lea    0x1(%ecx),%edxf01001ad300,10340
f01001b0:	89 93 08 23 00 00    	mov    %edx,0x2308(%ebx)f01001b0301,10394
f01001b6:	88 84 0b 04 21 00 00 	mov    %al,0x2104(%ebx,%ecx,1)f01001b6302,10451
f01001bd:	81 fa 00 02 00 00    	cmp    $0x200,%edxf01001bd304,10546
f01001c3:	75 d7                	jne    f010019c <cons_intr+0x12>f01001c3305,10597
f01001c5:	c7 83 08 23 00 00 00 	movl   $0x0,0x2308(%ebx)f01001c5307,10680
f01001cc:	00 00 00 f01001cc308,10737
f01001cf:	eb cb                	jmp    f010019c <cons_intr+0x12>f01001cf309,10757
f01001d1:	5b                   	pop    %ebxf01001d1312,10827
f01001d2:	5e                   	pop    %esif01001d2313,10871
f01001d3:	5d                   	pop    %ebpf01001d3314,10915
f01001d4:	c3                   	ret    f01001d4315,10959
f01001d5 <kbd_proc_data>:f01001d5317,11000
f01001d5:	55                   	push   %ebpf01001d5319,11028
f01001d6:	89 e5                	mov    %esp,%ebpf01001d6320,11072
f01001d8:	56                   	push   %esif01001d8321,11121
f01001d9:	53                   	push   %ebxf01001d9322,11165
f01001da:	e8 88 ff ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01001da323,11209
f01001df:	81 c3 3d de 07 00    	add    $0x7de3d,%ebxf01001df324,11281
f01001e5:	ba 64 00 00 00       	mov    $0x64,%edxf01001e5325,11334
f01001ea:	ec                   	in     (%dx),%alf01001ea326,11384
f01001eb:	a8 01                	test   $0x1,%alf01001eb328,11461
f01001ed:	0f 84 06 01 00 00    	je     f01002f9 <kbd_proc_data+0x124>f01001ed329,11509
f01001f3:	a8 20                	test   $0x20,%alf01001f3331,11601
f01001f5:	0f 85 05 01 00 00    	jne    f0100300 <kbd_proc_data+0x12b>f01001f5332,11650
f01001fb:	ba 60 00 00 00       	mov    $0x60,%edxf01001fb333,11720
f0100200:	ec                   	in     (%dx),%alf0100200334,11770
f0100201:	89 c2                	mov    %eax,%edxf0100201335,11819
f0100203:	3c e0                	cmp    $0xe0,%alf0100203337,11889
f0100205:	0f 84 93 00 00 00    	je     f010029e <kbd_proc_data+0xc9>f0100205338,11938
f010020b:	84 c0                	test   %al,%alf010020b340,12034
f010020d:	0f 88 a0 00 00 00    	js     f01002b3 <kbd_proc_data+0xde>f010020d341,12081
f0100213:	8b 8b e4 20 00 00    	mov    0x20e4(%ebx),%ecxf0100213343,12179
f0100219:	f6 c1 40             	test   $0x40,%clf0100219344,12236
f010021c:	74 0e                	je     f010022c <kbd_proc_data+0x57>f010021c345,12285
f010021e:	83 c8 80             	or     $0xffffff80,%eaxf010021e347,12370
f0100221:	89 c2                	mov    %eax,%edxf0100221348,12426
f0100223:	83 e1 bf             	and    $0xffffffbf,%ecxf0100223350,12494
f0100226:	89 8b e4 20 00 00    	mov    %ecx,0x20e4(%ebx)f0100226351,12550
f010022c:	0f b6 d2             	movzbl %dl,%edxf010022c353,12634
f010022f:	0f b6 84 13 c4 63 f8 	movzbl -0x79c3c(%ebx,%edx,1),%eaxf010022f354,12682
f0100236:	ff f0100236355,12748
f0100237:	0b 83 e4 20 00 00    	or     0x20e4(%ebx),%eaxf0100237356,12762
f010023d:	0f b6 8c 13 c4 62 f8 	movzbl -0x79d3c(%ebx,%edx,1),%ecxf010023d358,12847
f0100244:	ff f0100244359,12913
f0100245:	31 c8                	xor    %ecx,%eaxf0100245360,12927
f0100247:	89 83 e4 20 00 00    	mov    %eax,0x20e4(%ebx)f0100247361,12976
	c = charcode[shift & (CTL | SHIFT)][data];c362,13033
f010024d:	89 c1                	mov    %eax,%ecxf010024d363,13077
f010024f:	83 e1 03             	and    $0x3,%ecxf010024f364,13126
f0100252:	8b 8c 8b 04 20 00 00 	mov    0x2004(%ebx,%ecx,4),%ecxf0100252365,13175
f0100259:	0f b6 14 11          	movzbl (%ecx,%edx,1),%edxf0100259366,13239
f010025d:	0f b6 f2             	movzbl %dl,%esif010025d367,13297
f0100260:	a8 08                	test   $0x8,%alf0100260369,13370
f0100262:	74 0d                	je     f0100271 <kbd_proc_data+0x9c>f0100262370,13418
f0100264:	89 f2                	mov    %esi,%edxf0100264372,13515
f0100266:	8d 4e 9f             	lea    -0x61(%esi),%ecxf0100266373,13564
f0100269:	83 f9 19             	cmp    $0x19,%ecxf0100269374,13620
f010026c:	77 7a                	ja     f01002e8 <kbd_proc_data+0x113>f010026c375,13670
f010026e:	83 ee 20             	sub    $0x20,%esif010026e377,13759
f0100271:	f7 d0                	not    %eaxf0100271379,13857
f0100273:	a8 06                	test   $0x6,%alf0100273380,13901
f0100275:	75 33                	jne    f01002aa <kbd_proc_data+0xd5>f0100275381,13949
f0100277:	81 fe e9 00 00 00    	cmp    $0xe9,%esif0100277382,14018
f010027d:	75 2b                	jne    f01002aa <kbd_proc_data+0xd5>f010027d383,14068
f010027f:	83 ec 0c             	sub    $0xc,%espf010027f385,14164
f0100282:	8d 83 91 62 f8 ff    	lea    -0x79d6f(%ebx),%eaxf0100282386,14213
f0100288:	50                   	push   %eaxf0100288387,14272
f0100289:	e8 b6 2b 00 00       	call   f0102e44 <cprintf>f0100289388,14316
static inline voidstatic391,14377
f010028e:	b8 03 00 00 00       	mov    $0x3,%eaxf010028e395,14484
f0100293:	ba 92 00 00 00       	mov    $0x92,%edxf0100293396,14533
f0100298:	ee                   	out    %al,(%dx)f0100298397,14583
f0100299:	83 c4 10             	add    $0x10,%espf0100299398,14632
f010029c:	eb 0c                	jmp    f01002aa <kbd_proc_data+0xd5>f010029c399,14682
f010029e:	83 8b e4 20 00 00 40 	orl    $0x40,0x20e4(%ebx)f010029e401,14769
f01002a5:	be 00 00 00 00       	mov    $0x0,%esif01002a5403,14839
f01002aa:	89 f0                	mov    %esi,%eaxf01002aa405,14890
f01002ac:	8d 65 f8             	lea    -0x8(%ebp),%espf01002ac406,14939
f01002af:	5b                   	pop    %ebxf01002af407,14994
f01002b0:	5e                   	pop    %esif01002b0408,15038
f01002b1:	5d                   	pop    %ebpf01002b1409,15082
f01002b2:	c3                   	ret    f01002b2410,15126
		data = (shift & E0ESC ? data : data & 0x7F);data411,15166
f01002b3:	8b 8b e4 20 00 00    	mov    0x20e4(%ebx),%ecxf01002b3412,15213
f01002b9:	89 ce                	mov    %ecx,%esif01002b9413,15270
f01002bb:	83 e6 40             	and    $0x40,%esif01002bb414,15319
f01002be:	83 e0 7f             	and    $0x7f,%eaxf01002be415,15369
f01002c1:	85 f6                	test   %esi,%esif01002c1416,15419
f01002c3:	0f 44 d0             	cmove  %eax,%edxf01002c3417,15468
f01002c6:	0f b6 d2             	movzbl %dl,%edxf01002c6419,15556
f01002c9:	0f b6 84 13 c4 63 f8 	movzbl -0x79c3c(%ebx,%edx,1),%eaxf01002c9420,15604
f01002d0:	ff f01002d0421,15670
f01002d1:	83 c8 40             	or     $0x40,%eaxf01002d1422,15684
f01002d4:	0f b6 c0             	movzbl %al,%eaxf01002d4423,15734
f01002d7:	f7 d0                	not    %eaxf01002d7424,15782
f01002d9:	21 c8                	and    %ecx,%eaxf01002d9425,15826
f01002db:	89 83 e4 20 00 00    	mov    %eax,0x20e4(%ebx)f01002db426,15875
f01002e1:	be 00 00 00 00       	mov    $0x0,%esif01002e1428,15944
f01002e6:	eb c2                	jmp    f01002aa <kbd_proc_data+0xd5>f01002e6429,15993
f01002e8:	83 ea 41             	sub    $0x41,%edxf01002e8431,16095
f01002eb:	8d 4e 20             	lea    0x20(%esi),%ecxf01002eb433,16164
f01002ee:	83 fa 1a             	cmp    $0x1a,%edxf01002ee434,16219
f01002f1:	0f 42 f1             	cmovb  %ecx,%esif01002f1435,16269
f01002f4:	e9 78 ff ff ff       	jmp    f0100271 <kbd_proc_data+0x9c>f01002f4436,16318
f01002f9:	be ff ff ff ff       	mov    $0xffffffff,%esif01002f9438,16400
f01002fe:	eb aa                	jmp    f01002aa <kbd_proc_data+0xd5>f01002fe439,16456
f0100300:	be ff ff ff ff       	mov    $0xffffffff,%esif0100300441,16538
f0100305:	eb a3                	jmp    f01002aa <kbd_proc_data+0xd5>f0100305442,16594
f0100307 <cons_putc>:f0100307444,16664
static voidstatic448,16726
f0100307:	55                   	push   %ebpf0100307451,16757
f0100308:	89 e5                	mov    %esp,%ebpf0100308452,16801
f010030a:	57                   	push   %edif010030a453,16850
f010030b:	56                   	push   %esif010030b454,16894
f010030c:	53                   	push   %ebxf010030c455,16938
f010030d:	83 ec 1c             	sub    $0x1c,%espf010030d456,16982
f0100310:	e8 52 fe ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100310457,17032
f0100315:	81 c3 07 dd 07 00    	add    $0x7dd07,%ebxf0100315458,17104
f010031b:	89 45 e4             	mov    %eax,-0x1c(%ebp)f010031b459,17157
f010031e:	be 00 00 00 00       	mov    $0x0,%esif010031e461,17226
f0100323:	bf fd 03 00 00       	mov    $0x3fd,%edif0100323463,17331
f0100328:	b9 84 00 00 00       	mov    $0x84,%ecxf0100328464,17382
f010032d:	eb 09                	jmp    f0100338 <cons_putc+0x31>f010032d465,17432
f010032f:	89 ca                	mov    %ecx,%edxf010032f466,17497
f0100331:	ec                   	in     (%dx),%alf0100331467,17546
f0100332:	ec                   	in     (%dx),%alf0100332468,17595
f0100333:	ec                   	in     (%dx),%alf0100333469,17644
f0100334:	ec                   	in     (%dx),%alf0100334470,17693
f0100335:	83 c6 01             	add    $0x1,%esif0100335472,17753
f0100338:	89 fa                	mov    %edi,%edxf0100338473,17802
f010033a:	ec                   	in     (%dx),%alf010033a474,17851
f010033b:	a8 20                	test   $0x20,%alf010033b476,17959
f010033d:	75 08                	jne    f0100347 <cons_putc+0x40>f010033d477,18008
f010033f:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif010033f478,18073
f0100345:	7e e8                	jle    f010032f <cons_putc+0x28>f0100345479,18125
f0100347:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100347481,18215
f010034a:	89 f8                	mov    %edi,%eaxf010034a482,18271
f010034c:	88 45 e3             	mov    %al,-0x1d(%ebp)f010034c483,18320
f010034f:	ba f8 03 00 00       	mov    $0x3f8,%edxf010034f485,18432
f0100354:	ee                   	out    %al,(%dx)f0100354486,18483
f0100355:	be 00 00 00 00       	mov    $0x0,%esif0100355488,18587
f010035a:	bf 79 03 00 00       	mov    $0x379,%edif010035a490,18692
f010035f:	b9 84 00 00 00       	mov    $0x84,%ecxf010035f491,18743
f0100364:	eb 09                	jmp    f010036f <cons_putc+0x68>f0100364492,18793
f0100366:	89 ca                	mov    %ecx,%edxf0100366493,18858
f0100368:	ec                   	in     (%dx),%alf0100368494,18907
f0100369:	ec                   	in     (%dx),%alf0100369495,18956
f010036a:	ec                   	in     (%dx),%alf010036a496,19005
f010036b:	ec                   	in     (%dx),%alf010036b497,19054
f010036c:	83 c6 01             	add    $0x1,%esif010036c498,19103
f010036f:	89 fa                	mov    %edi,%edxf010036f499,19152
f0100371:	ec                   	in     (%dx),%alf0100371500,19201
f0100372:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif0100372501,19250
f0100378:	7f 04                	jg     f010037e <cons_putc+0x77>f0100378502,19302
f010037a:	84 c0                	test   %al,%alf010037a503,19367
f010037c:	79 e8                	jns    f0100366 <cons_putc+0x5f>f010037c504,19414
f010037e:	ba 78 03 00 00       	mov    $0x378,%edxf010037e506,19536
f0100383:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eaxf0100383507,19587
f0100387:	ee                   	out    %al,(%dx)f0100387508,19643
f0100388:	ba 7a 03 00 00       	mov    $0x37a,%edxf0100388509,19692
f010038d:	b8 0d 00 00 00       	mov    $0xd,%eaxf010038d510,19743
f0100392:	ee                   	out    %al,(%dx)f0100392511,19792
f0100393:	b8 08 00 00 00       	mov    $0x8,%eaxf0100393512,19841
f0100398:	ee                   	out    %al,(%dx)f0100398513,19890
f0100399:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100399515,19958
f010039c:	89 fa                	mov    %edi,%edxf010039c516,20014
f010039e:	81 e2 00 ff ff ff    	and    $0xffffff00,%edxf010039e517,20063
f01003a4:	89 f8                	mov    %edi,%eaxf01003a4519,20134
f01003a6:	80 cc 07             	or     $0x7,%ahf01003a6520,20183
f01003a9:	85 d2                	test   %edx,%edxf01003a9521,20231
f01003ab:	0f 45 c7             	cmovne %edi,%eaxf01003ab522,20280
f01003ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01003ae523,20329
f01003b1:	0f b6 c0             	movzbl %al,%eaxf01003b1525,20406
f01003b4:	83 f8 09             	cmp    $0x9,%eaxf01003b4526,20454
f01003b7:	0f 84 b9 00 00 00    	je     f0100476 <cons_putc+0x16f>f01003b7527,20503
f01003bd:	83 f8 09             	cmp    $0x9,%eaxf01003bd528,20569
f01003c0:	7e 74                	jle    f0100436 <cons_putc+0x12f>f01003c0529,20618
f01003c2:	83 f8 0a             	cmp    $0xa,%eaxf01003c2530,20684
f01003c5:	0f 84 9e 00 00 00    	je     f0100469 <cons_putc+0x162>f01003c5531,20733
f01003cb:	83 f8 0d             	cmp    $0xd,%eaxf01003cb532,20799
f01003ce:	0f 85 d9 00 00 00    	jne    f01004ad <cons_putc+0x1a6>f01003ce533,20848
f01003d4:	0f b7 83 0c 23 00 00 	movzwl 0x230c(%ebx),%eaxf01003d4535,20949
f01003db:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eaxf01003db536,21006
f01003e1:	c1 e8 16             	shr    $0x16,%eaxf01003e1537,21063
f01003e4:	8d 04 80             	lea    (%eax,%eax,4),%eaxf01003e4538,21113
f01003e7:	c1 e0 04             	shl    $0x4,%eaxf01003e7539,21171
f01003ea:	66 89 83 0c 23 00 00 	mov    %ax,0x230c(%ebx)f01003ea540,21220
f01003f1:	66 81 bb 0c 23 00 00 	cmpw   $0x7cf,0x230c(%ebx)f01003f1542,21304
f01003f8:	cf 07 f01003f8543,21363
f01003fa:	0f 87 d4 00 00 00    	ja     f01004d4 <cons_putc+0x1cd>f01003fa544,21380
f0100400:	8b 8b 14 23 00 00    	mov    0x2314(%ebx),%ecxf0100400546,21468
f0100406:	b8 0e 00 00 00       	mov    $0xe,%eaxf0100406547,21525
f010040b:	89 ca                	mov    %ecx,%edxf010040b548,21574
f010040d:	ee                   	out    %al,(%dx)f010040d549,21623
f010040e:	0f b7 9b 0c 23 00 00 	movzwl 0x230c(%ebx),%ebxf010040e551,21708
f0100415:	8d 71 01             	lea    0x1(%ecx),%esif0100415552,21765
f0100418:	89 d8                	mov    %ebx,%eaxf0100418553,21819
f010041a:	66 c1 e8 08          	shr    $0x8,%axf010041a554,21868
f010041e:	89 f2                	mov    %esi,%edxf010041e555,21916
f0100420:	ee                   	out    %al,(%dx)f0100420556,21965
f0100421:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100421557,22014
f0100426:	89 ca                	mov    %ecx,%edxf0100426558,22063
f0100428:	ee                   	out    %al,(%dx)f0100428559,22112
f0100429:	89 d8                	mov    %ebx,%eaxf0100429560,22161
f010042b:	89 f2                	mov    %esi,%edxf010042b561,22210
f010042d:	ee                   	out    %al,(%dx)f010042d562,22259
f010042e:	8d 65 f4             	lea    -0xc(%ebp),%espf010042e567,22355
f0100431:	5b                   	pop    %ebxf0100431568,22410
f0100432:	5e                   	pop    %esif0100432569,22454
f0100433:	5f                   	pop    %edif0100433570,22498
f0100434:	5d                   	pop    %ebpf0100434571,22542
f0100435:	c3                   	ret    f0100435572,22586
f0100436:	83 f8 08             	cmp    $0x8,%eaxf0100436574,22647
f0100439:	75 72                	jne    f01004ad <cons_putc+0x1a6>f0100439575,22696
f010043b:	0f b7 83 0c 23 00 00 	movzwl 0x230c(%ebx),%eaxf010043b577,22783
f0100442:	66 85 c0             	test   %ax,%axf0100442578,22840
f0100445:	74 b9                	je     f0100400 <cons_putc+0xf9>f0100445579,22887
f0100447:	83 e8 01             	sub    $0x1,%eaxf0100447581,22966
f010044a:	66 89 83 0c 23 00 00 	mov    %ax,0x230c(%ebx)f010044a582,23015
f0100451:	0f b7 c0             	movzwl %ax,%eaxf0100451584,23112
f0100454:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edxf0100454585,23160
f0100458:	b2 00                	mov    $0x0,%dlf0100458586,23216
f010045a:	83 ca 20             	or     $0x20,%edxf010045a587,23264
f010045d:	8b 8b 10 23 00 00    	mov    0x2310(%ebx),%ecxf010045d588,23314
f0100463:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)f0100463589,23371
f0100467:	eb 88                	jmp    f01003f1 <cons_putc+0xea>f0100467590,23428
f0100469:	66 83 83 0c 23 00 00 	addw   $0x50,0x230c(%ebx)f0100469592,23516
f0100470:	50 f0100470593,23574
f0100471:	e9 5e ff ff ff       	jmp    f01003d4 <cons_putc+0xcd>f0100471594,23588
f0100476:	b8 20 00 00 00       	mov    $0x20,%eaxf0100476596,23671
f010047b:	e8 87 fe ff ff       	call   f0100307 <cons_putc>f010047b597,23721
f0100480:	b8 20 00 00 00       	mov    $0x20,%eaxf0100480599,23799
f0100485:	e8 7d fe ff ff       	call   f0100307 <cons_putc>f0100485600,23849
f010048a:	b8 20 00 00 00       	mov    $0x20,%eaxf010048a602,23927
f010048f:	e8 73 fe ff ff       	call   f0100307 <cons_putc>f010048f603,23977
f0100494:	b8 20 00 00 00       	mov    $0x20,%eaxf0100494605,24055
f0100499:	e8 69 fe ff ff       	call   f0100307 <cons_putc>f0100499606,24105
f010049e:	b8 20 00 00 00       	mov    $0x20,%eaxf010049e608,24183
f01004a3:	e8 5f fe ff ff       	call   f0100307 <cons_putc>f01004a3609,24233
f01004a8:	e9 44 ff ff ff       	jmp    f01003f1 <cons_putc+0xea>f01004a8610,24293
f01004ad:	0f b7 83 0c 23 00 00 	movzwl 0x230c(%ebx),%eaxf01004ad612,24411
f01004b4:	8d 50 01             	lea    0x1(%eax),%edxf01004b4613,24468
f01004b7:	66 89 93 0c 23 00 00 	mov    %dx,0x230c(%ebx)f01004b7614,24522
f01004be:	0f b7 c0             	movzwl %ax,%eaxf01004be615,24578
f01004c1:	8b 93 10 23 00 00    	mov    0x2310(%ebx),%edxf01004c1616,24626
f01004c7:	0f b7 7d e4          	movzwl -0x1c(%ebp),%edif01004c7617,24683
f01004cb:	66 89 3c 42          	mov    %di,(%edx,%eax,2)f01004cb618,24739
f01004cf:	e9 1d ff ff ff       	jmp    f01003f1 <cons_putc+0xea>f01004cf619,24796
f01004d4:	8b 83 10 23 00 00    	mov    0x2310(%ebx),%eaxf01004d4621,24943
f01004da:	83 ec 04             	sub    $0x4,%espf01004da622,25000
f01004dd:	68 00 0f 00 00       	push   $0xf00f01004dd623,25049
f01004e2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edxf01004e2624,25095
f01004e8:	52                   	push   %edxf01004e8625,25150
f01004e9:	50                   	push   %eaxf01004e9626,25194
f01004ea:	e8 7c 39 00 00       	call   f0103e6b <memmove>f01004ea627,25238
f01004ef:	8b 93 10 23 00 00    	mov    0x2310(%ebx),%edxf01004ef629,25326
f01004f5:	8d 82 00 0f 00 00    	lea    0xf00(%edx),%eaxf01004f5630,25383
f01004fb:	81 c2 a0 0f 00 00    	add    $0xfa0,%edxf01004fb631,25439
f0100501:	83 c4 10             	add    $0x10,%espf0100501632,25490
f0100504:	66 c7 00 20 07       	movw   $0x720,(%eax)f0100504633,25540
f0100509:	83 c0 02             	add    $0x2,%eaxf0100509634,25593
f010050c:	39 d0                	cmp    %edx,%eaxf010050c636,25693
f010050e:	75 f4                	jne    f0100504 <cons_putc+0x1fd>f010050e637,25742
f0100510:	66 83 ab 0c 23 00 00 	subw   $0x50,0x230c(%ebx)f0100510639,25831
f0100517:	50 f0100517640,25889
f0100518:	e9 e3 fe ff ff       	jmp    f0100400 <cons_putc+0xf9>f0100518641,25903
f010051d <serial_intr>:f010051d643,25969
f010051d:	e8 e7 01 00 00       	call   f0100709 <__x86.get_pc_thunk.ax>f010051d645,25995
f0100522:	05 fa da 07 00       	add    $0x7dafa,%eaxf0100522646,26067
f0100527:	80 b8 18 23 00 00 00 	cmpb   $0x0,0x2318(%eax)f0100527648,26140
f010052e:	75 02                	jne    f0100532 <serial_intr+0x15>f010052e649,26197
f0100530:	f3 c3                	repz ret f0100530650,26264
f0100532:	55                   	push   %ebpf0100532652,26308
f0100533:	89 e5                	mov    %esp,%ebpf0100533653,26352
f0100535:	83 ec 08             	sub    $0x8,%espf0100535654,26401
f0100538:	8d 80 4f 21 f8 ff    	lea    -0x7deb1(%eax),%eaxf0100538656,26481
f010053e:	e8 47 fc ff ff       	call   f010018a <cons_intr>f010053e657,26540
f0100543:	c9                   	leave  f0100543659,26602
f0100544:	c3                   	ret    f0100544660,26642
f0100545 <kbd_intr>:f0100545662,26683
f0100545:	55                   	push   %ebpf0100545664,26706
f0100546:	89 e5                	mov    %esp,%ebpf0100546665,26750
f0100548:	83 ec 08             	sub    $0x8,%espf0100548666,26799
f010054b:	e8 b9 01 00 00       	call   f0100709 <__x86.get_pc_thunk.ax>f010054b667,26848
f0100550:	05 cc da 07 00       	add    $0x7dacc,%eaxf0100550668,26920
f0100555:	8d 80 b9 21 f8 ff    	lea    -0x7de47(%eax),%eaxf0100555670,27000
f010055b:	e8 2a fc ff ff       	call   f010018a <cons_intr>f010055b671,27059
f0100560:	c9                   	leave  f0100560673,27121
f0100561:	c3                   	ret    f0100561674,27161
f0100562 <cons_getc>:f0100562676,27202
f0100562:	55                   	push   %ebpf0100562678,27226
f0100563:	89 e5                	mov    %esp,%ebpf0100563679,27270
f0100565:	53                   	push   %ebxf0100565680,27319
f0100566:	83 ec 04             	sub    $0x4,%espf0100566681,27363
f0100569:	e8 f9 fb ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100569682,27412
f010056e:	81 c3 ae da 07 00    	add    $0x7daae,%ebxf010056e683,27484
f0100574:	e8 a4 ff ff ff       	call   f010051d <serial_intr>f0100574685,27553
f0100579:	e8 c7 ff ff ff       	call   f0100545 <kbd_intr>f0100579687,27628
f010057e:	8b 93 04 23 00 00    	mov    0x2304(%ebx),%edxf010057e689,27718
f0100584:	b8 00 00 00 00       	mov    $0x0,%eaxf0100584691,27786
f0100589:	3b 93 08 23 00 00    	cmp    0x2308(%ebx),%edxf0100589693,27866
f010058f:	74 19                	je     f01005aa <cons_getc+0x48>f010058f694,27923
		c = cons.buf[cons.rpos++];c695,27988
f0100591:	8d 4a 01             	lea    0x1(%edx),%ecxf0100591696,28017
f0100594:	89 8b 04 23 00 00    	mov    %ecx,0x2304(%ebx)f0100594697,28071
f010059a:	0f b6 84 13 04 21 00 	movzbl 0x2104(%ebx,%edx,1),%eaxf010059a698,28128
f01005a1:	00 f01005a1699,28192
f01005a2:	81 f9 00 02 00 00    	cmp    $0x200,%ecxf01005a2701,28238
f01005a8:	74 06                	je     f01005b0 <cons_getc+0x4e>f01005a8702,28289
f01005aa:	83 c4 04             	add    $0x4,%espf01005aa704,28356
f01005ad:	5b                   	pop    %ebxf01005ad705,28405
f01005ae:	5d                   	pop    %ebpf01005ae706,28449
f01005af:	c3                   	ret    f01005af707,28493
f01005b0:	c7 83 04 23 00 00 00 	movl   $0x0,0x2304(%ebx)f01005b0709,28551
f01005b7:	00 00 00 f01005b7710,28608
f01005ba:	eb ee                	jmp    f01005aa <cons_getc+0x48>f01005ba711,28628
f01005bc <cons_init>:f01005bc713,28694
voidvoid716,28751
f01005bc:	55                   	push   %ebpf01005bc719,28774
f01005bd:	89 e5                	mov    %esp,%ebpf01005bd720,28818
f01005bf:	57                   	push   %edif01005bf721,28867
f01005c0:	56                   	push   %esif01005c0722,28911
f01005c1:	53                   	push   %ebxf01005c1723,28955
f01005c2:	83 ec 1c             	sub    $0x1c,%espf01005c2724,28999
f01005c5:	e8 9d fb ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01005c5725,29049
f01005ca:	81 c3 52 da 07 00    	add    $0x7da52,%ebxf01005ca726,29121
	was = *cp;was727,29174
f01005d0:	0f b7 15 00 80 0b f0 	movzwl 0xf00b8000,%edxf01005d0728,29186
f01005d7:	66 c7 05 00 80 0b f0 	movw   $0xa55a,0xf00b8000f01005d7730,29267
f01005de:	5a a5 f01005de731,29325
f01005e0:	0f b7 05 00 80 0b f0 	movzwl 0xf00b8000,%eaxf01005e0733,29364
f01005e7:	66 3d 5a a5          	cmp    $0xa55a,%axf01005e7734,29419
f01005eb:	0f 84 bc 00 00 00    	je     f01006ad <cons_init+0xf1>f01005eb735,29470
		addr_6845 = MONO_BASE;addr_6845736,29535
f01005f1:	c7 83 14 23 00 00 b4 	movl   $0x3b4,0x2314(%ebx)f01005f1737,29560
f01005f8:	03 00 00 f01005f8738,29619
		cp = (uint16_t*) (KERNBASE + MONO_BUF);cp739,29639
f01005fb:	c7 45 e4 00 00 0b f0 	movl   $0xf00b0000,-0x1c(%ebp)f01005fb740,29681
f0100602:	8b bb 14 23 00 00    	mov    0x2314(%ebx),%edif0100602742,29766
f0100608:	b8 0e 00 00 00       	mov    $0xe,%eaxf0100608743,29823
f010060d:	89 fa                	mov    %edi,%edxf010060d744,29872
f010060f:	ee                   	out    %al,(%dx)f010060f745,29921
	pos = inb(addr_6845 + 1) << 8;pos746,29970
f0100610:	8d 4f 01             	lea    0x1(%edi),%ecxf0100610747,30002
f0100613:	89 ca                	mov    %ecx,%edxf0100613749,30112
f0100615:	ec                   	in     (%dx),%alf0100615750,30161
f0100616:	0f b6 f0             	movzbl %al,%esif0100616751,30210
f0100619:	c1 e6 08             	shl    $0x8,%esif0100619752,30258
f010061c:	b8 0f 00 00 00       	mov    $0xf,%eaxf010061c754,30364
f0100621:	89 fa                	mov    %edi,%edxf0100621755,30413
f0100623:	ee                   	out    %al,(%dx)f0100623756,30462
f0100624:	89 ca                	mov    %ecx,%edxf0100624758,30567
f0100626:	ec                   	in     (%dx),%alf0100626759,30616
	crt_buf = (uint16_t*) cp;crt_buf760,30665
f0100627:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100627761,30692
f010062a:	89 bb 10 23 00 00    	mov    %edi,0x2310(%ebx)f010062a762,30748
f0100630:	0f b6 c0             	movzbl %al,%eaxf0100630764,30833
f0100633:	09 c6                	or     %eax,%esif0100633765,30881
	crt_pos = pos;crt_pos766,30930
f0100635:	66 89 b3 0c 23 00 00 	mov    %si,0x230c(%ebx)f0100635767,30946
f010063c:	b9 00 00 00 00       	mov    $0x0,%ecxf010063c769,31059
f0100641:	89 c8                	mov    %ecx,%eaxf0100641770,31108
f0100643:	ba fa 03 00 00       	mov    $0x3fa,%edxf0100643771,31157
f0100648:	ee                   	out    %al,(%dx)f0100648772,31208
f0100649:	bf fb 03 00 00       	mov    $0x3fb,%edif0100649773,31257
f010064e:	b8 80 ff ff ff       	mov    $0xffffff80,%eaxf010064e774,31308
f0100653:	89 fa                	mov    %edi,%edxf0100653775,31364
f0100655:	ee                   	out    %al,(%dx)f0100655776,31413
f0100656:	b8 0c 00 00 00       	mov    $0xc,%eaxf0100656777,31462
f010065b:	ba f8 03 00 00       	mov    $0x3f8,%edxf010065b778,31511
f0100660:	ee                   	out    %al,(%dx)f0100660779,31562
f0100661:	be f9 03 00 00       	mov    $0x3f9,%esif0100661780,31611
f0100666:	89 c8                	mov    %ecx,%eaxf0100666781,31662
f0100668:	89 f2                	mov    %esi,%edxf0100668782,31711
f010066a:	ee                   	out    %al,(%dx)f010066a783,31760
f010066b:	b8 03 00 00 00       	mov    $0x3,%eaxf010066b784,31809
f0100670:	89 fa                	mov    %edi,%edxf0100670785,31858
f0100672:	ee                   	out    %al,(%dx)f0100672786,31907
f0100673:	ba fc 03 00 00       	mov    $0x3fc,%edxf0100673787,31956
f0100678:	89 c8                	mov    %ecx,%eaxf0100678788,32007
f010067a:	ee                   	out    %al,(%dx)f010067a789,32056
f010067b:	b8 01 00 00 00       	mov    $0x1,%eaxf010067b790,32105
f0100680:	89 f2                	mov    %esi,%edxf0100680791,32154
f0100682:	ee                   	out    %al,(%dx)f0100682792,32203
f0100683:	ba fd 03 00 00       	mov    $0x3fd,%edxf0100683794,32308
f0100688:	ec                   	in     (%dx),%alf0100688795,32359
f0100689:	89 c1                	mov    %eax,%ecxf0100689796,32408
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);serial_exists797,32457
f010068b:	3c ff                	cmp    $0xff,%alf010068b798,32503
f010068d:	0f 95 83 18 23 00 00 	setne  0x2318(%ebx)f010068d799,32552
f0100694:	ba fa 03 00 00       	mov    $0x3fa,%edxf0100694800,32604
f0100699:	ec                   	in     (%dx),%alf0100699801,32655
f010069a:	ba f8 03 00 00       	mov    $0x3f8,%edxf010069a802,32704
f010069f:	ec                   	in     (%dx),%alf010069f803,32755
f01006a0:	80 f9 ff             	cmp    $0xff,%clf01006a0809,32868
f01006a3:	74 25                	je     f01006ca <cons_init+0x10e>f01006a3810,32917
f01006a5:	8d 65 f4             	lea    -0xc(%ebp),%espf01006a5813,33029
f01006a8:	5b                   	pop    %ebxf01006a8814,33084
f01006a9:	5e                   	pop    %esif01006a9815,33128
f01006aa:	5f                   	pop    %edif01006aa816,33172
f01006ab:	5d                   	pop    %ebpf01006ab817,33216
f01006ac:	c3                   	ret    f01006ac818,33260
f01006ad:	66 89 15 00 80 0b f0 	mov    %dx,0xf00b8000f01006ad820,33313
		addr_6845 = CGA_BASE;addr_6845821,33367
f01006b4:	c7 83 14 23 00 00 d4 	movl   $0x3d4,0x2314(%ebx)f01006b4822,33391
f01006bb:	03 00 00 f01006bb823,33450
	cp = (uint16_t*) (KERNBASE + CGA_BUF);cp824,33470
f01006be:	c7 45 e4 00 80 0b f0 	movl   $0xf00b8000,-0x1c(%ebp)f01006be825,33510
f01006c5:	e9 38 ff ff ff       	jmp    f0100602 <cons_init+0x46>f01006c5826,33573
f01006ca:	83 ec 0c             	sub    $0xc,%espf01006ca828,33682
f01006cd:	8d 83 9d 62 f8 ff    	lea    -0x79d63(%ebx),%eaxf01006cd829,33731
f01006d3:	50                   	push   %eaxf01006d3830,33790
f01006d4:	e8 6b 27 00 00       	call   f0102e44 <cprintf>f01006d4831,33834
f01006d9:	83 c4 10             	add    $0x10,%espf01006d9832,33892
f01006dc:	eb c7                	jmp    f01006a5 <cons_init+0xe9>f01006dc834,33944
f01006de <cputchar>:f01006de836,34010
voidvoid840,34093
f01006de:	55                   	push   %ebpf01006de843,34116
f01006df:	89 e5                	mov    %esp,%ebpf01006df844,34160
f01006e1:	83 ec 08             	sub    $0x8,%espf01006e1845,34209
f01006e4:	8b 45 08             	mov    0x8(%ebp),%eaxf01006e4847,34273
f01006e7:	e8 1b fc ff ff       	call   f0100307 <cons_putc>f01006e7848,34327
f01006ec:	c9                   	leave  f01006ec850,34389
f01006ed:	c3                   	ret    f01006ed851,34429
f01006ee <getchar>:f01006ee853,34470
intint855,34491
f01006ee:	55                   	push   %ebpf01006ee858,34511
f01006ef:	89 e5                	mov    %esp,%ebpf01006ef859,34555
f01006f1:	83 ec 08             	sub    $0x8,%espf01006f1860,34604
f01006f4:	e8 69 fe ff ff       	call   f0100562 <cons_getc>f01006f4864,34694
f01006f9:	85 c0                	test   %eax,%eaxf01006f9865,34754
f01006fb:	74 f7                	je     f01006f4 <getchar+0x6>f01006fb866,34803
f01006fd:	c9                   	leave  f01006fd870,34898
f01006fe:	c3                   	ret    f01006fe871,34938
f01006ff <iscons>:f01006ff873,34979
intint875,34999
f01006ff:	55                   	push   %ebpf01006ff878,35023
f0100700:	89 e5                	mov    %esp,%ebpf0100700879,35067
f0100702:	b8 01 00 00 00       	mov    $0x1,%eaxf0100702883,35150
f0100707:	5d                   	pop    %ebpf0100707884,35199
f0100708:	c3                   	ret    f0100708885,35243
f0100709 <__x86.get_pc_thunk.ax>:f0100709887,35284
f0100709:	8b 04 24             	mov    (%esp),%eaxf0100709888,35318
f010070c:	c3                   	ret    f010070c889,35369
f010070d <mon_help>:f010070d891,35410
intint895,35496
f010070d:	55                   	push   %ebpf010070d898,35556
f010070e:	89 e5                	mov    %esp,%ebpf010070e899,35600
f0100710:	56                   	push   %esif0100710900,35649
f0100711:	53                   	push   %ebxf0100711901,35693
f0100712:	e8 50 fa ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100712902,35737
f0100717:	81 c3 05 d9 07 00    	add    $0x7d905,%ebxf0100717903,35809
f010071d:	83 ec 04             	sub    $0x4,%espf010071d908,35975
f0100720:	8d 83 c4 64 f8 ff    	lea    -0x79b3c(%ebx),%eaxf0100720909,36024
f0100726:	50                   	push   %eaxf0100726910,36083
f0100727:	8d 83 e2 64 f8 ff    	lea    -0x79b1e(%ebx),%eaxf0100727911,36127
f010072d:	50                   	push   %eaxf010072d912,36186
f010072e:	8d b3 e7 64 f8 ff    	lea    -0x79b19(%ebx),%esif010072e913,36230
f0100734:	56                   	push   %esif0100734914,36289
f0100735:	e8 0a 27 00 00       	call   f0102e44 <cprintf>f0100735915,36333
f010073a:	83 c4 0c             	add    $0xc,%espf010073a916,36391
f010073d:	8d 83 90 65 f8 ff    	lea    -0x79a70(%ebx),%eaxf010073d917,36440
f0100743:	50                   	push   %eaxf0100743918,36499
f0100744:	8d 83 f0 64 f8 ff    	lea    -0x79b10(%ebx),%eaxf0100744919,36543
f010074a:	50                   	push   %eaxf010074a920,36602
f010074b:	56                   	push   %esif010074b921,36646
f010074c:	e8 f3 26 00 00       	call   f0102e44 <cprintf>f010074c922,36690
f0100751:	83 c4 0c             	add    $0xc,%espf0100751923,36748
f0100754:	8d 83 b8 65 f8 ff    	lea    -0x79a48(%ebx),%eaxf0100754924,36797
f010075a:	50                   	push   %eaxf010075a925,36856
f010075b:	8d 83 f9 64 f8 ff    	lea    -0x79b07(%ebx),%eaxf010075b926,36900
f0100761:	50                   	push   %eaxf0100761927,36959
f0100762:	56                   	push   %esif0100762928,37003
f0100763:	e8 dc 26 00 00       	call   f0102e44 <cprintf>f0100763929,37047
f0100768:	b8 00 00 00 00       	mov    $0x0,%eaxf0100768932,37118
f010076d:	8d 65 f8             	lea    -0x8(%ebp),%espf010076d933,37167
f0100770:	5b                   	pop    %ebxf0100770934,37222
f0100771:	5e                   	pop    %esif0100771935,37266
f0100772:	5d                   	pop    %ebpf0100772936,37310
f0100773:	c3                   	ret    f0100773937,37354
f0100774 <mon_kerninfo>:f0100774939,37395
intint941,37421
f0100774:	55                   	push   %ebpf0100774944,37485
f0100775:	89 e5                	mov    %esp,%ebpf0100775945,37529
f0100777:	57                   	push   %edif0100777946,37578
f0100778:	56                   	push   %esif0100778947,37622
f0100779:	53                   	push   %ebxf0100779948,37666
f010077a:	83 ec 18             	sub    $0x18,%espf010077a949,37710
f010077d:	e8 e5 f9 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010077d950,37760
f0100782:	81 c3 9a d8 07 00    	add    $0x7d89a,%ebxf0100782951,37832
f0100788:	8d 83 06 65 f8 ff    	lea    -0x79afa(%ebx),%eaxf0100788955,37982
f010078e:	50                   	push   %eaxf010078e956,38041
f010078f:	e8 b0 26 00 00       	call   f0102e44 <cprintf>f010078f957,38085
f0100794:	83 c4 08             	add    $0x8,%espf0100794959,38204
f0100797:	ff b3 fc ff ff ff    	pushl  -0x4(%ebx)f0100797960,38253
f010079d:	8d 83 2c 66 f8 ff    	lea    -0x799d4(%ebx),%eaxf010079d961,38303
f01007a3:	50                   	push   %eaxf01007a3962,38362
f01007a4:	e8 9b 26 00 00       	call   f0102e44 <cprintf>f01007a4963,38406
f01007a9:	83 c4 0c             	add    $0xc,%espf01007a9965,38538
f01007ac:	c7 c7 0c 00 10 f0    	mov    $0xf010000c,%edif01007ac966,38587
f01007b2:	8d 87 00 00 00 10    	lea    0x10000000(%edi),%eaxf01007b2967,38643
f01007b8:	50                   	push   %eaxf01007b8968,38704
f01007b9:	57                   	push   %edif01007b9969,38748
f01007ba:	8d 83 54 66 f8 ff    	lea    -0x799ac(%ebx),%eaxf01007ba970,38792
f01007c0:	50                   	push   %eaxf01007c0971,38851
f01007c1:	e8 7e 26 00 00       	call   f0102e44 <cprintf>f01007c1972,38895
f01007c6:	83 c4 0c             	add    $0xc,%espf01007c6974,39027
f01007c9:	c7 c0 59 42 10 f0    	mov    $0xf0104259,%eaxf01007c9975,39076
f01007cf:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007cf976,39132
f01007d5:	52                   	push   %edxf01007d5977,39193
f01007d6:	50                   	push   %eaxf01007d6978,39237
f01007d7:	8d 83 78 66 f8 ff    	lea    -0x79988(%ebx),%eaxf01007d7979,39281
f01007dd:	50                   	push   %eaxf01007dd980,39340
f01007de:	e8 61 26 00 00       	call   f0102e44 <cprintf>f01007de981,39384
f01007e3:	83 c4 0c             	add    $0xc,%espf01007e3983,39516
f01007e6:	c7 c0 00 01 18 f0    	mov    $0xf0180100,%eaxf01007e6984,39565
f01007ec:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007ec985,39621
f01007f2:	52                   	push   %edxf01007f2986,39682
f01007f3:	50                   	push   %eaxf01007f3987,39726
f01007f4:	8d 83 9c 66 f8 ff    	lea    -0x79964(%ebx),%eaxf01007f4988,39770
f01007fa:	50                   	push   %eaxf01007fa989,39829
f01007fb:	e8 44 26 00 00       	call   f0102e44 <cprintf>f01007fb990,39873
f0100800:	83 c4 0c             	add    $0xc,%espf0100800992,40001
f0100803:	c7 c6 14 10 18 f0    	mov    $0xf0181014,%esif0100803993,40050
f0100809:	8d 86 00 00 00 10    	lea    0x10000000(%esi),%eaxf0100809994,40106
f010080f:	50                   	push   %eaxf010080f995,40167
f0100810:	56                   	push   %esif0100810996,40211
f0100811:	8d 83 c0 66 f8 ff    	lea    -0x79940(%ebx),%eaxf0100811997,40255
f0100817:	50                   	push   %eaxf0100817998,40314
f0100818:	e8 27 26 00 00       	call   f0102e44 <cprintf>f0100818999,40358
f010081d:	83 c4 08             	add    $0x8,%espf010081d1001,40471
f0100820:	81 c6 ff 03 00 00    	add    $0x3ff,%esif01008201003,40558
f0100826:	29 fe                	sub    %edi,%esif01008261004,40609
f0100828:	c1 fe 0a             	sar    $0xa,%esif01008281006,40713
f010082b:	56                   	push   %esif010082b1007,40762
f010082c:	8d 83 e4 66 f8 ff    	lea    -0x7991c(%ebx),%eaxf010082c1008,40806
f0100832:	50                   	push   %eaxf01008321009,40865
f0100833:	e8 0c 26 00 00       	call   f0102e44 <cprintf>f01008331010,40909
f0100838:	b8 00 00 00 00       	mov    $0x0,%eaxf01008381013,40980
f010083d:	8d 65 f4             	lea    -0xc(%ebp),%espf010083d1014,41029
f0100840:	5b                   	pop    %ebxf01008401015,41084
f0100841:	5e                   	pop    %esif01008411016,41128
f0100842:	5f                   	pop    %edif01008421017,41172
f0100843:	5d                   	pop    %ebpf01008431018,41216
f0100844:	c3                   	ret    f01008441019,41260
f0100845 <mon_showmappings>:f01008451021,41301
int mon_showmappings(int argc, char **argv, struct Trapframe *tf)int1026,41364
f0100845:	55                   	push   %ebpf01008451028,41432
f0100846:	89 e5                	mov    %esp,%ebpf01008461029,41476
f0100848:	57                   	push   %edif01008481030,41525
f0100849:	56                   	push   %esif01008491031,41569
f010084a:	53                   	push   %ebxf010084a1032,41613
f010084b:	83 ec 1c             	sub    $0x1c,%espf010084b1033,41657
f010084e:	e8 14 f9 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010084e1034,41707
f0100853:	81 c3 c9 d7 07 00    	add    $0x7d7c9,%ebxf01008531035,41779
f0100859:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)f01008591037,41850
f010085d:	74 1f                	je     f010087e <mon_showmappings+0x39>f010085d1038,41904
f010085f:	83 ec 0c             	sub    $0xc,%espf010085f1040,42016
f0100862:	8d 83 1f 65 f8 ff    	lea    -0x79ae1(%ebx),%eaxf01008621041,42065
f0100868:	50                   	push   %eaxf01008681042,42124
f0100869:	e8 d6 25 00 00       	call   f0102e44 <cprintf>f01008691043,42168
f010086e:	83 c4 10             	add    $0x10,%espf010086e1045,42238
f0100871:	b8 01 00 00 00       	mov    $0x1,%eaxf01008711046,42288
f0100876:	8d 65 f4             	lea    -0xc(%ebp),%espf01008761053,42396
f0100879:	5b                   	pop    %ebxf01008791054,42451
f010087a:	5e                   	pop    %esif010087a1055,42495
f010087b:	5f                   	pop    %edif010087b1056,42539
f010087c:	5d                   	pop    %ebpf010087c1057,42583
f010087d:	c3                   	ret    f010087d1058,42627
f010087e:	83 ec 04             	sub    $0x4,%espf010087e1060,42747
f0100881:	6a 10                	push   $0x10f01008811061,42796
f0100883:	6a 00                	push   $0x0f01008831062,42841
f0100885:	8b 45 0c             	mov    0xc(%ebp),%eaxf01008851063,42885
f0100888:	ff 70 04             	pushl  0x4(%eax)f01008881064,42939
f010088b:	e8 ac 36 00 00       	call   f0103f3c <strtol>f010088b1065,42988
f0100890:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf01008901066,43045
f0100895:	89 c6                	mov    %eax,%esif01008951067,43101
f0100897:	83 c4 0c             	add    $0xc,%espf01008971069,43226
f010089a:	6a 10                	push   $0x10f010089a1070,43275
f010089c:	6a 00                	push   $0x0f010089c1071,43320
f010089e:	8b 45 0c             	mov    0xc(%ebp),%eaxf010089e1072,43364
f01008a1:	ff 70 08             	pushl  0x8(%eax)f01008a11073,43418
f01008a4:	e8 93 36 00 00       	call   f0103f3c <strtol>f01008a41074,43467
f01008a9:	8d b8 ff 0f 00 00    	lea    0xfff(%eax),%edif01008a91075,43524
f01008af:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edif01008af1076,43580
f01008b5:	83 c4 0c             	add    $0xc,%espf01008b51078,43731
f01008b8:	57                   	push   %edif01008b81079,43780
f01008b9:	56                   	push   %esif01008b91080,43824
f01008ba:	8d 83 10 67 f8 ff    	lea    -0x798f0(%ebx),%eaxf01008ba1081,43868
f01008c0:	50                   	push   %eaxf01008c01082,43927
f01008c1:	e8 7e 25 00 00       	call   f0102e44 <cprintf>f01008c11083,43971
f01008c6:	83 c4 10             	add    $0x10,%espf01008c61085,44058
f01008c9:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf01008c91087,44168
f01008cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01008cf1088,44224
f01008d2:	8d 83 50 67 f8 ff    	lea    -0x798b0(%ebx),%eaxf01008d21090,44335
f01008d8:	89 45 e0             	mov    %eax,-0x20(%ebp)f01008d81091,44394
f01008db:	eb 19                	jmp    f01008f6 <mon_showmappings+0xb1>f01008db1093,44479
f01008dd:	83 ec 08             	sub    $0x8,%espf01008dd1095,44602
f01008e0:	56                   	push   %esif01008e01096,44651
f01008e1:	8d 83 38 65 f8 ff    	lea    -0x79ac8(%ebx),%eaxf01008e11097,44695
f01008e7:	50                   	push   %eaxf01008e71098,44754
f01008e8:	e8 57 25 00 00       	call   f0102e44 <cprintf>f01008e81099,44798
f01008ed:	83 c4 10             	add    $0x10,%espf01008ed1100,44856
f01008f0:	81 c6 00 10 00 00    	add    $0x1000,%esif01008f01102,44926
f01008f6:	39 f7                	cmp    %esi,%edif01008f61104,45007
f01008f8:	72 36                	jb     f0100930 <mon_showmappings+0xeb>f01008f81105,45056
f01008fa:	83 ec 04             	sub    $0x4,%espf01008fa1107,45188
f01008fd:	6a 00                	push   $0x0f01008fd1108,45237
f01008ff:	56                   	push   %esif01008ff1109,45281
f0100900:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf01009001110,45325
f0100903:	ff 30                	pushl  (%eax)f01009031111,45381
f0100905:	e8 62 05 00 00       	call   f0100e6c <pgdir_walk>f01009051112,45427
f010090a:	83 c4 10             	add    $0x10,%espf010090a1114,45509
f010090d:	85 c0                	test   %eax,%eaxf010090d1115,45559
f010090f:	74 cc                	je     f01008dd <mon_showmappings+0x98>f010090f1116,45608
f0100911:	8b 00                	mov    (%eax),%eaxf01009111118,45699
f0100913:	89 c2                	mov    %eax,%edxf01009131120,45805
f0100915:	81 e2 ff 0f 00 00    	and    $0xfff,%edxf01009151121,45854
f010091b:	52                   	push   %edxf010091b1122,45905
f010091c:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf010091c1124,45984
f0100921:	50                   	push   %eaxf01009211126,46095
f0100922:	56                   	push   %esif01009221127,46139
f0100923:	ff 75 e0             	pushl  -0x20(%ebp)f01009231128,46183
f0100926:	e8 19 25 00 00       	call   f0102e44 <cprintf>f01009261129,46234
f010092b:	83 c4 10             	add    $0x10,%espf010092b1130,46292
f010092e:	eb c0                	jmp    f01008f0 <mon_showmappings+0xab>f010092e1131,46342
f0100930:	b8 00 00 00 00       	mov    $0x0,%eaxf01009301133,46425
f0100935:	e9 3c ff ff ff       	jmp    f0100876 <mon_showmappings+0x31>f01009351134,46474
f010093a <mon_backtrace>:f010093a1136,46547
f010093a:	55                   	push   %ebpf010093a1138,46575
f010093b:	89 e5                	mov    %esp,%ebpf010093b1139,46619
f010093d:	b8 00 00 00 00       	mov    $0x0,%eaxf010093d1141,46670
f0100942:	5d                   	pop    %ebpf01009421142,46719
f0100943:	c3                   	ret    f01009431143,46763
f0100944 <monitor>:f01009441145,46804
voidvoid1149,46838
f0100944:	55                   	push   %ebpf01009441152,46875
f0100945:	89 e5                	mov    %esp,%ebpf01009451153,46919
f0100947:	57                   	push   %edif01009471154,46968
f0100948:	56                   	push   %esif01009481155,47012
f0100949:	53                   	push   %ebxf01009491156,47056
f010094a:	83 ec 68             	sub    $0x68,%espf010094a1157,47100
f010094d:	e8 15 f8 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010094d1158,47150
f0100952:	81 c3 ca d6 07 00    	add    $0x7d6ca,%ebxf01009521159,47222
f0100958:	8d 83 78 67 f8 ff    	lea    -0x79888(%ebx),%eaxf01009581163,47338
f010095e:	50                   	push   %eaxf010095e1164,47397
f010095f:	e8 e0 24 00 00       	call   f0102e44 <cprintf>f010095f1165,47441
f0100964:	8d 83 9c 67 f8 ff    	lea    -0x79864(%ebx),%eaxf01009641167,47550
f010096a:	89 04 24             	mov    %eax,(%esp)f010096a1168,47609
f010096d:	e8 d2 24 00 00       	call   f0102e44 <cprintf>f010096d1169,47660
f0100972:	83 c4 10             	add    $0x10,%espf01009721172,47736
f0100975:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)f01009751173,47786
f0100979:	74 0e                	je     f0100989 <monitor+0x45>f01009791174,47840
f010097b:	83 ec 0c             	sub    $0xc,%espf010097b1176,47926
f010097e:	ff 75 08             	pushl  0x8(%ebp)f010097e1177,47975
f0100981:	e8 27 26 00 00       	call   f0102fad <print_trapframe>f01009811178,48024
f0100986:	83 c4 10             	add    $0x10,%espf01009861179,48090
f0100989:	8d bb 55 65 f8 ff    	lea    -0x79aab(%ebx),%edif01009891181,48183
f010098f:	eb 4a                	jmp    f01009db <monitor+0x97>f010098f1182,48242
f0100991:	83 ec 08             	sub    $0x8,%espf01009911183,48305
f0100994:	0f be c0             	movsbl %al,%eaxf01009941184,48354
f0100997:	50                   	push   %eaxf01009971185,48402
f0100998:	57                   	push   %edif01009981186,48446
f0100999:	e8 43 34 00 00       	call   f0103de1 <strchr>f01009991187,48490
f010099e:	83 c4 10             	add    $0x10,%espf010099e1188,48547
f01009a1:	85 c0                	test   %eax,%eaxf01009a11189,48597
f01009a3:	74 08                	je     f01009ad <monitor+0x69>f01009a31190,48646
f01009a5:	c6 06 00             	movb   $0x0,(%esi)f01009a51192,48724
f01009a8:	8d 76 01             	lea    0x1(%esi),%esif01009a81193,48775
f01009ab:	eb 76                	jmp    f0100a23 <monitor+0xdf>f01009ab1194,48829
f01009ad:	80 3e 00             	cmpb   $0x0,(%esi)f01009ad1196,48909
f01009b0:	74 7c                	je     f0100a2e <monitor+0xea>f01009b01197,48960
f01009b2:	83 7d a4 0f          	cmpl   $0xf,-0x5c(%ebp)f01009b21199,49050
f01009b6:	74 0f                	je     f01009c7 <monitor+0x83>f01009b61200,49106
f01009b8:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01009b81202,49191
f01009bb:	8d 48 01             	lea    0x1(%eax),%ecxf01009bb1203,49247
f01009be:	89 4d a4             	mov    %ecx,-0x5c(%ebp)f01009be1204,49301
f01009c1:	89 74 85 a8          	mov    %esi,-0x58(%ebp,%eax,4)f01009c11205,49357
f01009c5:	eb 41                	jmp    f0100a08 <monitor+0xc4>f01009c51206,49420
f01009c7:	83 ec 08             	sub    $0x8,%espf01009c71208,49537
f01009ca:	6a 10                	push   $0x10f01009ca1209,49586
f01009cc:	8d 83 5a 65 f8 ff    	lea    -0x79aa6(%ebx),%eaxf01009cc1210,49631
f01009d2:	50                   	push   %eaxf01009d21211,49690
f01009d3:	e8 6c 24 00 00       	call   f0102e44 <cprintf>f01009d31212,49734
f01009d8:	83 c4 10             	add    $0x10,%espf01009d81213,49792
		buf = readline("K> ");buf1216,49856
f01009db:	8d 83 51 65 f8 ff    	lea    -0x79aaf(%ebx),%eaxf01009db1217,49881
f01009e1:	89 c6                	mov    %eax,%esif01009e11218,49940
f01009e3:	83 ec 0c             	sub    $0xc,%espf01009e31219,49989
f01009e6:	56                   	push   %esif01009e61220,50038
f01009e7:	e8 bd 31 00 00       	call   f0103ba9 <readline>f01009e71221,50082
f01009ec:	83 c4 10             	add    $0x10,%espf01009ec1223,50160
f01009ef:	85 c0                	test   %eax,%eaxf01009ef1224,50210
f01009f1:	74 f0                	je     f01009e3 <monitor+0x9f>f01009f11225,50259
f01009f3:	89 c6                	mov    %eax,%esif01009f31226,50322
f01009f5:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)f01009f51228,50388
	argc = 0;argc1229,50444
f01009fc:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)f01009fc1230,50455
f0100a03:	eb 1e                	jmp    f0100a23 <monitor+0xdf>f0100a031231,50511
f0100a05:	83 c6 01             	add    $0x1,%esif0100a051233,50584
f0100a08:	0f b6 06             	movzbl (%esi),%eaxf0100a081235,50677
f0100a0b:	84 c0                	test   %al,%alf0100a0b1236,50728
f0100a0d:	74 14                	je     f0100a23 <monitor+0xdf>f0100a0d1237,50775
f0100a0f:	83 ec 08             	sub    $0x8,%espf0100a0f1238,50838
f0100a12:	0f be c0             	movsbl %al,%eaxf0100a121239,50887
f0100a15:	50                   	push   %eaxf0100a151240,50935
f0100a16:	57                   	push   %edif0100a161241,50979
f0100a17:	e8 c5 33 00 00       	call   f0103de1 <strchr>f0100a171242,51023
f0100a1c:	83 c4 10             	add    $0x10,%espf0100a1c1243,51080
f0100a1f:	85 c0                	test   %eax,%eaxf0100a1f1244,51130
f0100a21:	74 e2                	je     f0100a05 <monitor+0xc1>f0100a211245,51179
f0100a23:	0f b6 06             	movzbl (%esi),%eaxf0100a231247,51285
f0100a26:	84 c0                	test   %al,%alf0100a261248,51336
f0100a28:	0f 85 63 ff ff ff    	jne    f0100991 <monitor+0x4d>f0100a281249,51383
f0100a2e:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf0100a2e1251,51463
f0100a31:	c7 44 85 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%eax,4)f0100a311252,51519
f0100a38:	00 f0100a381253,51582
f0100a39:	85 c0                	test   %eax,%eaxf0100a391255,51612
f0100a3b:	74 9e                	je     f01009db <monitor+0x97>f0100a3b1256,51661
f0100a3d:	8d b3 24 20 00 00    	lea    0x2024(%ebx),%esif0100a3d1257,51724
f0100a43:	b8 00 00 00 00       	mov    $0x0,%eaxf0100a431259,51827
f0100a48:	89 7d a0             	mov    %edi,-0x60(%ebp)f0100a481260,51876
f0100a4b:	89 c7                	mov    %eax,%edif0100a4b1261,51932
f0100a4d:	83 ec 08             	sub    $0x8,%espf0100a4d1263,52027
f0100a50:	ff 36                	pushl  (%esi)f0100a501264,52076
f0100a52:	ff 75 a8             	pushl  -0x58(%ebp)f0100a521265,52122
f0100a55:	e8 29 33 00 00       	call   f0103d83 <strcmp>f0100a551266,52173
f0100a5a:	83 c4 10             	add    $0x10,%espf0100a5a1267,52230
f0100a5d:	85 c0                	test   %eax,%eaxf0100a5d1268,52280
f0100a5f:	74 28                	je     f0100a89 <monitor+0x145>f0100a5f1269,52329
f0100a61:	83 c7 01             	add    $0x1,%edif0100a611271,52439
f0100a64:	83 c6 0c             	add    $0xc,%esif0100a641272,52488
f0100a67:	83 ff 03             	cmp    $0x3,%edif0100a671273,52537
f0100a6a:	75 e1                	jne    f0100a4d <monitor+0x109>f0100a6a1274,52586
f0100a6c:	8b 7d a0             	mov    -0x60(%ebp),%edif0100a6c1275,52650
f0100a6f:	83 ec 08             	sub    $0x8,%espf0100a6f1277,52751
f0100a72:	ff 75 a8             	pushl  -0x58(%ebp)f0100a721278,52800
f0100a75:	8d 83 77 65 f8 ff    	lea    -0x79a89(%ebx),%eaxf0100a751279,52851
f0100a7b:	50                   	push   %eaxf0100a7b1280,52910
f0100a7c:	e8 c3 23 00 00       	call   f0102e44 <cprintf>f0100a7c1281,52954
f0100a81:	83 c4 10             	add    $0x10,%espf0100a811282,53012
f0100a84:	e9 52 ff ff ff       	jmp    f01009db <monitor+0x97>f0100a841283,53062
f0100a89:	89 f8                	mov    %edi,%eaxf0100a891284,53125
f0100a8b:	8b 7d a0             	mov    -0x60(%ebp),%edif0100a8b1285,53174
f0100a8e:	83 ec 04             	sub    $0x4,%espf0100a8e1287,53274
f0100a91:	8d 04 40             	lea    (%eax,%eax,2),%eaxf0100a911288,53323
f0100a94:	ff 75 08             	pushl  0x8(%ebp)f0100a941289,53381
f0100a97:	8d 55 a8             	lea    -0x58(%ebp),%edxf0100a971290,53430
f0100a9a:	52                   	push   %edxf0100a9a1291,53486
f0100a9b:	ff 75 a4             	pushl  -0x5c(%ebp)f0100a9b1292,53530
f0100a9e:	ff 94 83 2c 20 00 00 	call   *0x202c(%ebx,%eax,4)f0100a9e1293,53581
f0100aa5:	83 c4 10             	add    $0x10,%espf0100aa51295,53669
f0100aa8:	85 c0                	test   %eax,%eaxf0100aa81296,53719
f0100aaa:	0f 89 2b ff ff ff    	jns    f01009db <monitor+0x97>f0100aaa1297,53768
f0100ab0:	8d 65 f4             	lea    -0xc(%ebp),%espf0100ab01301,53847
f0100ab3:	5b                   	pop    %ebxf0100ab31302,53902
f0100ab4:	5e                   	pop    %esif0100ab41303,53946
f0100ab5:	5f                   	pop    %edif0100ab51304,53990
f0100ab6:	5d                   	pop    %ebpf0100ab61305,54034
f0100ab7:	c3                   	ret    f0100ab71306,54078
f0100ab8 <boot_alloc>:f0100ab81308,54119
static void *static1312,54302
f0100ab8:	55                   	push   %ebpf0100ab81315,54341
f0100ab9:	89 e5                	mov    %esp,%ebpf0100ab91316,54385
f0100abb:	53                   	push   %ebxf0100abb1317,54434
f0100abc:	83 ec 04             	sub    $0x4,%espf0100abc1318,54478
f0100abf:	e8 19 1e 00 00       	call   f01028dd <__x86.get_pc_thunk.cx>f0100abf1319,54527
f0100ac4:	81 c1 58 d5 07 00    	add    $0x7d558,%ecxf0100ac41320,54599
f0100aca:	89 c2                	mov    %eax,%edxf0100aca1321,54652
f0100acc:	83 b9 1c 23 00 00 00 	cmpl   $0x0,0x231c(%ecx)f0100acc1328,55001
f0100ad3:	74 34                	je     f0100b09 <boot_alloc+0x51>f0100ad31329,55058
f0100ad5:	8b 81 1c 23 00 00    	mov    0x231c(%ecx),%eaxf0100ad51336,55390
f0100adb:	8b 99 24 23 00 00    	mov    0x2324(%ecx),%ebxf0100adb1337,55447
f0100ae1:	c1 e3 0c             	shl    $0xc,%ebxf0100ae11338,55504
f0100ae4:	81 c3 14 10 18 f0    	add    $0xf0181014,%ebxf0100ae41339,55553
f0100aea:	29 c3                	sub    %eax,%ebxf0100aea1340,55609
f0100aec:	39 d3                	cmp    %edx,%ebxf0100aec1343,55686
f0100aee:	72 31                	jb     f0100b21 <boot_alloc+0x69>f0100aee1344,55735
        result = nextfree;result1348,55937
f0100af0:	81 c2 ff 0f 00 00    	add    $0xfff,%edxf0100af01350,56004
f0100af6:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf0100af61351,56055
f0100afc:	01 c2                	add    %eax,%edxf0100afc1352,56111
f0100afe:	89 91 1c 23 00 00    	mov    %edx,0x231c(%ecx)f0100afe1353,56160
f0100b04:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100b041358,56330
f0100b07:	c9                   	leave  f0100b071359,56385
f0100b08:	c3                   	ret    f0100b081360,56425
		nextfree = ROUNDUP((char *) end, PGSIZE);nextfree1361,56465
f0100b09:	c7 c0 14 10 18 f0    	mov    $0xf0181014,%eaxf0100b091362,56509
f0100b0f:	05 ff 0f 00 00       	add    $0xfff,%eaxf0100b0f1363,56565
f0100b14:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100b141364,56616
f0100b19:	89 81 1c 23 00 00    	mov    %eax,0x231c(%ecx)f0100b191365,56672
f0100b1f:	eb b4                	jmp    f0100ad5 <boot_alloc+0x1d>f0100b1f1366,56729
f0100b21:	83 ec 0c             	sub    $0xc,%espf0100b211368,56893
f0100b24:	53                   	push   %ebxf0100b241369,56942
f0100b25:	52                   	push   %edxf0100b251370,56986
f0100b26:	8d 81 c4 67 f8 ff    	lea    -0x7983c(%ecx),%eaxf0100b261371,57030
f0100b2c:	50                   	push   %eaxf0100b2c1372,57089
f0100b2d:	6a 6e                	push   $0x6ef0100b2d1373,57133
f0100b2f:	8d 81 7e 6e f8 ff    	lea    -0x79182(%ecx),%eaxf0100b2f1374,57178
f0100b35:	50                   	push   %eaxf0100b351375,57237
f0100b36:	89 cb                	mov    %ecx,%ebxf0100b361376,57281
f0100b38:	e8 74 f5 ff ff       	call   f01000b1 <_panic>f0100b381377,57330
f0100b3d <page2kva>:f0100b3d1379,57388
static inline void*static1383,57439
f0100b3d:	55                   	push   %ebpf0100b3d1386,57491
f0100b3e:	89 e5                	mov    %esp,%ebpf0100b3e1387,57535
f0100b40:	53                   	push   %ebxf0100b401388,57584
f0100b41:	83 ec 04             	sub    $0x4,%espf0100b411389,57628
f0100b44:	e8 90 1d 00 00       	call   f01028d9 <__x86.get_pc_thunk.dx>f0100b441390,57677
f0100b49:	81 c2 d3 d4 07 00    	add    $0x7d4d3,%edxf0100b491391,57749
f0100b4f:	c7 c1 10 10 18 f0    	mov    $0xf0181010,%ecxf0100b4f1393,57835
f0100b55:	2b 01                	sub    (%ecx),%eaxf0100b551394,57891
f0100b57:	c1 f8 03             	sar    $0x3,%eaxf0100b571395,57942
f0100b5a:	c1 e0 0c             	shl    $0xc,%eaxf0100b5a1396,57991
f0100b5d:	89 c1                	mov    %eax,%ecxf0100b5d1398,58066
f0100b5f:	c1 e9 0c             	shr    $0xc,%ecxf0100b5f1399,58115
f0100b62:	c7 c3 08 10 18 f0    	mov    $0xf0181008,%ebxf0100b621400,58164
f0100b68:	39 0b                	cmp    %ecx,(%ebx)f0100b681401,58220
f0100b6a:	76 0a                	jbe    f0100b76 <page2kva+0x39>f0100b6a1402,58271
f0100b6c:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100b6c1404,58368
f0100b71:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100b711407,58454
f0100b74:	c9                   	leave  f0100b741408,58509
f0100b75:	c3                   	ret    f0100b751409,58549
f0100b76:	50                   	push   %eaxf0100b761411,58653
f0100b77:	8d 82 10 68 f8 ff    	lea    -0x797f0(%edx),%eaxf0100b771412,58697
f0100b7d:	50                   	push   %eaxf0100b7d1413,58756
f0100b7e:	6a 56                	push   $0x56f0100b7e1414,58800
f0100b80:	8d 82 8a 6e f8 ff    	lea    -0x79176(%edx),%eaxf0100b801415,58845
f0100b86:	50                   	push   %eaxf0100b861416,58904
f0100b87:	89 d3                	mov    %edx,%ebxf0100b871417,58948
f0100b89:	e8 23 f5 ff ff       	call   f01000b1 <_panic>f0100b891418,58997
f0100b8e <check_va2pa>:f0100b8e1420,59055
static physaddr_tstatic1424,59219
f0100b8e:	55                   	push   %ebpf0100b8e1427,59279
f0100b8f:	89 e5                	mov    %esp,%ebpf0100b8f1428,59323
f0100b91:	56                   	push   %esif0100b911429,59372
f0100b92:	53                   	push   %ebxf0100b921430,59416
f0100b93:	e8 45 1d 00 00       	call   f01028dd <__x86.get_pc_thunk.cx>f0100b931431,59460
f0100b98:	81 c1 84 d4 07 00    	add    $0x7d484,%ecxf0100b981432,59532
	pgdir = &pgdir[PDX(va)];pgdir1435,59597
f0100b9e:	89 d3                	mov    %edx,%ebxf0100b9e1436,59623
f0100ba0:	c1 eb 16             	shr    $0x16,%ebxf0100ba01437,59672
f0100ba3:	8b 04 98             	mov    (%eax,%ebx,4),%eaxf0100ba31439,59746
f0100ba6:	a8 01                	test   $0x1,%alf0100ba61440,59804
f0100ba8:	74 5a                	je     f0100c04 <check_va2pa+0x76>f0100ba81441,59852
	p = (pte_t*) KADDR(PTE_ADDR(*pgdir));p1443,59932
f0100baa:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100baa1444,59971
f0100baf:	89 c6                	mov    %eax,%esif0100baf1446,60053
f0100bb1:	c1 ee 0c             	shr    $0xc,%esif0100bb11447,60102
f0100bb4:	c7 c3 08 10 18 f0    	mov    $0xf0181008,%ebxf0100bb41448,60151
f0100bba:	3b 33                	cmp    (%ebx),%esif0100bba1449,60207
f0100bbc:	73 2b                	jae    f0100be9 <check_va2pa+0x5b>f0100bbc1450,60258
f0100bbe:	c1 ea 0c             	shr    $0xc,%edxf0100bbe1452,60353
f0100bc1:	81 e2 ff 03 00 00    	and    $0x3ff,%edxf0100bc11453,60402
f0100bc7:	8b 84 90 00 00 00 f0 	mov    -0x10000000(%eax,%edx,4),%eaxf0100bc71454,60453
f0100bce:	89 c2                	mov    %eax,%edxf0100bce1455,60522
f0100bd0:	83 e2 01             	and    $0x1,%edxf0100bd01456,60571
f0100bd3:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100bd31459,60663
f0100bd8:	85 d2                	test   %edx,%edxf0100bd81460,60719
f0100bda:	ba ff ff ff ff       	mov    $0xffffffff,%edxf0100bda1461,60768
f0100bdf:	0f 44 c2             	cmove  %edx,%eaxf0100bdf1462,60824
f0100be2:	8d 65 f8             	lea    -0x8(%ebp),%espf0100be21464,60875
f0100be5:	5b                   	pop    %ebxf0100be51465,60930
f0100be6:	5e                   	pop    %esif0100be61466,60974
f0100be7:	5d                   	pop    %ebpf0100be71467,61018
f0100be8:	c3                   	ret    f0100be81468,61062
f0100be9:	50                   	push   %eaxf0100be91470,61166
f0100bea:	8d 81 10 68 f8 ff    	lea    -0x797f0(%ecx),%eaxf0100bea1471,61210
f0100bf0:	50                   	push   %eaxf0100bf01472,61269
f0100bf1:	68 12 03 00 00       	push   $0x312f0100bf11473,61313
f0100bf6:	8d 81 7e 6e f8 ff    	lea    -0x79182(%ecx),%eaxf0100bf61474,61359
f0100bfc:	50                   	push   %eaxf0100bfc1475,61418
f0100bfd:	89 cb                	mov    %ecx,%ebxf0100bfd1476,61462
f0100bff:	e8 ad f4 ff ff       	call   f01000b1 <_panic>f0100bff1477,61511
f0100c04:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100c041479,61581
f0100c09:	eb d7                	jmp    f0100be2 <check_va2pa+0x54>f0100c091480,61637
f0100c0b <nvram_read>:f0100c0b1482,61705
f0100c0b:	55                   	push   %ebpf0100c0b1484,61730
f0100c0c:	89 e5                	mov    %esp,%ebpf0100c0c1485,61774
f0100c0e:	57                   	push   %edif0100c0e1486,61823
f0100c0f:	56                   	push   %esif0100c0f1487,61867
f0100c10:	53                   	push   %ebxf0100c101488,61911
f0100c11:	83 ec 18             	sub    $0x18,%espf0100c111489,61955
f0100c14:	e8 4e f5 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100c141490,62005
f0100c19:	81 c3 03 d4 07 00    	add    $0x7d403,%ebxf0100c191491,62077
f0100c1f:	89 c7                	mov    %eax,%edif0100c1f1492,62130
f0100c21:	50                   	push   %eaxf0100c211494,62235
f0100c22:	e8 96 21 00 00       	call   f0102dbd <mc146818_read>f0100c221495,62279
f0100c27:	89 c6                	mov    %eax,%esif0100c271496,62343
f0100c29:	83 c7 01             	add    $0x1,%edif0100c291497,62392
f0100c2c:	89 3c 24             	mov    %edi,(%esp)f0100c2c1498,62441
f0100c2f:	e8 89 21 00 00       	call   f0102dbd <mc146818_read>f0100c2f1499,62492
f0100c34:	c1 e0 08             	shl    $0x8,%eaxf0100c341500,62556
f0100c37:	09 f0                	or     %esi,%eaxf0100c371501,62605
f0100c39:	8d 65 f4             	lea    -0xc(%ebp),%espf0100c391503,62656
f0100c3c:	5b                   	pop    %ebxf0100c3c1504,62711
f0100c3d:	5e                   	pop    %esif0100c3d1505,62755
f0100c3e:	5f                   	pop    %edif0100c3e1506,62799
f0100c3f:	5d                   	pop    %ebpf0100c3f1507,62843
f0100c40:	c3                   	ret    f0100c401508,62887
f0100c41 <page_init>:f0100c411510,62928
f0100c41:	55                   	push   %ebpf0100c411512,62952
f0100c42:	89 e5                	mov    %esp,%ebpf0100c421513,62996
f0100c44:	57                   	push   %edif0100c441514,63045
f0100c45:	56                   	push   %esif0100c451515,63089
f0100c46:	53                   	push   %ebxf0100c461516,63133
f0100c47:	83 ec 1c             	sub    $0x1c,%espf0100c471517,63177
f0100c4a:	e8 92 1c 00 00       	call   f01028e1 <__x86.get_pc_thunk.si>f0100c4a1518,63227
f0100c4f:	81 c6 cd d3 07 00    	add    $0x7d3cd,%esif0100c4f1519,63299
f0100c55:	bb 00 00 00 00       	mov    $0x0,%ebxf0100c551521,63384
f0100c5a:	c7 c7 08 10 18 f0    	mov    $0xf0181008,%edif0100c5a1522,63433
f0100c60:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0100c601524,63513
f0100c66:	89 45 e0             	mov    %eax,-0x20(%ebp)f0100c661525,63569
f0100c69:	eb 38                	jmp    f0100ca3 <page_init+0x62>f0100c691527,63657
f0100c6b:	39 9e 24 23 00 00    	cmp    %ebx,0x2324(%esi)f0100c6b1529,63757
f0100c71:	76 52                	jbe    f0100cc5 <page_init+0x84>f0100c711530,63814
f0100c73:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecxf0100c731531,63879
f0100c7a:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0100c7a1533,63960
f0100c80:	89 ca                	mov    %ecx,%edxf0100c801534,64016
f0100c82:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100c821535,64065
f0100c85:	03 10                	add    (%eax),%edxf0100c851536,64121
f0100c87:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f0100c871537,64172
f0100c8d:	8b 86 20 23 00 00    	mov    0x2320(%esi),%eaxf0100c8d1539,64264
f0100c93:	89 02                	mov    %eax,(%edx)f0100c931540,64321
			page_free_list = &pages[i];page_free_list1541,64372
f0100c95:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100c951542,64403
f0100c98:	03 08                	add    (%eax),%ecxf0100c981543,64459
f0100c9a:	89 8e 20 23 00 00    	mov    %ecx,0x2320(%esi)f0100c9a1544,64510
f0100ca0:	83 c3 01             	add    $0x1,%ebxf0100ca01546,64599
f0100ca3:	39 1f                	cmp    %ebx,(%edi)f0100ca31547,64648
f0100ca5:	0f 86 96 00 00 00    	jbe    f0100d41 <page_init+0x100>f0100ca51548,64699
f0100cab:	85 db                	test   %ebx,%ebxf0100cab1550,64781
f0100cad:	75 bc                	jne    f0100c6b <page_init+0x2a>f0100cad1551,64830
f0100caf:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0100caf1553,64919
f0100cb5:	8b 00                	mov    (%eax),%eaxf0100cb51554,64975
f0100cb7:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100cb71555,65026
f0100cbd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100cbd1557,65108
f0100cc3:	eb db                	jmp    f0100ca0 <page_init+0x5f>f0100cc31558,65159
f0100cc5:	81 fb ff 00 00 00    	cmp    $0xff,%ebxf0100cc51560,65265
f0100ccb:	77 19                	ja     f0100ce6 <page_init+0xa5>f0100ccb1561,65315
f0100ccd:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0100ccd1563,65404
f0100cd3:	8b 00                	mov    (%eax),%eaxf0100cd31564,65460
f0100cd5:	8d 04 d8             	lea    (%eax,%ebx,8),%eaxf0100cd51565,65511
f0100cd8:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100cd81566,65569
f0100cde:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100cde1568,65651
f0100ce4:	eb ba                	jmp    f0100ca0 <page_init+0x5f>f0100ce41569,65702
f0100ce6:	b8 00 00 00 00       	mov    $0x0,%eaxf0100ce61571,65829
f0100ceb:	e8 c8 fd ff ff       	call   f0100ab8 <boot_alloc>f0100ceb1572,65878
f0100cf0:	05 00 00 00 10       	add    $0x10000000,%eaxf0100cf01573,65939
f0100cf5:	c1 e8 0c             	shr    $0xc,%eaxf0100cf51574,65995
f0100cf8:	39 d8                	cmp    %ebx,%eaxf0100cf81575,66044
f0100cfa:	76 19                	jbe    f0100d15 <page_init+0xd4>f0100cfa1576,66093
f0100cfc:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0100cfc1578,66182
f0100d02:	8b 00                	mov    (%eax),%eaxf0100d021579,66238
f0100d04:	8d 04 d8             	lea    (%eax,%ebx,8),%eaxf0100d041580,66289
f0100d07:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100d071581,66347
f0100d0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100d0d1583,66429
f0100d13:	eb 8b                	jmp    f0100ca0 <page_init+0x5f>f0100d131584,66480
f0100d15:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eaxf0100d151585,66545
f0100d1c:	8b 4d e0             	mov    -0x20(%ebp),%ecxf0100d1c1587,66626
f0100d1f:	89 c2                	mov    %eax,%edxf0100d1f1588,66682
f0100d21:	03 11                	add    (%ecx),%edxf0100d211589,66731
f0100d23:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f0100d231590,66782
f0100d29:	8b 8e 20 23 00 00    	mov    0x2320(%esi),%ecxf0100d291592,66874
f0100d2f:	89 0a                	mov    %ecx,(%edx)f0100d2f1593,66931
			page_free_list = &pages[i];page_free_list1594,66982
f0100d31:	8b 4d e0             	mov    -0x20(%ebp),%ecxf0100d311595,67013
f0100d34:	03 01                	add    (%ecx),%eaxf0100d341596,67069
f0100d36:	89 86 20 23 00 00    	mov    %eax,0x2320(%esi)f0100d361597,67120
f0100d3c:	e9 5f ff ff ff       	jmp    f0100ca0 <page_init+0x5f>f0100d3c1598,67177
f0100d41:	83 c4 1c             	add    $0x1c,%espf0100d411600,67244
f0100d44:	5b                   	pop    %ebxf0100d441601,67294
f0100d45:	5e                   	pop    %esif0100d451602,67338
f0100d46:	5f                   	pop    %edif0100d461603,67382
f0100d47:	5d                   	pop    %ebpf0100d471604,67426
f0100d48:	c3                   	ret    f0100d481605,67470
f0100d49 <page_alloc>:f0100d491607,67511
f0100d49:	55                   	push   %ebpf0100d491609,67536
f0100d4a:	89 e5                	mov    %esp,%ebpf0100d4a1610,67580
f0100d4c:	56                   	push   %esif0100d4c1611,67629
f0100d4d:	53                   	push   %ebxf0100d4d1612,67673
f0100d4e:	e8 14 f4 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100d4e1613,67717
f0100d53:	81 c3 c9 d2 07 00    	add    $0x7d2c9,%ebxf0100d531614,67789
f0100d59:	8b b3 20 23 00 00    	mov    0x2320(%ebx),%esif0100d591616,67877
f0100d5f:	85 f6                	test   %esi,%esif0100d5f1617,67934
f0100d61:	74 1a                	je     f0100d7d <page_alloc+0x34>f0100d611618,67983
	page_free_list = result->pp_link;page_free_list1619,68049
f0100d63:	8b 06                	mov    (%esi),%eaxf0100d631620,68084
f0100d65:	89 83 20 23 00 00    	mov    %eax,0x2320(%ebx)f0100d651621,68135
f0100d6b:	c7 06 00 00 00 00    	movl   $0x0,(%esi)f0100d6b1623,68217
f0100d71:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f0100d711625,68289
f0100d77:	f6 45 08 01          	testb  $0x1,0x8(%ebp)f0100d771627,68374
f0100d7b:	75 09                	jne    f0100d86 <page_alloc+0x3d>f0100d7b1628,68428
f0100d7d:	89 f0                	mov    %esi,%eaxf0100d7d1630,68496
f0100d7f:	8d 65 f8             	lea    -0x8(%ebp),%espf0100d7f1631,68545
f0100d82:	5b                   	pop    %ebxf0100d821632,68600
f0100d83:	5e                   	pop    %esif0100d831633,68644
f0100d84:	5d                   	pop    %ebpf0100d841634,68688
f0100d85:	c3                   	ret    f0100d851635,68732
f0100d86:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0100d861637,68805
f0100d8c:	89 f2                	mov    %esi,%edxf0100d8c1638,68861
f0100d8e:	2b 10                	sub    (%eax),%edxf0100d8e1639,68910
f0100d90:	89 d0                	mov    %edx,%eaxf0100d901640,68961
f0100d92:	c1 f8 03             	sar    $0x3,%eaxf0100d921641,69010
f0100d95:	c1 e0 0c             	shl    $0xc,%eaxf0100d951642,69059
f0100d98:	89 c1                	mov    %eax,%ecxf0100d981644,69134
f0100d9a:	c1 e9 0c             	shr    $0xc,%ecxf0100d9a1645,69183
f0100d9d:	c7 c2 08 10 18 f0    	mov    $0xf0181008,%edxf0100d9d1646,69232
f0100da3:	3b 0a                	cmp    (%edx),%ecxf0100da31647,69288
f0100da5:	73 1a                	jae    f0100dc1 <page_alloc+0x78>f0100da51648,69339
f0100da7:	83 ec 04             	sub    $0x4,%espf0100da71650,69444
f0100daa:	68 00 10 00 00       	push   $0x1000f0100daa1651,69493
f0100daf:	6a 00                	push   $0x0f0100daf1652,69540
f0100db1:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100db11654,69617
f0100db6:	50                   	push   %eaxf0100db61655,69673
f0100db7:	e8 62 30 00 00       	call   f0103e1e <memset>f0100db71656,69717
f0100dbc:	83 c4 10             	add    $0x10,%espf0100dbc1657,69774
f0100dbf:	eb bc                	jmp    f0100d7d <page_alloc+0x34>f0100dbf1658,69824
f0100dc1:	50                   	push   %eaxf0100dc11660,69954
f0100dc2:	8d 83 10 68 f8 ff    	lea    -0x797f0(%ebx),%eaxf0100dc21661,69998
f0100dc8:	50                   	push   %eaxf0100dc81662,70057
f0100dc9:	6a 56                	push   $0x56f0100dc91663,70101
f0100dcb:	8d 83 8a 6e f8 ff    	lea    -0x79176(%ebx),%eaxf0100dcb1664,70146
f0100dd1:	50                   	push   %eaxf0100dd11665,70205
f0100dd2:	e8 da f2 ff ff       	call   f01000b1 <_panic>f0100dd21666,70249
f0100dd7 <page_free>:f0100dd71668,70307
f0100dd7:	55                   	push   %ebpf0100dd71670,70331
f0100dd8:	89 e5                	mov    %esp,%ebpf0100dd81671,70375
f0100dda:	53                   	push   %ebxf0100dda1672,70424
f0100ddb:	83 ec 04             	sub    $0x4,%espf0100ddb1673,70468
f0100dde:	e8 84 f3 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100dde1674,70517
f0100de3:	81 c3 39 d2 07 00    	add    $0x7d239,%ebxf0100de31675,70589
f0100de9:	8b 45 08             	mov    0x8(%ebp),%eaxf0100de91676,70642
f0100dec:	0f b7 48 04          	movzwl 0x4(%eax),%ecxf0100dec1678,70712
f0100df0:	66 85 c9             	test   %cx,%cxf0100df01679,70766
f0100df3:	75 19                	jne    f0100e0e <page_free+0x37>f0100df31680,70813
f0100df5:	8b 08                	mov    (%eax),%ecxf0100df51682,70895
f0100df7:	85 c9                	test   %ecx,%ecxf0100df71683,70946
f0100df9:	75 2f                	jne    f0100e2a <page_free+0x53>f0100df91684,70995
f0100dfb:	8b 8b 20 23 00 00    	mov    0x2320(%ebx),%ecxf0100dfb1686,71091
f0100e01:	89 08                	mov    %ecx,(%eax)f0100e011687,71148
	page_free_list = pp;page_free_list1688,71199
f0100e03:	89 83 20 23 00 00    	mov    %eax,0x2320(%ebx)f0100e031689,71221
f0100e09:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100e091691,71280
f0100e0c:	c9                   	leave  f0100e0c1692,71335
f0100e0d:	c3                   	ret    f0100e0d1693,71375
f0100e0e:	0f b7 c9             	movzwl %cx,%ecxf0100e0e1695,71482
f0100e11:	51                   	push   %ecxf0100e111696,71530
f0100e12:	8d 83 34 68 f8 ff    	lea    -0x797cc(%ebx),%eaxf0100e121697,71574
f0100e18:	50                   	push   %eaxf0100e181698,71633
f0100e19:	68 5a 01 00 00       	push   $0x15af0100e191699,71677
f0100e1e:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf0100e1e1700,71723
f0100e24:	50                   	push   %eaxf0100e241701,71782
f0100e25:	e8 87 f2 ff ff       	call   f01000b1 <_panic>f0100e251702,71826
f0100e2a:	51                   	push   %ecxf0100e2a1704,71947
f0100e2b:	8d 83 60 68 f8 ff    	lea    -0x797a0(%ebx),%eaxf0100e2b1705,71991
f0100e31:	50                   	push   %eaxf0100e311706,72050
f0100e32:	68 5c 01 00 00       	push   $0x15cf0100e321707,72094
f0100e37:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf0100e371708,72140
f0100e3d:	50                   	push   %eaxf0100e3d1709,72199
f0100e3e:	e8 6e f2 ff ff       	call   f01000b1 <_panic>f0100e3e1710,72243
f0100e43 <page_decref>:f0100e431712,72301
f0100e43:	55                   	push   %ebpf0100e431714,72327
f0100e44:	89 e5                	mov    %esp,%ebpf0100e441715,72371
f0100e46:	83 ec 08             	sub    $0x8,%espf0100e461716,72420
f0100e49:	8b 55 08             	mov    0x8(%ebp),%edxf0100e491717,72469
f0100e4c:	0f b7 42 04          	movzwl 0x4(%edx),%eaxf0100e4c1719,72547
f0100e50:	83 e8 01             	sub    $0x1,%eaxf0100e501720,72601
f0100e53:	66 89 42 04          	mov    %ax,0x4(%edx)f0100e531721,72650
f0100e57:	66 85 c0             	test   %ax,%axf0100e571722,72703
f0100e5a:	74 02                	je     f0100e5e <page_decref+0x1b>f0100e5a1723,72750
f0100e5c:	c9                   	leave  f0100e5c1725,72819
f0100e5d:	c3                   	ret    f0100e5d1726,72859
f0100e5e:	83 ec 0c             	sub    $0xc,%espf0100e5e1728,72916
f0100e61:	52                   	push   %edxf0100e611729,72965
f0100e62:	e8 70 ff ff ff       	call   f0100dd7 <page_free>f0100e621730,73009
f0100e67:	83 c4 10             	add    $0x10,%espf0100e671731,73069
f0100e6a:	eb f0                	jmp    f0100e5c <page_decref+0x19>f0100e6a1733,73121
f0100e6c <pgdir_walk>:f0100e6c1735,73189
f0100e6c:	55                   	push   %ebpf0100e6c1737,73214
f0100e6d:	89 e5                	mov    %esp,%ebpf0100e6d1738,73258
f0100e6f:	57                   	push   %edif0100e6f1739,73307
f0100e70:	56                   	push   %esif0100e701740,73351
f0100e71:	53                   	push   %ebxf0100e711741,73395
f0100e72:	83 ec 0c             	sub    $0xc,%espf0100e721742,73439
f0100e75:	e8 ed f2 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100e751743,73488
f0100e7a:	81 c3 a2 d1 07 00    	add    $0x7d1a2,%ebxf0100e7a1744,73560
f0100e80:	8b 7d 0c             	mov    0xc(%ebp),%edif0100e801745,73613
	pde = pgdir+PDX(va);pde1746,73667
f0100e83:	89 fe                	mov    %edi,%esif0100e831747,73689
f0100e85:	c1 ee 16             	shr    $0x16,%esif0100e851748,73738
f0100e88:	c1 e6 02             	shl    $0x2,%esif0100e881749,73788
f0100e8b:	03 75 08             	add    0x8(%ebp),%esif0100e8b1750,73837
f0100e8e:	f6 06 01             	testb  $0x1,(%esi)f0100e8e1752,73914
f0100e91:	75 30                	jne    f0100ec3 <pgdir_walk+0x57>f0100e911753,73965
f0100e93:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)f0100e931755,74058
f0100e97:	74 71                	je     f0100f0a <pgdir_walk+0x9e>f0100e971756,74113
		pp = page_alloc(ALLOC_ZERO);pp1757,74179
f0100e99:	83 ec 0c             	sub    $0xc,%espf0100e991758,74210
f0100e9c:	6a 01                	push   $0x1f0100e9c1759,74259
f0100e9e:	e8 a6 fe ff ff       	call   f0100d49 <page_alloc>f0100e9e1760,74303
f0100ea3:	83 c4 10             	add    $0x10,%espf0100ea31762,74387
f0100ea6:	85 c0                	test   %eax,%eaxf0100ea61763,74437
f0100ea8:	74 67                	je     f0100f11 <pgdir_walk+0xa5>f0100ea81764,74486
f0100eaa:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100eaa1766,74570
f0100eb0:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf0100eb01768,74657
f0100eb6:	2b 02                	sub    (%edx),%eaxf0100eb61769,74713
f0100eb8:	c1 f8 03             	sar    $0x3,%eaxf0100eb81770,74764
f0100ebb:	c1 e0 0c             	shl    $0xc,%eaxf0100ebb1771,74813
f0100ebe:	83 c8 07             	or     $0x7,%eaxf0100ebe1773,74908
f0100ec1:	89 06                	mov    %eax,(%esi)f0100ec11774,74957
f0100ec3:	8b 06                	mov    (%esi),%eaxf0100ec31776,75061
f0100ec5:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100ec51777,75112
f0100eca:	89 c1                	mov    %eax,%ecxf0100eca1779,75194
f0100ecc:	c1 e9 0c             	shr    $0xc,%ecxf0100ecc1780,75243
f0100ecf:	c7 c2 08 10 18 f0    	mov    $0xf0181008,%edxf0100ecf1781,75292
f0100ed5:	3b 0a                	cmp    (%edx),%ecxf0100ed51782,75348
f0100ed7:	73 18                	jae    f0100ef1 <pgdir_walk+0x85>f0100ed71783,75399
f0100ed9:	c1 ef 0a             	shr    $0xa,%edif0100ed91784,75465
f0100edc:	81 e7 fc 0f 00 00    	and    $0xffc,%edif0100edc1785,75514
f0100ee2:	8d 84 38 00 00 00 f0 	lea    -0x10000000(%eax,%edi,1),%eaxf0100ee21786,75565
f0100ee9:	8d 65 f4             	lea    -0xc(%ebp),%espf0100ee91788,75636
f0100eec:	5b                   	pop    %ebxf0100eec1789,75691
f0100eed:	5e                   	pop    %esif0100eed1790,75735
f0100eee:	5f                   	pop    %edif0100eee1791,75779
f0100eef:	5d                   	pop    %ebpf0100eef1792,75823
f0100ef0:	c3                   	ret    f0100ef01793,75867
f0100ef1:	50                   	push   %eaxf0100ef11795,75971
f0100ef2:	8d 83 10 68 f8 ff    	lea    -0x797f0(%ebx),%eaxf0100ef21796,76015
f0100ef8:	50                   	push   %eaxf0100ef81797,76074
f0100ef9:	68 93 01 00 00       	push   $0x193f0100ef91798,76118
f0100efe:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf0100efe1799,76164
f0100f04:	50                   	push   %eaxf0100f041800,76223
f0100f05:	e8 a7 f1 ff ff       	call   f01000b1 <_panic>f0100f051801,76267
f0100f0a:	b8 00 00 00 00       	mov    $0x0,%eaxf0100f0a1803,76351
f0100f0f:	eb d8                	jmp    f0100ee9 <pgdir_walk+0x7d>f0100f0f1804,76400
f0100f11:	b8 00 00 00 00       	mov    $0x0,%eaxf0100f111806,76489
f0100f16:	eb d1                	jmp    f0100ee9 <pgdir_walk+0x7d>f0100f161807,76538
f0100f18 <boot_map_region>:f0100f181809,76605
f0100f18:	55                   	push   %ebpf0100f181811,76635
f0100f19:	89 e5                	mov    %esp,%ebpf0100f191812,76679
f0100f1b:	57                   	push   %edif0100f1b1813,76728
f0100f1c:	56                   	push   %esif0100f1c1814,76772
f0100f1d:	53                   	push   %ebxf0100f1d1815,76816
f0100f1e:	83 ec 2c             	sub    $0x2c,%espf0100f1e1816,76860
f0100f21:	e8 41 f2 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100f211817,76910
f0100f26:	81 c3 f6 d0 07 00    	add    $0x7d0f6,%ebxf0100f261818,76982
f0100f2c:	89 5d d4             	mov    %ebx,-0x2c(%ebp)f0100f2c1819,77035
f0100f2f:	89 45 dc             	mov    %eax,-0x24(%ebp)f0100f2f1820,77091
f0100f32:	89 d6                	mov    %edx,%esif0100f321821,77147
f0100f34:	89 55 e0             	mov    %edx,-0x20(%ebp)f0100f341822,77196
f0100f37:	c1 e9 0c             	shr    $0xc,%ecxf0100f371824,77292
f0100f3a:	89 4d e4             	mov    %ecx,-0x1c(%ebp)f0100f3a1825,77341
f0100f3d:	bf 00 00 00 00       	mov    $0x0,%edif0100f3d1826,77397
f0100f42:	c7 c0 08 10 18 f0    	mov    $0xf0181008,%eaxf0100f421828,77492
f0100f48:	89 45 d8             	mov    %eax,-0x28(%ebp)f0100f481829,77548
f0100f4b:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0100f4b1831,77679
f0100f51:	89 45 d0             	mov    %eax,-0x30(%ebp)f0100f511832,77735
f0100f54:	eb 40                	jmp    f0100f96 <boot_map_region+0x7e>f0100f541834,77831
f0100f56:	56                   	push   %esif0100f561836,77976
f0100f57:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0100f571837,78020
f0100f5a:	8d 83 88 68 f8 ff    	lea    -0x79778(%ebx),%eaxf0100f5a1838,78076
f0100f60:	50                   	push   %eaxf0100f601839,78135
f0100f61:	68 a8 01 00 00       	push   $0x1a8f0100f611840,78179
f0100f66:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf0100f661841,78225
f0100f6c:	50                   	push   %eaxf0100f6c1842,78284
f0100f6d:	e8 3f f1 ff ff       	call   f01000b1 <_panic>f0100f6d1843,78328
f0100f72:	83 ec 04             	sub    $0x4,%espf0100f721845,78428
f0100f75:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0100f751846,78477
f0100f78:	8d 83 c0 68 f8 ff    	lea    -0x79740(%ebx),%eaxf0100f781847,78533
f0100f7e:	50                   	push   %eaxf0100f7e1848,78592
f0100f7f:	6a 4f                	push   $0x4ff0100f7f1849,78636
f0100f81:	8d 83 8a 6e f8 ff    	lea    -0x79176(%ebx),%eaxf0100f811850,78681
f0100f87:	50                   	push   %eaxf0100f871851,78740
f0100f88:	e8 24 f1 ff ff       	call   f01000b1 <_panic>f0100f881852,78784
f0100f8d:	81 c6 00 10 00 00    	add    $0x1000,%esif0100f8d1854,78855
f0100f93:	83 c7 01             	add    $0x1,%edif0100f931856,78947
f0100f96:	8b 5d 08             	mov    0x8(%ebp),%ebxf0100f961857,78996
f0100f99:	2b 5d e0             	sub    -0x20(%ebp),%ebxf0100f991858,79050
f0100f9c:	01 f3                	add    %esi,%ebxf0100f9c1859,79106
f0100f9e:	3b 7d e4             	cmp    -0x1c(%ebp),%edif0100f9e1860,79155
f0100fa1:	74 5d                	je     f0101000 <boot_map_region+0xe8>f0100fa11861,79211
		pte = pgdir_walk(pgdir, (void *) va, 1);pte1862,79282
f0100fa3:	83 ec 04             	sub    $0x4,%espf0100fa31863,79325
f0100fa6:	6a 01                	push   $0x1f0100fa61864,79374
f0100fa8:	56                   	push   %esif0100fa81865,79418
f0100fa9:	ff 75 dc             	pushl  -0x24(%ebp)f0100fa91866,79462
f0100fac:	e8 bb fe ff ff       	call   f0100e6c <pgdir_walk>f0100fac1867,79513
f0100fb1:	83 c4 10             	add    $0x10,%espf0100fb11869,79593
f0100fb4:	85 c0                	test   %eax,%eaxf0100fb41870,79643
f0100fb6:	74 9e                	je     f0100f56 <boot_map_region+0x3e>f0100fb61871,79692
f0100fb8:	8b 55 0c             	mov    0xc(%ebp),%edxf0100fb81873,79791
f0100fbb:	83 ca 01             	or     $0x1,%edxf0100fbb1874,79845
f0100fbe:	09 da                	or     %ebx,%edxf0100fbe1875,79894
f0100fc0:	89 10                	mov    %edx,(%eax)f0100fc01876,79943
f0100fc2:	81 fe ff ff ff ef    	cmp    $0xefffffff,%esif0100fc21878,80040
f0100fc8:	76 c3                	jbe    f0100f8d <boot_map_region+0x75>f0100fc81879,80096
f0100fca:	8b 45 d8             	mov    -0x28(%ebp),%eaxf0100fca1880,80167
f0100fcd:	8b 00                	mov    (%eax),%eaxf0100fcd1881,80223
f0100fcf:	89 d9                	mov    %ebx,%ecxf0100fcf1882,80274
f0100fd1:	c1 e9 0c             	shr    $0xc,%ecxf0100fd11883,80323
f0100fd4:	39 c1                	cmp    %eax,%ecxf0100fd41884,80372
f0100fd6:	73 b5                	jae    f0100f8d <boot_map_region+0x75>f0100fd61885,80421
f0100fd8:	c1 ea 0c             	shr    $0xc,%edxf0100fd81887,80518
f0100fdb:	39 d0                	cmp    %edx,%eaxf0100fdb1888,80567
f0100fdd:	76 93                	jbe    f0100f72 <boot_map_region+0x5a>f0100fdd1889,80616
f0100fdf:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0100fdf1891,80762
f0100fe2:	8b 00                	mov    (%eax),%eaxf0100fe21892,80818
f0100fe4:	0f b7 44 d0 04       	movzwl 0x4(%eax,%edx,8),%eaxf0100fe41893,80869
f0100fe9:	50                   	push   %eaxf0100fe91894,80930
f0100fea:	53                   	push   %ebxf0100fea1895,80974
f0100feb:	56                   	push   %esif0100feb1896,81018
f0100fec:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0100fec1897,81062
f0100fef:	8d 83 98 6e f8 ff    	lea    -0x79168(%ebx),%eaxf0100fef1898,81118
f0100ff5:	50                   	push   %eaxf0100ff51899,81177
f0100ff6:	e8 49 1e 00 00       	call   f0102e44 <cprintf>f0100ff61900,81221
f0100ffb:	83 c4 10             	add    $0x10,%espf0100ffb1901,81279
f0100ffe:	eb 8d                	jmp    f0100f8d <boot_map_region+0x75>f0100ffe1902,81329
f0101000:	8d 65 f4             	lea    -0xc(%ebp),%espf01010001904,81402
f0101003:	5b                   	pop    %ebxf01010031905,81457
f0101004:	5e                   	pop    %esif01010041906,81501
f0101005:	5f                   	pop    %edif01010051907,81545
f0101006:	5d                   	pop    %ebpf01010061908,81589
f0101007:	c3                   	ret    f01010071909,81633
f0101008 <page_lookup>:f01010081911,81674
f0101008:	55                   	push   %ebpf01010081913,81700
f0101009:	89 e5                	mov    %esp,%ebpf01010091914,81744
f010100b:	56                   	push   %esif010100b1915,81793
f010100c:	53                   	push   %ebxf010100c1916,81837
f010100d:	e8 55 f1 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010100d1917,81881
f0101012:	81 c3 0a d0 07 00    	add    $0x7d00a,%ebxf01010121918,81953
f0101018:	8b 75 10             	mov    0x10(%ebp),%esif01010181919,82006
f010101b:	83 ec 04             	sub    $0x4,%espf010101b1921,82101
f010101e:	6a 00                	push   $0x0f010101e1922,82150
f0101020:	ff 75 0c             	pushl  0xc(%ebp)f01010201923,82194
f0101023:	ff 75 08             	pushl  0x8(%ebp)f01010231924,82243
f0101026:	e8 41 fe ff ff       	call   f0100e6c <pgdir_walk>f01010261925,82292
f010102b:	83 c4 10             	add    $0x10,%espf010102b1927,82387
f010102e:	85 f6                	test   %esi,%esif010102e1928,82437
f0101030:	74 02                	je     f0101034 <page_lookup+0x2c>f01010301929,82486
f0101032:	89 06                	mov    %eax,(%esi)f01010321930,82553
f0101034:	85 c0                	test   %eax,%eaxf01010341932,82656
f0101036:	74 3d                	je     f0101075 <page_lookup+0x6d>f01010361933,82705
f0101038:	8b 00                	mov    (%eax),%eaxf01010381934,82772
f010103a:	a8 01                	test   $0x1,%alf010103a1935,82823
f010103c:	74 3e                	je     f010107c <page_lookup+0x74>f010103c1936,82871
f010103e:	c1 e8 0c             	shr    $0xc,%eaxf010103e1937,82938
f0101041:	c7 c2 08 10 18 f0    	mov    $0xf0181008,%edxf01010411938,82987
f0101047:	3b 02                	cmp    (%edx),%eaxf01010471939,83043
f0101049:	73 12                	jae    f010105d <page_lookup+0x55>f01010491940,83094
f010104b:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf010104b1942,83188
f0101051:	8b 12                	mov    (%edx),%edxf01010511943,83244
f0101053:	8d 04 c2             	lea    (%edx,%eax,8),%eaxf01010531944,83295
f0101056:	8d 65 f8             	lea    -0x8(%ebp),%espf01010561946,83355
f0101059:	5b                   	pop    %ebxf01010591947,83410
f010105a:	5e                   	pop    %esif010105a1948,83454
f010105b:	5d                   	pop    %ebpf010105b1949,83498
f010105c:	c3                   	ret    f010105c1950,83542
f010105d:	83 ec 04             	sub    $0x4,%espf010105d1952,83625
f0101060:	8d 83 c0 68 f8 ff    	lea    -0x79740(%ebx),%eaxf01010601953,83674
f0101066:	50                   	push   %eaxf01010661954,83733
f0101067:	6a 4f                	push   $0x4ff01010671955,83777
f0101069:	8d 83 8a 6e f8 ff    	lea    -0x79176(%ebx),%eaxf01010691956,83822
f010106f:	50                   	push   %eaxf010106f1957,83881
f0101070:	e8 3c f0 ff ff       	call   f01000b1 <_panic>f01010701958,83925
f0101075:	b8 00 00 00 00       	mov    $0x0,%eaxf01010751960,84034
f010107a:	eb da                	jmp    f0101056 <page_lookup+0x4e>f010107a1961,84083
f010107c:	b8 00 00 00 00       	mov    $0x0,%eaxf010107c1962,84150
f0101081:	eb d3                	jmp    f0101056 <page_lookup+0x4e>f01010811963,84199
f0101083 <page_remove>:f01010831965,84267
f0101083:	55                   	push   %ebpf01010831967,84293
f0101084:	89 e5                	mov    %esp,%ebpf01010841968,84337
f0101086:	57                   	push   %edif01010861969,84386
f0101087:	56                   	push   %esif01010871970,84430
f0101088:	53                   	push   %ebxf01010881971,84474
f0101089:	83 ec 10             	sub    $0x10,%espf01010891972,84518
f010108c:	8b 7d 08             	mov    0x8(%ebp),%edif010108c1973,84568
f010108f:	8b 75 0c             	mov    0xc(%ebp),%esif010108f1974,84622
f0101092:	6a 00                	push   $0x0f01010921976,84729
f0101094:	56                   	push   %esif01010941977,84773
f0101095:	57                   	push   %edif01010951978,84817
f0101096:	e8 6d ff ff ff       	call   f0101008 <page_lookup>f01010961979,84861
f010109b:	83 c4 10             	add    $0x10,%espf010109b1981,84948
f010109e:	85 c0                	test   %eax,%eaxf010109e1982,84998
f01010a0:	74 27                	je     f01010c9 <page_remove+0x46>f01010a01983,85047
f01010a2:	89 c3                	mov    %eax,%ebxf01010a21984,85114
f01010a4:	83 ec 0c             	sub    $0xc,%espf01010a41986,85181
f01010a7:	50                   	push   %eaxf01010a71987,85230
f01010a8:	e8 96 fd ff ff       	call   f0100e43 <page_decref>f01010a81988,85274
f01010ad:	83 c4 0c             	add    $0xc,%espf01010ad1990,85368
f01010b0:	6a 00                	push   $0x0f01010b01991,85417
f01010b2:	56                   	push   %esif01010b21992,85461
f01010b3:	57                   	push   %edif01010b31993,85505
f01010b4:	e8 b3 fd ff ff       	call   f0100e6c <pgdir_walk>f01010b41994,85549
f01010b9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f01010b91995,85610
f01010bf:	83 c4 10             	add    $0x10,%espf01010bf1997,85710
f01010c2:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)f01010c21998,85760
f01010c7:	74 08                	je     f01010d1 <page_remove+0x4e>f01010c71999,85814
f01010c9:	8d 65 f4             	lea    -0xc(%ebp),%espf01010c92001,85883
f01010cc:	5b                   	pop    %ebxf01010cc2002,85938
f01010cd:	5e                   	pop    %esif01010cd2003,85982
f01010ce:	5f                   	pop    %edif01010ce2004,86026
f01010cf:	5d                   	pop    %ebpf01010cf2005,86070
f01010d0:	c3                   	ret    f01010d02006,86114
static inline voidstatic2009,86157
f01010d1:	0f 01 3e             	invlpg (%esi)f01010d12013,86253
f01010d4:	eb f3                	jmp    f01010c9 <page_remove+0x46>f01010d42014,86299
f01010d6 <page_insert>:f01010d62016,86367
f01010d6:	55                   	push   %ebpf01010d62018,86393
f01010d7:	89 e5                	mov    %esp,%ebpf01010d72019,86437
f01010d9:	57                   	push   %edif01010d92020,86486
f01010da:	56                   	push   %esif01010da2021,86530
f01010db:	53                   	push   %ebxf01010db2022,86574
f01010dc:	83 ec 10             	sub    $0x10,%espf01010dc2023,86618
f01010df:	e8 01 18 00 00       	call   f01028e5 <__x86.get_pc_thunk.di>f01010df2024,86668
f01010e4:	81 c7 38 cf 07 00    	add    $0x7cf38,%edif01010e42025,86740
f01010ea:	8b 75 0c             	mov    0xc(%ebp),%esif01010ea2026,86793
f01010ed:	6a 01                	push   $0x1f01010ed2028,86887
f01010ef:	ff 75 10             	pushl  0x10(%ebp)f01010ef2029,86931
f01010f2:	ff 75 08             	pushl  0x8(%ebp)f01010f22030,86981
f01010f5:	e8 72 fd ff ff       	call   f0100e6c <pgdir_walk>f01010f52031,87030
f01010fa:	83 c4 10             	add    $0x10,%espf01010fa2033,87120
f01010fd:	85 c0                	test   %eax,%eaxf01010fd2034,87170
f01010ff:	74 3f                	je     f0101140 <page_insert+0x6a>f01010ff2035,87219
f0101101:	89 c3                	mov    %eax,%ebxf01011012036,87286
f0101103:	66 83 46 04 01       	addw   $0x1,0x4(%esi)f01011032038,87350
f0101108:	83 ec 08             	sub    $0x8,%espf01011082040,87429
f010110b:	ff 75 10             	pushl  0x10(%ebp)f010110b2041,87478
f010110e:	ff 75 08             	pushl  0x8(%ebp)f010110e2042,87528
f0101111:	e8 6d ff ff ff       	call   f0101083 <page_remove>f01011112043,87577
f0101116:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf01011162045,87672
f010111c:	2b 30                	sub    (%eax),%esif010111c2046,87728
f010111e:	89 f0                	mov    %esi,%eaxf010111e2047,87779
f0101120:	c1 f8 03             	sar    $0x3,%eaxf01011202048,87828
f0101123:	c1 e0 0c             	shl    $0xc,%eaxf01011232049,87877
f0101126:	8b 55 14             	mov    0x14(%ebp),%edxf01011262051,87962
f0101129:	83 ca 01             	or     $0x1,%edxf01011292052,88017
f010112c:	09 d0                	or     %edx,%eaxf010112c2053,88066
f010112e:	89 03                	mov    %eax,(%ebx)f010112e2054,88115
f0101130:	83 c4 10             	add    $0x10,%espf01011302056,88177
f0101133:	b8 00 00 00 00       	mov    $0x0,%eaxf01011332057,88227
f0101138:	8d 65 f4             	lea    -0xc(%ebp),%espf01011382059,88278
f010113b:	5b                   	pop    %ebxf010113b2060,88333
f010113c:	5e                   	pop    %esif010113c2061,88377
f010113d:	5f                   	pop    %edif010113d2062,88421
f010113e:	5d                   	pop    %ebpf010113e2063,88465
f010113f:	c3                   	ret    f010113f2064,88509
f0101140:	b8 fc ff ff ff       	mov    $0xfffffffc,%eaxf01011402066,88578
f0101145:	eb f1                	jmp    f0101138 <page_insert+0x62>f01011452067,88634
f0101147 <mem_init>:f01011472069,88702
f0101147:	55                   	push   %ebpf01011472071,88725
f0101148:	89 e5                	mov    %esp,%ebpf01011482072,88769
f010114a:	57                   	push   %edif010114a2073,88818
f010114b:	56                   	push   %esif010114b2074,88862
f010114c:	53                   	push   %ebxf010114c2075,88906
f010114d:	83 ec 3c             	sub    $0x3c,%espf010114d2076,88950
f0101150:	e8 12 f0 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01011502077,89000
f0101155:	81 c3 c7 ce 07 00    	add    $0x7cec7,%ebxf01011552078,89072
	basemem = nvram_read(NVRAM_BASELO);basemem2079,89125
f010115b:	b8 15 00 00 00       	mov    $0x15,%eaxf010115b2080,89162
f0101160:	e8 a6 fa ff ff       	call   f0100c0b <nvram_read>f01011602081,89212
f0101165:	89 c7                	mov    %eax,%edif01011652082,89273
	extmem = nvram_read(NVRAM_EXTLO);extmem2083,89322
f0101167:	b8 17 00 00 00       	mov    $0x17,%eaxf01011672084,89357
f010116c:	e8 9a fa ff ff       	call   f0100c0b <nvram_read>f010116c2085,89407
f0101171:	89 c6                	mov    %eax,%esif01011712086,89468
	ext16mem = nvram_read(NVRAM_EXT16LO) * 64;ext16mem2087,89517
f0101173:	b8 34 00 00 00       	mov    $0x34,%eaxf01011732088,89561
f0101178:	e8 8e fa ff ff       	call   f0100c0b <nvram_read>f01011782089,89611
f010117d:	c1 e0 06             	shl    $0x6,%eaxf010117d2090,89672
f0101180:	85 c0                	test   %eax,%eaxf01011802092,89736
f0101182:	75 0e                	jne    f0101192 <mem_init+0x4b>f01011822093,89785
		totalmem = basemem;totalmem2094,89849
f0101184:	89 f8                	mov    %edi,%eaxf01011842095,89871
f0101186:	85 f6                	test   %esi,%esif01011862097,89938
f0101188:	74 0d                	je     f0101197 <mem_init+0x50>f01011882098,89987
		totalmem = 1 * 1024 + extmem;totalmem2099,90051
f010118a:	8d 86 00 04 00 00    	lea    0x400(%esi),%eaxf010118a2100,90083
f0101190:	eb 05                	jmp    f0101197 <mem_init+0x50>f01011902101,90139
		totalmem = 16 * 1024 + ext16mem;totalmem2102,90203
f0101192:	05 00 40 00 00       	add    $0x4000,%eaxf01011922103,90238
	npages = totalmem / (PGSIZE / 1024);npages2104,90290
f0101197:	89 c1                	mov    %eax,%ecxf01011972105,90328
f0101199:	c1 e9 02             	shr    $0x2,%ecxf01011992106,90377
f010119c:	c7 c2 08 10 18 f0    	mov    $0xf0181008,%edxf010119c2107,90426
f01011a2:	89 0a                	mov    %ecx,(%edx)f01011a22108,90482
	npages_basemem = basemem / (PGSIZE / 1024);npages_basemem2109,90533
f01011a4:	89 fa                	mov    %edi,%edxf01011a42110,90578
f01011a6:	c1 ea 02             	shr    $0x2,%edxf01011a62111,90627
f01011a9:	89 93 24 23 00 00    	mov    %edx,0x2324(%ebx)f01011a92112,90676
f01011af:	89 c2                	mov    %eax,%edxf01011af2114,90806
f01011b1:	29 fa                	sub    %edi,%edxf01011b12115,90855
f01011b3:	52                   	push   %edxf01011b32116,90904
f01011b4:	57                   	push   %edif01011b42117,90948
f01011b5:	50                   	push   %eaxf01011b52118,90992
f01011b6:	8d 83 e0 68 f8 ff    	lea    -0x79720(%ebx),%eaxf01011b62119,91036
f01011bc:	50                   	push   %eaxf01011bc2120,91095
f01011bd:	e8 82 1c 00 00       	call   f0102e44 <cprintf>f01011bd2121,91139
	kern_pgdir = (pde_t *) boot_alloc(PGSIZE);kern_pgdir2122,91197
f01011c2:	b8 00 10 00 00       	mov    $0x1000,%eaxf01011c22123,91241
f01011c7:	e8 ec f8 ff ff       	call   f0100ab8 <boot_alloc>f01011c72124,91293
f01011cc:	c7 c6 0c 10 18 f0    	mov    $0xf018100c,%esif01011cc2125,91354
f01011d2:	89 06                	mov    %eax,(%esi)f01011d22126,91410
f01011d4:	83 c4 0c             	add    $0xc,%espf01011d42128,91493
f01011d7:	68 00 10 00 00       	push   $0x1000f01011d72129,91542
f01011dc:	6a 00                	push   $0x0f01011dc2130,91589
f01011de:	50                   	push   %eaxf01011de2131,91633
f01011df:	e8 3a 2c 00 00       	call   f0103e1e <memset>f01011df2132,91677
f01011e4:	8b 06                	mov    (%esi),%eaxf01011e42134,91794
f01011e6:	83 c4 10             	add    $0x10,%espf01011e62136,91876
f01011e9:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01011e92137,91926
f01011ee:	77 19                	ja     f0101209 <mem_init+0xc2>f01011ee2138,91982
f01011f0:	50                   	push   %eaxf01011f02140,92112
f01011f1:	8d 83 1c 69 f8 ff    	lea    -0x796e4(%ebx),%eaxf01011f12141,92156
f01011f7:	50                   	push   %eaxf01011f72142,92215
f01011f8:	68 95 00 00 00       	push   $0x95f01011f82143,92259
f01011fd:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01011fd2144,92304
f0101203:	50                   	push   %eaxf01012032145,92363
f0101204:	e8 a8 ee ff ff       	call   f01000b1 <_panic>f01012042146,92407
f0101209:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01012092148,92500
f010120f:	83 ca 05             	or     $0x5,%edxf010120f2149,92561
f0101212:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)f01012122150,92610
	pages = (struct PageInfo *) boot_alloc(sizeof(struct PageInfo) * npages);pages2151,92666
f0101218:	c7 c6 08 10 18 f0    	mov    $0xf0181008,%esif01012182152,92741
f010121e:	8b 06                	mov    (%esi),%eaxf010121e2153,92797
f0101220:	c1 e0 03             	shl    $0x3,%eaxf01012202154,92848
f0101223:	e8 90 f8 ff ff       	call   f0100ab8 <boot_alloc>f01012232155,92897
f0101228:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf01012282156,92958
f010122e:	89 02                	mov    %eax,(%edx)f010122e2157,93014
f0101230:	83 ec 04             	sub    $0x4,%espf01012302159,93118
f0101233:	8b 16                	mov    (%esi),%edxf01012332160,93167
f0101235:	c1 e2 03             	shl    $0x3,%edxf01012352161,93218
f0101238:	52                   	push   %edxf01012382162,93267
f0101239:	6a 00                	push   $0x0f01012392163,93311
f010123b:	50                   	push   %eaxf010123b2164,93355
f010123c:	e8 dd 2b 00 00       	call   f0103e1e <memset>f010123c2165,93399
	envs = (struct Env *) boot_alloc(sizeof(struct Env) * NENV);envs2166,93456
f0101241:	b8 00 80 01 00       	mov    $0x18000,%eaxf01012412167,93518
f0101246:	e8 6d f8 ff ff       	call   f0100ab8 <boot_alloc>f01012462168,93571
f010124b:	c7 c2 48 03 18 f0    	mov    $0xf0180348,%edxf010124b2169,93632
f0101251:	89 02                	mov    %eax,(%edx)f01012512170,93688
f0101253:	83 c4 0c             	add    $0xc,%espf01012532172,93784
f0101256:	68 00 80 01 00       	push   $0x18000f01012562173,93833
f010125b:	6a 00                	push   $0x0f010125b2174,93881
f010125d:	50                   	push   %eaxf010125d2175,93925
f010125e:	e8 bb 2b 00 00       	call   f0103e1e <memset>f010125e2176,93969
f0101263:	e8 d9 f9 ff ff       	call   f0100c41 <page_init>f01012632178,94040
f0101268:	8b 83 20 23 00 00    	mov    0x2320(%ebx),%eaxf01012682180,94122
f010126e:	83 c4 10             	add    $0x10,%espf010126e2181,94179
f0101271:	85 c0                	test   %eax,%eaxf01012712182,94229
f0101273:	74 5d                	je     f01012d2 <mem_init+0x18b>f01012732183,94278
f0101275:	8d 55 d8             	lea    -0x28(%ebp),%edxf01012752185,94387
f0101278:	89 55 e0             	mov    %edx,-0x20(%ebp)f01012782186,94443
f010127b:	8d 55 dc             	lea    -0x24(%ebp),%edxf010127b2187,94499
f010127e:	89 55 e4             	mov    %edx,-0x1c(%ebp)f010127e2188,94555
f0101281:	c7 c1 10 10 18 f0    	mov    $0xf0181010,%ecxf01012812190,94644
f0101287:	89 c2                	mov    %eax,%edxf01012872191,94700
f0101289:	2b 11                	sub    (%ecx),%edxf01012892192,94749
f010128b:	f7 c2 00 e0 7f 00    	test   $0x7fe000,%edxf010128b2194,94849
f0101291:	0f 95 c2             	setne  %dlf01012912195,94903
f0101294:	0f b6 d2             	movzbl %dl,%edxf01012942196,94946
f0101297:	8b 74 95 e0          	mov    -0x20(%ebp,%edx,4),%esif01012972198,95017
f010129b:	89 06                	mov    %eax,(%esi)f010129b2199,95080
f010129d:	89 44 95 e0          	mov    %eax,-0x20(%ebp,%edx,4)f010129d2201,95163
f01012a1:	8b 00                	mov    (%eax),%eaxf01012a12203,95278
f01012a3:	85 c0                	test   %eax,%eaxf01012a32204,95329
f01012a5:	75 e0                	jne    f0101287 <mem_init+0x140>f01012a52205,95378
f01012a7:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf01012a72207,95457
f01012aa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f01012aa2208,95513
f01012b0:	8b 55 dc             	mov    -0x24(%ebp),%edxf01012b02210,95580
f01012b3:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01012b32211,95636
f01012b6:	89 10                	mov    %edx,(%eax)f01012b62212,95692
		page_free_list = pp1;page_free_list2213,95743
f01012b8:	8b 75 d8             	mov    -0x28(%ebp),%esif01012b82214,95767
f01012bb:	89 b3 20 23 00 00    	mov    %esi,0x2320(%ebx)f01012bb2215,95823
f01012c1:	c7 c7 10 10 18 f0    	mov    $0xf0181010,%edif01012c12216,95880
f01012c7:	c7 c0 08 10 18 f0    	mov    $0xf0181008,%eaxf01012c72218,95962
f01012cd:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01012cd2219,96018
f01012d0:	eb 33                	jmp    f0101305 <mem_init+0x1be>f01012d02220,96074
f01012d2:	83 ec 04             	sub    $0x4,%espf01012d22222,96187
f01012d5:	8d 83 40 69 f8 ff    	lea    -0x796c0(%ebx),%eaxf01012d52223,96236
f01012db:	50                   	push   %eaxf01012db2224,96295
f01012dc:	68 4e 02 00 00       	push   $0x24ef01012dc2225,96339
f01012e1:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01012e12226,96385
f01012e7:	50                   	push   %eaxf01012e72227,96444
f01012e8:	e8 c4 ed ff ff       	call   f01000b1 <_panic>f01012e82228,96488
f01012ed:	52                   	push   %edxf01012ed2230,96609
f01012ee:	8d 83 10 68 f8 ff    	lea    -0x797f0(%ebx),%eaxf01012ee2231,96653
f01012f4:	50                   	push   %eaxf01012f42232,96712
f01012f5:	6a 56                	push   $0x56f01012f52233,96756
f01012f7:	8d 83 8a 6e f8 ff    	lea    -0x79176(%ebx),%eaxf01012f72234,96801
f01012fd:	50                   	push   %eaxf01012fd2235,96860
f01012fe:	e8 ae ed ff ff       	call   f01000b1 <_panic>f01012fe2236,96904
f0101303:	8b 36                	mov    (%esi),%esif01013032238,97010
f0101305:	85 f6                	test   %esi,%esif01013052239,97061
f0101307:	74 3d                	je     f0101346 <mem_init+0x1ff>f01013072240,97110
f0101309:	89 f0                	mov    %esi,%eaxf01013092242,97208
f010130b:	2b 07                	sub    (%edi),%eaxf010130b2243,97257
f010130d:	c1 f8 03             	sar    $0x3,%eaxf010130d2244,97308
f0101310:	89 c2                	mov    %eax,%edxf01013102246,97393
f0101312:	c1 e2 0c             	shl    $0xc,%edxf01013122247,97442
f0101315:	a9 00 fc 0f 00       	test   $0xffc00,%eaxf01013152248,97491
f010131a:	75 e7                	jne    f0101303 <mem_init+0x1bc>f010131a2249,97544
f010131c:	89 d0                	mov    %edx,%eaxf010131c2251,97635
f010131e:	c1 e8 0c             	shr    $0xc,%eaxf010131e2252,97684
f0101321:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf01013212253,97733
f0101324:	3b 01                	cmp    (%ecx),%eaxf01013242254,97789
f0101326:	73 c5                	jae    f01012ed <mem_init+0x1a6>f01013262255,97840
f0101328:	83 ec 04             	sub    $0x4,%espf01013282257,97941
f010132b:	68 80 00 00 00       	push   $0x80f010132b2258,97990
f0101330:	68 97 00 00 00       	push   $0x97f01013302259,98035
f0101335:	81 ea 00 00 00 10    	sub    $0x10000000,%edxf01013352261,98113
f010133b:	52                   	push   %edxf010133b2262,98169
f010133c:	e8 dd 2a 00 00       	call   f0103e1e <memset>f010133c2263,98213
f0101341:	83 c4 10             	add    $0x10,%espf01013412264,98270
f0101344:	eb bd                	jmp    f0101303 <mem_init+0x1bc>f01013442265,98320
	first_free_page = (char *) boot_alloc(0);first_free_page2266,98385
f0101346:	b8 00 00 00 00       	mov    $0x0,%eaxf01013462267,98428
f010134b:	e8 68 f7 ff ff       	call   f0100ab8 <boot_alloc>f010134b2268,98477
f0101350:	89 45 c8             	mov    %eax,-0x38(%ebp)f01013502269,98538
f0101353:	8b 93 20 23 00 00    	mov    0x2320(%ebx),%edxf01013532271,98645
f0101359:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf01013592273,98725
f010135f:	8b 08                	mov    (%eax),%ecxf010135f2274,98781
f0101361:	c7 c0 08 10 18 f0    	mov    $0xf0181008,%eaxf01013612276,98863
f0101367:	8b 00                	mov    (%eax),%eaxf01013672277,98919
f0101369:	89 45 c4             	mov    %eax,-0x3c(%ebp)f01013692278,98970
f010136c:	8d 04 c1             	lea    (%ecx,%eax,8),%eaxf010136c2279,99026
f010136f:	89 45 d4             	mov    %eax,-0x2c(%ebp)f010136f2280,99084
f0101372:	89 4d d0             	mov    %ecx,-0x30(%ebp)f01013722282,99201
f0101375:	bf 00 00 00 00       	mov    $0x0,%edif01013752284,99299
f010137a:	89 75 cc             	mov    %esi,-0x34(%ebp)f010137a2285,99348
f010137d:	e9 f3 00 00 00       	jmp    f0101475 <mem_init+0x32e>f010137d2286,99404
f0101382:	8d 83 b4 6e f8 ff    	lea    -0x7914c(%ebx),%eaxf01013822288,99492
f0101388:	50                   	push   %eaxf01013882289,99551
f0101389:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01013892290,99595
f010138f:	50                   	push   %eaxf010138f2291,99654
f0101390:	68 68 02 00 00       	push   $0x268f01013902292,99698
f0101395:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01013952293,99744
f010139b:	50                   	push   %eaxf010139b2294,99803
f010139c:	e8 10 ed ff ff       	call   f01000b1 <_panic>f010139c2295,99847
f01013a1:	8d 83 d5 6e f8 ff    	lea    -0x7912b(%ebx),%eaxf01013a12297,99935
f01013a7:	50                   	push   %eaxf01013a72298,99994
f01013a8:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01013a82299,100038
f01013ae:	50                   	push   %eaxf01013ae2300,100097
f01013af:	68 69 02 00 00       	push   $0x269f01013af2301,100141
f01013b4:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01013b42302,100187
f01013ba:	50                   	push   %eaxf01013ba2303,100246
f01013bb:	e8 f1 ec ff ff       	call   f01000b1 <_panic>f01013bb2304,100290
f01013c0:	8d 83 64 69 f8 ff    	lea    -0x7969c(%ebx),%eaxf01013c02306,100408
f01013c6:	50                   	push   %eaxf01013c62307,100467
f01013c7:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01013c72308,100511
f01013cd:	50                   	push   %eaxf01013cd2309,100570
f01013ce:	68 6a 02 00 00       	push   $0x26af01013ce2310,100614
f01013d3:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01013d32311,100660
f01013d9:	50                   	push   %eaxf01013d92312,100719
f01013da:	e8 d2 ec ff ff       	call   f01000b1 <_panic>f01013da2313,100763
f01013df:	8d 83 e9 6e f8 ff    	lea    -0x79117(%ebx),%eaxf01013df2315,100848
f01013e5:	50                   	push   %eaxf01013e52316,100907
f01013e6:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01013e62317,100951
f01013ec:	50                   	push   %eaxf01013ec2318,101010
f01013ed:	68 6d 02 00 00       	push   $0x26df01013ed2319,101054
f01013f2:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01013f22320,101100
f01013f8:	50                   	push   %eaxf01013f82321,101159
f01013f9:	e8 b3 ec ff ff       	call   f01000b1 <_panic>f01013f92322,101203
f01013fe:	8d 83 fa 6e f8 ff    	lea    -0x79106(%ebx),%eaxf01013fe2324,101296
f0101404:	50                   	push   %eaxf01014042325,101355
f0101405:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01014052326,101399
f010140b:	50                   	push   %eaxf010140b2327,101458
f010140c:	68 6e 02 00 00       	push   $0x26ef010140c2328,101502
f0101411:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01014112329,101548
f0101417:	50                   	push   %eaxf01014172330,101607
f0101418:	e8 94 ec ff ff       	call   f01000b1 <_panic>f01014182331,101651
f010141d:	8d 83 98 69 f8 ff    	lea    -0x79668(%ebx),%eaxf010141d2333,101754
f0101423:	50                   	push   %eaxf01014232334,101813
f0101424:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01014242335,101857
f010142a:	50                   	push   %eaxf010142a2336,101916
f010142b:	68 6f 02 00 00       	push   $0x26ff010142b2337,101960
f0101430:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01014302338,102006
f0101436:	50                   	push   %eaxf01014362339,102065
f0101437:	e8 75 ec ff ff       	call   f01000b1 <_panic>f01014372340,102109
f010143c:	8d 83 13 6f f8 ff    	lea    -0x790ed(%ebx),%eaxf010143c2342,102203
f0101442:	50                   	push   %eaxf01014422343,102262
f0101443:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01014432344,102306
f0101449:	50                   	push   %eaxf01014492345,102365
f010144a:	68 70 02 00 00       	push   $0x270f010144a2346,102409
f010144f:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010144f2347,102455
f0101455:	50                   	push   %eaxf01014552348,102514
f0101456:	e8 56 ec ff ff       	call   f01000b1 <_panic>f01014562349,102558
f010145b:	89 c6                	mov    %eax,%esif010145b2351,102641
f010145d:	c1 ee 0c             	shr    $0xc,%esif010145d2352,102690
f0101460:	39 75 c4             	cmp    %esi,-0x3c(%ebp)f01014602353,102739
f0101463:	76 71                	jbe    f01014d6 <mem_init+0x38f>f01014632354,102795
f0101465:	2d 00 00 00 10       	sub    $0x10000000,%eaxf01014652356,102893
f010146a:	39 45 c8             	cmp    %eax,-0x38(%ebp)f010146a2358,103029
f010146d:	77 7d                	ja     f01014ec <mem_init+0x3a5>f010146d2359,103085
f010146f:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f010146f2361,103169
f0101473:	8b 12                	mov    (%edx),%edxf01014732363,103276
f0101475:	85 d2                	test   %edx,%edxf01014752364,103327
f0101477:	0f 84 8e 00 00 00    	je     f010150b <mem_init+0x3c4>f01014772365,103376
f010147d:	39 d1                	cmp    %edx,%ecxf010147d2367,103464
f010147f:	0f 87 fd fe ff ff    	ja     f0101382 <mem_init+0x23b>f010147f2368,103513
f0101485:	3b 55 d4             	cmp    -0x2c(%ebp),%edxf01014852370,103609
f0101488:	0f 83 13 ff ff ff    	jae    f01013a1 <mem_init+0x25a>f01014882371,103665
f010148e:	89 d0                	mov    %edx,%eaxf010148e2373,103791
f0101490:	2b 45 d0             	sub    -0x30(%ebp),%eaxf01014902374,103840
f0101493:	a8 07                	test   $0x7,%alf01014932375,103896
f0101495:	0f 85 25 ff ff ff    	jne    f01013c0 <mem_init+0x279>f01014952376,103944
f010149b:	c1 f8 03             	sar    $0x3,%eaxf010149b2378,104042
f010149e:	c1 e0 0c             	shl    $0xc,%eaxf010149e2379,104091
f01014a1:	85 c0                	test   %eax,%eaxf01014a12381,104168
f01014a3:	0f 84 36 ff ff ff    	je     f01013df <mem_init+0x298>f01014a32382,104217
f01014a9:	3d 00 00 0a 00       	cmp    $0xa0000,%eaxf01014a92384,104318
f01014ae:	0f 84 4a ff ff ff    	je     f01013fe <mem_init+0x2b7>f01014ae2385,104371
f01014b4:	3d 00 f0 0f 00       	cmp    $0xff000,%eaxf01014b42387,104482
f01014b9:	0f 84 5e ff ff ff    	je     f010141d <mem_init+0x2d6>f01014b92388,104535
f01014bf:	3d 00 00 10 00       	cmp    $0x100000,%eaxf01014bf2390,104637
f01014c4:	0f 84 72 ff ff ff    	je     f010143c <mem_init+0x2f5>f01014c42391,104691
f01014ca:	3d ff ff 0f 00       	cmp    $0xfffff,%eaxf01014ca2393,104836
f01014cf:	77 8a                	ja     f010145b <mem_init+0x314>f01014cf2394,104889
f01014d1:	83 c7 01             	add    $0x1,%edif01014d12396,104974
f01014d4:	eb 9d                	jmp    f0101473 <mem_init+0x32c>f01014d42397,105023
f01014d6:	50                   	push   %eaxf01014d62399,105152
f01014d7:	8d 83 10 68 f8 ff    	lea    -0x797f0(%ebx),%eaxf01014d72400,105196
f01014dd:	50                   	push   %eaxf01014dd2401,105255
f01014de:	6a 56                	push   $0x56f01014de2402,105299
f01014e0:	8d 83 8a 6e f8 ff    	lea    -0x79176(%ebx),%eaxf01014e02403,105344
f01014e6:	50                   	push   %eaxf01014e62404,105403
f01014e7:	e8 c5 eb ff ff       	call   f01000b1 <_panic>f01014e72405,105447
f01014ec:	8d 83 bc 69 f8 ff    	lea    -0x79644(%ebx),%eaxf01014ec2407,105584
f01014f2:	50                   	push   %eaxf01014f22408,105643
f01014f3:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01014f32409,105687
f01014f9:	50                   	push   %eaxf01014f92410,105746
f01014fa:	68 71 02 00 00       	push   $0x271f01014fa2411,105790
f01014ff:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01014ff2412,105836
f0101505:	50                   	push   %eaxf01015052413,105895
f0101506:	e8 a6 eb ff ff       	call   f01000b1 <_panic>f01015062414,105939
f010150b:	8b 75 cc             	mov    -0x34(%ebp),%esif010150b2415,105996
f010150e:	85 ff                	test   %edi,%edif010150e2417,106080
f0101510:	7e 2e                	jle    f0101540 <mem_init+0x3f9>f01015102418,106129
f0101512:	85 f6                	test   %esi,%esif01015122420,106221
f0101514:	7e 49                	jle    f010155f <mem_init+0x418>f01015142421,106270
f0101516:	83 ec 0c             	sub    $0xc,%espf01015162423,106384
f0101519:	8d 83 04 6a f8 ff    	lea    -0x795fc(%ebx),%eaxf01015192424,106433
f010151f:	50                   	push   %eaxf010151f2425,106492
f0101520:	e8 1f 19 00 00       	call   f0102e44 <cprintf>f01015202426,106536
f0101525:	83 c4 10             	add    $0x10,%espf01015252428,106607
f0101528:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf01015282429,106657
f010152e:	83 38 00             	cmpl   $0x0,(%eax)f010152e2430,106713
f0101531:	74 4b                	je     f010157e <mem_init+0x437>f01015312431,106764
f0101533:	8b 83 20 23 00 00    	mov    0x2320(%ebx),%eaxf01015332433,106889
f0101539:	be 00 00 00 00       	mov    $0x0,%esif01015392434,106946
f010153e:	eb 5e                	jmp    f010159e <mem_init+0x457>f010153e2435,106995
f0101540:	8d 83 2d 6f f8 ff    	lea    -0x790d3(%ebx),%eaxf01015402437,107088
f0101546:	50                   	push   %eaxf01015462438,107147
f0101547:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01015472439,107191
f010154d:	50                   	push   %eaxf010154d2440,107250
f010154e:	68 79 02 00 00       	push   $0x279f010154e2441,107294
f0101553:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01015532442,107340
f0101559:	50                   	push   %eaxf01015592443,107399
f010155a:	e8 52 eb ff ff       	call   f01000b1 <_panic>f010155a2444,107443
f010155f:	8d 83 3f 6f f8 ff    	lea    -0x790c1(%ebx),%eaxf010155f2446,107527
f0101565:	50                   	push   %eaxf01015652447,107586
f0101566:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01015662448,107630
f010156c:	50                   	push   %eaxf010156c2449,107689
f010156d:	68 7a 02 00 00       	push   $0x27af010156d2450,107733
f0101572:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01015722451,107779
f0101578:	50                   	push   %eaxf01015782452,107838
f0101579:	e8 33 eb ff ff       	call   f01000b1 <_panic>f01015792453,107882
f010157e:	83 ec 04             	sub    $0x4,%espf010157e2455,107978
f0101581:	8d 83 50 6f f8 ff    	lea    -0x790b0(%ebx),%eaxf01015812456,108027
f0101587:	50                   	push   %eaxf01015872457,108086
f0101588:	68 8d 02 00 00       	push   $0x28df01015882458,108130
f010158d:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010158d2459,108176
f0101593:	50                   	push   %eaxf01015932460,108235
f0101594:	e8 18 eb ff ff       	call   f01000b1 <_panic>f01015942461,108279
f0101599:	83 c6 01             	add    $0x1,%esif01015992463,108347
f010159c:	8b 00                	mov    (%eax),%eaxf010159c2465,108456
f010159e:	85 c0                	test   %eax,%eaxf010159e2466,108507
f01015a0:	75 f7                	jne    f0101599 <mem_init+0x452>f01015a02467,108556
f01015a2:	83 ec 0c             	sub    $0xc,%espf01015a22469,108653
f01015a5:	6a 00                	push   $0x0f01015a52470,108702
f01015a7:	e8 9d f7 ff ff       	call   f0100d49 <page_alloc>f01015a72471,108746
f01015ac:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01015ac2472,108807
f01015af:	83 c4 10             	add    $0x10,%espf01015af2473,108863
f01015b2:	85 c0                	test   %eax,%eaxf01015b22474,108913
f01015b4:	0f 84 e7 01 00 00    	je     f01017a1 <mem_init+0x65a>f01015b42475,108962
f01015ba:	83 ec 0c             	sub    $0xc,%espf01015ba2477,109059
f01015bd:	6a 00                	push   $0x0f01015bd2478,109108
f01015bf:	e8 85 f7 ff ff       	call   f0100d49 <page_alloc>f01015bf2479,109152
f01015c4:	89 c7                	mov    %eax,%edif01015c42480,109213
f01015c6:	83 c4 10             	add    $0x10,%espf01015c62481,109262
f01015c9:	85 c0                	test   %eax,%eaxf01015c92482,109312
f01015cb:	0f 84 ef 01 00 00    	je     f01017c0 <mem_init+0x679>f01015cb2483,109361
f01015d1:	83 ec 0c             	sub    $0xc,%espf01015d12485,109458
f01015d4:	6a 00                	push   $0x0f01015d42486,109507
f01015d6:	e8 6e f7 ff ff       	call   f0100d49 <page_alloc>f01015d62487,109551
f01015db:	89 45 d0             	mov    %eax,-0x30(%ebp)f01015db2488,109612
f01015de:	83 c4 10             	add    $0x10,%espf01015de2489,109668
f01015e1:	85 c0                	test   %eax,%eaxf01015e12490,109718
f01015e3:	0f 84 f6 01 00 00    	je     f01017df <mem_init+0x698>f01015e32491,109767
f01015e9:	39 7d d4             	cmp    %edi,-0x2c(%ebp)f01015e92493,109860
f01015ec:	0f 84 0c 02 00 00    	je     f01017fe <mem_init+0x6b7>f01015ec2494,109916
f01015f2:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01015f22496,110023
f01015f5:	39 45 d4             	cmp    %eax,-0x2c(%ebp)f01015f52497,110079
f01015f8:	0f 84 1f 02 00 00    	je     f010181d <mem_init+0x6d6>f01015f82498,110135
f01015fe:	39 c7                	cmp    %eax,%edif01015fe2499,110200
f0101600:	0f 84 17 02 00 00    	je     f010181d <mem_init+0x6d6>f01016002500,110249
f0101606:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf01016062502,110347
f010160c:	8b 08                	mov    (%eax),%ecxf010160c2503,110403
f010160e:	c7 c0 08 10 18 f0    	mov    $0xf0181008,%eaxf010160e2505,110493
f0101614:	8b 10                	mov    (%eax),%edxf01016142506,110549
f0101616:	c1 e2 0c             	shl    $0xc,%edxf01016162507,110600
f0101619:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf01016192508,110649
f010161c:	29 c8                	sub    %ecx,%eaxf010161c2509,110705
f010161e:	c1 f8 03             	sar    $0x3,%eaxf010161e2510,110754
f0101621:	c1 e0 0c             	shl    $0xc,%eaxf01016212511,110803
f0101624:	39 d0                	cmp    %edx,%eaxf01016242512,110852
f0101626:	0f 83 10 02 00 00    	jae    f010183c <mem_init+0x6f5>f01016262513,110901
f010162c:	89 f8                	mov    %edi,%eaxf010162c2514,110966
f010162e:	29 c8                	sub    %ecx,%eaxf010162e2515,111015
f0101630:	c1 f8 03             	sar    $0x3,%eaxf01016302516,111064
f0101633:	c1 e0 0c             	shl    $0xc,%eaxf01016332517,111113
f0101636:	39 c2                	cmp    %eax,%edxf01016362519,111201
f0101638:	0f 86 1d 02 00 00    	jbe    f010185b <mem_init+0x714>f01016382520,111250
f010163e:	8b 45 d0             	mov    -0x30(%ebp),%eaxf010163e2521,111315
f0101641:	29 c8                	sub    %ecx,%eaxf01016412522,111371
f0101643:	c1 f8 03             	sar    $0x3,%eaxf01016432523,111420
f0101646:	c1 e0 0c             	shl    $0xc,%eaxf01016462524,111469
f0101649:	39 c2                	cmp    %eax,%edxf01016492526,111557
f010164b:	0f 86 29 02 00 00    	jbe    f010187a <mem_init+0x733>f010164b2527,111606
	fl = page_free_list;fl2528,111671
f0101651:	8b 83 20 23 00 00    	mov    0x2320(%ebx),%eaxf01016512529,111693
f0101657:	89 45 cc             	mov    %eax,-0x34(%ebp)f01016572530,111750
	page_free_list = 0;page_free_list2531,111806
f010165a:	c7 83 20 23 00 00 00 	movl   $0x0,0x2320(%ebx)f010165a2532,111827
f0101661:	00 00 00 f01016612533,111884
f0101664:	83 ec 0c             	sub    $0xc,%espf01016642535,111929
f0101667:	6a 00                	push   $0x0f01016672536,111978
f0101669:	e8 db f6 ff ff       	call   f0100d49 <page_alloc>f01016692537,112022
f010166e:	83 c4 10             	add    $0x10,%espf010166e2538,112083
f0101671:	85 c0                	test   %eax,%eaxf01016712539,112133
f0101673:	0f 85 20 02 00 00    	jne    f0101899 <mem_init+0x752>f01016732540,112182
f0101679:	83 ec 0c             	sub    $0xc,%espf01016792542,112264
f010167c:	ff 75 d4             	pushl  -0x2c(%ebp)f010167c2543,112313
f010167f:	e8 53 f7 ff ff       	call   f0100dd7 <page_free>f010167f2544,112364
f0101684:	89 3c 24             	mov    %edi,(%esp)f01016842546,112441
f0101687:	e8 4b f7 ff ff       	call   f0100dd7 <page_free>f01016872547,112492
f010168c:	83 c4 04             	add    $0x4,%espf010168c2549,112569
f010168f:	ff 75 d0             	pushl  -0x30(%ebp)f010168f2550,112618
f0101692:	e8 40 f7 ff ff       	call   f0100dd7 <page_free>f01016922551,112669
f0101697:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f01016972553,112761
f010169e:	e8 a6 f6 ff ff       	call   f0100d49 <page_alloc>f010169e2554,112812
f01016a3:	89 c7                	mov    %eax,%edif01016a32555,112873
f01016a5:	83 c4 10             	add    $0x10,%espf01016a52556,112922
f01016a8:	85 c0                	test   %eax,%eaxf01016a82557,112972
f01016aa:	0f 84 08 02 00 00    	je     f01018b8 <mem_init+0x771>f01016aa2558,113021
f01016b0:	83 ec 0c             	sub    $0xc,%espf01016b02560,113118
f01016b3:	6a 00                	push   $0x0f01016b32561,113167
f01016b5:	e8 8f f6 ff ff       	call   f0100d49 <page_alloc>f01016b52562,113211
f01016ba:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01016ba2563,113272
f01016bd:	83 c4 10             	add    $0x10,%espf01016bd2564,113328
f01016c0:	85 c0                	test   %eax,%eaxf01016c02565,113378
f01016c2:	0f 84 0f 02 00 00    	je     f01018d7 <mem_init+0x790>f01016c22566,113427
f01016c8:	83 ec 0c             	sub    $0xc,%espf01016c82568,113524
f01016cb:	6a 00                	push   $0x0f01016cb2569,113573
f01016cd:	e8 77 f6 ff ff       	call   f0100d49 <page_alloc>f01016cd2570,113617
f01016d2:	89 45 d0             	mov    %eax,-0x30(%ebp)f01016d22571,113678
f01016d5:	83 c4 10             	add    $0x10,%espf01016d52572,113734
f01016d8:	85 c0                	test   %eax,%eaxf01016d82573,113784
f01016da:	0f 84 16 02 00 00    	je     f01018f6 <mem_init+0x7af>f01016da2574,113833
f01016e0:	3b 7d d4             	cmp    -0x2c(%ebp),%edif01016e02576,113926
f01016e3:	0f 84 2c 02 00 00    	je     f0101915 <mem_init+0x7ce>f01016e32577,113982
f01016e9:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01016e92579,114089
f01016ec:	39 c7                	cmp    %eax,%edif01016ec2580,114145
f01016ee:	0f 84 40 02 00 00    	je     f0101934 <mem_init+0x7ed>f01016ee2581,114194
f01016f4:	39 45 d4             	cmp    %eax,-0x2c(%ebp)f01016f42582,114259
f01016f7:	0f 84 37 02 00 00    	je     f0101934 <mem_init+0x7ed>f01016f72583,114315
f01016fd:	83 ec 0c             	sub    $0xc,%espf01016fd2585,114405
f0101700:	6a 00                	push   $0x0f01017002586,114454
f0101702:	e8 42 f6 ff ff       	call   f0100d49 <page_alloc>f01017022587,114498
f0101707:	83 c4 10             	add    $0x10,%espf01017072588,114559
f010170a:	85 c0                	test   %eax,%eaxf010170a2589,114609
f010170c:	0f 85 41 02 00 00    	jne    f0101953 <mem_init+0x80c>f010170c2590,114658
f0101712:	89 f8                	mov    %edi,%eaxf01017122592,114758
f0101714:	e8 24 f4 ff ff       	call   f0100b3d <page2kva>f01017142593,114807
f0101719:	83 ec 04             	sub    $0x4,%espf01017192594,114866
f010171c:	68 00 10 00 00       	push   $0x1000f010171c2595,114915
f0101721:	6a 01                	push   $0x1f01017212596,114962
f0101723:	50                   	push   %eaxf01017232597,115006
f0101724:	e8 f5 26 00 00       	call   f0103e1e <memset>f01017242598,115050
f0101729:	89 3c 24             	mov    %edi,(%esp)f01017292600,115124
f010172c:	e8 a6 f6 ff ff       	call   f0100dd7 <page_free>f010172c2601,115175
f0101731:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)f01017312603,115275
f0101738:	e8 0c f6 ff ff       	call   f0100d49 <page_alloc>f01017382604,115326
f010173d:	83 c4 10             	add    $0x10,%espf010173d2605,115387
f0101740:	85 c0                	test   %eax,%eaxf01017402606,115437
f0101742:	0f 84 2a 02 00 00    	je     f0101972 <mem_init+0x82b>f01017422607,115486
f0101748:	39 c7                	cmp    %eax,%edif01017482609,115577
f010174a:	0f 85 41 02 00 00    	jne    f0101991 <mem_init+0x84a>f010174a2610,115626
	c = page2kva(pp);c2611,115691
f0101750:	e8 e8 f3 ff ff       	call   f0100b3d <page2kva>f01017502612,115710
f0101755:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edxf01017552613,115769
f010175b:	80 38 00             	cmpb   $0x0,(%eax)f010175b2615,115847
f010175e:	0f 85 4c 02 00 00    	jne    f01019b0 <mem_init+0x869>f010175e2616,115898
f0101764:	83 c0 01             	add    $0x1,%eaxf01017642617,115963
f0101767:	39 d0                	cmp    %edx,%eaxf01017672619,116042
f0101769:	75 f0                	jne    f010175b <mem_init+0x614>f01017692620,116091
	page_free_list = fl;page_free_list2621,116156
f010176b:	8b 45 cc             	mov    -0x34(%ebp),%eaxf010176b2622,116178
f010176e:	89 83 20 23 00 00    	mov    %eax,0x2320(%ebx)f010176e2623,116234
f0101774:	83 ec 0c             	sub    $0xc,%espf01017742625,116308
f0101777:	57                   	push   %edif01017772626,116357
f0101778:	e8 5a f6 ff ff       	call   f0100dd7 <page_free>f01017782627,116401
f010177d:	83 c4 04             	add    $0x4,%espf010177d2629,116478
f0101780:	ff 75 d4             	pushl  -0x2c(%ebp)f01017802630,116527
f0101783:	e8 4f f6 ff ff       	call   f0100dd7 <page_free>f01017832631,116578
f0101788:	83 c4 04             	add    $0x4,%espf01017882633,116655
f010178b:	ff 75 d0             	pushl  -0x30(%ebp)f010178b2634,116704
f010178e:	e8 44 f6 ff ff       	call   f0100dd7 <page_free>f010178e2635,116755
f0101793:	8b 83 20 23 00 00    	mov    0x2320(%ebx),%eaxf01017932637,116864
f0101799:	83 c4 10             	add    $0x10,%espf01017992638,116921
f010179c:	e9 33 02 00 00       	jmp    f01019d4 <mem_init+0x88d>f010179c2639,116971
f01017a1:	8d 83 6b 6f f8 ff    	lea    -0x79095(%ebx),%eaxf01017a12641,117068
f01017a7:	50                   	push   %eaxf01017a72642,117127
f01017a8:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01017a82643,117171
f01017ae:	50                   	push   %eaxf01017ae2644,117230
f01017af:	68 95 02 00 00       	push   $0x295f01017af2645,117274
f01017b4:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01017b42646,117320
f01017ba:	50                   	push   %eaxf01017ba2647,117379
f01017bb:	e8 f1 e8 ff ff       	call   f01000b1 <_panic>f01017bb2648,117423
f01017c0:	8d 83 81 6f f8 ff    	lea    -0x7907f(%ebx),%eaxf01017c02650,117512
f01017c6:	50                   	push   %eaxf01017c62651,117571
f01017c7:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01017c72652,117615
f01017cd:	50                   	push   %eaxf01017cd2653,117674
f01017ce:	68 96 02 00 00       	push   $0x296f01017ce2654,117718
f01017d3:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01017d32655,117764
f01017d9:	50                   	push   %eaxf01017d92656,117823
f01017da:	e8 d2 e8 ff ff       	call   f01000b1 <_panic>f01017da2657,117867
f01017df:	8d 83 97 6f f8 ff    	lea    -0x79069(%ebx),%eaxf01017df2659,117956
f01017e5:	50                   	push   %eaxf01017e52660,118015
f01017e6:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01017e62661,118059
f01017ec:	50                   	push   %eaxf01017ec2662,118118
f01017ed:	68 97 02 00 00       	push   $0x297f01017ed2663,118162
f01017f2:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01017f22664,118208
f01017f8:	50                   	push   %eaxf01017f82665,118267
f01017f9:	e8 b3 e8 ff ff       	call   f01000b1 <_panic>f01017f92666,118311
f01017fe:	8d 83 ad 6f f8 ff    	lea    -0x79053(%ebx),%eaxf01017fe2668,118396
f0101804:	50                   	push   %eaxf01018042669,118455
f0101805:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018052670,118499
f010180b:	50                   	push   %eaxf010180b2671,118558
f010180c:	68 9a 02 00 00       	push   $0x29af010180c2672,118602
f0101811:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01018112673,118648
f0101817:	50                   	push   %eaxf01018172674,118707
f0101818:	e8 94 e8 ff ff       	call   f01000b1 <_panic>f01018182675,118751
f010181d:	8d 83 28 6a f8 ff    	lea    -0x795d8(%ebx),%eaxf010181d2677,118850
f0101823:	50                   	push   %eaxf01018232678,118909
f0101824:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018242679,118953
f010182a:	50                   	push   %eaxf010182a2680,119012
f010182b:	68 9b 02 00 00       	push   $0x29bf010182b2681,119056
f0101830:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01018302682,119102
f0101836:	50                   	push   %eaxf01018362683,119161
f0101837:	e8 75 e8 ff ff       	call   f01000b1 <_panic>f01018372684,119205
f010183c:	8d 83 bf 6f f8 ff    	lea    -0x79041(%ebx),%eaxf010183c2686,119301
f0101842:	50                   	push   %eaxf01018422687,119360
f0101843:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018432688,119404
f0101849:	50                   	push   %eaxf01018492689,119463
f010184a:	68 9c 02 00 00       	push   $0x29cf010184a2690,119507
f010184f:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010184f2691,119553
f0101855:	50                   	push   %eaxf01018552692,119612
f0101856:	e8 56 e8 ff ff       	call   f01000b1 <_panic>f01018562693,119656
f010185b:	8d 83 dc 6f f8 ff    	lea    -0x79024(%ebx),%eaxf010185b2695,119752
f0101861:	50                   	push   %eaxf01018612696,119811
f0101862:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018622697,119855
f0101868:	50                   	push   %eaxf01018682698,119914
f0101869:	68 9d 02 00 00       	push   $0x29df01018692699,119958
f010186e:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010186e2700,120004
f0101874:	50                   	push   %eaxf01018742701,120063
f0101875:	e8 37 e8 ff ff       	call   f01000b1 <_panic>f01018752702,120107
f010187a:	8d 83 f9 6f f8 ff    	lea    -0x79007(%ebx),%eaxf010187a2704,120203
f0101880:	50                   	push   %eaxf01018802705,120262
f0101881:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018812706,120306
f0101887:	50                   	push   %eaxf01018872707,120365
f0101888:	68 9e 02 00 00       	push   $0x29ef01018882708,120409
f010188d:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010188d2709,120455
f0101893:	50                   	push   %eaxf01018932710,120514
f0101894:	e8 18 e8 ff ff       	call   f01000b1 <_panic>f01018942711,120558
f0101899:	8d 83 16 70 f8 ff    	lea    -0x78fea(%ebx),%eaxf01018992713,120640
f010189f:	50                   	push   %eaxf010189f2714,120699
f01018a0:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018a02715,120743
f01018a6:	50                   	push   %eaxf01018a62716,120802
f01018a7:	68 a5 02 00 00       	push   $0x2a5f01018a72717,120846
f01018ac:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01018ac2718,120892
f01018b2:	50                   	push   %eaxf01018b22719,120951
f01018b3:	e8 f9 e7 ff ff       	call   f01000b1 <_panic>f01018b32720,120995
f01018b8:	8d 83 6b 6f f8 ff    	lea    -0x79095(%ebx),%eaxf01018b82722,121084
f01018be:	50                   	push   %eaxf01018be2723,121143
f01018bf:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018bf2724,121187
f01018c5:	50                   	push   %eaxf01018c52725,121246
f01018c6:	68 ac 02 00 00       	push   $0x2acf01018c62726,121290
f01018cb:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01018cb2727,121336
f01018d1:	50                   	push   %eaxf01018d12728,121395
f01018d2:	e8 da e7 ff ff       	call   f01000b1 <_panic>f01018d22729,121439
f01018d7:	8d 83 81 6f f8 ff    	lea    -0x7907f(%ebx),%eaxf01018d72731,121528
f01018dd:	50                   	push   %eaxf01018dd2732,121587
f01018de:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018de2733,121631
f01018e4:	50                   	push   %eaxf01018e42734,121690
f01018e5:	68 ad 02 00 00       	push   $0x2adf01018e52735,121734
f01018ea:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01018ea2736,121780
f01018f0:	50                   	push   %eaxf01018f02737,121839
f01018f1:	e8 bb e7 ff ff       	call   f01000b1 <_panic>f01018f12738,121883
f01018f6:	8d 83 97 6f f8 ff    	lea    -0x79069(%ebx),%eaxf01018f62740,121972
f01018fc:	50                   	push   %eaxf01018fc2741,122031
f01018fd:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01018fd2742,122075
f0101903:	50                   	push   %eaxf01019032743,122134
f0101904:	68 ae 02 00 00       	push   $0x2aef01019042744,122178
f0101909:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01019092745,122224
f010190f:	50                   	push   %eaxf010190f2746,122283
f0101910:	e8 9c e7 ff ff       	call   f01000b1 <_panic>f01019102747,122327
f0101915:	8d 83 ad 6f f8 ff    	lea    -0x79053(%ebx),%eaxf01019152749,122412
f010191b:	50                   	push   %eaxf010191b2750,122471
f010191c:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010191c2751,122515
f0101922:	50                   	push   %eaxf01019222752,122574
f0101923:	68 b0 02 00 00       	push   $0x2b0f01019232753,122618
f0101928:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01019282754,122664
f010192e:	50                   	push   %eaxf010192e2755,122723
f010192f:	e8 7d e7 ff ff       	call   f01000b1 <_panic>f010192f2756,122767
f0101934:	8d 83 28 6a f8 ff    	lea    -0x795d8(%ebx),%eaxf01019342758,122866
f010193a:	50                   	push   %eaxf010193a2759,122925
f010193b:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010193b2760,122969
f0101941:	50                   	push   %eaxf01019412761,123028
f0101942:	68 b1 02 00 00       	push   $0x2b1f01019422762,123072
f0101947:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01019472763,123118
f010194d:	50                   	push   %eaxf010194d2764,123177
f010194e:	e8 5e e7 ff ff       	call   f01000b1 <_panic>f010194e2765,123221
f0101953:	8d 83 16 70 f8 ff    	lea    -0x78fea(%ebx),%eaxf01019532767,123303
f0101959:	50                   	push   %eaxf01019592768,123362
f010195a:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010195a2769,123406
f0101960:	50                   	push   %eaxf01019602770,123465
f0101961:	68 b2 02 00 00       	push   $0x2b2f01019612771,123509
f0101966:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01019662772,123555
f010196c:	50                   	push   %eaxf010196c2773,123614
f010196d:	e8 3f e7 ff ff       	call   f01000b1 <_panic>f010196d2774,123658
f0101972:	8d 83 25 70 f8 ff    	lea    -0x78fdb(%ebx),%eaxf01019722776,123755
f0101978:	50                   	push   %eaxf01019782777,123814
f0101979:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01019792778,123858
f010197f:	50                   	push   %eaxf010197f2779,123917
f0101980:	68 b7 02 00 00       	push   $0x2b7f01019802780,123961
f0101985:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01019852781,124007
f010198b:	50                   	push   %eaxf010198b2782,124066
f010198c:	e8 20 e7 ff ff       	call   f01000b1 <_panic>f010198c2783,124110
f0101991:	8d 83 43 70 f8 ff    	lea    -0x78fbd(%ebx),%eaxf01019912785,124193
f0101997:	50                   	push   %eaxf01019972786,124252
f0101998:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01019982787,124296
f010199e:	50                   	push   %eaxf010199e2788,124355
f010199f:	68 b8 02 00 00       	push   $0x2b8f010199f2789,124399
f01019a4:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01019a42790,124445
f01019aa:	50                   	push   %eaxf01019aa2791,124504
f01019ab:	e8 01 e7 ff ff       	call   f01000b1 <_panic>f01019ab2792,124548
f01019b0:	8d 83 53 70 f8 ff    	lea    -0x78fad(%ebx),%eaxf01019b02794,124626
f01019b6:	50                   	push   %eaxf01019b62795,124685
f01019b7:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01019b72796,124729
f01019bd:	50                   	push   %eaxf01019bd2797,124788
f01019be:	68 bb 02 00 00       	push   $0x2bbf01019be2798,124832
f01019c3:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01019c32799,124878
f01019c9:	50                   	push   %eaxf01019c92800,124937
f01019ca:	e8 e2 e6 ff ff       	call   f01000b1 <_panic>f01019ca2801,124981
f01019cf:	83 ee 01             	sub    $0x1,%esif01019cf2803,125049
f01019d2:	8b 00                	mov    (%eax),%eaxf01019d22805,125147
f01019d4:	85 c0                	test   %eax,%eaxf01019d42806,125198
f01019d6:	75 f7                	jne    f01019cf <mem_init+0x888>f01019d62807,125247
f01019d8:	85 f6                	test   %esi,%esif01019d82809,125333
f01019da:	0f 85 09 07 00 00    	jne    f01020e9 <mem_init+0xfa2>f01019da2810,125382
f01019e0:	83 ec 0c             	sub    $0xc,%espf01019e02812,125492
f01019e3:	8d 83 48 6a f8 ff    	lea    -0x795b8(%ebx),%eaxf01019e32813,125541
f01019e9:	50                   	push   %eaxf01019e92814,125600
f01019ea:	e8 55 14 00 00       	call   f0102e44 <cprintf>f01019ea2815,125644
	pp0 = pp1 = pp2 = 0;pp02820,125783
f01019ef:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f01019ef2822,125837
f01019f6:	e8 4e f3 ff ff       	call   f0100d49 <page_alloc>f01019f62823,125888
f01019fb:	89 45 d0             	mov    %eax,-0x30(%ebp)f01019fb2824,125949
f01019fe:	83 c4 10             	add    $0x10,%espf01019fe2825,126005
f0101a01:	85 c0                	test   %eax,%eaxf0101a012826,126055
f0101a03:	0f 84 ff 06 00 00    	je     f0102108 <mem_init+0xfc1>f0101a032827,126104
f0101a09:	83 ec 0c             	sub    $0xc,%espf0101a092829,126201
f0101a0c:	6a 00                	push   $0x0f0101a0c2830,126250
f0101a0e:	e8 36 f3 ff ff       	call   f0100d49 <page_alloc>f0101a0e2831,126294
f0101a13:	89 c7                	mov    %eax,%edif0101a132832,126355
f0101a15:	83 c4 10             	add    $0x10,%espf0101a152833,126404
f0101a18:	85 c0                	test   %eax,%eaxf0101a182834,126454
f0101a1a:	0f 84 07 07 00 00    	je     f0102127 <mem_init+0xfe0>f0101a1a2835,126503
f0101a20:	83 ec 0c             	sub    $0xc,%espf0101a202837,126600
f0101a23:	6a 00                	push   $0x0f0101a232838,126649
f0101a25:	e8 1f f3 ff ff       	call   f0100d49 <page_alloc>f0101a252839,126693
f0101a2a:	89 45 d4             	mov    %eax,-0x2c(%ebp)f0101a2a2840,126754
f0101a2d:	83 c4 10             	add    $0x10,%espf0101a2d2841,126810
f0101a30:	85 c0                	test   %eax,%eaxf0101a302842,126860
f0101a32:	0f 84 0e 07 00 00    	je     f0102146 <mem_init+0xfff>f0101a322843,126909
f0101a38:	39 7d d0             	cmp    %edi,-0x30(%ebp)f0101a382847,127017
f0101a3b:	0f 84 24 07 00 00    	je     f0102165 <mem_init+0x101e>f0101a3b2848,127073
f0101a41:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101a412850,127181
f0101a44:	39 45 d0             	cmp    %eax,-0x30(%ebp)f0101a442851,127237
f0101a47:	0f 84 37 07 00 00    	je     f0102184 <mem_init+0x103d>f0101a472852,127293
f0101a4d:	39 c7                	cmp    %eax,%edif0101a4d2853,127359
f0101a4f:	0f 84 2f 07 00 00    	je     f0102184 <mem_init+0x103d>f0101a4f2854,127408
	fl = page_free_list;fl2857,127524
f0101a55:	8b 83 20 23 00 00    	mov    0x2320(%ebx),%eaxf0101a552858,127546
f0101a5b:	89 45 c4             	mov    %eax,-0x3c(%ebp)f0101a5b2859,127603
	page_free_list = 0;page_free_list2860,127659
f0101a5e:	c7 83 20 23 00 00 00 	movl   $0x0,0x2320(%ebx)f0101a5e2861,127680
f0101a65:	00 00 00 f0101a652862,127737
f0101a68:	83 ec 0c             	sub    $0xc,%espf0101a682866,127812
f0101a6b:	6a 00                	push   $0x0f0101a6b2867,127861
f0101a6d:	e8 d7 f2 ff ff       	call   f0100d49 <page_alloc>f0101a6d2868,127905
f0101a72:	83 c4 10             	add    $0x10,%espf0101a722869,127966
f0101a75:	85 c0                	test   %eax,%eaxf0101a752870,128016
f0101a77:	0f 85 26 07 00 00    	jne    f01021a3 <mem_init+0x105c>f0101a772871,128065
f0101a7d:	83 ec 04             	sub    $0x4,%espf0101a7d2875,128239
f0101a80:	8d 45 e0             	lea    -0x20(%ebp),%eaxf0101a802876,128288
f0101a83:	50                   	push   %eaxf0101a832877,128344
f0101a84:	6a 00                	push   $0x0f0101a842878,128388
f0101a86:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101a862879,128432
f0101a8c:	ff 30                	pushl  (%eax)f0101a8c2880,128488
f0101a8e:	e8 75 f5 ff ff       	call   f0101008 <page_lookup>f0101a8e2881,128534
f0101a93:	83 c4 10             	add    $0x10,%espf0101a932882,128596
f0101a96:	85 c0                	test   %eax,%eaxf0101a962883,128646
f0101a98:	0f 85 24 07 00 00    	jne    f01021c2 <mem_init+0x107b>f0101a982884,128695
f0101a9e:	6a 02                	push   $0x2f0101a9e2888,128880
f0101aa0:	6a 00                	push   $0x0f0101aa02889,128924
f0101aa2:	57                   	push   %edif0101aa22890,128968
f0101aa3:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101aa32891,129012
f0101aa9:	ff 30                	pushl  (%eax)f0101aa92892,129068
f0101aab:	e8 26 f6 ff ff       	call   f01010d6 <page_insert>f0101aab2893,129114
f0101ab0:	83 c4 10             	add    $0x10,%espf0101ab02894,129176
f0101ab3:	85 c0                	test   %eax,%eaxf0101ab32895,129226
f0101ab5:	0f 89 26 07 00 00    	jns    f01021e1 <mem_init+0x109a>f0101ab52896,129275
f0101abb:	83 ec 0c             	sub    $0xc,%espf0101abb2900,129421
f0101abe:	ff 75 d0             	pushl  -0x30(%ebp)f0101abe2901,129470
f0101ac1:	e8 11 f3 ff ff       	call   f0100dd7 <page_free>f0101ac12902,129521
f0101ac6:	6a 02                	push   $0x2f0101ac62904,129637
f0101ac8:	6a 00                	push   $0x0f0101ac82905,129681
f0101aca:	57                   	push   %edif0101aca2906,129725
f0101acb:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101acb2907,129769
f0101ad1:	ff 30                	pushl  (%eax)f0101ad12908,129825
f0101ad3:	e8 fe f5 ff ff       	call   f01010d6 <page_insert>f0101ad32909,129871
f0101ad8:	83 c4 20             	add    $0x20,%espf0101ad82910,129933
f0101adb:	85 c0                	test   %eax,%eaxf0101adb2911,129983
f0101add:	0f 85 1d 07 00 00    	jne    f0102200 <mem_init+0x10b9>f0101add2912,130032
f0101ae3:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101ae32914,130148
f0101ae9:	8b 08                	mov    (%eax),%ecxf0101ae92915,130204
f0101aeb:	89 ce                	mov    %ecx,%esif0101aeb2916,130255
f0101aed:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0101aed2917,130304
f0101af3:	8b 00                	mov    (%eax),%eaxf0101af32918,130360
f0101af5:	89 45 cc             	mov    %eax,-0x34(%ebp)f0101af52919,130411
f0101af8:	8b 09                	mov    (%ecx),%ecxf0101af82920,130467
f0101afa:	89 4d c8             	mov    %ecx,-0x38(%ebp)f0101afa2921,130518
f0101afd:	89 ca                	mov    %ecx,%edxf0101afd2922,130574
f0101aff:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf0101aff2923,130623
f0101b05:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0101b052924,130679
f0101b08:	29 c1                	sub    %eax,%ecxf0101b082925,130735
f0101b0a:	89 c8                	mov    %ecx,%eaxf0101b0a2926,130784
f0101b0c:	c1 f8 03             	sar    $0x3,%eaxf0101b0c2927,130833
f0101b0f:	c1 e0 0c             	shl    $0xc,%eaxf0101b0f2928,130882
f0101b12:	39 c2                	cmp    %eax,%edxf0101b122929,130931
f0101b14:	0f 85 05 07 00 00    	jne    f010221f <mem_init+0x10d8>f0101b142930,130980
f0101b1a:	ba 00 00 00 00       	mov    $0x0,%edxf0101b1a2932,131101
f0101b1f:	89 f0                	mov    %esi,%eaxf0101b1f2933,131150
f0101b21:	e8 68 f0 ff ff       	call   f0100b8e <check_va2pa>f0101b212934,131199
f0101b26:	89 fa                	mov    %edi,%edxf0101b262935,131261
f0101b28:	2b 55 cc             	sub    -0x34(%ebp),%edxf0101b282936,131310
f0101b2b:	c1 fa 03             	sar    $0x3,%edxf0101b2b2937,131366
f0101b2e:	c1 e2 0c             	shl    $0xc,%edxf0101b2e2938,131415
f0101b31:	39 d0                	cmp    %edx,%eaxf0101b312939,131464
f0101b33:	0f 85 05 07 00 00    	jne    f010223e <mem_init+0x10f7>f0101b332940,131513
f0101b39:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)f0101b392942,131606
f0101b3e:	0f 85 19 07 00 00    	jne    f010225d <mem_init+0x1116>f0101b3e2943,131660
f0101b44:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101b442945,131753
f0101b47:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)f0101b472946,131809
f0101b4c:	0f 85 2a 07 00 00    	jne    f010227c <mem_init+0x1135>f0101b4c2947,131863
f0101b52:	6a 02                	push   $0x2f0101b522951,132085
f0101b54:	68 00 10 00 00       	push   $0x1000f0101b542952,132129
f0101b59:	ff 75 d4             	pushl  -0x2c(%ebp)f0101b592953,132176
f0101b5c:	56                   	push   %esif0101b5c2954,132227
f0101b5d:	e8 74 f5 ff ff       	call   f01010d6 <page_insert>f0101b5d2955,132271
f0101b62:	83 c4 10             	add    $0x10,%espf0101b622956,132333
f0101b65:	85 c0                	test   %eax,%eaxf0101b652957,132383
f0101b67:	0f 85 2e 07 00 00    	jne    f010229b <mem_init+0x1154>f0101b672958,132432
f0101b6d:	ba 00 10 00 00       	mov    $0x1000,%edxf0101b6d2960,132556
f0101b72:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101b722961,132608
f0101b78:	8b 00                	mov    (%eax),%eaxf0101b782962,132664
f0101b7a:	e8 0f f0 ff ff       	call   f0100b8e <check_va2pa>f0101b7a2963,132715
f0101b7f:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf0101b7f2964,132777
f0101b85:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101b852965,132833
f0101b88:	2b 0a                	sub    (%edx),%ecxf0101b882966,132889
f0101b8a:	89 ca                	mov    %ecx,%edxf0101b8a2967,132940
f0101b8c:	c1 fa 03             	sar    $0x3,%edxf0101b8c2968,132989
f0101b8f:	c1 e2 0c             	shl    $0xc,%edxf0101b8f2969,133038
f0101b92:	39 d0                	cmp    %edx,%eaxf0101b922970,133087
f0101b94:	0f 85 20 07 00 00    	jne    f01022ba <mem_init+0x1173>f0101b942971,133136
f0101b9a:	83 ec 0c             	sub    $0xc,%espf0101b9a2975,133257
f0101b9d:	6a 00                	push   $0x0f0101b9d2976,133306
f0101b9f:	e8 a5 f1 ff ff       	call   f0100d49 <page_alloc>f0101b9f2977,133350
f0101ba4:	83 c4 10             	add    $0x10,%espf0101ba42978,133411
f0101ba7:	85 c0                	test   %eax,%eaxf0101ba72979,133461
f0101ba9:	0f 85 2a 07 00 00    	jne    f01022d9 <mem_init+0x1192>f0101ba92980,133510
f0101baf:	6a 02                	push   $0x2f0101baf2984,133711
f0101bb1:	68 00 10 00 00       	push   $0x1000f0101bb12985,133755
f0101bb6:	ff 75 d4             	pushl  -0x2c(%ebp)f0101bb62986,133802
f0101bb9:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101bb92987,133853
f0101bbf:	ff 30                	pushl  (%eax)f0101bbf2988,133909
f0101bc1:	e8 10 f5 ff ff       	call   f01010d6 <page_insert>f0101bc12989,133955
f0101bc6:	83 c4 10             	add    $0x10,%espf0101bc62990,134017
f0101bc9:	85 c0                	test   %eax,%eaxf0101bc92991,134067
f0101bcb:	0f 85 27 07 00 00    	jne    f01022f8 <mem_init+0x11b1>f0101bcb2992,134116
f0101bd1:	ba 00 10 00 00       	mov    $0x1000,%edxf0101bd12994,134240
f0101bd6:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101bd62995,134292
f0101bdc:	8b 00                	mov    (%eax),%eaxf0101bdc2996,134348
f0101bde:	e8 ab ef ff ff       	call   f0100b8e <check_va2pa>f0101bde2997,134399
f0101be3:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf0101be32998,134461
f0101be9:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101be92999,134517
f0101bec:	2b 0a                	sub    (%edx),%ecxf0101bec3000,134573
f0101bee:	89 ca                	mov    %ecx,%edxf0101bee3001,134624
f0101bf0:	c1 fa 03             	sar    $0x3,%edxf0101bf03002,134673
f0101bf3:	c1 e2 0c             	shl    $0xc,%edxf0101bf33003,134722
f0101bf6:	39 d0                	cmp    %edx,%eaxf0101bf63004,134771
f0101bf8:	0f 85 19 07 00 00    	jne    f0102317 <mem_init+0x11d0>f0101bf83005,134820
f0101bfe:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101bfe3007,134913
f0101c01:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)f0101c013008,134969
f0101c06:	0f 85 2a 07 00 00    	jne    f0102336 <mem_init+0x11ef>f0101c063009,135023
f0101c0c:	83 ec 0c             	sub    $0xc,%espf0101c0c3014,135221
f0101c0f:	6a 00                	push   $0x0f0101c0f3015,135270
f0101c11:	e8 33 f1 ff ff       	call   f0100d49 <page_alloc>f0101c113016,135314
f0101c16:	83 c4 10             	add    $0x10,%espf0101c163017,135375
f0101c19:	85 c0                	test   %eax,%eaxf0101c193018,135425
f0101c1b:	0f 85 34 07 00 00    	jne    f0102355 <mem_init+0x120e>f0101c1b3019,135474
	ptep = (pte_t *) KADDR(PTE_ADDR(kern_pgdir[PDX(PGSIZE)]));ptep3022,135596
f0101c21:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101c213023,135656
f0101c27:	8b 10                	mov    (%eax),%edxf0101c273024,135712
f0101c29:	8b 02                	mov    (%edx),%eaxf0101c293025,135763
f0101c2b:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0101c2b3026,135814
f0101c30:	89 c1                	mov    %eax,%ecxf0101c303028,135896
f0101c32:	c1 e9 0c             	shr    $0xc,%ecxf0101c323029,135945
f0101c35:	89 ce                	mov    %ecx,%esif0101c353030,135994
f0101c37:	c7 c1 08 10 18 f0    	mov    $0xf0181008,%ecxf0101c373031,136043
f0101c3d:	3b 31                	cmp    (%ecx),%esif0101c3d3032,136099
f0101c3f:	0f 83 2f 07 00 00    	jae    f0102374 <mem_init+0x122d>f0101c3f3033,136150
f0101c45:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0101c453035,136249
f0101c4a:	89 45 e0             	mov    %eax,-0x20(%ebp)f0101c4a3036,136305
f0101c4d:	83 ec 04             	sub    $0x4,%espf0101c4d3038,136432
f0101c50:	6a 00                	push   $0x0f0101c503039,136481
f0101c52:	68 00 10 00 00       	push   $0x1000f0101c523040,136525
f0101c57:	52                   	push   %edxf0101c573041,136572
f0101c58:	e8 0f f2 ff ff       	call   f0100e6c <pgdir_walk>f0101c583042,136616
f0101c5d:	8b 4d e0             	mov    -0x20(%ebp),%ecxf0101c5d3043,136677
f0101c60:	8d 51 04             	lea    0x4(%ecx),%edxf0101c603044,136733
f0101c63:	83 c4 10             	add    $0x10,%espf0101c633045,136787
f0101c66:	39 d0                	cmp    %edx,%eaxf0101c663046,136837
f0101c68:	0f 85 1f 07 00 00    	jne    f010238d <mem_init+0x1246>f0101c683047,136886
f0101c6e:	6a 06                	push   $0x6f0101c6e3051,137072
f0101c70:	68 00 10 00 00       	push   $0x1000f0101c703052,137116
f0101c75:	ff 75 d4             	pushl  -0x2c(%ebp)f0101c753053,137163
f0101c78:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101c783054,137214
f0101c7e:	ff 30                	pushl  (%eax)f0101c7e3055,137270
f0101c80:	e8 51 f4 ff ff       	call   f01010d6 <page_insert>f0101c803056,137316
f0101c85:	83 c4 10             	add    $0x10,%espf0101c853057,137378
f0101c88:	85 c0                	test   %eax,%eaxf0101c883058,137428
f0101c8a:	0f 85 1c 07 00 00    	jne    f01023ac <mem_init+0x1265>f0101c8a3059,137477
f0101c90:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101c903061,137601
f0101c96:	8b 00                	mov    (%eax),%eaxf0101c963062,137657
f0101c98:	89 c6                	mov    %eax,%esif0101c983063,137708
f0101c9a:	ba 00 10 00 00       	mov    $0x1000,%edxf0101c9a3064,137757
f0101c9f:	e8 ea ee ff ff       	call   f0100b8e <check_va2pa>f0101c9f3065,137809
f0101ca4:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf0101ca43067,137904
f0101caa:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101caa3068,137960
f0101cad:	2b 0a                	sub    (%edx),%ecxf0101cad3069,138016
f0101caf:	89 ca                	mov    %ecx,%edxf0101caf3070,138067
f0101cb1:	c1 fa 03             	sar    $0x3,%edxf0101cb13071,138116
f0101cb4:	c1 e2 0c             	shl    $0xc,%edxf0101cb43072,138165
f0101cb7:	39 d0                	cmp    %edx,%eaxf0101cb73073,138214
f0101cb9:	0f 85 0c 07 00 00    	jne    f01023cb <mem_init+0x1284>f0101cb93074,138263
f0101cbf:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101cbf3076,138356
f0101cc2:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)f0101cc23077,138412
f0101cc7:	0f 85 1d 07 00 00    	jne    f01023ea <mem_init+0x12a3>f0101cc73078,138466
f0101ccd:	83 ec 04             	sub    $0x4,%espf0101ccd3080,138593
f0101cd0:	6a 00                	push   $0x0f0101cd03081,138642
f0101cd2:	68 00 10 00 00       	push   $0x1000f0101cd23082,138686
f0101cd7:	56                   	push   %esif0101cd73083,138733
f0101cd8:	e8 8f f1 ff ff       	call   f0100e6c <pgdir_walk>f0101cd83084,138777
f0101cdd:	83 c4 10             	add    $0x10,%espf0101cdd3085,138838
f0101ce0:	f6 00 04             	testb  $0x4,(%eax)f0101ce03086,138888
f0101ce3:	0f 84 20 07 00 00    	je     f0102409 <mem_init+0x12c2>f0101ce33087,138939
f0101ce9:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101ce93089,139037
f0101cef:	8b 00                	mov    (%eax),%eaxf0101cef3090,139093
f0101cf1:	f6 00 04             	testb  $0x4,(%eax)f0101cf13091,139144
f0101cf4:	0f 84 2e 07 00 00    	je     f0102428 <mem_init+0x12e1>f0101cf43092,139195
f0101cfa:	6a 02                	push   $0x2f0101cfa3096,139380
f0101cfc:	68 00 10 00 00       	push   $0x1000f0101cfc3097,139424
f0101d01:	ff 75 d4             	pushl  -0x2c(%ebp)f0101d013098,139471
f0101d04:	50                   	push   %eaxf0101d043099,139522
f0101d05:	e8 cc f3 ff ff       	call   f01010d6 <page_insert>f0101d053100,139566
f0101d0a:	83 c4 10             	add    $0x10,%espf0101d0a3101,139628
f0101d0d:	85 c0                	test   %eax,%eaxf0101d0d3102,139678
f0101d0f:	0f 85 32 07 00 00    	jne    f0102447 <mem_init+0x1300>f0101d0f3103,139727
f0101d15:	83 ec 04             	sub    $0x4,%espf0101d153105,139854
f0101d18:	6a 00                	push   $0x0f0101d183106,139903
f0101d1a:	68 00 10 00 00       	push   $0x1000f0101d1a3107,139947
f0101d1f:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101d1f3108,139994
f0101d25:	ff 30                	pushl  (%eax)f0101d253109,140050
f0101d27:	e8 40 f1 ff ff       	call   f0100e6c <pgdir_walk>f0101d273110,140096
f0101d2c:	83 c4 10             	add    $0x10,%espf0101d2c3111,140157
f0101d2f:	f6 00 02             	testb  $0x2,(%eax)f0101d2f3112,140207
f0101d32:	0f 84 2e 07 00 00    	je     f0102466 <mem_init+0x131f>f0101d323113,140258
f0101d38:	83 ec 04             	sub    $0x4,%espf0101d383115,140388
f0101d3b:	6a 00                	push   $0x0f0101d3b3116,140437
f0101d3d:	68 00 10 00 00       	push   $0x1000f0101d3d3117,140481
f0101d42:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101d423118,140528
f0101d48:	ff 30                	pushl  (%eax)f0101d483119,140584
f0101d4a:	e8 1d f1 ff ff       	call   f0100e6c <pgdir_walk>f0101d4a3120,140630
f0101d4f:	83 c4 10             	add    $0x10,%espf0101d4f3121,140691
f0101d52:	f6 00 04             	testb  $0x4,(%eax)f0101d523122,140741
f0101d55:	0f 85 2a 07 00 00    	jne    f0102485 <mem_init+0x133e>f0101d553123,140792
f0101d5b:	6a 02                	push   $0x2f0101d5b3127,141003
f0101d5d:	68 00 00 40 00       	push   $0x400000f0101d5d3128,141047
f0101d62:	ff 75 d0             	pushl  -0x30(%ebp)f0101d623129,141096
f0101d65:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101d653130,141147
f0101d6b:	ff 30                	pushl  (%eax)f0101d6b3131,141203
f0101d6d:	e8 64 f3 ff ff       	call   f01010d6 <page_insert>f0101d6d3132,141249
f0101d72:	83 c4 10             	add    $0x10,%espf0101d723133,141311
f0101d75:	85 c0                	test   %eax,%eaxf0101d753134,141361
f0101d77:	0f 89 27 07 00 00    	jns    f01024a4 <mem_init+0x135d>f0101d773135,141410
f0101d7d:	6a 02                	push   $0x2f0101d7d3139,141585
f0101d7f:	68 00 10 00 00       	push   $0x1000f0101d7f3140,141629
f0101d84:	57                   	push   %edif0101d843141,141676
f0101d85:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101d853142,141720
f0101d8b:	ff 30                	pushl  (%eax)f0101d8b3143,141776
f0101d8d:	e8 44 f3 ff ff       	call   f01010d6 <page_insert>f0101d8d3144,141822
f0101d92:	83 c4 10             	add    $0x10,%espf0101d923145,141884
f0101d95:	85 c0                	test   %eax,%eaxf0101d953146,141934
f0101d97:	0f 85 26 07 00 00    	jne    f01024c3 <mem_init+0x137c>f0101d973147,141983
f0101d9d:	83 ec 04             	sub    $0x4,%espf0101d9d3149,142113
f0101da0:	6a 00                	push   $0x0f0101da03150,142162
f0101da2:	68 00 10 00 00       	push   $0x1000f0101da23151,142206
f0101da7:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101da73152,142253
f0101dad:	ff 30                	pushl  (%eax)f0101dad3153,142309
f0101daf:	e8 b8 f0 ff ff       	call   f0100e6c <pgdir_walk>f0101daf3154,142355
f0101db4:	83 c4 10             	add    $0x10,%espf0101db43155,142416
f0101db7:	f6 00 04             	testb  $0x4,(%eax)f0101db73156,142466
f0101dba:	0f 85 22 07 00 00    	jne    f01024e2 <mem_init+0x139b>f0101dba3157,142517
f0101dc0:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101dc03161,142696
f0101dc6:	8b 00                	mov    (%eax),%eaxf0101dc63162,142752
f0101dc8:	89 45 cc             	mov    %eax,-0x34(%ebp)f0101dc83163,142803
f0101dcb:	ba 00 00 00 00       	mov    $0x0,%edxf0101dcb3164,142859
f0101dd0:	e8 b9 ed ff ff       	call   f0100b8e <check_va2pa>f0101dd03165,142908
f0101dd5:	89 c6                	mov    %eax,%esif0101dd53166,142970
f0101dd7:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0101dd73167,143019
f0101ddd:	89 f9                	mov    %edi,%ecxf0101ddd3168,143075
f0101ddf:	2b 08                	sub    (%eax),%ecxf0101ddf3169,143124
f0101de1:	89 c8                	mov    %ecx,%eaxf0101de13170,143175
f0101de3:	c1 f8 03             	sar    $0x3,%eaxf0101de33171,143224
f0101de6:	c1 e0 0c             	shl    $0xc,%eaxf0101de63172,143273
f0101de9:	39 c6                	cmp    %eax,%esif0101de93173,143322
f0101deb:	0f 85 10 07 00 00    	jne    f0102501 <mem_init+0x13ba>f0101deb3174,143371
f0101df1:	ba 00 10 00 00       	mov    $0x1000,%edxf0101df13176,143495
f0101df6:	8b 45 cc             	mov    -0x34(%ebp),%eaxf0101df63177,143547
f0101df9:	e8 90 ed ff ff       	call   f0100b8e <check_va2pa>f0101df93178,143603
f0101dfe:	39 c6                	cmp    %eax,%esif0101dfe3179,143665
f0101e00:	0f 85 1a 07 00 00    	jne    f0102520 <mem_init+0x13d9>f0101e003180,143714
f0101e06:	66 83 7f 04 02       	cmpw   $0x2,0x4(%edi)f0101e063183,143850
f0101e0b:	0f 85 2e 07 00 00    	jne    f010253f <mem_init+0x13f8>f0101e0b3184,143904
f0101e11:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101e113186,143997
f0101e14:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)f0101e143187,144053
f0101e19:	0f 85 3f 07 00 00    	jne    f010255e <mem_init+0x1417>f0101e193188,144107
f0101e1f:	83 ec 0c             	sub    $0xc,%espf0101e1f3192,144259
f0101e22:	6a 00                	push   $0x0f0101e223193,144308
f0101e24:	e8 20 ef ff ff       	call   f0100d49 <page_alloc>f0101e243194,144352
f0101e29:	83 c4 10             	add    $0x10,%espf0101e293195,144413
f0101e2c:	85 c0                	test   %eax,%eaxf0101e2c3196,144463
f0101e2e:	0f 84 49 07 00 00    	je     f010257d <mem_init+0x1436>f0101e2e3197,144512
f0101e34:	39 45 d4             	cmp    %eax,-0x2c(%ebp)f0101e343198,144578
f0101e37:	0f 85 40 07 00 00    	jne    f010257d <mem_init+0x1436>f0101e373199,144634
f0101e3d:	83 ec 08             	sub    $0x8,%espf0101e3d3203,144781
f0101e40:	6a 00                	push   $0x0f0101e403204,144830
f0101e42:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101e423205,144874
f0101e48:	89 c6                	mov    %eax,%esif0101e483206,144930
f0101e4a:	ff 30                	pushl  (%eax)f0101e4a3207,144979
f0101e4c:	e8 32 f2 ff ff       	call   f0101083 <page_remove>f0101e4c3208,145025
f0101e51:	8b 06                	mov    (%esi),%eaxf0101e513210,145132
f0101e53:	89 c6                	mov    %eax,%esif0101e533211,145183
f0101e55:	ba 00 00 00 00       	mov    $0x0,%edxf0101e553212,145232
f0101e5a:	e8 2f ed ff ff       	call   f0100b8e <check_va2pa>f0101e5a3213,145281
f0101e5f:	83 c4 10             	add    $0x10,%espf0101e5f3214,145343
f0101e62:	83 f8 ff             	cmp    $0xffffffff,%eaxf0101e623215,145393
f0101e65:	0f 85 31 07 00 00    	jne    f010259c <mem_init+0x1455>f0101e653216,145449
f0101e6b:	ba 00 10 00 00       	mov    $0x1000,%edxf0101e6b3218,145573
f0101e70:	89 f0                	mov    %esi,%eaxf0101e703219,145625
f0101e72:	e8 17 ed ff ff       	call   f0100b8e <check_va2pa>f0101e723220,145674
f0101e77:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf0101e773221,145736
f0101e7d:	89 f9                	mov    %edi,%ecxf0101e7d3222,145792
f0101e7f:	2b 0a                	sub    (%edx),%ecxf0101e7f3223,145841
f0101e81:	89 ca                	mov    %ecx,%edxf0101e813224,145892
f0101e83:	c1 fa 03             	sar    $0x3,%edxf0101e833225,145941
f0101e86:	c1 e2 0c             	shl    $0xc,%edxf0101e863226,145990
f0101e89:	39 d0                	cmp    %edx,%eaxf0101e893227,146039
f0101e8b:	0f 85 2a 07 00 00    	jne    f01025bb <mem_init+0x1474>f0101e8b3228,146088
f0101e91:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)f0101e913230,146181
f0101e96:	0f 85 3e 07 00 00    	jne    f01025da <mem_init+0x1493>f0101e963231,146235
f0101e9c:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101e9c3233,146328
f0101e9f:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)f0101e9f3234,146384
f0101ea4:	0f 85 4f 07 00 00    	jne    f01025f9 <mem_init+0x14b2>f0101ea43235,146438
f0101eaa:	6a 00                	push   $0x0f0101eaa3239,146604
f0101eac:	68 00 10 00 00       	push   $0x1000f0101eac3240,146648
f0101eb1:	57                   	push   %edif0101eb13241,146695
f0101eb2:	56                   	push   %esif0101eb23242,146739
f0101eb3:	e8 1e f2 ff ff       	call   f01010d6 <page_insert>f0101eb33243,146783
f0101eb8:	83 c4 10             	add    $0x10,%espf0101eb83244,146845
f0101ebb:	85 c0                	test   %eax,%eaxf0101ebb3245,146895
f0101ebd:	0f 85 55 07 00 00    	jne    f0102618 <mem_init+0x14d1>f0101ebd3246,146944
f0101ec3:	66 83 7f 04 00       	cmpw   $0x0,0x4(%edi)f0101ec33248,147032
f0101ec8:	0f 84 69 07 00 00    	je     f0102637 <mem_init+0x14f0>f0101ec83249,147086
f0101ece:	83 3f 00             	cmpl   $0x0,(%edi)f0101ece3251,147183
f0101ed1:	0f 85 7f 07 00 00    	jne    f0102656 <mem_init+0x150f>f0101ed13252,147234
f0101ed7:	83 ec 08             	sub    $0x8,%espf0101ed73256,147386
f0101eda:	68 00 10 00 00       	push   $0x1000f0101eda3257,147435
f0101edf:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101edf3258,147482
f0101ee5:	89 c6                	mov    %eax,%esif0101ee53259,147538
f0101ee7:	ff 30                	pushl  (%eax)f0101ee73260,147587
f0101ee9:	e8 95 f1 ff ff       	call   f0101083 <page_remove>f0101ee93261,147633
f0101eee:	8b 06                	mov    (%esi),%eaxf0101eee3263,147740
f0101ef0:	89 c6                	mov    %eax,%esif0101ef03264,147791
f0101ef2:	ba 00 00 00 00       	mov    $0x0,%edxf0101ef23265,147840
f0101ef7:	e8 92 ec ff ff       	call   f0100b8e <check_va2pa>f0101ef73266,147889
f0101efc:	83 c4 10             	add    $0x10,%espf0101efc3267,147951
f0101eff:	83 f8 ff             	cmp    $0xffffffff,%eaxf0101eff3268,148001
f0101f02:	0f 85 6d 07 00 00    	jne    f0102675 <mem_init+0x152e>f0101f023269,148057
f0101f08:	ba 00 10 00 00       	mov    $0x1000,%edxf0101f083271,148171
f0101f0d:	89 f0                	mov    %esi,%eaxf0101f0d3272,148223
f0101f0f:	e8 7a ec ff ff       	call   f0100b8e <check_va2pa>f0101f0f3273,148272
f0101f14:	83 f8 ff             	cmp    $0xffffffff,%eaxf0101f143274,148334
f0101f17:	0f 85 77 07 00 00    	jne    f0102694 <mem_init+0x154d>f0101f173275,148390
f0101f1d:	66 83 7f 04 00       	cmpw   $0x0,0x4(%edi)f0101f1d3277,148483
f0101f22:	0f 85 8b 07 00 00    	jne    f01026b3 <mem_init+0x156c>f0101f223278,148537
f0101f28:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101f283280,148630
f0101f2b:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)f0101f2b3281,148686
f0101f30:	0f 85 9c 07 00 00    	jne    f01026d2 <mem_init+0x158b>f0101f303282,148740
f0101f36:	83 ec 0c             	sub    $0xc,%espf0101f363286,148894
f0101f39:	6a 00                	push   $0x0f0101f393287,148943
f0101f3b:	e8 09 ee ff ff       	call   f0100d49 <page_alloc>f0101f3b3288,148987
f0101f40:	83 c4 10             	add    $0x10,%espf0101f403289,149048
f0101f43:	39 c7                	cmp    %eax,%edif0101f433290,149098
f0101f45:	0f 85 a6 07 00 00    	jne    f01026f1 <mem_init+0x15aa>f0101f453291,149147
f0101f4b:	85 c0                	test   %eax,%eaxf0101f4b3292,149213
f0101f4d:	0f 84 9e 07 00 00    	je     f01026f1 <mem_init+0x15aa>f0101f4d3293,149262
f0101f53:	83 ec 0c             	sub    $0xc,%espf0101f533297,149383
f0101f56:	6a 00                	push   $0x0f0101f563298,149432
f0101f58:	e8 ec ed ff ff       	call   f0100d49 <page_alloc>f0101f583299,149476
f0101f5d:	83 c4 10             	add    $0x10,%espf0101f5d3300,149537
f0101f60:	85 c0                	test   %eax,%eaxf0101f603301,149587
f0101f62:	0f 85 a8 07 00 00    	jne    f0102710 <mem_init+0x15c9>f0101f623302,149636
f0101f68:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0101f683306,149780
f0101f6e:	8b 08                	mov    (%eax),%ecxf0101f6e3307,149836
f0101f70:	8b 11                	mov    (%ecx),%edxf0101f703308,149887
f0101f72:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf0101f723309,149938
f0101f78:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0101f783310,149994
f0101f7e:	8b 75 d0             	mov    -0x30(%ebp),%esif0101f7e3311,150050
f0101f81:	2b 30                	sub    (%eax),%esif0101f813312,150106
f0101f83:	89 f0                	mov    %esi,%eaxf0101f833313,150157
f0101f85:	c1 f8 03             	sar    $0x3,%eaxf0101f853314,150206
f0101f88:	c1 e0 0c             	shl    $0xc,%eaxf0101f883315,150255
f0101f8b:	39 c2                	cmp    %eax,%edxf0101f8b3316,150304
f0101f8d:	0f 85 9c 07 00 00    	jne    f010272f <mem_init+0x15e8>f0101f8d3317,150353
f0101f93:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)f0101f933319,150439
f0101f99:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101f993321,150517
f0101f9c:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)f0101f9c3322,150573
f0101fa1:	0f 85 a7 07 00 00    	jne    f010274e <mem_init+0x1607>f0101fa13323,150627
f0101fa7:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101fa73325,150711
f0101faa:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)f0101faa3326,150767
f0101fb0:	83 ec 0c             	sub    $0xc,%espf0101fb03330,150882
f0101fb3:	50                   	push   %eaxf0101fb33331,150931
f0101fb4:	e8 1e ee ff ff       	call   f0100dd7 <page_free>f0101fb43332,150975
	va = (void*)(PGSIZE * NPDENTRIES + PGSIZE);va3333,151035
	ptep = pgdir_walk(kern_pgdir, va, 1);ptep3334,151080
f0101fb9:	83 c4 0c             	add    $0xc,%espf0101fb93335,151119
f0101fbc:	6a 01                	push   $0x1f0101fbc3336,151168
f0101fbe:	68 00 10 40 00       	push   $0x401000f0101fbe3337,151212
f0101fc3:	c7 c6 0c 10 18 f0    	mov    $0xf018100c,%esif0101fc33338,151261
f0101fc9:	ff 36                	pushl  (%esi)f0101fc93339,151317
f0101fcb:	e8 9c ee ff ff       	call   f0100e6c <pgdir_walk>f0101fcb3340,151363
f0101fd0:	89 45 cc             	mov    %eax,-0x34(%ebp)f0101fd03341,151424
f0101fd3:	89 45 e0             	mov    %eax,-0x20(%ebp)f0101fd33342,151480
	ptep1 = (pte_t *) KADDR(PTE_ADDR(kern_pgdir[PDX(va)]));ptep13343,151536
f0101fd6:	8b 0e                	mov    (%esi),%ecxf0101fd63344,151593
f0101fd8:	8b 51 04             	mov    0x4(%ecx),%edxf0101fd83345,151644
f0101fdb:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf0101fdb3346,151698
f0101fe1:	89 d6                	mov    %edx,%esif0101fe13348,151780
f0101fe3:	c1 ee 0c             	shr    $0xc,%esif0101fe33349,151829
f0101fe6:	83 c4 10             	add    $0x10,%espf0101fe63350,151878
f0101fe9:	c7 c0 08 10 18 f0    	mov    $0xf0181008,%eaxf0101fe93351,151928
f0101fef:	3b 30                	cmp    (%eax),%esif0101fef3352,151984
f0101ff1:	0f 83 76 07 00 00    	jae    f010276d <mem_init+0x1626>f0101ff13353,152035
f0101ff7:	81 ea fc ff ff 0f    	sub    $0xffffffc,%edxf0101ff73355,152135
f0101ffd:	39 55 cc             	cmp    %edx,-0x34(%ebp)f0101ffd3356,152190
f0102000:	0f 85 80 07 00 00    	jne    f0102786 <mem_init+0x163f>f01020003357,152246
f0102006:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%ecx)f01020063359,152338
f010200d:	8b 75 d0             	mov    -0x30(%ebp),%esif010200d3361,152410
f0102010:	89 f0                	mov    %esi,%eaxf01020103362,152466
f0102012:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f01020123363,152515
f0102018:	e8 20 eb ff ff       	call   f0100b3d <page2kva>f01020183367,152651
f010201d:	83 ec 04             	sub    $0x4,%espf010201d3368,152710
f0102020:	68 00 10 00 00       	push   $0x1000f01020203369,152759
f0102025:	68 ff 00 00 00       	push   $0xfff01020253370,152806
f010202a:	50                   	push   %eaxf010202a3371,152851
f010202b:	e8 ee 1d 00 00       	call   f0103e1e <memset>f010202b3372,152895
f0102030:	89 34 24             	mov    %esi,(%esp)f01020303374,152969
f0102033:	e8 9f ed ff ff       	call   f0100dd7 <page_free>f01020333375,153020
f0102038:	83 c4 0c             	add    $0xc,%espf01020383377,153113
f010203b:	6a 01                	push   $0x1f010203b3378,153162
f010203d:	6a 00                	push   $0x0f010203d3379,153206
f010203f:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf010203f3380,153250
f0102045:	ff 30                	pushl  (%eax)f01020453381,153306
f0102047:	e8 20 ee ff ff       	call   f0100e6c <pgdir_walk>f01020473382,153352
	ptep = (pte_t *) page2kva(pp0);ptep3383,153413
f010204c:	89 f0                	mov    %esi,%eaxf010204c3384,153446
f010204e:	e8 ea ea ff ff       	call   f0100b3d <page2kva>f010204e3385,153495
f0102053:	89 45 e0             	mov    %eax,-0x20(%ebp)f01020533386,153554
f0102056:	89 c2                	mov    %eax,%edxf01020563387,153610
f0102058:	05 00 10 00 00       	add    $0x1000,%eaxf01020583388,153659
f010205d:	83 c4 10             	add    $0x10,%espf010205d3389,153711
f0102060:	8b 75 d4             	mov    -0x2c(%ebp),%esif01020603390,153761
f0102063:	f6 02 01             	testb  $0x1,(%edx)f01020633393,153880
f0102066:	0f 85 39 07 00 00    	jne    f01027a5 <mem_init+0x165e>f01020663394,153931
f010206c:	83 c2 04             	add    $0x4,%edxf010206c3395,153997
f010206f:	39 d0                	cmp    %edx,%eaxf010206f3397,154075
f0102071:	75 f0                	jne    f0102063 <mem_init+0xf1c>f01020713398,154124
f0102073:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf01020733400,154209
f0102079:	8b 00                	mov    (%eax),%eaxf01020793401,154265
f010207b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f010207b3402,154316
f0102081:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01020813404,154385
f0102084:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)f01020843405,154441
	page_free_list = fl;page_free_list3408,154520
f010208a:	8b 4d c4             	mov    -0x3c(%ebp),%ecxf010208a3409,154542
f010208d:	89 8b 20 23 00 00    	mov    %ecx,0x2320(%ebx)f010208d3410,154598
f0102093:	83 ec 0c             	sub    $0xc,%espf01020933414,154700
f0102096:	50                   	push   %eaxf01020963415,154749
f0102097:	e8 3b ed ff ff       	call   f0100dd7 <page_free>f01020973416,154793
f010209c:	89 3c 24             	mov    %edi,(%esp)f010209c3418,154870
f010209f:	e8 33 ed ff ff       	call   f0100dd7 <page_free>f010209f3419,154921
f01020a4:	89 34 24             	mov    %esi,(%esp)f01020a43421,154998
f01020a7:	e8 2b ed ff ff       	call   f0100dd7 <page_free>f01020a73422,155049
f01020ac:	8d 83 34 71 f8 ff    	lea    -0x78ecc(%ebx),%eaxf01020ac3425,155149
f01020b2:	89 04 24             	mov    %eax,(%esp)f01020b23426,155208
f01020b5:	e8 8a 0d 00 00       	call   f0102e44 <cprintf>f01020b53427,155259
f01020ba:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf01020ba3429,155384
f01020c0:	8b 00                	mov    (%eax),%eaxf01020c03430,155440
f01020c2:	83 c4 10             	add    $0x10,%espf01020c23432,155522
f01020c5:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01020c53433,155572
f01020ca:	0f 87 f4 06 00 00    	ja     f01027c4 <mem_init+0x167d>f01020ca3434,155628
f01020d0:	50                   	push   %eaxf01020d03436,155760
f01020d1:	8d 83 1c 69 f8 ff    	lea    -0x796e4(%ebx),%eaxf01020d13437,155804
f01020d7:	50                   	push   %eaxf01020d73438,155863
f01020d8:	68 bd 00 00 00       	push   $0xbdf01020d83439,155907
f01020dd:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01020dd3440,155952
f01020e3:	50                   	push   %eaxf01020e33441,156011
f01020e4:	e8 c8 df ff ff       	call   f01000b1 <_panic>f01020e43442,156055
f01020e9:	8d 83 5d 70 f8 ff    	lea    -0x78fa3(%ebx),%eaxf01020e93444,156133
f01020ef:	50                   	push   %eaxf01020ef3445,156192
f01020f0:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01020f03446,156236
f01020f6:	50                   	push   %eaxf01020f63447,156295
f01020f7:	68 c8 02 00 00       	push   $0x2c8f01020f73448,156339
f01020fc:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01020fc3449,156385
f0102102:	50                   	push   %eaxf01021023450,156444
f0102103:	e8 a9 df ff ff       	call   f01000b1 <_panic>f01021033451,156488
f0102108:	8d 83 6b 6f f8 ff    	lea    -0x79095(%ebx),%eaxf01021083453,156577
f010210e:	50                   	push   %eaxf010210e3454,156636
f010210f:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010210f3455,156680
f0102115:	50                   	push   %eaxf01021153456,156739
f0102116:	68 26 03 00 00       	push   $0x326f01021163457,156783
f010211b:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010211b3458,156829
f0102121:	50                   	push   %eaxf01021213459,156888
f0102122:	e8 8a df ff ff       	call   f01000b1 <_panic>f01021223460,156932
f0102127:	8d 83 81 6f f8 ff    	lea    -0x7907f(%ebx),%eaxf01021273462,157021
f010212d:	50                   	push   %eaxf010212d3463,157080
f010212e:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010212e3464,157124
f0102134:	50                   	push   %eaxf01021343465,157183
f0102135:	68 27 03 00 00       	push   $0x327f01021353466,157227
f010213a:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010213a3467,157273
f0102140:	50                   	push   %eaxf01021403468,157332
f0102141:	e8 6b df ff ff       	call   f01000b1 <_panic>f01021413469,157376
f0102146:	8d 83 97 6f f8 ff    	lea    -0x79069(%ebx),%eaxf01021463471,157465
f010214c:	50                   	push   %eaxf010214c3472,157524
f010214d:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010214d3473,157568
f0102153:	50                   	push   %eaxf01021533474,157627
f0102154:	68 28 03 00 00       	push   $0x328f01021543475,157671
f0102159:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01021593476,157717
f010215f:	50                   	push   %eaxf010215f3477,157776
f0102160:	e8 4c df ff ff       	call   f01000b1 <_panic>f01021603478,157820
f0102165:	8d 83 ad 6f f8 ff    	lea    -0x79053(%ebx),%eaxf01021653480,157905
f010216b:	50                   	push   %eaxf010216b3481,157964
f010216c:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010216c3482,158008
f0102172:	50                   	push   %eaxf01021723483,158067
f0102173:	68 2b 03 00 00       	push   $0x32bf01021733484,158111
f0102178:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01021783485,158157
f010217e:	50                   	push   %eaxf010217e3486,158216
f010217f:	e8 2d df ff ff       	call   f01000b1 <_panic>f010217f3487,158260
f0102184:	8d 83 28 6a f8 ff    	lea    -0x795d8(%ebx),%eaxf01021843489,158359
f010218a:	50                   	push   %eaxf010218a3490,158418
f010218b:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010218b3491,158462
f0102191:	50                   	push   %eaxf01021913492,158521
f0102192:	68 2c 03 00 00       	push   $0x32cf01021923493,158565
f0102197:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01021973494,158611
f010219d:	50                   	push   %eaxf010219d3495,158670
f010219e:	e8 0e df ff ff       	call   f01000b1 <_panic>f010219e3496,158714
f01021a3:	8d 83 16 70 f8 ff    	lea    -0x78fea(%ebx),%eaxf01021a33498,158796
f01021a9:	50                   	push   %eaxf01021a93499,158855
f01021aa:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01021aa3500,158899
f01021b0:	50                   	push   %eaxf01021b03501,158958
f01021b1:	68 33 03 00 00       	push   $0x333f01021b13502,159002
f01021b6:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01021b63503,159048
f01021bc:	50                   	push   %eaxf01021bc3504,159107
f01021bd:	e8 ef de ff ff       	call   f01000b1 <_panic>f01021bd3505,159151
f01021c2:	8d 83 68 6a f8 ff    	lea    -0x79598(%ebx),%eaxf01021c23507,159271
f01021c8:	50                   	push   %eaxf01021c83508,159330
f01021c9:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01021c93509,159374
f01021cf:	50                   	push   %eaxf01021cf3510,159433
f01021d0:	68 36 03 00 00       	push   $0x336f01021d03511,159477
f01021d5:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01021d53512,159523
f01021db:	50                   	push   %eaxf01021db3513,159582
f01021dc:	e8 d0 de ff ff       	call   f01000b1 <_panic>f01021dc3514,159626
f01021e1:	8d 83 a0 6a f8 ff    	lea    -0x79560(%ebx),%eaxf01021e13516,159738
f01021e7:	50                   	push   %eaxf01021e73517,159797
f01021e8:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01021e83518,159841
f01021ee:	50                   	push   %eaxf01021ee3519,159900
f01021ef:	68 39 03 00 00       	push   $0x339f01021ef3520,159944
f01021f4:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01021f43521,159990
f01021fa:	50                   	push   %eaxf01021fa3522,160049
f01021fb:	e8 b1 de ff ff       	call   f01000b1 <_panic>f01021fb3523,160093
f0102200:	8d 83 d0 6a f8 ff    	lea    -0x79530(%ebx),%eaxf01022003525,160206
f0102206:	50                   	push   %eaxf01022063526,160265
f0102207:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022073527,160309
f010220d:	50                   	push   %eaxf010220d3528,160368
f010220e:	68 3d 03 00 00       	push   $0x33df010220e3529,160412
f0102213:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01022133530,160458
f0102219:	50                   	push   %eaxf01022193531,160517
f010221a:	e8 92 de ff ff       	call   f01000b1 <_panic>f010221a3532,160561
f010221f:	8d 83 00 6b f8 ff    	lea    -0x79500(%ebx),%eaxf010221f3534,160668
f0102225:	50                   	push   %eaxf01022253535,160727
f0102226:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022263536,160771
f010222c:	50                   	push   %eaxf010222c3537,160830
f010222d:	68 3e 03 00 00       	push   $0x33ef010222d3538,160874
f0102232:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01022323539,160920
f0102238:	50                   	push   %eaxf01022383540,160979
f0102239:	e8 73 de ff ff       	call   f01000b1 <_panic>f01022393541,161023
f010223e:	8d 83 28 6b f8 ff    	lea    -0x794d8(%ebx),%eaxf010223e3543,161135
f0102244:	50                   	push   %eaxf01022443544,161194
f0102245:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022453545,161238
f010224b:	50                   	push   %eaxf010224b3546,161297
f010224c:	68 3f 03 00 00       	push   $0x33ff010224c3547,161341
f0102251:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01022513548,161387
f0102257:	50                   	push   %eaxf01022573549,161446
f0102258:	e8 54 de ff ff       	call   f01000b1 <_panic>f01022583550,161490
f010225d:	8d 83 68 70 f8 ff    	lea    -0x78f98(%ebx),%eaxf010225d3552,161574
f0102263:	50                   	push   %eaxf01022633553,161633
f0102264:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022643554,161677
f010226a:	50                   	push   %eaxf010226a3555,161736
f010226b:	68 40 03 00 00       	push   $0x340f010226b3556,161780
f0102270:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01022703557,161826
f0102276:	50                   	push   %eaxf01022763558,161885
f0102277:	e8 35 de ff ff       	call   f01000b1 <_panic>f01022773559,161929
f010227c:	8d 83 79 70 f8 ff    	lea    -0x78f87(%ebx),%eaxf010227c3561,162013
f0102282:	50                   	push   %eaxf01022823562,162072
f0102283:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022833563,162116
f0102289:	50                   	push   %eaxf01022893564,162175
f010228a:	68 41 03 00 00       	push   $0x341f010228a3565,162219
f010228f:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010228f3566,162265
f0102295:	50                   	push   %eaxf01022953567,162324
f0102296:	e8 16 de ff ff       	call   f01000b1 <_panic>f01022963568,162368
f010229b:	8d 83 58 6b f8 ff    	lea    -0x794a8(%ebx),%eaxf010229b3570,162492
f01022a1:	50                   	push   %eaxf01022a13571,162551
f01022a2:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022a23572,162595
f01022a8:	50                   	push   %eaxf01022a83573,162654
f01022a9:	68 44 03 00 00       	push   $0x344f01022a93574,162698
f01022ae:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01022ae3575,162744
f01022b4:	50                   	push   %eaxf01022b43576,162803
f01022b5:	e8 f7 dd ff ff       	call   f01000b1 <_panic>f01022b53577,162847
f01022ba:	8d 83 94 6b f8 ff    	lea    -0x7946c(%ebx),%eaxf01022ba3579,162962
f01022c0:	50                   	push   %eaxf01022c03580,163021
f01022c1:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022c13581,163065
f01022c7:	50                   	push   %eaxf01022c73582,163124
f01022c8:	68 45 03 00 00       	push   $0x345f01022c83583,163168
f01022cd:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01022cd3584,163214
f01022d3:	50                   	push   %eaxf01022d33585,163273
f01022d4:	e8 d8 dd ff ff       	call   f01000b1 <_panic>f01022d43586,163317
f01022d9:	8d 83 16 70 f8 ff    	lea    -0x78fea(%ebx),%eaxf01022d93588,163399
f01022df:	50                   	push   %eaxf01022df3589,163458
f01022e0:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022e03590,163502
f01022e6:	50                   	push   %eaxf01022e63591,163561
f01022e7:	68 48 03 00 00       	push   $0x348f01022e73592,163605
f01022ec:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01022ec3593,163651
f01022f2:	50                   	push   %eaxf01022f23594,163710
f01022f3:	e8 b9 dd ff ff       	call   f01000b1 <_panic>f01022f33595,163754
f01022f8:	8d 83 58 6b f8 ff    	lea    -0x794a8(%ebx),%eaxf01022f83597,163878
f01022fe:	50                   	push   %eaxf01022fe3598,163937
f01022ff:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01022ff3599,163981
f0102305:	50                   	push   %eaxf01023053600,164040
f0102306:	68 4b 03 00 00       	push   $0x34bf01023063601,164084
f010230b:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010230b3602,164130
f0102311:	50                   	push   %eaxf01023113603,164189
f0102312:	e8 9a dd ff ff       	call   f01000b1 <_panic>f01023123604,164233
f0102317:	8d 83 94 6b f8 ff    	lea    -0x7946c(%ebx),%eaxf01023173606,164348
f010231d:	50                   	push   %eaxf010231d3607,164407
f010231e:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010231e3608,164451
f0102324:	50                   	push   %eaxf01023243609,164510
f0102325:	68 4c 03 00 00       	push   $0x34cf01023253610,164554
f010232a:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010232a3611,164600
f0102330:	50                   	push   %eaxf01023303612,164659
f0102331:	e8 7b dd ff ff       	call   f01000b1 <_panic>f01023313613,164703
f0102336:	8d 83 8a 70 f8 ff    	lea    -0x78f76(%ebx),%eaxf01023363615,164787
f010233c:	50                   	push   %eaxf010233c3616,164846
f010233d:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010233d3617,164890
f0102343:	50                   	push   %eaxf01023433618,164949
f0102344:	68 4d 03 00 00       	push   $0x34df01023443619,164993
f0102349:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01023493620,165039
f010234f:	50                   	push   %eaxf010234f3621,165098
f0102350:	e8 5c dd ff ff       	call   f01000b1 <_panic>f01023503622,165142
f0102355:	8d 83 16 70 f8 ff    	lea    -0x78fea(%ebx),%eaxf01023553624,165224
f010235b:	50                   	push   %eaxf010235b3625,165283
f010235c:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010235c3626,165327
f0102362:	50                   	push   %eaxf01023623627,165386
f0102363:	68 51 03 00 00       	push   $0x351f01023633628,165430
f0102368:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01023683629,165476
f010236e:	50                   	push   %eaxf010236e3630,165535
f010236f:	e8 3d dd ff ff       	call   f01000b1 <_panic>f010236f3631,165579
f0102374:	50                   	push   %eaxf01023743633,165700
f0102375:	8d 83 10 68 f8 ff    	lea    -0x797f0(%ebx),%eaxf01023753634,165744
f010237b:	50                   	push   %eaxf010237b3635,165803
f010237c:	68 54 03 00 00       	push   $0x354f010237c3636,165847
f0102381:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01023813637,165893
f0102387:	50                   	push   %eaxf01023873638,165952
f0102388:	e8 24 dd ff ff       	call   f01000b1 <_panic>f01023883639,165996
f010238d:	8d 83 c4 6b f8 ff    	lea    -0x7943c(%ebx),%eaxf010238d3641,166124
f0102393:	50                   	push   %eaxf01023933642,166183
f0102394:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01023943643,166227
f010239a:	50                   	push   %eaxf010239a3644,166286
f010239b:	68 55 03 00 00       	push   $0x355f010239b3645,166330
f01023a0:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01023a03646,166376
f01023a6:	50                   	push   %eaxf01023a63647,166435
f01023a7:	e8 05 dd ff ff       	call   f01000b1 <_panic>f01023a73648,166479
f01023ac:	8d 83 04 6c f8 ff    	lea    -0x793fc(%ebx),%eaxf01023ac3650,166609
f01023b2:	50                   	push   %eaxf01023b23651,166668
f01023b3:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01023b33652,166712
f01023b9:	50                   	push   %eaxf01023b93653,166771
f01023ba:	68 58 03 00 00       	push   $0x358f01023ba3654,166815
f01023bf:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01023bf3655,166861
f01023c5:	50                   	push   %eaxf01023c53656,166920
f01023c6:	e8 e6 dc ff ff       	call   f01000b1 <_panic>f01023c63657,166964
f01023cb:	8d 83 94 6b f8 ff    	lea    -0x7946c(%ebx),%eaxf01023cb3659,167079
f01023d1:	50                   	push   %eaxf01023d13660,167138
f01023d2:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01023d23661,167182
f01023d8:	50                   	push   %eaxf01023d83662,167241
f01023d9:	68 59 03 00 00       	push   $0x359f01023d93663,167285
f01023de:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01023de3664,167331
f01023e4:	50                   	push   %eaxf01023e43665,167390
f01023e5:	e8 c7 dc ff ff       	call   f01000b1 <_panic>f01023e53666,167434
f01023ea:	8d 83 8a 70 f8 ff    	lea    -0x78f76(%ebx),%eaxf01023ea3668,167518
f01023f0:	50                   	push   %eaxf01023f03669,167577
f01023f1:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01023f13670,167621
f01023f7:	50                   	push   %eaxf01023f73671,167680
f01023f8:	68 5a 03 00 00       	push   $0x35af01023f83672,167724
f01023fd:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01023fd3673,167770
f0102403:	50                   	push   %eaxf01024033674,167829
f0102404:	e8 a8 dc ff ff       	call   f01000b1 <_panic>f01024043675,167873
f0102409:	8d 83 44 6c f8 ff    	lea    -0x793bc(%ebx),%eaxf01024093677,167991
f010240f:	50                   	push   %eaxf010240f3678,168050
f0102410:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01024103679,168094
f0102416:	50                   	push   %eaxf01024163680,168153
f0102417:	68 5b 03 00 00       	push   $0x35bf01024173681,168197
f010241c:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010241c3682,168243
f0102422:	50                   	push   %eaxf01024223683,168302
f0102423:	e8 89 dc ff ff       	call   f01000b1 <_panic>f01024233684,168346
f0102428:	8d 83 9b 70 f8 ff    	lea    -0x78f65(%ebx),%eaxf01024283686,168435
f010242e:	50                   	push   %eaxf010242e3687,168494
f010242f:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010242f3688,168538
f0102435:	50                   	push   %eaxf01024353689,168597
f0102436:	68 5c 03 00 00       	push   $0x35cf01024363690,168641
f010243b:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010243b3691,168687
f0102441:	50                   	push   %eaxf01024413692,168746
f0102442:	e8 6a dc ff ff       	call   f01000b1 <_panic>f01024423693,168790
f0102447:	8d 83 58 6b f8 ff    	lea    -0x794a8(%ebx),%eaxf01024473695,168914
f010244d:	50                   	push   %eaxf010244d3696,168973
f010244e:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010244e3697,169017
f0102454:	50                   	push   %eaxf01024543698,169076
f0102455:	68 5f 03 00 00       	push   $0x35ff01024553699,169120
f010245a:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010245a3700,169166
f0102460:	50                   	push   %eaxf01024603701,169225
f0102461:	e8 4b dc ff ff       	call   f01000b1 <_panic>f01024613702,169269
f0102466:	8d 83 78 6c f8 ff    	lea    -0x79388(%ebx),%eaxf01024663704,169387
f010246c:	50                   	push   %eaxf010246c3705,169446
f010246d:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010246d3706,169490
f0102473:	50                   	push   %eaxf01024733707,169549
f0102474:	68 60 03 00 00       	push   $0x360f01024743708,169593
f0102479:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01024793709,169639
f010247f:	50                   	push   %eaxf010247f3710,169698
f0102480:	e8 2c dc ff ff       	call   f01000b1 <_panic>f01024803711,169742
f0102485:	8d 83 ac 6c f8 ff    	lea    -0x79354(%ebx),%eaxf01024853713,169863
f010248b:	50                   	push   %eaxf010248b3714,169922
f010248c:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010248c3715,169966
f0102492:	50                   	push   %eaxf01024923716,170025
f0102493:	68 61 03 00 00       	push   $0x361f01024933717,170069
f0102498:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01024983718,170115
f010249e:	50                   	push   %eaxf010249e3719,170174
f010249f:	e8 0d dc ff ff       	call   f01000b1 <_panic>f010249f3720,170218
f01024a4:	8d 83 e4 6c f8 ff    	lea    -0x7931c(%ebx),%eaxf01024a43722,170341
f01024aa:	50                   	push   %eaxf01024aa3723,170400
f01024ab:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01024ab3724,170444
f01024b1:	50                   	push   %eaxf01024b13725,170503
f01024b2:	68 64 03 00 00       	push   $0x364f01024b23726,170547
f01024b7:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01024b73727,170593
f01024bd:	50                   	push   %eaxf01024bd3728,170652
f01024be:	e8 ee db ff ff       	call   f01000b1 <_panic>f01024be3729,170696
f01024c3:	8d 83 1c 6d f8 ff    	lea    -0x792e4(%ebx),%eaxf01024c33731,170820
f01024c9:	50                   	push   %eaxf01024c93732,170879
f01024ca:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01024ca3733,170923
f01024d0:	50                   	push   %eaxf01024d03734,170982
f01024d1:	68 67 03 00 00       	push   $0x367f01024d13735,171026
f01024d6:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01024d63736,171072
f01024dc:	50                   	push   %eaxf01024dc3737,171131
f01024dd:	e8 cf db ff ff       	call   f01000b1 <_panic>f01024dd3738,171175
f01024e2:	8d 83 ac 6c f8 ff    	lea    -0x79354(%ebx),%eaxf01024e23740,171296
f01024e8:	50                   	push   %eaxf01024e83741,171355
f01024e9:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01024e93742,171399
f01024ef:	50                   	push   %eaxf01024ef3743,171458
f01024f0:	68 68 03 00 00       	push   $0x368f01024f03744,171502
f01024f5:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01024f53745,171548
f01024fb:	50                   	push   %eaxf01024fb3746,171607
f01024fc:	e8 b0 db ff ff       	call   f01000b1 <_panic>f01024fc3747,171651
f0102501:	8d 83 58 6d f8 ff    	lea    -0x792a8(%ebx),%eaxf01025013749,171761
f0102507:	50                   	push   %eaxf01025073750,171820
f0102508:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025083751,171864
f010250e:	50                   	push   %eaxf010250e3752,171923
f010250f:	68 6b 03 00 00       	push   $0x36bf010250f3753,171967
f0102514:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025143754,172013
f010251a:	50                   	push   %eaxf010251a3755,172072
f010251b:	e8 91 db ff ff       	call   f01000b1 <_panic>f010251b3756,172116
f0102520:	8d 83 84 6d f8 ff    	lea    -0x7927c(%ebx),%eaxf01025203758,172231
f0102526:	50                   	push   %eaxf01025263759,172290
f0102527:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025273760,172334
f010252d:	50                   	push   %eaxf010252d3761,172393
f010252e:	68 6c 03 00 00       	push   $0x36cf010252e3762,172437
f0102533:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025333763,172483
f0102539:	50                   	push   %eaxf01025393764,172542
f010253a:	e8 72 db ff ff       	call   f01000b1 <_panic>f010253a3765,172586
f010253f:	8d 83 b1 70 f8 ff    	lea    -0x78f4f(%ebx),%eaxf010253f3767,172670
f0102545:	50                   	push   %eaxf01025453768,172729
f0102546:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025463769,172773
f010254c:	50                   	push   %eaxf010254c3770,172832
f010254d:	68 6e 03 00 00       	push   $0x36ef010254d3771,172876
f0102552:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025523772,172922
f0102558:	50                   	push   %eaxf01025583773,172981
f0102559:	e8 53 db ff ff       	call   f01000b1 <_panic>f01025593774,173025
f010255e:	8d 83 c2 70 f8 ff    	lea    -0x78f3e(%ebx),%eaxf010255e3776,173109
f0102564:	50                   	push   %eaxf01025643777,173168
f0102565:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025653778,173212
f010256b:	50                   	push   %eaxf010256b3779,173271
f010256c:	68 6f 03 00 00       	push   $0x36ff010256c3780,173315
f0102571:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025713781,173361
f0102577:	50                   	push   %eaxf01025773782,173420
f0102578:	e8 34 db ff ff       	call   f01000b1 <_panic>f01025783783,173464
f010257d:	8d 83 b4 6d f8 ff    	lea    -0x7924c(%ebx),%eaxf010257d3785,173565
f0102583:	50                   	push   %eaxf01025833786,173624
f0102584:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025843787,173668
f010258a:	50                   	push   %eaxf010258a3788,173727
f010258b:	68 72 03 00 00       	push   $0x372f010258b3789,173771
f0102590:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025903790,173817
f0102596:	50                   	push   %eaxf01025963791,173876
f0102597:	e8 15 db ff ff       	call   f01000b1 <_panic>f01025973792,173920
f010259c:	8d 83 d8 6d f8 ff    	lea    -0x79228(%ebx),%eaxf010259c3794,174022
f01025a2:	50                   	push   %eaxf01025a23795,174081
f01025a3:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025a33796,174125
f01025a9:	50                   	push   %eaxf01025a93797,174184
f01025aa:	68 76 03 00 00       	push   $0x376f01025aa3798,174228
f01025af:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025af3799,174274
f01025b5:	50                   	push   %eaxf01025b53800,174333
f01025b6:	e8 f6 da ff ff       	call   f01000b1 <_panic>f01025b63801,174377
f01025bb:	8d 83 84 6d f8 ff    	lea    -0x7927c(%ebx),%eaxf01025bb3803,174492
f01025c1:	50                   	push   %eaxf01025c13804,174551
f01025c2:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025c23805,174595
f01025c8:	50                   	push   %eaxf01025c83806,174654
f01025c9:	68 77 03 00 00       	push   $0x377f01025c93807,174698
f01025ce:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025ce3808,174744
f01025d4:	50                   	push   %eaxf01025d43809,174803
f01025d5:	e8 d7 da ff ff       	call   f01000b1 <_panic>f01025d53810,174847
f01025da:	8d 83 68 70 f8 ff    	lea    -0x78f98(%ebx),%eaxf01025da3812,174931
f01025e0:	50                   	push   %eaxf01025e03813,174990
f01025e1:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01025e13814,175034
f01025e7:	50                   	push   %eaxf01025e73815,175093
f01025e8:	68 78 03 00 00       	push   $0x378f01025e83816,175137
f01025ed:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01025ed3817,175183
f01025f3:	50                   	push   %eaxf01025f33818,175242
f01025f4:	e8 b8 da ff ff       	call   f01000b1 <_panic>f01025f43819,175286
f01025f9:	8d 83 c2 70 f8 ff    	lea    -0x78f3e(%ebx),%eaxf01025f93821,175370
f01025ff:	50                   	push   %eaxf01025ff3822,175429
f0102600:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01026003823,175473
f0102606:	50                   	push   %eaxf01026063824,175532
f0102607:	68 79 03 00 00       	push   $0x379f01026073825,175576
f010260c:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010260c3826,175622
f0102612:	50                   	push   %eaxf01026123827,175681
f0102613:	e8 99 da ff ff       	call   f01000b1 <_panic>f01026133828,175725
f0102618:	8d 83 fc 6d f8 ff    	lea    -0x79204(%ebx),%eaxf01026183830,175845
f010261e:	50                   	push   %eaxf010261e3831,175904
f010261f:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010261f3832,175948
f0102625:	50                   	push   %eaxf01026253833,176007
f0102626:	68 7c 03 00 00       	push   $0x37cf01026263834,176051
f010262b:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010262b3835,176097
f0102631:	50                   	push   %eaxf01026313836,176156
f0102632:	e8 7a da ff ff       	call   f01000b1 <_panic>f01026323837,176200
f0102637:	8d 83 d3 70 f8 ff    	lea    -0x78f2d(%ebx),%eaxf01026373839,176279
f010263d:	50                   	push   %eaxf010263d3840,176338
f010263e:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010263e3841,176382
f0102644:	50                   	push   %eaxf01026443842,176441
f0102645:	68 7d 03 00 00       	push   $0x37df01026453843,176485
f010264a:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010264a3844,176531
f0102650:	50                   	push   %eaxf01026503845,176590
f0102651:	e8 5b da ff ff       	call   f01000b1 <_panic>f01026513846,176634
f0102656:	8d 83 df 70 f8 ff    	lea    -0x78f21(%ebx),%eaxf01026563848,176722
f010265c:	50                   	push   %eaxf010265c3849,176781
f010265d:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010265d3850,176825
f0102663:	50                   	push   %eaxf01026633851,176884
f0102664:	68 7e 03 00 00       	push   $0x37ef01026643852,176928
f0102669:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01026693853,176974
f010266f:	50                   	push   %eaxf010266f3854,177033
f0102670:	e8 3c da ff ff       	call   f01000b1 <_panic>f01026703855,177077
f0102675:	8d 83 d8 6d f8 ff    	lea    -0x79228(%ebx),%eaxf01026753857,177179
f010267b:	50                   	push   %eaxf010267b3858,177238
f010267c:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010267c3859,177282
f0102682:	50                   	push   %eaxf01026823860,177341
f0102683:	68 82 03 00 00       	push   $0x382f01026833861,177385
f0102688:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01026883862,177431
f010268e:	50                   	push   %eaxf010268e3863,177490
f010268f:	e8 1d da ff ff       	call   f01000b1 <_panic>f010268f3864,177534
f0102694:	8d 83 34 6e f8 ff    	lea    -0x791cc(%ebx),%eaxf01026943866,177639
f010269a:	50                   	push   %eaxf010269a3867,177698
f010269b:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010269b3868,177742
f01026a1:	50                   	push   %eaxf01026a13869,177801
f01026a2:	68 83 03 00 00       	push   $0x383f01026a23870,177845
f01026a7:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01026a73871,177891
f01026ad:	50                   	push   %eaxf01026ad3872,177950
f01026ae:	e8 fe d9 ff ff       	call   f01000b1 <_panic>f01026ae3873,177994
f01026b3:	8d 83 f4 70 f8 ff    	lea    -0x78f0c(%ebx),%eaxf01026b33875,178078
f01026b9:	50                   	push   %eaxf01026b93876,178137
f01026ba:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01026ba3877,178181
f01026c0:	50                   	push   %eaxf01026c03878,178240
f01026c1:	68 84 03 00 00       	push   $0x384f01026c13879,178284
f01026c6:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01026c63880,178330
f01026cc:	50                   	push   %eaxf01026cc3881,178389
f01026cd:	e8 df d9 ff ff       	call   f01000b1 <_panic>f01026cd3882,178433
f01026d2:	8d 83 c2 70 f8 ff    	lea    -0x78f3e(%ebx),%eaxf01026d23884,178517
f01026d8:	50                   	push   %eaxf01026d83885,178576
f01026d9:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01026d93886,178620
f01026df:	50                   	push   %eaxf01026df3887,178679
f01026e0:	68 85 03 00 00       	push   $0x385f01026e03888,178723
f01026e5:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01026e53889,178769
f01026eb:	50                   	push   %eaxf01026eb3890,178828
f01026ec:	e8 c0 d9 ff ff       	call   f01000b1 <_panic>f01026ec3891,178872
f01026f1:	8d 83 5c 6e f8 ff    	lea    -0x791a4(%ebx),%eaxf01026f13893,178973
f01026f7:	50                   	push   %eaxf01026f73894,179032
f01026f8:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01026f83895,179076
f01026fe:	50                   	push   %eaxf01026fe3896,179135
f01026ff:	68 88 03 00 00       	push   $0x388f01026ff3897,179179
f0102704:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01027043898,179225
f010270a:	50                   	push   %eaxf010270a3899,179284
f010270b:	e8 a1 d9 ff ff       	call   f01000b1 <_panic>f010270b3900,179328
f0102710:	8d 83 16 70 f8 ff    	lea    -0x78fea(%ebx),%eaxf01027103902,179410
f0102716:	50                   	push   %eaxf01027163903,179469
f0102717:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01027173904,179513
f010271d:	50                   	push   %eaxf010271d3905,179572
f010271e:	68 8b 03 00 00       	push   $0x38bf010271e3906,179616
f0102723:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01027233907,179662
f0102729:	50                   	push   %eaxf01027293908,179721
f010272a:	e8 82 d9 ff ff       	call   f01000b1 <_panic>f010272a3909,179765
f010272f:	8d 83 00 6b f8 ff    	lea    -0x79500(%ebx),%eaxf010272f3911,179872
f0102735:	50                   	push   %eaxf01027353912,179931
f0102736:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01027363913,179975
f010273c:	50                   	push   %eaxf010273c3914,180034
f010273d:	68 8e 03 00 00       	push   $0x38ef010273d3915,180078
f0102742:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01027423916,180124
f0102748:	50                   	push   %eaxf01027483917,180183
f0102749:	e8 63 d9 ff ff       	call   f01000b1 <_panic>f01027493918,180227
f010274e:	8d 83 79 70 f8 ff    	lea    -0x78f87(%ebx),%eaxf010274e3920,180311
f0102754:	50                   	push   %eaxf01027543921,180370
f0102755:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01027553922,180414
f010275b:	50                   	push   %eaxf010275b3923,180473
f010275c:	68 90 03 00 00       	push   $0x390f010275c3924,180517
f0102761:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01027613925,180563
f0102767:	50                   	push   %eaxf01027673926,180622
f0102768:	e8 44 d9 ff ff       	call   f01000b1 <_panic>f01027683927,180666
f010276d:	52                   	push   %edxf010276d3928,180723
f010276e:	8d 83 10 68 f8 ff    	lea    -0x797f0(%ebx),%eaxf010276e3929,180767
f0102774:	50                   	push   %eaxf01027743930,180826
f0102775:	68 97 03 00 00       	push   $0x397f01027753931,180870
f010277a:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf010277a3932,180916
f0102780:	50                   	push   %eaxf01027803933,180975
f0102781:	e8 2b d9 ff ff       	call   f01000b1 <_panic>f01027813934,181019
f0102786:	8d 83 05 71 f8 ff    	lea    -0x78efb(%ebx),%eaxf01027863936,181110
f010278c:	50                   	push   %eaxf010278c3937,181169
f010278d:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf010278d3938,181213
f0102793:	50                   	push   %eaxf01027933939,181272
f0102794:	68 98 03 00 00       	push   $0x398f01027943940,181316
f0102799:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01027993941,181362
f010279f:	50                   	push   %eaxf010279f3942,181421
f01027a0:	e8 0c d9 ff ff       	call   f01000b1 <_panic>f01027a03943,181465
f01027a5:	8d 83 1d 71 f8 ff    	lea    -0x78ee3(%ebx),%eaxf01027a53945,181556
f01027ab:	50                   	push   %eaxf01027ab3946,181615
f01027ac:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01027ac3947,181659
f01027b2:	50                   	push   %eaxf01027b23948,181718
f01027b3:	68 a2 03 00 00       	push   $0x3a2f01027b33949,181762
f01027b8:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01027b83950,181808
f01027be:	50                   	push   %eaxf01027be3951,181867
f01027bf:	e8 ed d8 ff ff       	call   f01000b1 <_panic>f01027bf3952,181911
f01027c4:	83 ec 08             	sub    $0x8,%espf01027c43954,182035
f01027c7:	6a 04                	push   $0x4f01027c73955,182084
f01027c9:	05 00 00 00 10       	add    $0x10000000,%eaxf01027c93957,182164
f01027ce:	50                   	push   %eaxf01027ce3958,182220
f01027cf:	b9 00 00 40 00       	mov    $0x400000,%ecxf01027cf3959,182264
f01027d4:	ba 00 00 00 ef       	mov    $0xef000000,%edxf01027d43960,182318
f01027d9:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf01027d93961,182374
f01027df:	8b 00                	mov    (%eax),%eaxf01027df3962,182430
f01027e1:	e8 32 e7 ff ff       	call   f0100f18 <boot_map_region>f01027e13963,182481
f01027e6:	c7 c0 48 03 18 f0    	mov    $0xf0180348,%eaxf01027e63965,182612
f01027ec:	8b 00                	mov    (%eax),%eaxf01027ec3966,182668
f01027ee:	83 c4 10             	add    $0x10,%espf01027ee3968,182750
f01027f1:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01027f13969,182800
f01027f6:	77 19                	ja     f0102811 <mem_init+0x16ca>f01027f63970,182856
f01027f8:	50                   	push   %eaxf01027f83972,182988
f01027f9:	8d 83 1c 69 f8 ff    	lea    -0x796e4(%ebx),%eaxf01027f93973,183032
f01027ff:	50                   	push   %eaxf01027ff3974,183091
f0102800:	68 c6 00 00 00       	push   $0xc6f01028003975,183135
f0102805:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01028053976,183180
f010280b:	50                   	push   %eaxf010280b3977,183239
f010280c:	e8 a0 d8 ff ff       	call   f01000b1 <_panic>f010280c3978,183283
f0102811:	83 ec 08             	sub    $0x8,%espf01028113979,183340
f0102814:	6a 04                	push   $0x4f01028143980,183389
f0102816:	05 00 00 00 10       	add    $0x10000000,%eaxf01028163982,183469
f010281b:	50                   	push   %eaxf010281b3983,183525
f010281c:	b9 00 00 40 00       	mov    $0x400000,%ecxf010281c3984,183569
f0102821:	ba 00 00 c0 ee       	mov    $0xeec00000,%edxf01028213985,183623
f0102826:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf01028263986,183679
f010282c:	8b 00                	mov    (%eax),%eaxf010282c3987,183735
f010282e:	e8 e5 e6 ff ff       	call   f0100f18 <boot_map_region>f010282e3988,183786
f0102833:	c7 c0 00 00 11 f0    	mov    $0xf0110000,%eaxf01028333990,183883
f0102839:	83 c4 10             	add    $0x10,%espf01028393991,183939
f010283c:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf010283c3992,183989
f0102841:	77 19                	ja     f010285c <mem_init+0x1715>f01028413993,184045
f0102843:	50                   	push   %eaxf01028433995,184177
f0102844:	8d 83 1c 69 f8 ff    	lea    -0x796e4(%ebx),%eaxf01028443996,184221
f010284a:	50                   	push   %eaxf010284a3997,184280
f010284b:	68 d3 00 00 00       	push   $0xd3f010284b3998,184324
f0102850:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01028503999,184369
f0102856:	50                   	push   %eaxf01028564000,184428
f0102857:	e8 55 d8 ff ff       	call   f01000b1 <_panic>f01028574001,184472
f010285c:	c7 c6 0c 10 18 f0    	mov    $0xf018100c,%esif010285c4003,184616
f0102862:	83 ec 08             	sub    $0x8,%espf01028624004,184672
f0102865:	6a 02                	push   $0x2f01028654005,184721
f0102867:	05 00 00 00 10       	add    $0x10000000,%eaxf01028674007,184801
f010286c:	50                   	push   %eaxf010286c4008,184857
f010286d:	b9 00 80 00 00       	mov    $0x8000,%ecxf010286d4009,184901
f0102872:	ba 00 80 ff ef       	mov    $0xefff8000,%edxf01028724010,184953
f0102877:	8b 06                	mov    (%esi),%eaxf01028774011,185009
f0102879:	e8 9a e6 ff ff       	call   f0100f18 <boot_map_region>f01028794012,185060
f010287e:	8d 83 4d 71 f8 ff    	lea    -0x78eb3(%ebx),%eaxf010287e4014,185149
f0102884:	89 04 24             	mov    %eax,(%esp)f01028844015,185208
f0102887:	e8 b8 05 00 00       	call   f0102e44 <cprintf>f01028874016,185259
f010288c:	83 c4 08             	add    $0x8,%espf010288c4018,185390
f010288f:	6a 02                	push   $0x2f010288f4019,185439
f0102891:	6a 00                	push   $0x0f01028914020,185483
f0102893:	b9 ff ff ff 0f       	mov    $0xfffffff,%ecxf01028934021,185527
f0102898:	ba 00 00 00 f0       	mov    $0xf0000000,%edxf01028984022,185582
f010289d:	8b 06                	mov    (%esi),%eaxf010289d4023,185638
f010289f:	e8 74 e6 ff ff       	call   f0100f18 <boot_map_region>f010289f4024,185689
f01028a4:	83 c4 0c             	add    $0xc,%espf01028a44026,185771
f01028a7:	8d 83 56 71 f8 ff    	lea    -0x78eaa(%ebx),%eaxf01028a74027,185820
f01028ad:	50                   	push   %eaxf01028ad4028,185879
f01028ae:	68 e0 00 00 00       	push   $0xe0f01028ae4029,185923
f01028b3:	8d 83 7e 6e f8 ff    	lea    -0x79182(%ebx),%eaxf01028b34030,185968
f01028b9:	50                   	push   %eaxf01028b94031,186027
f01028ba:	e8 f2 d7 ff ff       	call   f01000b1 <_panic>f01028ba4032,186071
f01028bf <tlb_invalidate>:f01028bf4034,186129
f01028bf:	55                   	push   %ebpf01028bf4036,186158
f01028c0:	89 e5                	mov    %esp,%ebpf01028c04037,186202
f01028c2:	8b 45 0c             	mov    0xc(%ebp),%eaxf01028c24038,186251
f01028c5:	0f 01 38             	invlpg (%eax)f01028c54039,186305
f01028c8:	5d                   	pop    %ebpf01028c84041,186353
f01028c9:	c3                   	ret    f01028c94042,186397
f01028ca <user_mem_check>:f01028ca4044,186438
f01028ca:	55                   	push   %ebpf01028ca4046,186467
f01028cb:	89 e5                	mov    %esp,%ebpf01028cb4047,186511
f01028cd:	b8 00 00 00 00       	mov    $0x0,%eaxf01028cd4049,186562
f01028d2:	5d                   	pop    %ebpf01028d24050,186611
f01028d3:	c3                   	ret    f01028d34051,186655
f01028d4 <user_mem_assert>:f01028d44053,186696
f01028d4:	55                   	push   %ebpf01028d44055,186726
f01028d5:	89 e5                	mov    %esp,%ebpf01028d54056,186770
f01028d7:	5d                   	pop    %ebpf01028d74058,186821
f01028d8:	c3                   	ret    f01028d84059,186865
f01028d9 <__x86.get_pc_thunk.dx>:f01028d94061,186906
f01028d9:	8b 14 24             	mov    (%esp),%edxf01028d94062,186940
f01028dc:	c3                   	ret    f01028dc4063,186991
f01028dd <__x86.get_pc_thunk.cx>:f01028dd4065,187032
f01028dd:	8b 0c 24             	mov    (%esp),%ecxf01028dd4066,187066
f01028e0:	c3                   	ret    f01028e04067,187117
f01028e1 <__x86.get_pc_thunk.si>:f01028e14069,187158
f01028e1:	8b 34 24             	mov    (%esp),%esif01028e14070,187192
f01028e4:	c3                   	ret    f01028e44071,187243
f01028e5 <__x86.get_pc_thunk.di>:f01028e54073,187284
f01028e5:	8b 3c 24             	mov    (%esp),%edif01028e54074,187318
f01028e8:	c3                   	ret    f01028e84075,187369
f01028e9 <envid2env>:f01028e94077,187410
intint4081,187528
f01028e9:	55                   	push   %ebpf01028e94084,187599
f01028ea:	89 e5                	mov    %esp,%ebpf01028ea4085,187643
f01028ec:	53                   	push   %ebxf01028ec4086,187692
f01028ed:	e8 eb ff ff ff       	call   f01028dd <__x86.get_pc_thunk.cx>f01028ed4087,187736
f01028f2:	81 c1 2a b7 07 00    	add    $0x7b72a,%ecxf01028f24088,187808
f01028f8:	8b 55 08             	mov    0x8(%ebp),%edxf01028f84089,187861
f01028fb:	8b 5d 10             	mov    0x10(%ebp),%ebxf01028fb4090,187915
f01028fe:	85 d2                	test   %edx,%edxf01028fe4095,188060
f0102900:	74 41                	je     f0102943 <envid2env+0x5a>f01029004096,188109
	e = &envs[ENVX(envid)];e4102,188434
f0102902:	89 d0                	mov    %edx,%eaxf01029024103,188459
f0102904:	25 ff 03 00 00       	and    $0x3ff,%eaxf01029044104,188508
f0102909:	8d 04 40             	lea    (%eax,%eax,2),%eaxf01029094105,188559
f010290c:	c1 e0 05             	shl    $0x5,%eaxf010290c4106,188617
f010290f:	03 81 2c 23 00 00    	add    0x232c(%ecx),%eaxf010290f4107,188666
f0102915:	83 78 54 00          	cmpl   $0x0,0x54(%eax)f01029154109,188779
f0102919:	74 3a                	je     f0102955 <envid2env+0x6c>f01029194110,188834
f010291b:	39 50 48             	cmp    %edx,0x48(%eax)f010291b4111,188899
f010291e:	75 35                	jne    f0102955 <envid2env+0x6c>f010291e4112,188954
f0102920:	84 db                	test   %bl,%blf01029204119,189348
f0102922:	74 12                	je     f0102936 <envid2env+0x4d>f01029224120,189395
f0102924:	8b 91 28 23 00 00    	mov    0x2328(%ecx),%edxf01029244121,189460
f010292a:	39 c2                	cmp    %eax,%edxf010292a4122,189517
f010292c:	74 08                	je     f0102936 <envid2env+0x4d>f010292c4123,189566
f010292e:	8b 5a 48             	mov    0x48(%edx),%ebxf010292e4124,189631
f0102931:	39 58 4c             	cmp    %ebx,0x4c(%eax)f01029314125,189686
f0102934:	75 2f                	jne    f0102965 <envid2env+0x7c>f01029344126,189741
f0102936:	8b 5d 0c             	mov    0xc(%ebp),%ebxf01029364132,189866
f0102939:	89 03                	mov    %eax,(%ebx)f01029394133,189920
f010293b:	b8 00 00 00 00       	mov    $0x0,%eaxf010293b4135,189982
f0102940:	5b                   	pop    %ebxf01029404137,190033
f0102941:	5d                   	pop    %ebpf01029414138,190077
f0102942:	c3                   	ret    f01029424139,190121
f0102943:	8b 81 28 23 00 00    	mov    0x2328(%ecx),%eaxf01029434141,190184
f0102949:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01029494142,190241
f010294c:	89 01                	mov    %eax,(%ecx)f010294c4143,190295
f010294e:	b8 00 00 00 00       	mov    $0x0,%eaxf010294e4145,190358
f0102953:	eb eb                	jmp    f0102940 <envid2env+0x57>f01029534146,190407
f0102955:	8b 45 0c             	mov    0xc(%ebp),%eaxf01029554148,190490
f0102958:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f01029584149,190544
f010295e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eaxf010295e4151,190616
f0102963:	eb db                	jmp    f0102940 <envid2env+0x57>f01029634152,190672
f0102965:	8b 45 0c             	mov    0xc(%ebp),%eaxf01029654154,190755
f0102968:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f01029684155,190809
f010296e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eaxf010296e4157,190881
f0102973:	eb cb                	jmp    f0102940 <envid2env+0x57>f01029734158,190937
f0102975 <env_init_percpu>:f01029754160,191003
voidvoid4164,191071
f0102975:	55                   	push   %ebpf01029754167,191100
f0102976:	89 e5                	mov    %esp,%ebpf01029764168,191144
f0102978:	e8 8c dd ff ff       	call   f0100709 <__x86.get_pc_thunk.ax>f01029784169,191193
f010297d:	05 9f b6 07 00       	add    $0x7b69f,%eaxf010297d4170,191265
static inline voidstatic4173,191321
f0102982:	8d 80 e4 1f 00 00    	lea    0x1fe4(%eax),%eaxf01029824177,191396
f0102988:	0f 01 10             	lgdtl  (%eax)f01029884178,191453
f010298b:	b8 23 00 00 00       	mov    $0x23,%eaxf010298b4183,191654
f0102990:	8e e8                	mov    %eax,%gsf01029904184,191704
f0102992:	8e e0                	mov    %eax,%fsf01029924186,191803
f0102994:	b8 10 00 00 00       	mov    $0x10,%eaxf01029944190,192011
f0102999:	8e c0                	mov    %eax,%esf01029994191,192061
f010299b:	8e d8                	mov    %eax,%dsf010299b4193,192158
f010299d:	8e d0                	mov    %eax,%ssf010299d4195,192255
f010299f:	ea a6 29 10 f0 08 00 	ljmp   $0x8,$0xf01029a6f010299f4198,192398
static inline voidstatic4201,192457
f01029a6:	b8 00 00 00 00       	mov    $0x0,%eaxf01029a64205,192537
f01029ab:	0f 00 d0             	lldt   %axf01029ab4206,192586
f01029ae:	5d                   	pop    %ebpf01029ae4211,192730
f01029af:	c3                   	ret    f01029af4212,192774
f01029b0 <env_init>:f01029b04214,192815
f01029b0:	55                   	push   %ebpf01029b04216,192838
f01029b1:	89 e5                	mov    %esp,%ebpf01029b14217,192882
f01029b3:	e8 25 ff ff ff       	call   f01028dd <__x86.get_pc_thunk.cx>f01029b34218,192931
f01029b8:	81 c1 64 b6 07 00    	add    $0x7b664,%ecxf01029b84219,193003
f01029be:	8b 91 2c 23 00 00    	mov    0x232c(%ecx),%edxf01029be4221,193089
f01029c4:	8d 42 60             	lea    0x60(%edx),%eaxf01029c44222,193146
f01029c7:	81 c2 00 80 01 00    	add    $0x18000,%edxf01029c74223,193201
f01029cd:	89 40 e4             	mov    %eax,-0x1c(%eax)f01029cd4224,193254
f01029d0:	83 c0 60             	add    $0x60,%eaxf01029d04225,193310
f01029d3:	39 d0                	cmp    %edx,%eaxf01029d34227,193394
f01029d5:	75 f6                	jne    f01029cd <env_init+0x1d>f01029d54228,193443
	env_free_list = envs;env_free_list4229,193507
f01029d7:	8b 81 2c 23 00 00    	mov    0x232c(%ecx),%eaxf01029d74230,193530
f01029dd:	89 81 30 23 00 00    	mov    %eax,0x2330(%ecx)f01029dd4231,193587
f01029e3:	e8 8d ff ff ff       	call   f0102975 <env_init_percpu>f01029e34233,193664
f01029e8:	5d                   	pop    %ebpf01029e84235,193732
f01029e9:	c3                   	ret    f01029e94236,193776
f01029ea <env_alloc>:f01029ea4238,193817
intint4242,193933
f01029ea:	55                   	push   %ebpf01029ea4245,193995
f01029eb:	89 e5                	mov    %esp,%ebpf01029eb4246,194039
f01029ed:	56                   	push   %esif01029ed4247,194088
f01029ee:	53                   	push   %ebxf01029ee4248,194132
f01029ef:	e8 73 d7 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01029ef4249,194176
f01029f4:	81 c3 28 b6 07 00    	add    $0x7b628,%ebxf01029f44250,194248
f01029fa:	8b b3 30 23 00 00    	mov    0x2330(%ebx),%esif01029fa4256,194374
f0102a00:	85 f6                	test   %esi,%esif0102a004257,194431
f0102a02:	0f 84 03 01 00 00    	je     f0102b0b <env_alloc+0x121>f0102a024258,194480
f0102a08:	83 ec 0c             	sub    $0xc,%espf0102a084260,194582
f0102a0b:	6a 01                	push   $0x1f0102a0b4261,194631
f0102a0d:	e8 37 e3 ff ff       	call   f0100d49 <page_alloc>f0102a0d4262,194675
f0102a12:	83 c4 10             	add    $0x10,%espf0102a124263,194736
f0102a15:	85 c0                	test   %eax,%eaxf0102a154264,194786
f0102a17:	0f 84 f5 00 00 00    	je     f0102b12 <env_alloc+0x128>f0102a174265,194835
f0102a1d:	8b 46 5c             	mov    0x5c(%esi),%eaxf0102a1d4267,194965
f0102a20:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf0102a204269,195051
f0102a25:	0f 86 c7 00 00 00    	jbe    f0102af2 <env_alloc+0x108>f0102a254270,195107
f0102a2b:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf0102a2b4272,195209
f0102a31:	83 ca 05             	or     $0x5,%edxf0102a314273,195270
f0102a34:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)f0102a344274,195319
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);generation4280,195530
f0102a3a:	8b 46 48             	mov    0x48(%esi),%eaxf0102a3a4281,195592
f0102a3d:	05 00 10 00 00       	add    $0x1000,%eaxf0102a3d4282,195647
f0102a42:	25 00 fc ff ff       	and    $0xfffffc00,%eaxf0102a424284,195756
		generation = 1 << ENVGENSHIFT;generation4285,195812
f0102a47:	ba 00 10 00 00       	mov    $0x1000,%edxf0102a474286,195845
f0102a4c:	0f 4e c2             	cmovle %edx,%eaxf0102a4c4287,195897
f0102a4f:	89 f2                	mov    %esi,%edxf0102a4f4289,195984
f0102a51:	2b 93 2c 23 00 00    	sub    0x232c(%ebx),%edxf0102a514290,196033
f0102a57:	c1 fa 05             	sar    $0x5,%edxf0102a574291,196090
f0102a5a:	69 d2 ab aa aa aa    	imul   $0xaaaaaaab,%edx,%edxf0102a5a4292,196139
f0102a60:	09 d0                	or     %edx,%eaxf0102a604293,196200
f0102a62:	89 46 48             	mov    %eax,0x48(%esi)f0102a624294,196249
f0102a65:	8b 45 0c             	mov    0xc(%ebp),%eaxf0102a654298,196372
f0102a68:	89 46 4c             	mov    %eax,0x4c(%esi)f0102a684299,196426
f0102a6b:	c7 46 50 00 00 00 00 	movl   $0x0,0x50(%esi)f0102a6b4301,196511
f0102a72:	c7 46 54 02 00 00 00 	movl   $0x2,0x54(%esi)f0102a724303,196597
f0102a79:	c7 46 58 00 00 00 00 	movl   $0x0,0x58(%esi)f0102a794305,196670
f0102a80:	83 ec 04             	sub    $0x4,%espf0102a804312,196950
f0102a83:	6a 44                	push   $0x44f0102a834313,196999
f0102a85:	6a 00                	push   $0x0f0102a854314,197044
f0102a87:	56                   	push   %esif0102a874315,197088
f0102a88:	e8 91 13 00 00       	call   f0103e1e <memset>f0102a884316,197132
f0102a8d:	66 c7 46 24 23 00    	movw   $0x23,0x24(%esi)f0102a8d4323,197508
f0102a93:	66 c7 46 20 23 00    	movw   $0x23,0x20(%esi)f0102a934325,197594
f0102a99:	66 c7 46 40 23 00    	movw   $0x23,0x40(%esi)f0102a994327,197680
f0102a9f:	c7 46 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%esi)f0102a9f4329,197767
f0102aa6:	66 c7 46 34 1b 00    	movw   $0x1b,0x34(%esi)f0102aa64331,197859
	env_free_list = e->env_link;env_free_list4335,197983
f0102aac:	8b 46 44             	mov    0x44(%esi),%eaxf0102aac4336,198013
f0102aaf:	89 83 30 23 00 00    	mov    %eax,0x2330(%ebx)f0102aaf4337,198068
f0102ab5:	8b 45 08             	mov    0x8(%ebp),%eaxf0102ab54339,198145
f0102ab8:	89 30                	mov    %esi,(%eax)f0102ab84340,198199
f0102aba:	8b 4e 48             	mov    0x48(%esi),%ecxf0102aba4343,198326
f0102abd:	8b 83 28 23 00 00    	mov    0x2328(%ebx),%eaxf0102abd4344,198381
f0102ac3:	83 c4 10             	add    $0x10,%espf0102ac34345,198438
f0102ac6:	ba 00 00 00 00       	mov    $0x0,%edxf0102ac64346,198488
f0102acb:	85 c0                	test   %eax,%eaxf0102acb4347,198537
f0102acd:	74 03                	je     f0102ad2 <env_alloc+0xe8>f0102acd4348,198586
f0102acf:	8b 50 48             	mov    0x48(%eax),%edxf0102acf4349,198651
f0102ad2:	83 ec 04             	sub    $0x4,%espf0102ad24350,198706
f0102ad5:	51                   	push   %ecxf0102ad54351,198755
f0102ad6:	52                   	push   %edxf0102ad64352,198799
f0102ad7:	8d 83 9d 71 f8 ff    	lea    -0x78e63(%ebx),%eaxf0102ad74353,198843
f0102add:	50                   	push   %eaxf0102add4354,198902
f0102ade:	e8 61 03 00 00       	call   f0102e44 <cprintf>f0102ade4355,198946
f0102ae3:	83 c4 10             	add    $0x10,%espf0102ae34357,199015
f0102ae6:	b8 00 00 00 00       	mov    $0x0,%eaxf0102ae64358,199065
f0102aeb:	8d 65 f8             	lea    -0x8(%ebp),%espf0102aeb4360,199116
f0102aee:	5b                   	pop    %ebxf0102aee4361,199171
f0102aef:	5e                   	pop    %esif0102aef4362,199215
f0102af0:	5d                   	pop    %ebpf0102af04363,199259
f0102af1:	c3                   	ret    f0102af14364,199303
f0102af2:	50                   	push   %eaxf0102af24366,199409
f0102af3:	8d 83 1c 69 f8 ff    	lea    -0x796e4(%ebx),%eaxf0102af34367,199453
f0102af9:	50                   	push   %eaxf0102af94368,199512
f0102afa:	68 c0 00 00 00       	push   $0xc0f0102afa4369,199556
f0102aff:	8d 83 92 71 f8 ff    	lea    -0x78e6e(%ebx),%eaxf0102aff4370,199601
f0102b05:	50                   	push   %eaxf0102b054371,199660
f0102b06:	e8 a6 d5 ff ff       	call   f01000b1 <_panic>f0102b064372,199704
f0102b0b:	b8 fb ff ff ff       	mov    $0xfffffffb,%eaxf0102b0b4374,199786
f0102b10:	eb d9                	jmp    f0102aeb <env_alloc+0x101>f0102b104375,199842
f0102b12:	b8 fc ff ff ff       	mov    $0xfffffffc,%eaxf0102b124377,199928
f0102b17:	eb d2                	jmp    f0102aeb <env_alloc+0x101>f0102b174378,199984
f0102b19 <env_create>:f0102b194380,200051
voidvoid4384,200168
f0102b19:	55                   	push   %ebpf0102b194387,200222
f0102b1a:	89 e5                	mov    %esp,%ebpf0102b1a4388,200266
f0102b1c:	5d                   	pop    %ebpf0102b1c4391,200344
f0102b1d:	c3                   	ret    f0102b1d4392,200388
f0102b1e <env_free>:f0102b1e4394,200429
voidvoid4398,200495
f0102b1e:	55                   	push   %ebpf0102b1e4401,200526
f0102b1f:	89 e5                	mov    %esp,%ebpf0102b1f4402,200570
f0102b21:	57                   	push   %edif0102b214403,200619
f0102b22:	56                   	push   %esif0102b224404,200663
f0102b23:	53                   	push   %ebxf0102b234405,200707
f0102b24:	83 ec 2c             	sub    $0x2c,%espf0102b244406,200751
f0102b27:	e8 3b d6 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102b274407,200801
f0102b2c:	81 c3 f0 b4 07 00    	add    $0x7b4f0,%ebxf0102b2c4408,200873
f0102b32:	8b 93 28 23 00 00    	mov    0x2328(%ebx),%edxf0102b324415,201100
f0102b38:	3b 55 08             	cmp    0x8(%ebp),%edxf0102b384416,201157
f0102b3b:	75 17                	jne    f0102b54 <env_free+0x36>f0102b3b4417,201211
f0102b3d:	c7 c0 0c 10 18 f0    	mov    $0xf018100c,%eaxf0102b3d4419,201302
f0102b43:	8b 00                	mov    (%eax),%eaxf0102b434420,201358
f0102b45:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf0102b454422,201440
f0102b4a:	76 46                	jbe    f0102b92 <env_free+0x74>f0102b4a4423,201496
f0102b4c:	05 00 00 00 10       	add    $0x10000000,%eaxf0102b4c4425,201596
static inline voidstatic4428,201655
f0102b51:	0f 22 d8             	mov    %eax,%cr3f0102b514432,201741
f0102b54:	8b 45 08             	mov    0x8(%ebp),%eaxf0102b544436,201902
f0102b57:	8b 48 48             	mov    0x48(%eax),%ecxf0102b574437,201956
f0102b5a:	b8 00 00 00 00       	mov    $0x0,%eaxf0102b5a4438,202011
f0102b5f:	85 d2                	test   %edx,%edxf0102b5f4439,202060
f0102b61:	74 03                	je     f0102b66 <env_free+0x48>f0102b614440,202109
f0102b63:	8b 42 48             	mov    0x48(%edx),%eaxf0102b634441,202173
f0102b66:	83 ec 04             	sub    $0x4,%espf0102b664442,202228
f0102b69:	51                   	push   %ecxf0102b694443,202277
f0102b6a:	50                   	push   %eaxf0102b6a4444,202321
f0102b6b:	8d 83 b2 71 f8 ff    	lea    -0x78e4e(%ebx),%eaxf0102b6b4445,202365
f0102b71:	50                   	push   %eaxf0102b714446,202424
f0102b72:	e8 cd 02 00 00       	call   f0102e44 <cprintf>f0102b724447,202468
f0102b77:	83 c4 10             	add    $0x10,%espf0102b774448,202526
f0102b7a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)f0102b7a4449,202576
f0102b81:	c7 c0 08 10 18 f0    	mov    $0xf0181008,%eaxf0102b814451,202658
f0102b87:	89 45 d4             	mov    %eax,-0x2c(%ebp)f0102b874452,202714
f0102b8a:	89 45 d0             	mov    %eax,-0x30(%ebp)f0102b8a4454,202796
f0102b8d:	e9 9f 00 00 00       	jmp    f0102c31 <env_free+0x113>f0102b8d4455,202852
f0102b92:	50                   	push   %eaxf0102b924457,202983
f0102b93:	8d 83 1c 69 f8 ff    	lea    -0x796e4(%ebx),%eaxf0102b934458,203027
f0102b99:	50                   	push   %eaxf0102b994459,203086
f0102b9a:	68 6f 01 00 00       	push   $0x16ff0102b9a4460,203130
f0102b9f:	8d 83 92 71 f8 ff    	lea    -0x78e6e(%ebx),%eaxf0102b9f4461,203176
f0102ba5:	50                   	push   %eaxf0102ba54462,203235
f0102ba6:	e8 06 d5 ff ff       	call   f01000b1 <_panic>f0102ba64463,203279
f0102bab:	50                   	push   %eaxf0102bab4465,203400
f0102bac:	8d 83 10 68 f8 ff    	lea    -0x797f0(%ebx),%eaxf0102bac4466,203444
f0102bb2:	50                   	push   %eaxf0102bb24467,203503
f0102bb3:	68 7e 01 00 00       	push   $0x17ef0102bb34468,203547
f0102bb8:	8d 83 92 71 f8 ff    	lea    -0x78e6e(%ebx),%eaxf0102bb84469,203593
f0102bbe:	50                   	push   %eaxf0102bbe4470,203652
f0102bbf:	e8 ed d4 ff ff       	call   f01000b1 <_panic>f0102bbf4471,203696
f0102bc4:	83 c6 04             	add    $0x4,%esif0102bc44472,203753
		pa = PTE_ADDR(e->env_pgdir[pdeno]);pa4474,203844
		pt = (pte_t*) KADDR(pa);pt4475,203882
f0102bc7:	39 fe                	cmp    %edi,%esif0102bc74479,203996
f0102bc9:	74 24                	je     f0102bef <env_free+0xd1>f0102bc94480,204045
f0102bcb:	f6 06 01             	testb  $0x1,(%esi)f0102bcb4482,204135
f0102bce:	74 f4                	je     f0102bc4 <env_free+0xa6>f0102bce4483,204186
f0102bd0:	83 ec 08             	sub    $0x8,%espf0102bd04485,204306
f0102bd3:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0102bd34486,204355
f0102bd6:	01 f0                	add    %esi,%eaxf0102bd64487,204411
f0102bd8:	c1 e0 0a             	shl    $0xa,%eaxf0102bd84488,204460
f0102bdb:	0b 45 e4             	or     -0x1c(%ebp),%eaxf0102bdb4489,204509
f0102bde:	50                   	push   %eaxf0102bde4490,204565
f0102bdf:	8b 45 08             	mov    0x8(%ebp),%eaxf0102bdf4491,204609
f0102be2:	ff 70 5c             	pushl  0x5c(%eax)f0102be24492,204663
f0102be5:	e8 99 e4 ff ff       	call   f0101083 <page_remove>f0102be54493,204713
f0102bea:	83 c4 10             	add    $0x10,%espf0102bea4494,204775
f0102bed:	eb d5                	jmp    f0102bc4 <env_free+0xa6>f0102bed4495,204825
f0102bef:	8b 45 08             	mov    0x8(%ebp),%eaxf0102bef4500,204953
f0102bf2:	8b 40 5c             	mov    0x5c(%eax),%eaxf0102bf24501,205007
f0102bf5:	8b 55 dc             	mov    -0x24(%ebp),%edxf0102bf54502,205062
f0102bf8:	c7 04 10 00 00 00 00 	movl   $0x0,(%eax,%edx,1)f0102bf84503,205118
f0102bff:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0102bff4505,205202
f0102c02:	8b 55 d8             	mov    -0x28(%ebp),%edxf0102c024506,205258
f0102c05:	3b 10                	cmp    (%eax),%edxf0102c054507,205314
f0102c07:	73 6f                	jae    f0102c78 <env_free+0x15a>f0102c074508,205365
f0102c09:	83 ec 0c             	sub    $0xc,%espf0102c094510,205458
f0102c0c:	c7 c0 10 10 18 f0    	mov    $0xf0181010,%eaxf0102c0c4512,205534
f0102c12:	8b 00                	mov    (%eax),%eaxf0102c124513,205590
f0102c14:	8b 55 d8             	mov    -0x28(%ebp),%edxf0102c144514,205641
f0102c17:	8d 04 d0             	lea    (%eax,%edx,8),%eaxf0102c174515,205697
f0102c1a:	50                   	push   %eaxf0102c1a4516,205755
f0102c1b:	e8 23 e2 ff ff       	call   f0100e43 <page_decref>f0102c1b4517,205799
f0102c20:	83 c4 10             	add    $0x10,%espf0102c204518,205861
f0102c23:	83 45 dc 04          	addl   $0x4,-0x24(%ebp)f0102c234519,205911
f0102c27:	8b 45 dc             	mov    -0x24(%ebp),%eaxf0102c274520,205967
f0102c2a:	3d ec 0e 00 00       	cmp    $0xeec,%eaxf0102c2a4522,206070
f0102c2f:	74 5f                	je     f0102c90 <env_free+0x172>f0102c2f4523,206121
f0102c31:	8b 45 08             	mov    0x8(%ebp),%eaxf0102c314525,206224
f0102c34:	8b 40 5c             	mov    0x5c(%eax),%eaxf0102c344526,206278
f0102c37:	8b 55 dc             	mov    -0x24(%ebp),%edxf0102c374527,206333
f0102c3a:	8b 04 10             	mov    (%eax,%edx,1),%eaxf0102c3a4528,206389
f0102c3d:	a8 01                	test   $0x1,%alf0102c3d4529,206447
f0102c3f:	74 e2                	je     f0102c23 <env_free+0x105>f0102c3f4530,206495
		pa = PTE_ADDR(e->env_pgdir[pdeno]);pa4531,206560
f0102c41:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0102c414532,206598
f0102c46:	89 c2                	mov    %eax,%edxf0102c464534,206680
f0102c48:	c1 ea 0c             	shr    $0xc,%edxf0102c484535,206729
f0102c4b:	89 55 d8             	mov    %edx,-0x28(%ebp)f0102c4b4536,206778
f0102c4e:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0102c4e4537,206834
f0102c51:	39 11                	cmp    %edx,(%ecx)f0102c514538,206890
f0102c53:	0f 86 52 ff ff ff    	jbe    f0102bab <env_free+0x8d>f0102c534539,206941
f0102c59:	8d b0 00 00 00 f0    	lea    -0x10000000(%eax),%esif0102c594541,207038
f0102c5f:	8b 55 dc             	mov    -0x24(%ebp),%edxf0102c5f4543,207156
f0102c62:	c1 e2 14             	shl    $0x14,%edxf0102c624544,207212
f0102c65:	89 55 e4             	mov    %edx,-0x1c(%ebp)f0102c654545,207262
f0102c68:	8d b8 00 10 00 f0    	lea    -0xffff000(%eax),%edif0102c684546,207318
f0102c6e:	f7 d8                	neg    %eaxf0102c6e4547,207379
f0102c70:	89 45 e0             	mov    %eax,-0x20(%ebp)f0102c704548,207423
f0102c73:	e9 53 ff ff ff       	jmp    f0102bcb <env_free+0xad>f0102c734549,207479
f0102c78:	83 ec 04             	sub    $0x4,%espf0102c784551,207586
f0102c7b:	8d 83 c0 68 f8 ff    	lea    -0x79740(%ebx),%eaxf0102c7b4552,207635
f0102c81:	50                   	push   %eaxf0102c814553,207694
f0102c82:	6a 4f                	push   $0x4ff0102c824554,207738
f0102c84:	8d 83 8a 6e f8 ff    	lea    -0x79176(%ebx),%eaxf0102c844555,207783
f0102c8a:	50                   	push   %eaxf0102c8a4556,207842
f0102c8b:	e8 21 d4 ff ff       	call   f01000b1 <_panic>f0102c8b4557,207886
	pa = PADDR(e->env_pgdir);pa4561,207975
f0102c90:	8b 45 08             	mov    0x8(%ebp),%eaxf0102c904562,208002
f0102c93:	8b 40 5c             	mov    0x5c(%eax),%eaxf0102c934563,208056
f0102c96:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf0102c964565,208142
f0102c9b:	76 57                	jbe    f0102cf4 <env_free+0x1d6>f0102c9b4566,208198
f0102c9d:	8b 55 08             	mov    0x8(%ebp),%edxf0102c9d4568,208282
f0102ca0:	c7 42 5c 00 00 00 00 	movl   $0x0,0x5c(%edx)f0102ca04569,208336
f0102ca7:	05 00 00 00 10       	add    $0x10000000,%eaxf0102ca74571,208427
f0102cac:	c1 e8 0c             	shr    $0xc,%eaxf0102cac4573,208509
f0102caf:	c7 c2 08 10 18 f0    	mov    $0xf0181008,%edxf0102caf4574,208558
f0102cb5:	3b 02                	cmp    (%edx),%eaxf0102cb54575,208614
f0102cb7:	73 54                	jae    f0102d0d <env_free+0x1ef>f0102cb74576,208665
f0102cb9:	83 ec 0c             	sub    $0xc,%espf0102cb94578,208757
f0102cbc:	c7 c2 10 10 18 f0    	mov    $0xf0181010,%edxf0102cbc4580,208833
f0102cc2:	8b 12                	mov    (%edx),%edxf0102cc24581,208889
f0102cc4:	8d 04 c2             	lea    (%edx,%eax,8),%eaxf0102cc44582,208940
f0102cc7:	50                   	push   %eaxf0102cc74583,208998
f0102cc8:	e8 76 e1 ff ff       	call   f0100e43 <page_decref>f0102cc84584,209042
f0102ccd:	8b 45 08             	mov    0x8(%ebp),%eaxf0102ccd4588,209176
f0102cd0:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)f0102cd04589,209230
f0102cd7:	8b 83 30 23 00 00    	mov    0x2330(%ebx),%eaxf0102cd74591,209315
f0102cdd:	8b 55 08             	mov    0x8(%ebp),%edxf0102cdd4592,209372
f0102ce0:	89 42 44             	mov    %eax,0x44(%edx)f0102ce04593,209426
	env_free_list = e;env_free_list4594,209481
f0102ce3:	89 93 30 23 00 00    	mov    %edx,0x2330(%ebx)f0102ce34595,209501
f0102ce9:	83 c4 10             	add    $0x10,%espf0102ce94597,209560
f0102cec:	8d 65 f4             	lea    -0xc(%ebp),%espf0102cec4598,209610
f0102cef:	5b                   	pop    %ebxf0102cef4599,209665
f0102cf0:	5e                   	pop    %esif0102cf04600,209709
f0102cf1:	5f                   	pop    %edif0102cf14601,209753
f0102cf2:	5d                   	pop    %ebpf0102cf24602,209797
f0102cf3:	c3                   	ret    f0102cf34603,209841
f0102cf4:	50                   	push   %eaxf0102cf44605,209947
f0102cf5:	8d 83 1c 69 f8 ff    	lea    -0x796e4(%ebx),%eaxf0102cf54606,209991
f0102cfb:	50                   	push   %eaxf0102cfb4607,210050
f0102cfc:	68 8c 01 00 00       	push   $0x18cf0102cfc4608,210094
f0102d01:	8d 83 92 71 f8 ff    	lea    -0x78e6e(%ebx),%eaxf0102d014609,210140
f0102d07:	50                   	push   %eaxf0102d074610,210199
f0102d08:	e8 a4 d3 ff ff       	call   f01000b1 <_panic>f0102d084611,210243
f0102d0d:	83 ec 04             	sub    $0x4,%espf0102d0d4613,210343
f0102d10:	8d 83 c0 68 f8 ff    	lea    -0x79740(%ebx),%eaxf0102d104614,210392
f0102d16:	50                   	push   %eaxf0102d164615,210451
f0102d17:	6a 4f                	push   $0x4ff0102d174616,210495
f0102d19:	8d 83 8a 6e f8 ff    	lea    -0x79176(%ebx),%eaxf0102d194617,210540
f0102d1f:	50                   	push   %eaxf0102d1f4618,210599
f0102d20:	e8 8c d3 ff ff       	call   f01000b1 <_panic>f0102d204619,210643
f0102d25 <env_destroy>:f0102d254621,210701
voidvoid4625,210755
f0102d25:	55                   	push   %ebpf0102d254628,210789
f0102d26:	89 e5                	mov    %esp,%ebpf0102d264629,210833
f0102d28:	53                   	push   %ebxf0102d284630,210882
f0102d29:	83 ec 10             	sub    $0x10,%espf0102d294631,210926
f0102d2c:	e8 36 d4 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102d2c4632,210976
f0102d31:	81 c3 eb b2 07 00    	add    $0x7b2eb,%ebxf0102d314633,211048
f0102d37:	ff 75 08             	pushl  0x8(%ebp)f0102d374635,211115
f0102d3a:	e8 df fd ff ff       	call   f0102b1e <env_free>f0102d3a4636,211164
f0102d3f:	8d 83 5c 71 f8 ff    	lea    -0x78ea4(%ebx),%eaxf0102d3f4639,211292
f0102d45:	89 04 24             	mov    %eax,(%esp)f0102d454640,211351
f0102d48:	e8 f7 00 00 00       	call   f0102e44 <cprintf>f0102d484641,211402
f0102d4d:	83 c4 10             	add    $0x10,%espf0102d4d4642,211460
f0102d50:	83 ec 0c             	sub    $0xc,%espf0102d504645,211538
f0102d53:	6a 00                	push   $0x0f0102d534646,211587
f0102d55:	e8 ea db ff ff       	call   f0100944 <monitor>f0102d554647,211631
f0102d5a:	83 c4 10             	add    $0x10,%espf0102d5a4648,211689
f0102d5d:	eb f1                	jmp    f0102d50 <env_destroy+0x2b>f0102d5d4649,211739
f0102d5f <env_pop_tf>:f0102d5f4651,211807
voidvoid4655,211870
f0102d5f:	55                   	push   %ebpf0102d5f4658,211910
f0102d60:	89 e5                	mov    %esp,%ebpf0102d604659,211954
f0102d62:	53                   	push   %ebxf0102d624660,212003
f0102d63:	83 ec 08             	sub    $0x8,%espf0102d634661,212047
f0102d66:	e8 fc d3 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102d664662,212096
f0102d6b:	81 c3 b1 b2 07 00    	add    $0x7b2b1,%ebxf0102d6b4663,212168
f0102d71:	8b 65 08             	mov    0x8(%ebp),%espf0102d714665,212236
f0102d74:	61                   	popa   f0102d744666,212290
f0102d75:	07                   	pop    %esf0102d754667,212330
f0102d76:	1f                   	pop    %dsf0102d764668,212373
f0102d77:	83 c4 08             	add    $0x8,%espf0102d774669,212416
f0102d7a:	cf                   	iret   f0102d7a4670,212465
f0102d7b:	8d 83 c8 71 f8 ff    	lea    -0x78e38(%ebx),%eaxf0102d7b4677,212703
f0102d81:	50                   	push   %eaxf0102d814678,212762
f0102d82:	68 b5 01 00 00       	push   $0x1b5f0102d824679,212806
f0102d87:	8d 83 92 71 f8 ff    	lea    -0x78e6e(%ebx),%eaxf0102d874680,212852
f0102d8d:	50                   	push   %eaxf0102d8d4681,212911
f0102d8e:	e8 1e d3 ff ff       	call   f01000b1 <_panic>f0102d8e4682,212955
f0102d93 <env_run>:f0102d934684,213013
voidvoid4688,213073
f0102d93:	55                   	push   %ebpf0102d934691,213103
f0102d94:	89 e5                	mov    %esp,%ebpf0102d944692,213147
f0102d96:	53                   	push   %ebxf0102d964693,213196
f0102d97:	83 ec 08             	sub    $0x8,%espf0102d974694,213240
f0102d9a:	e8 c8 d3 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102d9a4695,213289
f0102d9f:	81 c3 7d b2 07 00    	add    $0x7b27d,%ebxf0102d9f4696,213361
f0102da5:	8d 83 d4 71 f8 ff    	lea    -0x78e2c(%ebx),%eaxf0102da54703,213569
f0102dab:	50                   	push   %eaxf0102dab4704,213628
f0102dac:	68 d4 01 00 00       	push   $0x1d4f0102dac4705,213672
f0102db1:	8d 83 92 71 f8 ff    	lea    -0x78e6e(%ebx),%eaxf0102db14706,213718
f0102db7:	50                   	push   %eaxf0102db74707,213777
f0102db8:	e8 f4 d2 ff ff       	call   f01000b1 <_panic>f0102db84708,213821
f0102dbd <mc146818_read>:f0102dbd4710,213879
unsignedunsigned4714,213932
f0102dbd:	55                   	push   %ebpf0102dbd4717,213971
f0102dbe:	89 e5                	mov    %esp,%ebpf0102dbe4718,214015
f0102dc0:	8b 45 08             	mov    0x8(%ebp),%eaxf0102dc04720,214121
f0102dc3:	ba 70 00 00 00       	mov    $0x70,%edxf0102dc34721,214175
f0102dc8:	ee                   	out    %al,(%dx)f0102dc84722,214225
f0102dc9:	ba 71 00 00 00       	mov    $0x71,%edxf0102dc94724,214330
f0102dce:	ec                   	in     (%dx),%alf0102dce4725,214380
f0102dcf:	0f b6 c0             	movzbl %al,%eaxf0102dcf4728,214472
f0102dd2:	5d                   	pop    %ebpf0102dd24730,214522
f0102dd3:	c3                   	ret    f0102dd34731,214566
f0102dd4 <mc146818_write>:f0102dd44733,214607
voidvoid4735,214635
f0102dd4:	55                   	push   %ebpf0102dd44738,214687
f0102dd5:	89 e5                	mov    %esp,%ebpf0102dd54739,214731
f0102dd7:	8b 45 08             	mov    0x8(%ebp),%eaxf0102dd74741,214837
f0102dda:	ba 70 00 00 00       	mov    $0x70,%edxf0102dda4742,214891
f0102ddf:	ee                   	out    %al,(%dx)f0102ddf4743,214941
f0102de0:	8b 45 0c             	mov    0xc(%ebp),%eaxf0102de04744,214990
f0102de3:	ba 71 00 00 00       	mov    $0x71,%edxf0102de34745,215044
f0102de8:	ee                   	out    %al,(%dx)f0102de84746,215094
f0102de9:	5d                   	pop    %ebpf0102de94750,215189
f0102dea:	c3                   	ret    f0102dea4751,215233
f0102deb <putch>:f0102deb4753,215274
static voidstatic4757,215318
f0102deb:	55                   	push   %ebpf0102deb4760,215356
f0102dec:	89 e5                	mov    %esp,%ebpf0102dec4761,215400
f0102dee:	53                   	push   %ebxf0102dee4762,215449
f0102def:	83 ec 10             	sub    $0x10,%espf0102def4763,215493
f0102df2:	e8 70 d3 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102df24764,215543
f0102df7:	81 c3 25 b2 07 00    	add    $0x7b225,%ebxf0102df74765,215615
f0102dfd:	ff 75 08             	pushl  0x8(%ebp)f0102dfd4767,215683
f0102e00:	e8 d9 d8 ff ff       	call   f01006de <cputchar>f0102e004768,215732
f0102e05:	83 c4 10             	add    $0x10,%espf0102e054771,215802
f0102e08:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0102e084772,215852
f0102e0b:	c9                   	leave  f0102e0b4773,215907
f0102e0c:	c3                   	ret    f0102e0c4774,215947
f0102e0d <vcprintf>:f0102e0d4776,215988
intint4778,216010
f0102e0d:	55                   	push   %ebpf0102e0d4781,216054
f0102e0e:	89 e5                	mov    %esp,%ebpf0102e0e4782,216098
f0102e10:	53                   	push   %ebxf0102e104783,216147
f0102e11:	83 ec 14             	sub    $0x14,%espf0102e114784,216191
f0102e14:	e8 4e d3 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102e144785,216241
f0102e19:	81 c3 03 b2 07 00    	add    $0x7b203,%ebxf0102e194786,216313
f0102e1f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f0102e1f4788,216380
f0102e26:	ff 75 0c             	pushl  0xc(%ebp)f0102e264791,216477
f0102e29:	ff 75 08             	pushl  0x8(%ebp)f0102e294792,216526
f0102e2c:	8d 45 f4             	lea    -0xc(%ebp),%eaxf0102e2c4793,216575
f0102e2f:	50                   	push   %eaxf0102e2f4794,216630
f0102e30:	8d 83 cf 4d f8 ff    	lea    -0x7b231(%ebx),%eaxf0102e304795,216674
f0102e36:	50                   	push   %eaxf0102e364796,216733
f0102e37:	e8 96 08 00 00       	call   f01036d2 <vprintfmt>f0102e374797,216777
f0102e3c:	8b 45 f4             	mov    -0xc(%ebp),%eaxf0102e3c4800,216852
f0102e3f:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0102e3f4801,216907
f0102e42:	c9                   	leave  f0102e424802,216962
f0102e43:	c3                   	ret    f0102e434803,217002
f0102e44 <cprintf>:f0102e444805,217043
intint4807,217064
f0102e44:	55                   	push   %ebpf0102e444810,217100
f0102e45:	89 e5                	mov    %esp,%ebpf0102e454811,217144
f0102e47:	83 ec 10             	sub    $0x10,%espf0102e474812,217193
f0102e4a:	8d 45 0c             	lea    0xc(%ebp),%eaxf0102e4a4817,217287
	cnt = vcprintf(fmt, ap);cnt4818,217341
f0102e4d:	50                   	push   %eaxf0102e4d4819,217367
f0102e4e:	ff 75 08             	pushl  0x8(%ebp)f0102e4e4820,217411
f0102e51:	e8 b7 ff ff ff       	call   f0102e0d <vcprintf>f0102e514821,217460
f0102e56:	c9                   	leave  f0102e564826,217548
f0102e57:	c3                   	ret    f0102e574827,217588
f0102e58 <trap_init_percpu>:f0102e584829,217629
voidvoid4833,217708
f0102e58:	55                   	push   %ebpf0102e584836,217738
f0102e59:	89 e5                	mov    %esp,%ebpf0102e594837,217782
f0102e5b:	57                   	push   %edif0102e5b4838,217831
f0102e5c:	56                   	push   %esif0102e5c4839,217875
f0102e5d:	53                   	push   %ebxf0102e5d4840,217919
f0102e5e:	83 ec 04             	sub    $0x4,%espf0102e5e4841,217963
f0102e61:	e8 01 d3 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102e614842,218012
f0102e66:	81 c3 b6 b1 07 00    	add    $0x7b1b6,%ebxf0102e664843,218084
f0102e6c:	c7 83 68 2b 00 00 00 	movl   $0xf0000000,0x2b68(%ebx)f0102e6c4847,218241
f0102e73:	00 00 f0 f0102e734848,218305
f0102e76:	66 c7 83 6c 2b 00 00 	movw   $0x10,0x2b6c(%ebx)f0102e764850,218345
f0102e7d:	10 00 f0102e7d4851,218403
f0102e7f:	66 c7 83 ca 2b 00 00 	movw   $0x68,0x2bca(%ebx)f0102e7f4853,218460
f0102e86:	68 00 f0102e864854,218518
f0102e88:	c7 c0 00 93 11 f0    	mov    $0xf0119300,%eaxf0102e884858,218631
f0102e8e:	66 c7 40 28 67 00    	movw   $0x67,0x28(%eax)f0102e8e4859,218687
f0102e94:	8d b3 64 2b 00 00    	lea    0x2b64(%ebx),%esif0102e944860,218743
f0102e9a:	66 89 70 2a          	mov    %si,0x2a(%eax)f0102e9a4861,218800
f0102e9e:	89 f2                	mov    %esi,%edxf0102e9e4862,218854
f0102ea0:	c1 ea 10             	shr    $0x10,%edxf0102ea04863,218903
f0102ea3:	88 50 2c             	mov    %dl,0x2c(%eax)f0102ea34864,218953
f0102ea6:	0f b6 50 2d          	movzbl 0x2d(%eax),%edxf0102ea64865,219007
f0102eaa:	83 e2 f0             	and    $0xfffffff0,%edxf0102eaa4866,219062
f0102ead:	83 ca 09             	or     $0x9,%edxf0102ead4867,219118
f0102eb0:	83 e2 9f             	and    $0xffffff9f,%edxf0102eb04868,219167
f0102eb3:	83 ca 80             	or     $0xffffff80,%edxf0102eb34869,219223
f0102eb6:	88 55 f3             	mov    %dl,-0xd(%ebp)f0102eb64870,219279
f0102eb9:	88 50 2d             	mov    %dl,0x2d(%eax)f0102eb94871,219333
f0102ebc:	0f b6 48 2e          	movzbl 0x2e(%eax),%ecxf0102ebc4872,219387
f0102ec0:	83 e1 c0             	and    $0xffffffc0,%ecxf0102ec04873,219442
f0102ec3:	83 c9 40             	or     $0x40,%ecxf0102ec34874,219498
f0102ec6:	83 e1 7f             	and    $0x7f,%ecxf0102ec64875,219548
f0102ec9:	88 48 2e             	mov    %cl,0x2e(%eax)f0102ec94876,219598
f0102ecc:	c1 ee 18             	shr    $0x18,%esif0102ecc4877,219652
f0102ecf:	89 f1                	mov    %esi,%ecxf0102ecf4878,219702
f0102ed1:	88 48 2f             	mov    %cl,0x2f(%eax)f0102ed14879,219751
f0102ed4:	0f b6 55 f3          	movzbl -0xd(%ebp),%edxf0102ed44882,219873
f0102ed8:	83 e2 ef             	and    $0xffffffef,%edxf0102ed84883,219928
f0102edb:	88 50 2d             	mov    %dl,0x2d(%eax)f0102edb4884,219984
f0102ede:	b8 28 00 00 00       	mov    $0x28,%eaxf0102ede4886,220077
f0102ee3:	0f 00 d8             	ltr    %axf0102ee34887,220127
f0102ee6:	8d 83 ec 1f 00 00    	lea    0x1fec(%ebx),%eaxf0102ee64889,220210
f0102eec:	0f 01 18             	lidtl  (%eax)f0102eec4890,220267
f0102eef:	83 c4 04             	add    $0x4,%espf0102eef4897,220416
f0102ef2:	5b                   	pop    %ebxf0102ef24898,220465
f0102ef3:	5e                   	pop    %esif0102ef34899,220509
f0102ef4:	5f                   	pop    %edif0102ef44900,220553
f0102ef5:	5d                   	pop    %ebpf0102ef54901,220597
f0102ef6:	c3                   	ret    f0102ef64902,220641
f0102ef7 <trap_init>:f0102ef74904,220682
f0102ef7:	55                   	push   %ebpf0102ef74906,220706
f0102ef8:	89 e5                	mov    %esp,%ebpf0102ef84907,220750
f0102efa:	e8 59 ff ff ff       	call   f0102e58 <trap_init_percpu>f0102efa4909,220820
f0102eff:	5d                   	pop    %ebpf0102eff4911,220889
f0102f00:	c3                   	ret    f0102f004912,220933
f0102f01 <print_regs>:f0102f014914,220974
voidvoid4918,221003
f0102f01:	55                   	push   %ebpf0102f014921,221044
f0102f02:	89 e5                	mov    %esp,%ebpf0102f024922,221088
f0102f04:	56                   	push   %esif0102f044923,221137
f0102f05:	53                   	push   %ebxf0102f054924,221181
f0102f06:	e8 5c d2 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102f064925,221225
f0102f0b:	81 c3 11 b1 07 00    	add    $0x7b111,%ebxf0102f0b4926,221297
f0102f11:	8b 75 08             	mov    0x8(%ebp),%esif0102f114927,221350
f0102f14:	83 ec 08             	sub    $0x8,%espf0102f144929,221448
f0102f17:	ff 36                	pushl  (%esi)f0102f174930,221497
f0102f19:	8d 83 f0 71 f8 ff    	lea    -0x78e10(%ebx),%eaxf0102f194931,221543
f0102f1f:	50                   	push   %eaxf0102f1f4932,221602
f0102f20:	e8 1f ff ff ff       	call   f0102e44 <cprintf>f0102f204933,221646
f0102f25:	83 c4 08             	add    $0x8,%espf0102f254935,221748
f0102f28:	ff 76 04             	pushl  0x4(%esi)f0102f284936,221797
f0102f2b:	8d 83 ff 71 f8 ff    	lea    -0x78e01(%ebx),%eaxf0102f2b4937,221846
f0102f31:	50                   	push   %eaxf0102f314938,221905
f0102f32:	e8 0d ff ff ff       	call   f0102e44 <cprintf>f0102f324939,221949
f0102f37:	83 c4 08             	add    $0x8,%espf0102f374941,222051
f0102f3a:	ff 76 08             	pushl  0x8(%esi)f0102f3a4942,222100
f0102f3d:	8d 83 0e 72 f8 ff    	lea    -0x78df2(%ebx),%eaxf0102f3d4943,222149
f0102f43:	50                   	push   %eaxf0102f434944,222208
f0102f44:	e8 fb fe ff ff       	call   f0102e44 <cprintf>f0102f444945,222252
f0102f49:	83 c4 08             	add    $0x8,%espf0102f494947,222355
f0102f4c:	ff 76 0c             	pushl  0xc(%esi)f0102f4c4948,222404
f0102f4f:	8d 83 1d 72 f8 ff    	lea    -0x78de3(%ebx),%eaxf0102f4f4949,222453
f0102f55:	50                   	push   %eaxf0102f554950,222512
f0102f56:	e8 e9 fe ff ff       	call   f0102e44 <cprintf>f0102f564951,222556
f0102f5b:	83 c4 08             	add    $0x8,%espf0102f5b4953,222658
f0102f5e:	ff 76 10             	pushl  0x10(%esi)f0102f5e4954,222707
f0102f61:	8d 83 2c 72 f8 ff    	lea    -0x78dd4(%ebx),%eaxf0102f614955,222757
f0102f67:	50                   	push   %eaxf0102f674956,222816
f0102f68:	e8 d7 fe ff ff       	call   f0102e44 <cprintf>f0102f684957,222860
f0102f6d:	83 c4 08             	add    $0x8,%espf0102f6d4959,222962
f0102f70:	ff 76 14             	pushl  0x14(%esi)f0102f704960,223011
f0102f73:	8d 83 3b 72 f8 ff    	lea    -0x78dc5(%ebx),%eaxf0102f734961,223061
f0102f79:	50                   	push   %eaxf0102f794962,223120
f0102f7a:	e8 c5 fe ff ff       	call   f0102e44 <cprintf>f0102f7a4963,223164
f0102f7f:	83 c4 08             	add    $0x8,%espf0102f7f4965,223266
f0102f82:	ff 76 18             	pushl  0x18(%esi)f0102f824966,223315
f0102f85:	8d 83 4a 72 f8 ff    	lea    -0x78db6(%ebx),%eaxf0102f854967,223365
f0102f8b:	50                   	push   %eaxf0102f8b4968,223424
f0102f8c:	e8 b3 fe ff ff       	call   f0102e44 <cprintf>f0102f8c4969,223468
f0102f91:	83 c4 08             	add    $0x8,%espf0102f914971,223570
f0102f94:	ff 76 1c             	pushl  0x1c(%esi)f0102f944972,223619
f0102f97:	8d 83 59 72 f8 ff    	lea    -0x78da7(%ebx),%eaxf0102f974973,223669
f0102f9d:	50                   	push   %eaxf0102f9d4974,223728
f0102f9e:	e8 a1 fe ff ff       	call   f0102e44 <cprintf>f0102f9e4975,223772
f0102fa3:	83 c4 10             	add    $0x10,%espf0102fa34977,223832
f0102fa6:	8d 65 f8             	lea    -0x8(%ebp),%espf0102fa64978,223882
f0102fa9:	5b                   	pop    %ebxf0102fa94979,223937
f0102faa:	5e                   	pop    %esif0102faa4980,223981
f0102fab:	5d                   	pop    %ebpf0102fab4981,224025
f0102fac:	c3                   	ret    f0102fac4982,224069
f0102fad <print_trapframe>:f0102fad4984,224110
f0102fad:	55                   	push   %ebpf0102fad4986,224140
f0102fae:	89 e5                	mov    %esp,%ebpf0102fae4987,224184
f0102fb0:	57                   	push   %edif0102fb04988,224233
f0102fb1:	56                   	push   %esif0102fb14989,224277
f0102fb2:	53                   	push   %ebxf0102fb24990,224321
f0102fb3:	83 ec 14             	sub    $0x14,%espf0102fb34991,224365
f0102fb6:	e8 ac d1 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0102fb64992,224415
f0102fbb:	81 c3 61 b0 07 00    	add    $0x7b061,%ebxf0102fbb4993,224487
f0102fc1:	8b 75 08             	mov    0x8(%ebp),%esif0102fc14994,224540
f0102fc4:	56                   	push   %esif0102fc44996,224630
f0102fc5:	8d 83 8f 73 f8 ff    	lea    -0x78c71(%ebx),%eaxf0102fc54997,224674
f0102fcb:	50                   	push   %eaxf0102fcb4998,224733
f0102fcc:	e8 73 fe ff ff       	call   f0102e44 <cprintf>f0102fcc4999,224777
f0102fd1:	89 34 24             	mov    %esi,(%esp)f0102fd15001,224862
f0102fd4:	e8 28 ff ff ff       	call   f0102f01 <print_regs>f0102fd45002,224913
f0102fd9:	83 c4 08             	add    $0x8,%espf0102fd95004,225018
f0102fdc:	0f b7 46 20          	movzwl 0x20(%esi),%eaxf0102fdc5005,225067
f0102fe0:	50                   	push   %eaxf0102fe05006,225122
f0102fe1:	8d 83 aa 72 f8 ff    	lea    -0x78d56(%ebx),%eaxf0102fe15007,225166
f0102fe7:	50                   	push   %eaxf0102fe75008,225225
f0102fe8:	e8 57 fe ff ff       	call   f0102e44 <cprintf>f0102fe85009,225269
f0102fed:	83 c4 08             	add    $0x8,%espf0102fed5011,225371
f0102ff0:	0f b7 46 24          	movzwl 0x24(%esi),%eaxf0102ff05012,225420
f0102ff4:	50                   	push   %eaxf0102ff45013,225475
f0102ff5:	8d 83 bd 72 f8 ff    	lea    -0x78d43(%ebx),%eaxf0102ff55014,225519
f0102ffb:	50                   	push   %eaxf0102ffb5015,225578
f0102ffc:	e8 43 fe ff ff       	call   f0102e44 <cprintf>f0102ffc5016,225622
f0103001:	8b 56 28             	mov    0x28(%esi),%edxf01030015018,225752
f0103004:	83 c4 10             	add    $0x10,%espf01030045020,225843
f0103007:	83 fa 13             	cmp    $0x13,%edxf01030075021,225893
f010300a:	0f 86 e9 00 00 00    	jbe    f01030f9 <print_trapframe+0x14c>f010300a5022,225943
f0103010:	83 fa 30             	cmp    $0x30,%edxf01030105024,226041
f0103013:	8d 83 68 72 f8 ff    	lea    -0x78d98(%ebx),%eaxf01030135025,226091
f0103019:	8d 8b 74 72 f8 ff    	lea    -0x78d8c(%ebx),%ecxf01030195026,226150
f010301f:	0f 45 c1             	cmovne %ecx,%eaxf010301f5027,226209
f0103022:	83 ec 04             	sub    $0x4,%espf01030225029,226330
f0103025:	50                   	push   %eaxf01030255030,226379
f0103026:	52                   	push   %edxf01030265031,226423
f0103027:	8d 83 d0 72 f8 ff    	lea    -0x78d30(%ebx),%eaxf01030275032,226467
f010302d:	50                   	push   %eaxf010302d5033,226526
f010302e:	e8 11 fe ff ff       	call   f0102e44 <cprintf>f010302e5034,226570
f0103033:	83 c4 10             	add    $0x10,%espf01030335036,226676
f0103036:	39 b3 44 2b 00 00    	cmp    %esi,0x2b44(%ebx)f01030365037,226726
f010303c:	0f 84 c3 00 00 00    	je     f0103105 <print_trapframe+0x158>f010303c5038,226783
f0103042:	83 ec 08             	sub    $0x8,%espf01030425040,226894
f0103045:	ff 76 2c             	pushl  0x2c(%esi)f01030455041,226943
f0103048:	8d 83 f1 72 f8 ff    	lea    -0x78d0f(%ebx),%eaxf01030485042,226993
f010304e:	50                   	push   %eaxf010304e5043,227052
f010304f:	e8 f0 fd ff ff       	call   f0102e44 <cprintf>f010304f5044,227096
f0103054:	83 c4 10             	add    $0x10,%espf01030545046,227185
f0103057:	83 7e 28 0e          	cmpl   $0xe,0x28(%esi)f01030575047,227235
f010305b:	0f 85 c9 00 00 00    	jne    f010312a <print_trapframe+0x17d>f010305b5048,227290
f0103061:	8b 46 2c             	mov    0x2c(%esi),%eaxf01030615050,227413
f0103064:	89 c2                	mov    %eax,%edxf01030645052,227497
f0103066:	83 e2 01             	and    $0x1,%edxf01030665053,227546
f0103069:	8d 8b 83 72 f8 ff    	lea    -0x78d7d(%ebx),%ecxf01030695054,227595
f010306f:	8d 93 8e 72 f8 ff    	lea    -0x78d72(%ebx),%edxf010306f5055,227654
f0103075:	0f 44 ca             	cmove  %edx,%ecxf01030755056,227713
f0103078:	89 c2                	mov    %eax,%edxf01030785057,227762
f010307a:	83 e2 02             	and    $0x2,%edxf010307a5058,227811
f010307d:	8d 93 9a 72 f8 ff    	lea    -0x78d66(%ebx),%edxf010307d5059,227860
f0103083:	8d bb a0 72 f8 ff    	lea    -0x78d60(%ebx),%edif01030835060,227919
f0103089:	0f 44 d7             	cmove  %edi,%edxf01030895061,227978
f010308c:	83 e0 04             	and    $0x4,%eaxf010308c5062,228027
f010308f:	8d 83 a5 72 f8 ff    	lea    -0x78d5b(%ebx),%eaxf010308f5063,228076
f0103095:	8d bb ba 73 f8 ff    	lea    -0x78c46(%ebx),%edif01030955064,228135
f010309b:	0f 44 c7             	cmove  %edi,%eaxf010309b5065,228194
f010309e:	51                   	push   %ecxf010309e5066,228243
f010309f:	52                   	push   %edxf010309f5067,228287
f01030a0:	50                   	push   %eaxf01030a05068,228331
f01030a1:	8d 83 ff 72 f8 ff    	lea    -0x78d01(%ebx),%eaxf01030a15069,228375
f01030a7:	50                   	push   %eaxf01030a75070,228434
f01030a8:	e8 97 fd ff ff       	call   f0102e44 <cprintf>f01030a85071,228478
f01030ad:	83 c4 10             	add    $0x10,%espf01030ad5072,228536
f01030b0:	83 ec 08             	sub    $0x8,%espf01030b05074,228627
f01030b3:	ff 76 30             	pushl  0x30(%esi)f01030b35075,228676
f01030b6:	8d 83 0e 73 f8 ff    	lea    -0x78cf2(%ebx),%eaxf01030b65076,228726
f01030bc:	50                   	push   %eaxf01030bc5077,228785
f01030bd:	e8 82 fd ff ff       	call   f0102e44 <cprintf>f01030bd5078,228829
f01030c2:	83 c4 08             	add    $0x8,%espf01030c25080,228931
f01030c5:	0f b7 46 34          	movzwl 0x34(%esi),%eaxf01030c55081,228980
f01030c9:	50                   	push   %eaxf01030c95082,229035
f01030ca:	8d 83 1d 73 f8 ff    	lea    -0x78ce3(%ebx),%eaxf01030ca5083,229079
f01030d0:	50                   	push   %eaxf01030d05084,229138
f01030d1:	e8 6e fd ff ff       	call   f0102e44 <cprintf>f01030d15085,229182
f01030d6:	83 c4 08             	add    $0x8,%espf01030d65087,229284
f01030d9:	ff 76 38             	pushl  0x38(%esi)f01030d95088,229333
f01030dc:	8d 83 30 73 f8 ff    	lea    -0x78cd0(%ebx),%eaxf01030dc5089,229383
f01030e2:	50                   	push   %eaxf01030e25090,229442
f01030e3:	e8 5c fd ff ff       	call   f0102e44 <cprintf>f01030e35091,229486
f01030e8:	83 c4 10             	add    $0x10,%espf01030e85093,229573
f01030eb:	f6 46 34 03          	testb  $0x3,0x34(%esi)f01030eb5094,229623
f01030ef:	75 50                	jne    f0103141 <print_trapframe+0x194>f01030ef5095,229678
f01030f1:	8d 65 f4             	lea    -0xc(%ebp),%espf01030f15097,229752
f01030f4:	5b                   	pop    %ebxf01030f45098,229807
f01030f5:	5e                   	pop    %esif01030f55099,229851
f01030f6:	5f                   	pop    %edif01030f65100,229895
f01030f7:	5d                   	pop    %ebpf01030f75101,229939
f01030f8:	c3                   	ret    f01030f85102,229983
f01030f9:	8b 84 93 64 20 00 00 	mov    0x2064(%ebx,%edx,4),%eaxf01030f95104,230050
f0103100:	e9 1d ff ff ff       	jmp    f0103022 <print_trapframe+0x75>f01031005105,230114
f0103105:	83 7e 28 0e          	cmpl   $0xe,0x28(%esi)f01031055107,230233
f0103109:	0f 85 33 ff ff ff    	jne    f0103042 <print_trapframe+0x95>f01031095108,230288
f010310f:	0f 20 d0             	mov    %cr2,%eaxf010310f5110,230404
f0103112:	83 ec 08             	sub    $0x8,%espf01031125112,230491
f0103115:	50                   	push   %eaxf01031155113,230540
f0103116:	8d 83 e2 72 f8 ff    	lea    -0x78d1e(%ebx),%eaxf01031165114,230584
f010311c:	50                   	push   %eaxf010311c5115,230643
f010311d:	e8 22 fd ff ff       	call   f0102e44 <cprintf>f010311d5116,230687
f0103122:	83 c4 10             	add    $0x10,%espf01031225117,230745
f0103125:	e9 18 ff ff ff       	jmp    f0103042 <print_trapframe+0x95>f01031255118,230795
f010312a:	83 ec 0c             	sub    $0xc,%espf010312a5120,230883
f010312d:	8d 83 4b 71 f8 ff    	lea    -0x78eb5(%ebx),%eaxf010312d5121,230932
f0103133:	50                   	push   %eaxf01031335122,230991
f0103134:	e8 0b fd ff ff       	call   f0102e44 <cprintf>f01031345123,231035
f0103139:	83 c4 10             	add    $0x10,%espf01031395124,231093
f010313c:	e9 6f ff ff ff       	jmp    f01030b0 <print_trapframe+0x103>f010313c5125,231143
f0103141:	83 ec 08             	sub    $0x8,%espf01031415127,231257
f0103144:	ff 76 3c             	pushl  0x3c(%esi)f01031445128,231306
f0103147:	8d 83 3f 73 f8 ff    	lea    -0x78cc1(%ebx),%eaxf01031475129,231356
f010314d:	50                   	push   %eaxf010314d5130,231415
f010314e:	e8 f1 fc ff ff       	call   f0102e44 <cprintf>f010314e5131,231459
f0103153:	83 c4 08             	add    $0x8,%espf01031535133,231562
f0103156:	0f b7 46 40          	movzwl 0x40(%esi),%eaxf01031565134,231611
f010315a:	50                   	push   %eaxf010315a5135,231666
f010315b:	8d 83 4e 73 f8 ff    	lea    -0x78cb2(%ebx),%eaxf010315b5136,231710
f0103161:	50                   	push   %eaxf01031615137,231769
f0103162:	e8 dd fc ff ff       	call   f0102e44 <cprintf>f01031625138,231813
f0103167:	83 c4 10             	add    $0x10,%espf01031675139,231871
f010316a:	eb 85                	jmp    f01030f1 <print_trapframe+0x144>f010316a5141,231923
f010316c <trap>:f010316c5143,231996
voidvoid5147,232019
f010316c:	55                   	push   %ebpf010316c5150,232053
f010316d:	89 e5                	mov    %esp,%ebpf010316d5151,232097
f010316f:	57                   	push   %edif010316f5152,232146
f0103170:	56                   	push   %esif01031705153,232190
f0103171:	53                   	push   %ebxf01031715154,232234
f0103172:	83 ec 0c             	sub    $0xc,%espf01031725155,232278
f0103175:	e8 ed cf ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01031755156,232327
f010317a:	81 c3 a2 ae 07 00    	add    $0x7aea2,%ebxf010317a5157,232399
f0103180:	8b 75 08             	mov    0x8(%ebp),%esif01031805158,232452
f0103183:	fc                   	cld    f01031835162,232625
static inline uint32_tstatic5164,232666
f0103184:	9c                   	pushf  f01031845169,232777
f0103185:	58                   	pop    %eaxf01031855170,232817
f0103186:	f6 c4 02             	test   $0x2,%ahf01031865176,233043
f0103189:	74 1f                	je     f01031aa <trap+0x3e>f01031895177,233091
f010318b:	8d 83 61 73 f8 ff    	lea    -0x78c9f(%ebx),%eaxf010318b5178,233151
f0103191:	50                   	push   %eaxf01031915179,233210
f0103192:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01031925180,233254
f0103198:	50                   	push   %eaxf01031985181,233313
f0103199:	68 a8 00 00 00       	push   $0xa8f01031995182,233357
f010319e:	8d 83 7a 73 f8 ff    	lea    -0x78c86(%ebx),%eaxf010319e5183,233402
f01031a4:	50                   	push   %eaxf01031a45184,233461
f01031a5:	e8 07 cf ff ff       	call   f01000b1 <_panic>f01031a55185,233505
f01031aa:	83 ec 08             	sub    $0x8,%espf01031aa5188,233608
f01031ad:	56                   	push   %esif01031ad5189,233657
f01031ae:	8d 83 86 73 f8 ff    	lea    -0x78c7a(%ebx),%eaxf01031ae5190,233701
f01031b4:	50                   	push   %eaxf01031b45191,233760
f01031b5:	e8 8a fc ff ff       	call   f0102e44 <cprintf>f01031b55192,233804
f01031ba:	0f b7 46 34          	movzwl 0x34(%esi),%eaxf01031ba5195,233892
f01031be:	83 e0 03             	and    $0x3,%eaxf01031be5196,233947
f01031c1:	83 c4 10             	add    $0x10,%espf01031c15197,233996
f01031c4:	66 83 f8 03          	cmp    $0x3,%axf01031c45198,234046
f01031c8:	75 1d                	jne    f01031e7 <trap+0x7b>f01031c85199,234094
f01031ca:	c7 c0 44 03 18 f0    	mov    $0xf0180344,%eaxf01031ca5202,234201
f01031d0:	8b 00                	mov    (%eax),%eaxf01031d05203,234257
f01031d2:	85 c0                	test   %eax,%eaxf01031d25204,234308
f01031d4:	74 68                	je     f010323e <trap+0xd2>f01031d45205,234357
f01031d6:	b9 11 00 00 00       	mov    $0x11,%ecxf01031d65211,234594
f01031db:	89 c7                	mov    %eax,%edif01031db5212,234644
f01031dd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01031dd5213,234693
		tf = &curenv->env_tf;tf5215,234821
f01031df:	c7 c0 44 03 18 f0    	mov    $0xf0180344,%eaxf01031df5216,234845
f01031e5:	8b 30                	mov    (%eax),%esif01031e55217,234901
	last_tf = tf;last_tf5222,235064
f01031e7:	89 b3 44 2b 00 00    	mov    %esi,0x2b44(%ebx)f01031e75223,235079
f01031ed:	83 ec 0c             	sub    $0xc,%espf01031ed5225,235158
f01031f0:	56                   	push   %esif01031f05226,235207
f01031f1:	e8 b7 fd ff ff       	call   f0102fad <print_trapframe>f01031f15227,235251
f01031f6:	83 c4 10             	add    $0x10,%espf01031f65229,235342
f01031f9:	66 83 7e 34 08       	cmpw   $0x8,0x34(%esi)f01031f95230,235392
f01031fe:	74 5d                	je     f010325d <trap+0xf1>f01031fe5231,235447
f0103200:	83 ec 0c             	sub    $0xc,%espf01032005233,235530
f0103203:	c7 c6 44 03 18 f0    	mov    $0xf0180344,%esif01032035234,235579
f0103209:	ff 36                	pushl  (%esi)f01032095235,235635
f010320b:	e8 15 fb ff ff       	call   f0102d25 <env_destroy>f010320b5236,235681
f0103210:	8b 06                	mov    (%esi),%eaxf01032105243,235932
f0103212:	83 c4 10             	add    $0x10,%espf01032125244,235983
f0103215:	85 c0                	test   %eax,%eaxf01032155245,236033
f0103217:	74 06                	je     f010321f <trap+0xb3>f01032175246,236082
f0103219:	83 78 54 03          	cmpl   $0x3,0x54(%eax)f01032195247,236142
f010321d:	74 59                	je     f0103278 <trap+0x10c>f010321d5248,236197
f010321f:	8d 83 04 75 f8 ff    	lea    -0x78afc(%ebx),%eaxf010321f5249,236258
f0103225:	50                   	push   %eaxf01032255250,236317
f0103226:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01032265251,236361
f010322c:	50                   	push   %eaxf010322c5252,236420
f010322d:	68 c0 00 00 00       	push   $0xc0f010322d5253,236464
f0103232:	8d 83 7a 73 f8 ff    	lea    -0x78c86(%ebx),%eaxf01032325254,236509
f0103238:	50                   	push   %eaxf01032385255,236568
f0103239:	e8 73 ce ff ff       	call   f01000b1 <_panic>f01032395256,236612
f010323e:	8d 83 a1 73 f8 ff    	lea    -0x78c5f(%ebx),%eaxf010323e5258,236687
f0103244:	50                   	push   %eaxf01032445259,236746
f0103245:	8d 83 c0 6e f8 ff    	lea    -0x79140(%ebx),%eaxf01032455260,236790
f010324b:	50                   	push   %eaxf010324b5261,236849
f010324c:	68 ae 00 00 00       	push   $0xaef010324c5262,236893
f0103251:	8d 83 7a 73 f8 ff    	lea    -0x78c86(%ebx),%eaxf01032515263,236938
f0103257:	50                   	push   %eaxf01032575264,236997
f0103258:	e8 54 ce ff ff       	call   f01000b1 <_panic>f01032585265,237041
f010325d:	83 ec 04             	sub    $0x4,%espf010325d5267,237135
f0103260:	8d 83 a8 73 f8 ff    	lea    -0x78c58(%ebx),%eaxf01032605268,237184
f0103266:	50                   	push   %eaxf01032665269,237243
f0103267:	68 97 00 00 00       	push   $0x97f01032675270,237287
f010326c:	8d 83 7a 73 f8 ff    	lea    -0x78c86(%ebx),%eaxf010326c5271,237332
f0103272:	50                   	push   %eaxf01032725272,237391
f0103273:	e8 39 ce ff ff       	call   f01000b1 <_panic>f01032735273,237435
f0103278:	83 ec 0c             	sub    $0xc,%espf01032785275,237510
f010327b:	50                   	push   %eaxf010327b5276,237559
f010327c:	e8 12 fb ff ff       	call   f0102d93 <env_run>f010327c5277,237603
f0103281 <page_fault_handler>:f01032815279,237662
voidvoid5283,237697
f0103281:	55                   	push   %ebpf01032815286,237745
f0103282:	89 e5                	mov    %esp,%ebpf01032825287,237789
f0103284:	57                   	push   %edif01032845288,237838
f0103285:	56                   	push   %esif01032855289,237882
f0103286:	53                   	push   %ebxf01032865290,237926
f0103287:	83 ec 0c             	sub    $0xc,%espf01032875291,237970
f010328a:	e8 d8 ce ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010328a5292,238019
f010328f:	81 c3 8d ad 07 00    	add    $0x7ad8d,%ebxf010328f5293,238091
f0103295:	8b 7d 08             	mov    0x8(%ebp),%edif01032955294,238144
f0103298:	0f 20 d0             	mov    %cr2,%eaxf01032985296,238243
f010329b:	ff 77 30             	pushl  0x30(%edi)f010329b5303,238504
f010329e:	50                   	push   %eaxf010329e5304,238554
f010329f:	c7 c6 44 03 18 f0    	mov    $0xf0180344,%esif010329f5305,238598
f01032a5:	8b 06                	mov    (%esi),%eaxf01032a55306,238654
f01032a7:	ff 70 48             	pushl  0x48(%eax)f01032a75307,238705
f01032aa:	8d 83 30 75 f8 ff    	lea    -0x78ad0(%ebx),%eaxf01032aa5308,238755
f01032b0:	50                   	push   %eaxf01032b05309,238814
f01032b1:	e8 8e fb ff ff       	call   f0102e44 <cprintf>f01032b15310,238858
f01032b6:	89 3c 24             	mov    %edi,(%esp)f01032b65313,238979
f01032b9:	e8 ef fc ff ff       	call   f0102fad <print_trapframe>f01032b95314,239030
f01032be:	83 c4 04             	add    $0x4,%espf01032be5316,239118
f01032c1:	ff 36                	pushl  (%esi)f01032c15317,239167
f01032c3:	e8 5d fa ff ff       	call   f0102d25 <env_destroy>f01032c35318,239213
f01032c8:	83 c4 10             	add    $0x10,%espf01032c85320,239277
f01032cb:	8d 65 f4             	lea    -0xc(%ebp),%espf01032cb5321,239327
f01032ce:	5b                   	pop    %ebxf01032ce5322,239382
f01032cf:	5e                   	pop    %esif01032cf5323,239426
f01032d0:	5f                   	pop    %edif01032d05324,239470
f01032d1:	5d                   	pop    %ebpf01032d15325,239514
f01032d2:	c3                   	ret    f01032d25326,239558
f01032d3 <syscall>:f01032d35328,239599
f01032d3:	55                   	push   %ebpf01032d35329,239619
f01032d4:	89 e5                	mov    %esp,%ebpf01032d45330,239663
f01032d6:	53                   	push   %ebxf01032d65331,239712
f01032d7:	83 ec 08             	sub    $0x8,%espf01032d75332,239756
f01032da:	e8 88 ce ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01032da5333,239805
f01032df:	81 c3 3d ad 07 00    	add    $0x7ad3d,%ebxf01032df5334,239877
f01032e5:	8d 83 54 75 f8 ff    	lea    -0x78aac(%ebx),%eaxf01032e55335,239930
f01032eb:	50                   	push   %eaxf01032eb5336,239989
f01032ec:	6a 49                	push   $0x49f01032ec5337,240033
f01032ee:	8d 83 6c 75 f8 ff    	lea    -0x78a94(%ebx),%eaxf01032ee5338,240078
f01032f4:	50                   	push   %eaxf01032f45339,240137
f01032f5:	e8 b7 cd ff ff       	call   f01000b1 <_panic>f01032f55340,240181
f01032fa <stab_binsearch>:f01032fa5342,240239
static voidstatic5345,240315
f01032fa:	55                   	push   %ebpf01032fa5349,240441
f01032fb:	89 e5                	mov    %esp,%ebpf01032fb5350,240485
f01032fd:	57                   	push   %edif01032fd5351,240534
f01032fe:	56                   	push   %esif01032fe5352,240578
f01032ff:	53                   	push   %ebxf01032ff5353,240622
f0103300:	83 ec 14             	sub    $0x14,%espf01033005354,240666
f0103303:	89 45 ec             	mov    %eax,-0x14(%ebp)f01033035355,240716
f0103306:	89 55 e4             	mov    %edx,-0x1c(%ebp)f01033065356,240772
f0103309:	89 4d e0             	mov    %ecx,-0x20(%ebp)f01033095357,240828
f010330c:	8b 7d 08             	mov    0x8(%ebp),%edif010330c5358,240884
f010330f:	8b 32                	mov    (%edx),%esif010330f5360,240997
f0103311:	8b 01                	mov    (%ecx),%eaxf01033115361,241048
f0103313:	89 45 f0             	mov    %eax,-0x10(%ebp)f01033135362,241099
f0103316:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)f01033165363,241155
f010331d:	eb 2f                	jmp    f010334e <stab_binsearch+0x54>f010331d5366,241230
f010331f:	83 e8 01             	sub    $0x1,%eaxf010331f5372,241439
f0103322:	39 c6                	cmp    %eax,%esif01033225374,241532
f0103324:	7f 49                	jg     f010336f <stab_binsearch+0x75>f01033245375,241581
f0103326:	0f b6 0a             	movzbl (%edx),%ecxf01033265376,241651
f0103329:	83 ea 0c             	sub    $0xc,%edxf01033295377,241702
f010332c:	39 f9                	cmp    %edi,%ecxf010332c5378,241751
f010332e:	75 ef                	jne    f010331f <stab_binsearch+0x25>f010332e5379,241800
		any_matches = 1;any_matches5384,241914
f0103330:	8d 14 40             	lea    (%eax,%eax,2),%edxf01033305386,241966
f0103333:	8b 4d ec             	mov    -0x14(%ebp),%ecxf01033335387,242024
f0103336:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edxf01033365388,242080
f010333a:	3b 55 0c             	cmp    0xc(%ebp),%edxf010333a5389,242141
f010333d:	73 35                	jae    f0103374 <stab_binsearch+0x7a>f010333d5390,242195
f010333f:	8b 75 e4             	mov    -0x1c(%ebp),%esif010333f5392,242286
f0103342:	89 06                	mov    %eax,(%esi)f01033425393,242342
			l = true_m + 1;l5394,242393
f0103344:	8d 73 01             	lea    0x1(%ebx),%esif01033445395,242412
		any_matches = 1;any_matches5396,242466
f0103347:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01033475397,242485
f010334e:	3b 75 f0             	cmp    -0x10(%ebp),%esif010334e5399,242559
f0103351:	7f 4e                	jg     f01033a1 <stab_binsearch+0xa7>f01033515400,242615
f0103353:	8b 45 f0             	mov    -0x10(%ebp),%eaxf01033535402,242725
f0103356:	01 f0                	add    %esi,%eaxf01033565403,242781
f0103358:	89 c3                	mov    %eax,%ebxf01033585404,242830
f010335a:	c1 eb 1f             	shr    $0x1f,%ebxf010335a5405,242879
f010335d:	01 c3                	add    %eax,%ebxf010335d5406,242929
f010335f:	d1 fb                	sar    %ebxf010335f5407,242978
f0103361:	8d 04 5b             	lea    (%ebx,%ebx,2),%eaxf01033615408,243022
f0103364:	8b 4d ec             	mov    -0x14(%ebp),%ecxf01033645409,243080
f0103367:	8d 54 81 04          	lea    0x4(%ecx,%eax,4),%edxf01033675410,243136
f010336b:	89 d8                	mov    %ebx,%eaxf010336b5411,243197
f010336d:	eb b3                	jmp    f0103322 <stab_binsearch+0x28>f010336d5413,243290
			l = true_m + 1;l5414,243360
f010336f:	8d 73 01             	lea    0x1(%ebx),%esif010336f5415,243379
f0103372:	eb da                	jmp    f010334e <stab_binsearch+0x54>f01033725417,243446
f0103374:	3b 55 0c             	cmp    0xc(%ebp),%edxf01033745419,243556
f0103377:	76 14                	jbe    f010338d <stab_binsearch+0x93>f01033775420,243610
f0103379:	83 e8 01             	sub    $0x1,%eaxf01033795422,243706
f010337c:	89 45 f0             	mov    %eax,-0x10(%ebp)f010337c5423,243755
f010337f:	8b 5d e0             	mov    -0x20(%ebp),%ebxf010337f5424,243811
f0103382:	89 03                	mov    %eax,(%ebx)f01033825425,243867
		any_matches = 1;any_matches5426,243918
f0103384:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01033845427,243937
f010338b:	eb c1                	jmp    f010334e <stab_binsearch+0x54>f010338b5428,243993
			r = m - 1;r5429,244063
f010338d:	8b 75 e4             	mov    -0x1c(%ebp),%esif010338d5434,244185
f0103390:	89 06                	mov    %eax,(%esi)f01033905435,244241
			l = m;l5436,244292
f0103392:	83 45 0c 01          	addl   $0x1,0xc(%ebp)f01033925438,244313
f0103396:	89 c6                	mov    %eax,%esif01033965439,244367
		any_matches = 1;any_matches5440,244416
f0103398:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01033985441,244435
f010339f:	eb ad                	jmp    f010334e <stab_binsearch+0x54>f010339f5442,244491
f01033a1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)f01033a15447,244588
f01033a5:	74 16                	je     f01033bd <stab_binsearch+0xc3>f01033a55448,244644
f01033a7:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01033a75453,244829
f01033aa:	8b 00                	mov    (%eax),%eaxf01033aa5454,244885
f01033ac:	8b 75 e4             	mov    -0x1c(%ebp),%esif01033ac5456,244988
f01033af:	8b 0e                	mov    (%esi),%ecxf01033af5457,245044
f01033b1:	8d 14 40             	lea    (%eax,%eax,2),%edxf01033b15458,245095
f01033b4:	8b 75 ec             	mov    -0x14(%ebp),%esif01033b45459,245153
f01033b7:	8d 54 96 04          	lea    0x4(%esi,%edx,4),%edxf01033b75460,245209
f01033bb:	eb 12                	jmp    f01033cf <stab_binsearch+0xd5>f01033bb5462,245296
f01033bd:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf01033bd5464,245402
f01033c0:	8b 00                	mov    (%eax),%eaxf01033c05465,245458
f01033c2:	83 e8 01             	sub    $0x1,%eaxf01033c25466,245509
f01033c5:	8b 7d e0             	mov    -0x20(%ebp),%edif01033c55467,245558
f01033c8:	89 07                	mov    %eax,(%edi)f01033c85468,245614
f01033ca:	eb 16                	jmp    f01033e2 <stab_binsearch+0xe8>f01033ca5469,245665
f01033cc:	83 e8 01             	sub    $0x1,%eaxf01033cc5471,245747
f01033cf:	39 c1                	cmp    %eax,%ecxf01033cf5473,245822
f01033d1:	7d 0a                	jge    f01033dd <stab_binsearch+0xe3>f01033d15474,245871
f01033d3:	0f b6 1a             	movzbl (%edx),%ebxf01033d35476,245993
f01033d6:	83 ea 0c             	sub    $0xc,%edxf01033d65477,246044
f01033d9:	39 fb                	cmp    %edi,%ebxf01033d95478,246093
f01033db:	75 ef                	jne    f01033cc <stab_binsearch+0xd2>f01033db5479,246142
f01033dd:	8b 7d e4             	mov    -0x1c(%ebp),%edif01033dd5482,246253
f01033e0:	89 07                	mov    %eax,(%edi)f01033e05483,246309
f01033e2:	83 c4 14             	add    $0x14,%espf01033e25486,246365
f01033e5:	5b                   	pop    %ebxf01033e55487,246415
f01033e6:	5e                   	pop    %esif01033e65488,246459
f01033e7:	5f                   	pop    %edif01033e75489,246503
f01033e8:	5d                   	pop    %ebpf01033e85490,246547
f01033e9:	c3                   	ret    f01033e95491,246591
f01033ea <debuginfo_eip>:f01033ea5493,246632
intint5497,246762
f01033ea:	55                   	push   %ebpf01033ea5500,246825
f01033eb:	89 e5                	mov    %esp,%ebpf01033eb5501,246869
f01033ed:	57                   	push   %edif01033ed5502,246918
f01033ee:	56                   	push   %esif01033ee5503,246962
f01033ef:	53                   	push   %ebxf01033ef5504,247006
f01033f0:	83 ec 2c             	sub    $0x2c,%espf01033f05505,247050
f01033f3:	e8 6f cd ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01033f35506,247100
f01033f8:	81 c3 24 ac 07 00    	add    $0x7ac24,%ebxf01033f85507,247172
f01033fe:	8b 7d 0c             	mov    0xc(%ebp),%edif01033fe5508,247225
	const struct Stab *stabs, *stab_end;const5509,247279
f0103401:	8d 83 7b 75 f8 ff    	lea    -0x78a85(%ebx),%eaxf01034015515,247451
f0103407:	89 07                	mov    %eax,(%edi)f01034075516,247510
f0103409:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)f01034095518,247582
f0103410:	89 47 08             	mov    %eax,0x8(%edi)f01034105520,247670
f0103413:	c7 47 0c 09 00 00 00 	movl   $0x9,0xc(%edi)f01034135522,247751
f010341a:	8b 45 08             	mov    0x8(%ebp),%eaxf010341a5524,247832
f010341d:	89 47 10             	mov    %eax,0x10(%edi)f010341d5525,247886
f0103420:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)f01034205527,247965
f0103427:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eaxf01034275531,248077
f010342c:	77 21                	ja     f010344f <debuginfo_eip+0x65>f010342c5532,248133
		stabs = usd->stabs;stabs5538,248326
f010342e:	a1 00 00 20 00       	mov    0x200000,%eaxf010342e5539,248348
f0103433:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01034335540,248401
		stab_end = usd->stab_end;stab_end5541,248457
f0103436:	a1 04 00 20 00       	mov    0x200004,%eaxf01034365542,248485
		stabstr = usd->stabstr;stabstr5543,248538
f010343b:	8b 35 08 00 20 00    	mov    0x200008,%esif010343b5544,248564
f0103441:	89 75 cc             	mov    %esi,-0x34(%ebp)f01034415545,248617
		stabstr_end = usd->stabstr_end;stabstr_end5546,248673
f0103444:	8b 35 0c 00 20 00    	mov    0x20000c,%esif01034445547,248707
f010344a:	89 75 d0             	mov    %esi,-0x30(%ebp)f010344a5548,248760
f010344d:	eb 21                	jmp    f0103470 <debuginfo_eip+0x86>f010344d5549,248816
		stabstr_end = __STABSTR_END__;stabstr_end5550,248885
f010344f:	c7 c0 08 f9 10 f0    	mov    $0xf010f908,%eaxf010344f5551,248918
f0103455:	89 45 d0             	mov    %eax,-0x30(%ebp)f01034555552,248974
		stabstr = __STABSTR_BEGIN__;stabstr5553,249030
f0103458:	c7 c0 65 cf 10 f0    	mov    $0xf010cf65,%eaxf01034585554,249061
f010345e:	89 45 cc             	mov    %eax,-0x34(%ebp)f010345e5555,249117
		stab_end = __STAB_END__;stab_end5556,249173
f0103461:	c7 c0 64 cf 10 f0    	mov    $0xf010cf64,%eaxf01034615557,249200
		stabs = __STAB_BEGIN__;stabs5558,249256
f0103467:	c7 c6 94 57 10 f0    	mov    $0xf0105794,%esif01034675559,249282
f010346d:	89 75 d4             	mov    %esi,-0x2c(%ebp)f010346d5560,249338
f0103470:	8b 4d d0             	mov    -0x30(%ebp),%ecxf01034705567,249571
f0103473:	39 4d cc             	cmp    %ecx,-0x34(%ebp)f01034735568,249627
f0103476:	0f 83 30 01 00 00    	jae    f01035ac <debuginfo_eip+0x1c2>f01034765569,249683
f010347c:	80 79 ff 00          	cmpb   $0x0,-0x1(%ecx)f010347c5570,249753
f0103480:	0f 85 2d 01 00 00    	jne    f01035b3 <debuginfo_eip+0x1c9>f01034805571,249808
	lfile = 0;lfile5577,250109
f0103486:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)f01034865578,250121
	rfile = (stab_end - stabs) - 1;rfile5579,250177
f010348d:	8b 75 d4             	mov    -0x2c(%ebp),%esif010348d5580,250210
f0103490:	29 f0                	sub    %esi,%eaxf01034905581,250266
f0103492:	c1 f8 02             	sar    $0x2,%eaxf01034925582,250315
f0103495:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eaxf01034955583,250364
f010349b:	83 e8 01             	sub    $0x1,%eaxf010349b5584,250425
f010349e:	89 45 e0             	mov    %eax,-0x20(%ebp)f010349e5585,250474
f01034a1:	8d 4d e0             	lea    -0x20(%ebp),%ecxf01034a15587,250582
f01034a4:	8d 55 e4             	lea    -0x1c(%ebp),%edxf01034a45588,250638
f01034a7:	ff 75 08             	pushl  0x8(%ebp)f01034a75589,250694
f01034aa:	6a 64                	push   $0x64f01034aa5590,250743
f01034ac:	89 f0                	mov    %esi,%eaxf01034ac5591,250788
f01034ae:	e8 47 fe ff ff       	call   f01032fa <stab_binsearch>f01034ae5592,250837
f01034b3:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf01034b35594,250919
f01034b6:	83 c4 08             	add    $0x8,%espf01034b65595,250975
f01034b9:	85 c0                	test   %eax,%eaxf01034b95596,251024
f01034bb:	0f 84 f9 00 00 00    	je     f01035ba <debuginfo_eip+0x1d0>f01034bb5597,251073
	lfun = lfile;lfun5602,251234
f01034c1:	89 45 dc             	mov    %eax,-0x24(%ebp)f01034c15603,251249
	rfun = rfile;rfun5604,251305
f01034c4:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01034c45605,251320
f01034c7:	89 45 d8             	mov    %eax,-0x28(%ebp)f01034c75606,251376
f01034ca:	8d 4d d8             	lea    -0x28(%ebp),%ecxf01034ca5608,251483
f01034cd:	8d 55 dc             	lea    -0x24(%ebp),%edxf01034cd5609,251539
f01034d0:	ff 75 08             	pushl  0x8(%ebp)f01034d05610,251595
f01034d3:	6a 24                	push   $0x24f01034d35611,251644
f01034d5:	89 75 d4             	mov    %esi,-0x2c(%ebp)f01034d55612,251689
f01034d8:	89 f0                	mov    %esi,%eaxf01034d85613,251745
f01034da:	e8 1b fe ff ff       	call   f01032fa <stab_binsearch>f01034da5614,251794
f01034df:	8b 75 dc             	mov    -0x24(%ebp),%esif01034df5617,251881
f01034e2:	83 c4 08             	add    $0x8,%espf01034e25618,251937
f01034e5:	3b 75 d8             	cmp    -0x28(%ebp),%esif01034e55619,251986
f01034e8:	7f 46                	jg     f0103530 <debuginfo_eip+0x146>f01034e85620,252042
f01034ea:	8d 04 76             	lea    (%esi,%esi,2),%eaxf01034ea5624,252264
f01034ed:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf01034ed5625,252322
f01034f0:	8d 14 81             	lea    (%ecx,%eax,4),%edxf01034f05626,252378
f01034f3:	8b 02                	mov    (%edx),%eaxf01034f35627,252436
f01034f5:	8b 4d d0             	mov    -0x30(%ebp),%ecxf01034f55628,252487
f01034f8:	2b 4d cc             	sub    -0x34(%ebp),%ecxf01034f85629,252543
f01034fb:	39 c8                	cmp    %ecx,%eaxf01034fb5630,252599
f01034fd:	73 06                	jae    f0103505 <debuginfo_eip+0x11b>f01034fd5631,252648
f01034ff:	03 45 cc             	add    -0x34(%ebp),%eaxf01034ff5633,252771
f0103502:	89 47 08             	mov    %eax,0x8(%edi)f01035025634,252827
f0103505:	8b 42 08             	mov    0x8(%edx),%eaxf01035055636,252924
f0103508:	89 47 10             	mov    %eax,0x10(%edi)f01035085637,252978
		lline = lfile;lline5639,253061
		rline = rfile;rline5640,253078
f010350b:	83 ec 08             	sub    $0x8,%espf010350b5644,253209
f010350e:	6a 3a                	push   $0x3af010350e5645,253258
f0103510:	ff 77 08             	pushl  0x8(%edi)f01035105646,253303
f0103513:	e8 ea 08 00 00       	call   f0103e02 <strfind>f01035135647,253352
f0103518:	2b 47 08             	sub    0x8(%edi),%eaxf01035185648,253410
f010351b:	89 47 0c             	mov    %eax,0xc(%edi)f010351b5649,253464
f010351e:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf010351e5656,253788
f0103521:	8d 04 76             	lea    (%esi,%esi,2),%eaxf01035215657,253844
f0103524:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf01035245658,253902
f0103527:	8d 44 81 04          	lea    0x4(%ecx,%eax,4),%eaxf01035275659,253958
f010352b:	83 c4 10             	add    $0x10,%espf010352b5660,254019
f010352e:	eb 11                	jmp    f0103541 <debuginfo_eip+0x157>f010352e5661,254069
f0103530:	8b 45 08             	mov    0x8(%ebp),%eaxf01035305663,254167
f0103533:	89 47 10             	mov    %eax,0x10(%edi)f01035335664,254221
		lline = lfile;lline5665,254276
f0103536:	8b 75 e4             	mov    -0x1c(%ebp),%esif01035365666,254293
f0103539:	eb d0                	jmp    f010350b <debuginfo_eip+0x121>f01035395667,254349
f010353b:	83 ee 01             	sub    $0x1,%esif010353b5671,254537
f010353e:	83 e8 0c             	sub    $0xc,%eaxf010353e5672,254586
f0103541:	39 f3                	cmp    %esi,%ebxf01035415674,254658
f0103543:	7f 2e                	jg     f0103573 <debuginfo_eip+0x189>f01035435675,254707
f0103545:	0f b6 10             	movzbl (%eax),%edxf01035455677,254817
f0103548:	80 fa 84             	cmp    $0x84,%dlf01035485678,254868
f010354b:	74 0b                	je     f0103558 <debuginfo_eip+0x16e>f010354b5679,254917
f010354d:	80 fa 64             	cmp    $0x64,%dlf010354d5681,255054
f0103550:	75 e9                	jne    f010353b <debuginfo_eip+0x151>f01035505682,255103
f0103552:	83 78 04 00          	cmpl   $0x0,0x4(%eax)f01035525683,255173
f0103556:	74 e3                	je     f010353b <debuginfo_eip+0x151>f01035565684,255227
f0103558:	8d 04 76             	lea    (%esi,%esi,2),%eaxf01035585686,255365
f010355b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010355b5687,255423
f010355e:	8b 14 83             	mov    (%ebx,%eax,4),%edxf010355e5688,255479
f0103561:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01035615689,255537
f0103564:	8b 5d cc             	mov    -0x34(%ebp),%ebxf01035645690,255593
f0103567:	29 d8                	sub    %ebx,%eaxf01035675691,255649
f0103569:	39 c2                	cmp    %eax,%edxf01035695692,255698
f010356b:	73 06                	jae    f0103573 <debuginfo_eip+0x189>f010356b5693,255747
f010356d:	89 d8                	mov    %ebx,%eaxf010356d5695,255867
f010356f:	01 d0                	add    %edx,%eaxf010356f5696,255916
f0103571:	89 07                	mov    %eax,(%edi)f01035715697,255965
f0103573:	8b 5d dc             	mov    -0x24(%ebp),%ebxf01035735703,256152
f0103576:	8b 4d d8             	mov    -0x28(%ebp),%ecxf01035765704,256208
f0103579:	b8 00 00 00 00       	mov    $0x0,%eaxf01035795711,256395
f010357e:	39 cb                	cmp    %ecx,%ebxf010357e5713,256462
f0103580:	7d 44                	jge    f01035c6 <debuginfo_eip+0x1dc>f01035805714,256511
f0103582:	8d 53 01             	lea    0x1(%ebx),%edxf01035825716,256606
f0103585:	8d 04 5b             	lea    (%ebx,%ebx,2),%eaxf01035855717,256660
f0103588:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01035885718,256718
f010358b:	8d 44 83 10          	lea    0x10(%ebx,%eax,4),%eaxf010358b5719,256774
f010358f:	eb 07                	jmp    f0103598 <debuginfo_eip+0x1ae>f010358f5720,256836
f0103591:	83 47 14 01          	addl   $0x1,0x14(%edi)f01035915722,256930
f0103595:	83 c2 01             	add    $0x1,%edxf01035955724,257001
f0103598:	39 d1                	cmp    %edx,%ecxf01035985726,257075
f010359a:	74 25                	je     f01035c1 <debuginfo_eip+0x1d7>f010359a5727,257124
f010359c:	83 c0 0c             	add    $0xc,%eaxf010359c5728,257194
f010359f:	80 78 f4 a0          	cmpb   $0xa0,-0xc(%eax)f010359f5730,257297
f01035a3:	74 ec                	je     f0103591 <debuginfo_eip+0x1a7>f01035a35731,257353
f01035a5:	b8 00 00 00 00       	mov    $0x0,%eaxf01035a55733,257434
f01035aa:	eb 1a                	jmp    f01035c6 <debuginfo_eip+0x1dc>f01035aa5734,257483
f01035ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf01035ac5736,257566
f01035b1:	eb 13                	jmp    f01035c6 <debuginfo_eip+0x1dc>f01035b15737,257622
f01035b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf01035b35738,257692
f01035b8:	eb 0c                	jmp    f01035c6 <debuginfo_eip+0x1dc>f01035b85739,257748
f01035ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf01035ba5741,257831
f01035bf:	eb 05                	jmp    f01035c6 <debuginfo_eip+0x1dc>f01035bf5742,257887
f01035c1:	b8 00 00 00 00       	mov    $0x0,%eaxf01035c15744,257968
f01035c6:	8d 65 f4             	lea    -0xc(%ebp),%espf01035c65746,258019
f01035c9:	5b                   	pop    %ebxf01035c95747,258074
f01035ca:	5e                   	pop    %esif01035ca5748,258118
f01035cb:	5f                   	pop    %edif01035cb5749,258162
f01035cc:	5d                   	pop    %ebpf01035cc5750,258206
f01035cd:	c3                   	ret    f01035cd5751,258250
f01035ce <printnum>:f01035ce5753,258291
static voidstatic5756,258381
f01035ce:	55                   	push   %ebpf01035ce5760,258507
f01035cf:	89 e5                	mov    %esp,%ebpf01035cf5761,258551
f01035d1:	57                   	push   %edif01035d15762,258600
f01035d2:	56                   	push   %esif01035d25763,258644
f01035d3:	53                   	push   %ebxf01035d35764,258688
f01035d4:	83 ec 2c             	sub    $0x2c,%espf01035d45765,258732
f01035d7:	e8 01 f3 ff ff       	call   f01028dd <__x86.get_pc_thunk.cx>f01035d75766,258782
f01035dc:	81 c1 40 aa 07 00    	add    $0x7aa40,%ecxf01035dc5767,258854
f01035e2:	89 4d e4             	mov    %ecx,-0x1c(%ebp)f01035e25768,258907
f01035e5:	89 c7                	mov    %eax,%edif01035e55769,258963
f01035e7:	89 d6                	mov    %edx,%esif01035e75770,259012
f01035e9:	8b 45 08             	mov    0x8(%ebp),%eaxf01035e95771,259061
f01035ec:	8b 55 0c             	mov    0xc(%ebp),%edxf01035ec5772,259115
f01035ef:	89 45 d0             	mov    %eax,-0x30(%ebp)f01035ef5773,259169
f01035f2:	89 55 d4             	mov    %edx,-0x2c(%ebp)f01035f25774,259225
f01035f5:	8b 4d 10             	mov    0x10(%ebp),%ecxf01035f55777,259369
f01035f8:	bb 00 00 00 00       	mov    $0x0,%ebxf01035f85778,259424
f01035fd:	89 4d d8             	mov    %ecx,-0x28(%ebp)f01035fd5779,259473
f0103600:	89 5d dc             	mov    %ebx,-0x24(%ebp)f01036005780,259529
f0103603:	39 d3                	cmp    %edx,%ebxf01036035781,259585
f0103605:	72 09                	jb     f0103610 <printnum+0x42>f01036055782,259634
f0103607:	39 45 10             	cmp    %eax,0x10(%ebp)f01036075783,259698
f010360a:	0f 87 83 00 00 00    	ja     f0103693 <printnum+0xc5>f010360a5784,259753
f0103610:	83 ec 0c             	sub    $0xc,%espf01036105786,259879
f0103613:	ff 75 18             	pushl  0x18(%ebp)f01036135787,259928
f0103616:	8b 45 14             	mov    0x14(%ebp),%eaxf01036165788,259978
f0103619:	8d 58 ff             	lea    -0x1(%eax),%ebxf01036195789,260033
f010361c:	53                   	push   %ebxf010361c5790,260088
f010361d:	ff 75 10             	pushl  0x10(%ebp)f010361d5791,260132
f0103620:	83 ec 08             	sub    $0x8,%espf01036205792,260182
f0103623:	ff 75 dc             	pushl  -0x24(%ebp)f01036235793,260231
f0103626:	ff 75 d8             	pushl  -0x28(%ebp)f01036265794,260282
f0103629:	ff 75 d4             	pushl  -0x2c(%ebp)f01036295795,260333
f010362c:	ff 75 d0             	pushl  -0x30(%ebp)f010362c5796,260384
f010362f:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf010362f5797,260435
f0103632:	e8 e9 09 00 00       	call   f0104020 <__udivdi3>f01036325798,260491
f0103637:	83 c4 18             	add    $0x18,%espf01036375799,260551
f010363a:	52                   	push   %edxf010363a5800,260601
f010363b:	50                   	push   %eaxf010363b5801,260645
f010363c:	89 f2                	mov    %esi,%edxf010363c5802,260689
f010363e:	89 f8                	mov    %edi,%eaxf010363e5803,260738
f0103640:	e8 89 ff ff ff       	call   f01035ce <printnum>f01036405804,260787
f0103645:	83 c4 20             	add    $0x20,%espf01036455805,260846
f0103648:	eb 13                	jmp    f010365d <printnum+0x8f>f01036485806,260896
f010364a:	83 ec 08             	sub    $0x8,%espf010364a5811,261072
f010364d:	56                   	push   %esif010364d5812,261121
f010364e:	ff 75 18             	pushl  0x18(%ebp)f010364e5813,261165
f0103651:	ff d7                	call   *%edif01036515814,261215
f0103653:	83 c4 10             	add    $0x10,%espf01036535815,261260
f0103656:	83 eb 01             	sub    $0x1,%ebxf01036565817,261332
f0103659:	85 db                	test   %ebx,%ebxf01036595818,261381
f010365b:	7f ed                	jg     f010364a <printnum+0x7c>f010365b5819,261430
f010365d:	83 ec 08             	sub    $0x8,%espf010365d5824,261596
f0103660:	56                   	push   %esif01036605825,261645
f0103661:	83 ec 04             	sub    $0x4,%espf01036615826,261689
f0103664:	ff 75 dc             	pushl  -0x24(%ebp)f01036645827,261738
f0103667:	ff 75 d8             	pushl  -0x28(%ebp)f01036675828,261789
f010366a:	ff 75 d4             	pushl  -0x2c(%ebp)f010366a5829,261840
f010366d:	ff 75 d0             	pushl  -0x30(%ebp)f010366d5830,261891
f0103670:	8b 75 e4             	mov    -0x1c(%ebp),%esif01036705831,261942
f0103673:	89 f3                	mov    %esi,%ebxf01036735832,261998
f0103675:	e8 c6 0a 00 00       	call   f0104140 <__umoddi3>f01036755833,262047
f010367a:	83 c4 14             	add    $0x14,%espf010367a5834,262107
f010367d:	0f be 84 06 85 75 f8 	movsbl -0x78a7b(%esi,%eax,1),%eaxf010367d5835,262157
f0103684:	ff f01036845836,262223
f0103685:	50                   	push   %eaxf01036855837,262237
f0103686:	ff d7                	call   *%edif01036865838,262281
f0103688:	83 c4 10             	add    $0x10,%espf01036885840,262328
f010368b:	8d 65 f4             	lea    -0xc(%ebp),%espf010368b5841,262378
f010368e:	5b                   	pop    %ebxf010368e5842,262433
f010368f:	5e                   	pop    %esif010368f5843,262477
f0103690:	5f                   	pop    %edif01036905844,262521
f0103691:	5d                   	pop    %ebpf01036915845,262565
f0103692:	c3                   	ret    f01036925846,262609
f0103693:	8b 5d 14             	mov    0x14(%ebp),%ebxf01036935847,262649
f0103696:	eb be                	jmp    f0103656 <printnum+0x88>f01036965848,262704
f0103698 <sprintputch>:f01036985850,262769
static voidstatic5854,262807
f0103698:	55                   	push   %ebpf01036985857,262862
f0103699:	89 e5                	mov    %esp,%ebpf01036995858,262906
f010369b:	8b 45 0c             	mov    0xc(%ebp),%eaxf010369b5859,262955
f010369e:	83 40 08 01          	addl   $0x1,0x8(%eax)f010369e5861,263020
f01036a2:	8b 10                	mov    (%eax),%edxf01036a25863,263097
f01036a4:	3b 50 04             	cmp    0x4(%eax),%edxf01036a45864,263148
f01036a7:	73 0a                	jae    f01036b3 <sprintputch+0x1b>f01036a75865,263202
f01036a9:	8d 4a 01             	lea    0x1(%edx),%ecxf01036a95867,263287
f01036ac:	89 08                	mov    %ecx,(%eax)f01036ac5868,263341
f01036ae:	8b 45 08             	mov    0x8(%ebp),%eaxf01036ae5869,263392
f01036b1:	88 02                	mov    %al,(%edx)f01036b15870,263446
f01036b3:	5d                   	pop    %ebpf01036b35872,263498
f01036b4:	c3                   	ret    f01036b45873,263542
f01036b5 <printfmt>:f01036b55875,263583
f01036b5:	55                   	push   %ebpf01036b55877,263606
f01036b6:	89 e5                	mov    %esp,%ebpf01036b65878,263650
f01036b8:	83 ec 08             	sub    $0x8,%espf01036b85879,263699
f01036bb:	8d 45 14             	lea    0x14(%ebp),%eaxf01036bb5881,263768
f01036be:	50                   	push   %eaxf01036be5883,263859
f01036bf:	ff 75 10             	pushl  0x10(%ebp)f01036bf5884,263903
f01036c2:	ff 75 0c             	pushl  0xc(%ebp)f01036c25885,263953
f01036c5:	ff 75 08             	pushl  0x8(%ebp)f01036c55886,264002
f01036c8:	e8 05 00 00 00       	call   f01036d2 <vprintfmt>f01036c85887,264051
f01036cd:	83 c4 10             	add    $0x10,%espf01036cd5889,264113
f01036d0:	c9                   	leave  f01036d05890,264163
f01036d1:	c3                   	ret    f01036d15891,264203
f01036d2 <vprintfmt>:f01036d25893,264244
f01036d2:	55                   	push   %ebpf01036d25895,264268
f01036d3:	89 e5                	mov    %esp,%ebpf01036d35896,264312
f01036d5:	57                   	push   %edif01036d55897,264361
f01036d6:	56                   	push   %esif01036d65898,264405
f01036d7:	53                   	push   %ebxf01036d75899,264449
f01036d8:	83 ec 2c             	sub    $0x2c,%espf01036d85900,264493
f01036db:	e8 87 ca ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01036db5901,264543
f01036e0:	81 c3 3c a9 07 00    	add    $0x7a93c,%ebxf01036e05902,264615
f01036e6:	8b 75 0c             	mov    0xc(%ebp),%esif01036e65903,264668
f01036e9:	8b 7d 10             	mov    0x10(%ebp),%edif01036e95904,264722
f01036ec:	e9 8e 03 00 00       	jmp    f0103a7f <.L35+0x48>f01036ec5905,264777
		padc = ' ';padc5906,264837
f01036f1:	c6 45 d4 20          	movb   $0x20,-0x2c(%ebp)f01036f15907,264851
		altflag = 0;altflag5908,264908
f01036f5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)f01036f55909,264923
		precision = -1;precision5910,264979
f01036fc:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f01036fc5911,264997
		width = -1;width5912,265060
f0103703:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)f01037035913,265074
		lflag = 0;lflag5914,265137
f010370a:	b9 00 00 00 00       	mov    $0x0,%ecxf010370a5915,265150
f010370f:	89 4d cc             	mov    %ecx,-0x34(%ebp)f010370f5916,265199
f0103712:	8d 47 01             	lea    0x1(%edi),%eaxf01037125918,265298
f0103715:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01037155919,265352
f0103718:	0f b6 17             	movzbl (%edi),%edxf01037185920,265408
f010371b:	8d 42 dd             	lea    -0x23(%edx),%eaxf010371b5921,265459
f010371e:	3c 55                	cmp    $0x55,%alf010371e5922,265515
f0103720:	0f 87 e1 03 00 00    	ja     f0103b07 <.L22>f01037205923,265564
f0103726:	0f b6 c0             	movzbl %al,%eaxf01037265924,265619
f0103729:	89 d9                	mov    %ebx,%ecxf01037295925,265667
f010372b:	03 8c 83 10 76 f8 ff 	add    -0x789f0(%ebx,%eax,4),%ecxf010372b5926,265716
f0103732:	ff e1                	jmp    *%ecxf01037325927,265782
f0103734 <.L67>:f01037345929,265828
f0103734:	8b 7d e4             	mov    -0x1c(%ebp),%edif01037345930,265845
			padc = '-';padc5931,265901
f0103737:	c6 45 d4 2d          	movb   $0x2d,-0x2c(%ebp)f01037375932,265916
f010373b:	eb d5                	jmp    f0103712 <vprintfmt+0x40>f010373b5933,265973
f010373d <.L28>:f010373d5935,266039
f010373d:	8b 7d e4             	mov    -0x1c(%ebp),%edif010373d5937,266099
			padc = '0';padc5938,266155
f0103740:	c6 45 d4 30          	movb   $0x30,-0x2c(%ebp)f01037405939,266170
f0103744:	eb cc                	jmp    f0103712 <vprintfmt+0x40>f01037445940,266227
f0103746 <.L29>:f01037465942,266293
f0103746:	0f b6 d2             	movzbl %dl,%edxf01037465944,266353
f0103749:	8b 7d e4             	mov    -0x1c(%ebp),%edif01037495945,266401
f010374c:	b8 00 00 00 00       	mov    $0x0,%eaxf010374c5947,266491
				precision = precision * 10 + ch - '0';precision5948,266540
f0103751:	8d 04 80             	lea    (%eax,%eax,4),%eaxf01037515949,266583
f0103754:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eaxf01037545950,266641
				ch = *fmt;ch5951,266704
f0103758:	0f be 17             	movsbl (%edi),%edxf01037585952,266719
f010375b:	8d 4a d0             	lea    -0x30(%edx),%ecxf010375b5954,266800
f010375e:	83 f9 09             	cmp    $0x9,%ecxf010375e5955,266856
f0103761:	77 55                	ja     f01037b8 <.L23+0xf>f01037615956,266905
f0103763:	83 c7 01             	add    $0x1,%edif01037635958,266998
				precision = precision * 10 + ch - '0';precision5959,267047
f0103766:	eb e9                	jmp    f0103751 <.L29+0xb>f01037665960,267090
f0103768 <.L26>:f01037685962,267150
			precision = va_arg(ap, int);precision5963,267167
f0103768:	8b 45 14             	mov    0x14(%ebp),%eaxf01037685964,267199
f010376b:	8b 00                	mov    (%eax),%eaxf010376b5965,267254
f010376d:	89 45 d0             	mov    %eax,-0x30(%ebp)f010376d5966,267305
f0103770:	8b 45 14             	mov    0x14(%ebp),%eaxf01037705967,267361
f0103773:	8d 40 04             	lea    0x4(%eax),%eaxf01037735968,267416
f0103776:	89 45 14             	mov    %eax,0x14(%ebp)f01037765969,267470
f0103779:	8b 7d e4             	mov    -0x1c(%ebp),%edif01037795971,267568
f010377c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f010377c5973,267642
f0103780:	79 90                	jns    f0103712 <vprintfmt+0x40>f01037805974,267698
				width = precision, precision = -1;width5975,267763
f0103782:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01037825976,267802
f0103785:	89 45 e0             	mov    %eax,-0x20(%ebp)f01037855977,267858
f0103788:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f01037885978,267914
f010378f:	eb 81                	jmp    f0103712 <vprintfmt+0x40>f010378f5979,267977
f0103791 <.L27>:f01037915981,268043
f0103791:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01037915982,268060
f0103794:	85 c0                	test   %eax,%eaxf01037945983,268116
f0103796:	ba 00 00 00 00       	mov    $0x0,%edxf01037965984,268165
f010379b:	0f 49 d0             	cmovns %eax,%edxf010379b5985,268214
f010379e:	89 55 e0             	mov    %edx,-0x20(%ebp)f010379e5986,268263
f01037a1:	8b 7d e4             	mov    -0x1c(%ebp),%edif01037a15988,268362
f01037a4:	e9 69 ff ff ff       	jmp    f0103712 <vprintfmt+0x40>f01037a45989,268418
f01037a9 <.L23>:f01037a95991,268484
f01037a9:	8b 7d e4             	mov    -0x1c(%ebp),%edif01037a95992,268501
			altflag = 1;altflag5993,268557
f01037ac:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)f01037ac5994,268573
f01037b3:	e9 5a ff ff ff       	jmp    f0103712 <vprintfmt+0x40>f01037b35996,268647
f01037b8:	89 45 d0             	mov    %eax,-0x30(%ebp)f01037b85997,268712
f01037bb:	eb bf                	jmp    f010377c <.L26+0x14>f01037bb5998,268768
f01037bd <.L33>:f01037bd6000,268829
f01037bd:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f01037bd6002,268858
f01037c1:	8b 7d e4             	mov    -0x1c(%ebp),%edif01037c16004,268957
f01037c4:	e9 49 ff ff ff       	jmp    f0103712 <vprintfmt+0x40>f01037c46006,269031
f01037c9 <.L30>:f01037c96008,269097
f01037c9:	8b 45 14             	mov    0x14(%ebp),%eaxf01037c96010,269149
f01037cc:	8d 78 04             	lea    0x4(%eax),%edif01037cc6011,269204
f01037cf:	83 ec 08             	sub    $0x8,%espf01037cf6012,269258
f01037d2:	56                   	push   %esif01037d26013,269307
f01037d3:	ff 30                	pushl  (%eax)f01037d36014,269351
f01037d5:	ff 55 08             	call   *0x8(%ebp)f01037d56015,269397
f01037d8:	83 c4 10             	add    $0x10,%espf01037d86017,269457
f01037db:	89 7d 14             	mov    %edi,0x14(%ebp)f01037db6019,269542
f01037de:	e9 99 02 00 00       	jmp    f0103a7c <.L35+0x45>f01037de6021,269607
f01037e3 <.L32>:f01037e36023,269668
			err = va_arg(ap, int);err6024,269685
f01037e3:	8b 45 14             	mov    0x14(%ebp),%eaxf01037e36025,269711
f01037e6:	8d 78 04             	lea    0x4(%eax),%edif01037e66026,269766
f01037e9:	8b 00                	mov    (%eax),%eaxf01037e96027,269820
f01037eb:	99                   	cltd   f01037eb6028,269871
f01037ec:	31 d0                	xor    %edx,%eaxf01037ec6029,269911
f01037ee:	29 d0                	sub    %edx,%eaxf01037ee6030,269960
f01037f0:	83 f8 06             	cmp    $0x6,%eaxf01037f06032,270068
f01037f3:	7f 27                	jg     f010381c <.L32+0x39>f01037f36033,270117
f01037f5:	8b 94 83 b4 20 00 00 	mov    0x20b4(%ebx,%eax,4),%edxf01037f56034,270177
f01037fc:	85 d2                	test   %edx,%edxf01037fc6035,270241
f01037fe:	74 1c                	je     f010381c <.L32+0x39>f01037fe6036,270290
f0103800:	52                   	push   %edxf01038006038,270388
f0103801:	8d 83 d2 6e f8 ff    	lea    -0x7912e(%ebx),%eaxf01038016039,270432
f0103807:	50                   	push   %eaxf01038076040,270491
f0103808:	56                   	push   %esif01038086041,270535
f0103809:	ff 75 08             	pushl  0x8(%ebp)f01038096042,270579
f010380c:	e8 a4 fe ff ff       	call   f01036b5 <printfmt>f010380c6043,270628
f0103811:	83 c4 10             	add    $0x10,%espf01038116044,270687
			err = va_arg(ap, int);err6045,270737
f0103814:	89 7d 14             	mov    %edi,0x14(%ebp)f01038146046,270763
f0103817:	e9 60 02 00 00       	jmp    f0103a7c <.L35+0x45>f01038176047,270818
f010381c:	50                   	push   %eaxf010381c6049,270924
f010381d:	8d 83 9d 75 f8 ff    	lea    -0x78a63(%ebx),%eaxf010381d6050,270968
f0103823:	50                   	push   %eaxf01038236051,271027
f0103824:	56                   	push   %esif01038246052,271071
f0103825:	ff 75 08             	pushl  0x8(%ebp)f01038256053,271115
f0103828:	e8 88 fe ff ff       	call   f01036b5 <printfmt>f01038286054,271164
f010382d:	83 c4 10             	add    $0x10,%espf010382d6055,271223
			err = va_arg(ap, int);err6056,271273
f0103830:	89 7d 14             	mov    %edi,0x14(%ebp)f01038306057,271299
f0103833:	e9 44 02 00 00       	jmp    f0103a7c <.L35+0x45>f01038336059,271400
f0103838 <.L36>:f01038386061,271461
f0103838:	8b 45 14             	mov    0x14(%ebp),%eaxf01038386063,271519
f010383b:	83 c0 04             	add    $0x4,%eaxf010383b6064,271574
f010383e:	89 45 cc             	mov    %eax,-0x34(%ebp)f010383e6065,271623
f0103841:	8b 45 14             	mov    0x14(%ebp),%eaxf01038416066,271679
f0103844:	8b 38                	mov    (%eax),%edif01038446067,271734
				p = "(null)";p6068,271785
f0103846:	85 ff                	test   %edi,%edif01038466069,271803
f0103848:	8d 83 96 75 f8 ff    	lea    -0x78a6a(%ebx),%eaxf01038486070,271852
f010384e:	0f 44 f8             	cmove  %eax,%edif010384e6071,271911
f0103851:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f01038516073,271993
f0103855:	0f 8e b5 00 00 00    	jle    f0103910 <.L36+0xd8>f01038556074,272049
f010385b:	80 7d d4 2d          	cmpb   $0x2d,-0x2c(%ebp)f010385b6075,272109
f010385f:	75 08                	jne    f0103869 <.L36+0x31>f010385f6076,272166
f0103861:	89 75 0c             	mov    %esi,0xc(%ebp)f01038616077,272226
f0103864:	8b 75 d0             	mov    -0x30(%ebp),%esif01038646078,272280
f0103867:	eb 6d                	jmp    f01038d6 <.L36+0x9e>f01038676079,272336
f0103869:	83 ec 08             	sub    $0x8,%espf01038696081,272457
f010386c:	ff 75 d0             	pushl  -0x30(%ebp)f010386c6082,272506
f010386f:	57                   	push   %edif010386f6083,272557
f0103870:	e8 49 04 00 00       	call   f0103cbe <strnlen>f01038706084,272601
f0103875:	8b 55 e0             	mov    -0x20(%ebp),%edxf01038756085,272659
f0103878:	29 c2                	sub    %eax,%edxf01038786086,272715
f010387a:	89 55 c8             	mov    %edx,-0x38(%ebp)f010387a6087,272764
f010387d:	83 c4 10             	add    $0x10,%espf010387d6088,272820
f0103880:	0f be 45 d4          	movsbl -0x2c(%ebp),%eaxf01038806090,272896
f0103884:	89 45 e0             	mov    %eax,-0x20(%ebp)f01038846091,272952
f0103887:	89 7d d4             	mov    %edi,-0x2c(%ebp)f01038876092,273008
f010388a:	89 d7                	mov    %edx,%edif010388a6093,273064
f010388c:	eb 10                	jmp    f010389e <.L36+0x66>f010388c6095,273174
f010388e:	83 ec 08             	sub    $0x8,%espf010388e6097,273260
f0103891:	56                   	push   %esif01038916098,273309
f0103892:	ff 75 e0             	pushl  -0x20(%ebp)f01038926099,273353
f0103895:	ff 55 08             	call   *0x8(%ebp)f01038956100,273404
f0103898:	83 ef 01             	sub    $0x1,%edif01038986102,273515
f010389b:	83 c4 10             	add    $0x10,%espf010389b6103,273564
f010389e:	85 ff                	test   %edi,%edif010389e6104,273614
f01038a0:	7f ec                	jg     f010388e <.L36+0x56>f01038a06105,273663
f01038a2:	8b 7d d4             	mov    -0x2c(%ebp),%edif01038a26106,273723
f01038a5:	8b 55 c8             	mov    -0x38(%ebp),%edxf01038a56107,273779
f01038a8:	85 d2                	test   %edx,%edxf01038a86108,273835
f01038aa:	b8 00 00 00 00       	mov    $0x0,%eaxf01038aa6109,273884
f01038af:	0f 49 c2             	cmovns %edx,%eaxf01038af6110,273933
f01038b2:	29 c2                	sub    %eax,%edxf01038b26111,273982
f01038b4:	89 55 e0             	mov    %edx,-0x20(%ebp)f01038b46112,274031
f01038b7:	89 75 0c             	mov    %esi,0xc(%ebp)f01038b76113,274087
f01038ba:	8b 75 d0             	mov    -0x30(%ebp),%esif01038ba6114,274141
f01038bd:	eb 17                	jmp    f01038d6 <.L36+0x9e>f01038bd6115,274197
f01038bf:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)f01038bf6117,274300
f01038c3:	75 30                	jne    f01038f5 <.L36+0xbd>f01038c36118,274356
f01038c5:	83 ec 08             	sub    $0x8,%espf01038c56120,274440
f01038c8:	ff 75 0c             	pushl  0xc(%ebp)f01038c86121,274489
f01038cb:	50                   	push   %eaxf01038cb6122,274538
f01038cc:	ff 55 08             	call   *0x8(%ebp)f01038cc6123,274582
f01038cf:	83 c4 10             	add    $0x10,%espf01038cf6124,274632
f01038d2:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)f01038d26126,274761
f01038d6:	83 c7 01             	add    $0x1,%edif01038d66127,274817
f01038d9:	0f b6 57 ff          	movzbl -0x1(%edi),%edxf01038d96128,274866
f01038dd:	0f be c2             	movsbl %dl,%eaxf01038dd6129,274921
f01038e0:	85 c0                	test   %eax,%eaxf01038e06130,274969
f01038e2:	74 52                	je     f0103936 <.L36+0xfe>f01038e26131,275018
f01038e4:	85 f6                	test   %esi,%esif01038e46132,275078
f01038e6:	78 d7                	js     f01038bf <.L36+0x87>f01038e66133,275127
f01038e8:	83 ee 01             	sub    $0x1,%esif01038e86134,275187
f01038eb:	79 d2                	jns    f01038bf <.L36+0x87>f01038eb6135,275236
f01038ed:	8b 75 0c             	mov    0xc(%ebp),%esif01038ed6136,275296
f01038f0:	8b 7d e0             	mov    -0x20(%ebp),%edif01038f06137,275350
f01038f3:	eb 32                	jmp    f0103927 <.L36+0xef>f01038f36138,275406
f01038f5:	0f be d2             	movsbl %dl,%edxf01038f56140,275509
f01038f8:	83 ea 20             	sub    $0x20,%edxf01038f86141,275557
f01038fb:	83 fa 5e             	cmp    $0x5e,%edxf01038fb6142,275607
f01038fe:	76 c5                	jbe    f01038c5 <.L36+0x8d>f01038fe6143,275657
f0103900:	83 ec 08             	sub    $0x8,%espf01039006145,275742
f0103903:	ff 75 0c             	pushl  0xc(%ebp)f01039036146,275791
f0103906:	6a 3f                	push   $0x3ff01039066147,275840
f0103908:	ff 55 08             	call   *0x8(%ebp)f01039086148,275885
f010390b:	83 c4 10             	add    $0x10,%espf010390b6149,275935
f010390e:	eb c2                	jmp    f01038d2 <.L36+0x9a>f010390e6150,275985
f0103910:	89 75 0c             	mov    %esi,0xc(%ebp)f01039106151,276045
f0103913:	8b 75 d0             	mov    -0x30(%ebp),%esif01039136152,276099
f0103916:	eb be                	jmp    f01038d6 <.L36+0x9e>f01039166153,276155
f0103918:	83 ec 08             	sub    $0x8,%espf01039186155,276239
f010391b:	56                   	push   %esif010391b6156,276288
f010391c:	6a 20                	push   $0x20f010391c6157,276332
f010391e:	ff 55 08             	call   *0x8(%ebp)f010391e6158,276377
f0103921:	83 ef 01             	sub    $0x1,%edif01039216160,276457
f0103924:	83 c4 10             	add    $0x10,%espf01039246161,276506
f0103927:	85 ff                	test   %edi,%edif01039276162,276556
f0103929:	7f ed                	jg     f0103918 <.L36+0xe0>f01039296163,276605
f010392b:	8b 45 cc             	mov    -0x34(%ebp),%eaxf010392b6165,276706
f010392e:	89 45 14             	mov    %eax,0x14(%ebp)f010392e6166,276762
f0103931:	e9 46 01 00 00       	jmp    f0103a7c <.L35+0x45>f01039316167,276817
f0103936:	8b 7d e0             	mov    -0x20(%ebp),%edif01039366168,276877
f0103939:	8b 75 0c             	mov    0xc(%ebp),%esif01039396169,276933
f010393c:	eb e9                	jmp    f0103927 <.L36+0xef>f010393c6170,276987
f010393e <.L31>:f010393e6172,277048
f010393e:	8b 4d cc             	mov    -0x34(%ebp),%ecxf010393e6173,277065
f0103941:	83 f9 01             	cmp    $0x1,%ecxf01039416175,277138
f0103944:	7e 40                	jle    f0103986 <.L31+0x48>f01039446176,277187
f0103946:	8b 45 14             	mov    0x14(%ebp),%eaxf01039466178,277280
f0103949:	8b 50 04             	mov    0x4(%eax),%edxf01039496179,277335
f010394c:	8b 00                	mov    (%eax),%eaxf010394c6180,277389
f010394e:	89 45 d8             	mov    %eax,-0x28(%ebp)f010394e6181,277440
f0103951:	89 55 dc             	mov    %edx,-0x24(%ebp)f01039516182,277496
f0103954:	8b 45 14             	mov    0x14(%ebp),%eaxf01039546183,277552
f0103957:	8d 40 08             	lea    0x8(%eax),%eaxf01039576184,277607
f010395a:	89 45 14             	mov    %eax,0x14(%ebp)f010395a6185,277661
f010395d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)f010395d6187,277746
f0103961:	79 55                	jns    f01039b8 <.L31+0x7a>f01039616188,277802
f0103963:	83 ec 08             	sub    $0x8,%espf01039636190,277886
f0103966:	56                   	push   %esif01039666191,277935
f0103967:	6a 2d                	push   $0x2df01039676192,277979
f0103969:	ff 55 08             	call   *0x8(%ebp)f01039696193,278024
				num = -(long long) num;num6194,278074
f010396c:	8b 55 d8             	mov    -0x28(%ebp),%edxf010396c6195,278102
f010396f:	8b 4d dc             	mov    -0x24(%ebp),%ecxf010396f6196,278158
f0103972:	f7 da                	neg    %edxf01039726197,278214
f0103974:	83 d1 00             	adc    $0x0,%ecxf01039746198,278258
f0103977:	f7 d9                	neg    %ecxf01039776199,278307
f0103979:	83 c4 10             	add    $0x10,%espf01039796200,278351
			base = 10;base6201,278401
f010397c:	b8 0a 00 00 00       	mov    $0xa,%eaxf010397c6202,278415
f0103981:	e9 db 00 00 00       	jmp    f0103a61 <.L35+0x2a>f01039816203,278464
f0103986:	85 c9                	test   %ecx,%ecxf01039866205,278541
f0103988:	75 17                	jne    f01039a1 <.L31+0x63>f01039886206,278590
f010398a:	8b 45 14             	mov    0x14(%ebp),%eaxf010398a6208,278677
f010398d:	8b 00                	mov    (%eax),%eaxf010398d6209,278732
f010398f:	89 45 d8             	mov    %eax,-0x28(%ebp)f010398f6210,278783
f0103992:	99                   	cltd   f01039926211,278839
f0103993:	89 55 dc             	mov    %edx,-0x24(%ebp)f01039936212,278879
f0103996:	8b 45 14             	mov    0x14(%ebp),%eaxf01039966213,278935
f0103999:	8d 40 04             	lea    0x4(%eax),%eaxf01039996214,278990
f010399c:	89 45 14             	mov    %eax,0x14(%ebp)f010399c6215,279044
f010399f:	eb bc                	jmp    f010395d <.L31+0x1f>f010399f6216,279099
f01039a1:	8b 45 14             	mov    0x14(%ebp),%eaxf01039a16218,279187
f01039a4:	8b 00                	mov    (%eax),%eaxf01039a46219,279242
f01039a6:	89 45 d8             	mov    %eax,-0x28(%ebp)f01039a66220,279293
f01039a9:	99                   	cltd   f01039a96221,279349
f01039aa:	89 55 dc             	mov    %edx,-0x24(%ebp)f01039aa6222,279389
f01039ad:	8b 45 14             	mov    0x14(%ebp),%eaxf01039ad6223,279445
f01039b0:	8d 40 04             	lea    0x4(%eax),%eaxf01039b06224,279500
f01039b3:	89 45 14             	mov    %eax,0x14(%ebp)f01039b36225,279554
f01039b6:	eb a5                	jmp    f010395d <.L31+0x1f>f01039b66226,279609
			num = getint(&ap, lflag);num6227,279669
f01039b8:	8b 55 d8             	mov    -0x28(%ebp),%edxf01039b86228,279698
f01039bb:	8b 4d dc             	mov    -0x24(%ebp),%ecxf01039bb6229,279754
			base = 10;base6230,279810
f01039be:	b8 0a 00 00 00       	mov    $0xa,%eaxf01039be6231,279824
f01039c3:	e9 99 00 00 00       	jmp    f0103a61 <.L35+0x2a>f01039c36232,279873
f01039c8 <.L37>:f01039c86234,279934
f01039c8:	8b 4d cc             	mov    -0x34(%ebp),%ecxf01039c86235,279951
f01039cb:	83 f9 01             	cmp    $0x1,%ecxf01039cb6237,280024
f01039ce:	7e 15                	jle    f01039e5 <.L37+0x1d>f01039ce6238,280073
f01039d0:	8b 45 14             	mov    0x14(%ebp),%eaxf01039d06240,280175
f01039d3:	8b 10                	mov    (%eax),%edxf01039d36241,280230
f01039d5:	8b 48 04             	mov    0x4(%eax),%ecxf01039d56242,280281
f01039d8:	8d 40 08             	lea    0x8(%eax),%eaxf01039d86243,280335
f01039db:	89 45 14             	mov    %eax,0x14(%ebp)f01039db6244,280389
			base = 10;base6245,280444
f01039de:	b8 0a 00 00 00       	mov    $0xa,%eaxf01039de6246,280458
f01039e3:	eb 7c                	jmp    f0103a61 <.L35+0x2a>f01039e36247,280507
f01039e5:	85 c9                	test   %ecx,%ecxf01039e56249,280584
f01039e7:	75 17                	jne    f0103a00 <.L37+0x38>f01039e76250,280633
f01039e9:	8b 45 14             	mov    0x14(%ebp),%eaxf01039e96252,280729
f01039ec:	8b 10                	mov    (%eax),%edxf01039ec6253,280784
f01039ee:	b9 00 00 00 00       	mov    $0x0,%ecxf01039ee6254,280835
f01039f3:	8d 40 04             	lea    0x4(%eax),%eaxf01039f36255,280884
f01039f6:	89 45 14             	mov    %eax,0x14(%ebp)f01039f66256,280938
			base = 10;base6257,280993
f01039f9:	b8 0a 00 00 00       	mov    $0xa,%eaxf01039f96258,281007
f01039fe:	eb 61                	jmp    f0103a61 <.L35+0x2a>f01039fe6259,281056
f0103a00:	8b 45 14             	mov    0x14(%ebp),%eaxf0103a006261,281153
f0103a03:	8b 10                	mov    (%eax),%edxf0103a036262,281208
f0103a05:	b9 00 00 00 00       	mov    $0x0,%ecxf0103a056263,281259
f0103a0a:	8d 40 04             	lea    0x4(%eax),%eaxf0103a0a6264,281308
f0103a0d:	89 45 14             	mov    %eax,0x14(%ebp)f0103a0d6265,281362
			base = 10;base6266,281417
f0103a10:	b8 0a 00 00 00       	mov    $0xa,%eaxf0103a106267,281431
f0103a15:	eb 4a                	jmp    f0103a61 <.L35+0x2a>f0103a156268,281480
f0103a17 <.L34>:f0103a176270,281541
f0103a17:	83 ec 08             	sub    $0x8,%espf0103a176272,281581
f0103a1a:	56                   	push   %esif0103a1a6273,281630
f0103a1b:	6a 58                	push   $0x58f0103a1b6274,281674
f0103a1d:	ff 55 08             	call   *0x8(%ebp)f0103a1d6275,281719
f0103a20:	83 c4 08             	add    $0x8,%espf0103a206277,281792
f0103a23:	56                   	push   %esif0103a236278,281841
f0103a24:	6a 58                	push   $0x58f0103a246279,281885
f0103a26:	ff 55 08             	call   *0x8(%ebp)f0103a266280,281930
f0103a29:	83 c4 08             	add    $0x8,%espf0103a296282,282003
f0103a2c:	56                   	push   %esif0103a2c6283,282052
f0103a2d:	6a 58                	push   $0x58f0103a2d6284,282096
f0103a2f:	ff 55 08             	call   *0x8(%ebp)f0103a2f6285,282141
f0103a32:	83 c4 10             	add    $0x10,%espf0103a326287,282201
f0103a35:	eb 45                	jmp    f0103a7c <.L35+0x45>f0103a356288,282251
f0103a37 <.L35>:f0103a376290,282312
f0103a37:	83 ec 08             	sub    $0x8,%espf0103a376292,282352
f0103a3a:	56                   	push   %esif0103a3a6293,282401
f0103a3b:	6a 30                	push   $0x30f0103a3b6294,282445
f0103a3d:	ff 55 08             	call   *0x8(%ebp)f0103a3d6295,282490
f0103a40:	83 c4 08             	add    $0x8,%espf0103a406297,282563
f0103a43:	56                   	push   %esif0103a436298,282612
f0103a44:	6a 78                	push   $0x78f0103a446299,282656
f0103a46:	ff 55 08             	call   *0x8(%ebp)f0103a466300,282701
			num = (unsigned long long)num6301,282751
f0103a49:	8b 45 14             	mov    0x14(%ebp),%eaxf0103a496302,282781
f0103a4c:	8b 10                	mov    (%eax),%edxf0103a4c6303,282836
f0103a4e:	b9 00 00 00 00       	mov    $0x0,%ecxf0103a4e6304,282887
f0103a53:	83 c4 10             	add    $0x10,%espf0103a536306,282952
f0103a56:	8d 40 04             	lea    0x4(%eax),%eaxf0103a566308,283038
f0103a59:	89 45 14             	mov    %eax,0x14(%ebp)f0103a596309,283092
			base = 16;base6310,283147
f0103a5c:	b8 10 00 00 00       	mov    $0x10,%eaxf0103a5c6311,283161
f0103a61:	83 ec 0c             	sub    $0xc,%espf0103a616313,283263
f0103a64:	0f be 7d d4          	movsbl -0x2c(%ebp),%edif0103a646314,283312
f0103a68:	57                   	push   %edif0103a686315,283368
f0103a69:	ff 75 e0             	pushl  -0x20(%ebp)f0103a696316,283412
f0103a6c:	50                   	push   %eaxf0103a6c6317,283463
f0103a6d:	51                   	push   %ecxf0103a6d6318,283507
f0103a6e:	52                   	push   %edxf0103a6e6319,283551
f0103a6f:	89 f2                	mov    %esi,%edxf0103a6f6320,283595
f0103a71:	8b 45 08             	mov    0x8(%ebp),%eaxf0103a716321,283644
f0103a74:	e8 55 fb ff ff       	call   f01035ce <printnum>f0103a746322,283698
f0103a79:	83 c4 20             	add    $0x20,%espf0103a796324,283767
			err = va_arg(ap, int);err6325,283817
f0103a7c:	8b 7d e4             	mov    -0x1c(%ebp),%edif0103a7c6326,283843
f0103a7f:	83 c7 01             	add    $0x1,%edif0103a7f6328,283950
f0103a82:	0f b6 47 ff          	movzbl -0x1(%edi),%eaxf0103a826329,283999
f0103a86:	83 f8 25             	cmp    $0x25,%eaxf0103a866330,284054
f0103a89:	0f 84 62 fc ff ff    	je     f01036f1 <vprintfmt+0x1f>f0103a896331,284104
f0103a8f:	85 c0                	test   %eax,%eaxf0103a8f6333,284188
f0103a91:	0f 84 91 00 00 00    	je     f0103b28 <.L22+0x21>f0103a916334,284237
f0103a97:	83 ec 08             	sub    $0x8,%espf0103a976336,284319
f0103a9a:	56                   	push   %esif0103a9a6337,284368
f0103a9b:	50                   	push   %eaxf0103a9b6338,284412
f0103a9c:	ff 55 08             	call   *0x8(%ebp)f0103a9c6339,284456
f0103a9f:	83 c4 10             	add    $0x10,%espf0103a9f6340,284506
f0103aa2:	eb db                	jmp    f0103a7f <.L35+0x48>f0103aa26341,284556
f0103aa4 <.L38>:f0103aa46343,284617
f0103aa4:	8b 4d cc             	mov    -0x34(%ebp),%ecxf0103aa46344,284634
f0103aa7:	83 f9 01             	cmp    $0x1,%ecxf0103aa76346,284707
f0103aaa:	7e 15                	jle    f0103ac1 <.L38+0x1d>f0103aaa6347,284756
f0103aac:	8b 45 14             	mov    0x14(%ebp),%eaxf0103aac6349,284858
f0103aaf:	8b 10                	mov    (%eax),%edxf0103aaf6350,284913
f0103ab1:	8b 48 04             	mov    0x4(%eax),%ecxf0103ab16351,284964
f0103ab4:	8d 40 08             	lea    0x8(%eax),%eaxf0103ab46352,285018
f0103ab7:	89 45 14             	mov    %eax,0x14(%ebp)f0103ab76353,285072
			base = 16;base6354,285127
f0103aba:	b8 10 00 00 00       	mov    $0x10,%eaxf0103aba6355,285141
f0103abf:	eb a0                	jmp    f0103a61 <.L35+0x2a>f0103abf6356,285191
f0103ac1:	85 c9                	test   %ecx,%ecxf0103ac16358,285268
f0103ac3:	75 17                	jne    f0103adc <.L38+0x38>f0103ac36359,285317
f0103ac5:	8b 45 14             	mov    0x14(%ebp),%eaxf0103ac56361,285413
f0103ac8:	8b 10                	mov    (%eax),%edxf0103ac86362,285468
f0103aca:	b9 00 00 00 00       	mov    $0x0,%ecxf0103aca6363,285519
f0103acf:	8d 40 04             	lea    0x4(%eax),%eaxf0103acf6364,285568
f0103ad2:	89 45 14             	mov    %eax,0x14(%ebp)f0103ad26365,285622
			base = 16;base6366,285677
f0103ad5:	b8 10 00 00 00       	mov    $0x10,%eaxf0103ad56367,285691
f0103ada:	eb 85                	jmp    f0103a61 <.L35+0x2a>f0103ada6368,285741
f0103adc:	8b 45 14             	mov    0x14(%ebp),%eaxf0103adc6370,285838
f0103adf:	8b 10                	mov    (%eax),%edxf0103adf6371,285893
f0103ae1:	b9 00 00 00 00       	mov    $0x0,%ecxf0103ae16372,285944
f0103ae6:	8d 40 04             	lea    0x4(%eax),%eaxf0103ae66373,285993
f0103ae9:	89 45 14             	mov    %eax,0x14(%ebp)f0103ae96374,286047
			base = 16;base6375,286102
f0103aec:	b8 10 00 00 00       	mov    $0x10,%eaxf0103aec6376,286116
f0103af1:	e9 6b ff ff ff       	jmp    f0103a61 <.L35+0x2a>f0103af16377,286166
f0103af6 <.L25>:f0103af66379,286227
f0103af6:	83 ec 08             	sub    $0x8,%espf0103af66381,286266
f0103af9:	56                   	push   %esif0103af96382,286315
f0103afa:	6a 25                	push   $0x25f0103afa6383,286359
f0103afc:	ff 55 08             	call   *0x8(%ebp)f0103afc6384,286404
f0103aff:	83 c4 10             	add    $0x10,%espf0103aff6386,286464
f0103b02:	e9 75 ff ff ff       	jmp    f0103a7c <.L35+0x45>f0103b026387,286514
f0103b07 <.L22>:f0103b076389,286575
f0103b07:	83 ec 08             	sub    $0x8,%espf0103b076391,286615
f0103b0a:	56                   	push   %esif0103b0a6392,286664
f0103b0b:	6a 25                	push   $0x25f0103b0b6393,286708
f0103b0d:	ff 55 08             	call   *0x8(%ebp)f0103b0d6394,286753
f0103b10:	83 c4 10             	add    $0x10,%espf0103b106396,286841
f0103b13:	89 f8                	mov    %edi,%eaxf0103b136397,286891
f0103b15:	eb 03                	jmp    f0103b1a <.L22+0x13>f0103b156398,286940
f0103b17:	83 e8 01             	sub    $0x1,%eaxf0103b176399,287000
f0103b1a:	80 78 ff 25          	cmpb   $0x25,-0x1(%eax)f0103b1a6400,287049
f0103b1e:	75 f7                	jne    f0103b17 <.L22+0x10>f0103b1e6401,287105
f0103b20:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0103b206402,287165
f0103b23:	e9 54 ff ff ff       	jmp    f0103a7c <.L35+0x45>f0103b236403,287221
f0103b28:	8d 65 f4             	lea    -0xc(%ebp),%espf0103b286405,287283
f0103b2b:	5b                   	pop    %ebxf0103b2b6406,287338
f0103b2c:	5e                   	pop    %esif0103b2c6407,287382
f0103b2d:	5f                   	pop    %edif0103b2d6408,287426
f0103b2e:	5d                   	pop    %ebpf0103b2e6409,287470
f0103b2f:	c3                   	ret    f0103b2f6410,287514
f0103b30 <vsnprintf>:f0103b306412,287555
intint6414,287578
f0103b30:	55                   	push   %ebpf0103b306417,287641
f0103b31:	89 e5                	mov    %esp,%ebpf0103b316418,287685
f0103b33:	53                   	push   %ebxf0103b336419,287734
f0103b34:	83 ec 14             	sub    $0x14,%espf0103b346420,287778
f0103b37:	e8 2b c6 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0103b376421,287828
f0103b3c:	81 c3 e0 a4 07 00    	add    $0x7a4e0,%ebxf0103b3c6422,287900
f0103b42:	8b 45 08             	mov    0x8(%ebp),%eaxf0103b426423,287953
f0103b45:	8b 55 0c             	mov    0xc(%ebp),%edxf0103b456424,288007
f0103b48:	89 45 ec             	mov    %eax,-0x14(%ebp)f0103b486426,288102
f0103b4b:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecxf0103b4b6427,288158
f0103b4f:	89 4d f0             	mov    %ecx,-0x10(%ebp)f0103b4f6428,288220
f0103b52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f0103b526429,288276
f0103b59:	85 c0                	test   %eax,%eaxf0103b596432,288359
f0103b5b:	74 2b                	je     f0103b88 <vsnprintf+0x58>f0103b5b6433,288408
f0103b5d:	85 d2                	test   %edx,%edxf0103b5d6434,288473
f0103b5f:	7e 27                	jle    f0103b88 <vsnprintf+0x58>f0103b5f6435,288522
f0103b61:	ff 75 14             	pushl  0x14(%ebp)f0103b616440,288687
f0103b64:	ff 75 10             	pushl  0x10(%ebp)f0103b646441,288737
f0103b67:	8d 45 ec             	lea    -0x14(%ebp),%eaxf0103b676442,288787
f0103b6a:	50                   	push   %eaxf0103b6a6443,288843
f0103b6b:	8d 83 7c 56 f8 ff    	lea    -0x7a984(%ebx),%eaxf0103b6b6444,288887
f0103b71:	50                   	push   %eaxf0103b716445,288946
f0103b72:	e8 5b fb ff ff       	call   f01036d2 <vprintfmt>f0103b726446,288990
f0103b77:	8b 45 ec             	mov    -0x14(%ebp),%eaxf0103b776450,289097
f0103b7a:	c6 00 00             	movb   $0x0,(%eax)f0103b7a6451,289153
f0103b7d:	8b 45 f4             	mov    -0xc(%ebp),%eaxf0103b7d6454,289220
f0103b80:	83 c4 10             	add    $0x10,%espf0103b806455,289275
f0103b83:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0103b836457,289327
f0103b86:	c9                   	leave  f0103b866458,289382
f0103b87:	c3                   	ret    f0103b876459,289422
f0103b88:	b8 fd ff ff ff       	mov    $0xfffffffd,%eaxf0103b886461,289481
f0103b8d:	eb f4                	jmp    f0103b83 <vsnprintf+0x53>f0103b8d6462,289537
f0103b8f <snprintf>:f0103b8f6464,289603
intint6466,289625
f0103b8f:	55                   	push   %ebpf0103b8f6469,289680
f0103b90:	89 e5                	mov    %esp,%ebpf0103b906470,289724
f0103b92:	83 ec 08             	sub    $0x8,%espf0103b926471,289773
f0103b95:	8d 45 14             	lea    0x14(%ebp),%eaxf0103b956476,289865
	rc = vsnprintf(buf, n, fmt, ap);rc6477,289920
f0103b98:	50                   	push   %eaxf0103b986478,289954
f0103b99:	ff 75 10             	pushl  0x10(%ebp)f0103b996479,289998
f0103b9c:	ff 75 0c             	pushl  0xc(%ebp)f0103b9c6480,290048
f0103b9f:	ff 75 08             	pushl  0x8(%ebp)f0103b9f6481,290097
f0103ba2:	e8 89 ff ff ff       	call   f0103b30 <vsnprintf>f0103ba26482,290146
f0103ba7:	c9                   	leave  f0103ba76487,290234
f0103ba8:	c3                   	ret    f0103ba86488,290274
f0103ba9 <readline>:f0103ba96490,290315
#define BUFLEN 1024BUFLEN6491,290336
static char buf[BUFLEN];static6492,290356
char *char6494,290382
f0103ba9:	55                   	push   %ebpf0103ba96497,290420
f0103baa:	89 e5                	mov    %esp,%ebpf0103baa6498,290464
f0103bac:	57                   	push   %edif0103bac6499,290513
f0103bad:	56                   	push   %esif0103bad6500,290557
f0103bae:	53                   	push   %ebxf0103bae6501,290601
f0103baf:	83 ec 1c             	sub    $0x1c,%espf0103baf6502,290645
f0103bb2:	e8 b0 c5 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0103bb26503,290695
f0103bb7:	81 c3 65 a4 07 00    	add    $0x7a465,%ebxf0103bb76504,290767
f0103bbd:	8b 45 08             	mov    0x8(%ebp),%eaxf0103bbd6505,290820
f0103bc0:	85 c0                	test   %eax,%eaxf0103bc06509,290916
f0103bc2:	74 13                	je     f0103bd7 <readline+0x2e>f0103bc26510,290965
f0103bc4:	83 ec 08             	sub    $0x8,%espf0103bc46512,291054
f0103bc7:	50                   	push   %eaxf0103bc76513,291103
f0103bc8:	8d 83 d2 6e f8 ff    	lea    -0x7912e(%ebx),%eaxf0103bc86514,291147
f0103bce:	50                   	push   %eaxf0103bce6515,291206
f0103bcf:	e8 70 f2 ff ff       	call   f0102e44 <cprintf>f0103bcf6516,291250
f0103bd4:	83 c4 10             	add    $0x10,%espf0103bd46517,291308
	i = 0;i6519,291359
	echoing = iscons(0);echoing6520,291367
f0103bd7:	83 ec 0c             	sub    $0xc,%espf0103bd76521,291389
f0103bda:	6a 00                	push   $0x0f0103bda6522,291438
f0103bdc:	e8 1e cb ff ff       	call   f01006ff <iscons>f0103bdc6523,291482
f0103be1:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0103be16524,291539
f0103be4:	83 c4 10             	add    $0x10,%espf0103be46525,291595
	i = 0;i6526,291645
f0103be7:	bf 00 00 00 00       	mov    $0x0,%edif0103be76527,291653
f0103bec:	eb 46                	jmp    f0103c34 <readline+0x8b>f0103bec6528,291702
		c = getchar();c6530,291779
f0103bee:	83 ec 08             	sub    $0x8,%espf0103bee6533,291846
f0103bf1:	50                   	push   %eaxf0103bf16534,291895
f0103bf2:	8d 83 68 77 f8 ff    	lea    -0x78898(%ebx),%eaxf0103bf26535,291939
f0103bf8:	50                   	push   %eaxf0103bf86536,291998
f0103bf9:	e8 46 f2 ff ff       	call   f0102e44 <cprintf>f0103bf96537,292042
f0103bfe:	83 c4 10             	add    $0x10,%espf0103bfe6539,292116
f0103c01:	b8 00 00 00 00       	mov    $0x0,%eaxf0103c016540,292166
f0103c06:	8d 65 f4             	lea    -0xc(%ebp),%espf0103c066547,292274
f0103c09:	5b                   	pop    %ebxf0103c096548,292329
f0103c0a:	5e                   	pop    %esif0103c0a6549,292373
f0103c0b:	5f                   	pop    %edif0103c0b6550,292417
f0103c0c:	5d                   	pop    %ebpf0103c0c6551,292461
f0103c0d:	c3                   	ret    f0103c0d6552,292505
f0103c0e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f0103c0e6554,292561
f0103c12:	75 05                	jne    f0103c19 <readline+0x70>f0103c126555,292617
f0103c14:	83 ef 01             	sub    $0x1,%edif0103c146557,292689
f0103c17:	eb 1b                	jmp    f0103c34 <readline+0x8b>f0103c176558,292738
f0103c19:	83 ec 0c             	sub    $0xc,%espf0103c196560,292822
f0103c1c:	6a 08                	push   $0x8f0103c1c6561,292871
f0103c1e:	e8 bb ca ff ff       	call   f01006de <cputchar>f0103c1e6562,292915
f0103c23:	83 c4 10             	add    $0x10,%espf0103c236563,292974
f0103c26:	eb ec                	jmp    f0103c14 <readline+0x6b>f0103c266564,293024
f0103c28:	89 f0                	mov    %esi,%eaxf0103c286566,293105
f0103c2a:	88 84 3b e4 2b 00 00 	mov    %al,0x2be4(%ebx,%edi,1)f0103c2a6567,293154
f0103c31:	8d 7f 01             	lea    0x1(%edi),%edif0103c316568,293217
		c = getchar();c6569,293271
f0103c34:	e8 b5 ca ff ff       	call   f01006ee <getchar>f0103c346570,293288
f0103c39:	89 c6                	mov    %eax,%esif0103c396571,293346
f0103c3b:	85 c0                	test   %eax,%eaxf0103c3b6573,293410
f0103c3d:	78 af                	js     f0103bee <readline+0x45>f0103c3d6574,293459
f0103c3f:	83 f8 08             	cmp    $0x8,%eaxf0103c3f6576,293575
f0103c42:	0f 94 c2             	sete   %dlf0103c426577,293624
f0103c45:	83 f8 7f             	cmp    $0x7f,%eaxf0103c456578,293667
f0103c48:	0f 94 c0             	sete   %alf0103c486579,293717
f0103c4b:	08 c2                	or     %al,%dlf0103c4b6580,293760
f0103c4d:	74 04                	je     f0103c53 <readline+0xaa>f0103c4d6581,293807
f0103c4f:	85 ff                	test   %edi,%edif0103c4f6582,293871
f0103c51:	7f bb                	jg     f0103c0e <readline+0x65>f0103c516583,293920
f0103c53:	83 fe 1f             	cmp    $0x1f,%esif0103c536585,294025
f0103c56:	7e 1c                	jle    f0103c74 <readline+0xcb>f0103c566586,294075
f0103c58:	81 ff fe 03 00 00    	cmp    $0x3fe,%edif0103c586587,294139
f0103c5e:	7f 14                	jg     f0103c74 <readline+0xcb>f0103c5e6588,294190
f0103c60:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f0103c606590,294270
f0103c64:	74 c2                	je     f0103c28 <readline+0x7f>f0103c646591,294326
f0103c66:	83 ec 0c             	sub    $0xc,%espf0103c666593,294407
f0103c69:	56                   	push   %esif0103c696594,294456
f0103c6a:	e8 6f ca ff ff       	call   f01006de <cputchar>f0103c6a6595,294500
f0103c6f:	83 c4 10             	add    $0x10,%espf0103c6f6596,294559
f0103c72:	eb b4                	jmp    f0103c28 <readline+0x7f>f0103c726597,294609
f0103c74:	83 fe 0a             	cmp    $0xa,%esif0103c746599,294712
f0103c77:	74 05                	je     f0103c7e <readline+0xd5>f0103c776600,294761
f0103c79:	83 fe 0d             	cmp    $0xd,%esif0103c796601,294825
f0103c7c:	75 b6                	jne    f0103c34 <readline+0x8b>f0103c7c6602,294874
f0103c7e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f0103c7e6604,294954
f0103c82:	75 13                	jne    f0103c97 <readline+0xee>f0103c826605,295010
f0103c84:	c6 84 3b e4 2b 00 00 	movb   $0x0,0x2be4(%ebx,%edi,1)f0103c846607,295089
f0103c8b:	00 f0103c8b6608,295153
f0103c8c:	8d 83 e4 2b 00 00    	lea    0x2be4(%ebx),%eaxf0103c8c6610,295182
f0103c92:	e9 6f ff ff ff       	jmp    f0103c06 <readline+0x5d>f0103c926611,295239
f0103c97:	83 ec 0c             	sub    $0xc,%espf0103c976613,295323
f0103c9a:	6a 0a                	push   $0xaf0103c9a6614,295372
f0103c9c:	e8 3d ca ff ff       	call   f01006de <cputchar>f0103c9c6615,295416
f0103ca1:	83 c4 10             	add    $0x10,%espf0103ca16616,295475
f0103ca4:	eb de                	jmp    f0103c84 <readline+0xdb>f0103ca46617,295525
f0103ca6 <strlen>:f0103ca66619,295590
#define ASM 1ASM6621,295648
intint6623,295663
f0103ca6:	55                   	push   %ebpf0103ca66626,295691
f0103ca7:	89 e5                	mov    %esp,%ebpf0103ca76627,295735
f0103ca9:	8b 55 08             	mov    0x8(%ebp),%edxf0103ca96628,295784
f0103cac:	b8 00 00 00 00       	mov    $0x0,%eaxf0103cac6632,295877
f0103cb1:	eb 03                	jmp    f0103cb6 <strlen+0x10>f0103cb16633,295926
f0103cb3:	83 c0 01             	add    $0x1,%eaxf0103cb36635,295995
f0103cb6:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)f0103cb66637,296074
f0103cba:	75 f7                	jne    f0103cb3 <strlen+0xd>f0103cba6638,296132
f0103cbc:	5d                   	pop    %ebpf0103cbc6641,296206
f0103cbd:	c3                   	ret    f0103cbd6642,296250
f0103cbe <strnlen>:f0103cbe6644,296291
intint6646,296312
f0103cbe:	55                   	push   %ebpf0103cbe6649,296354
f0103cbf:	89 e5                	mov    %esp,%ebpf0103cbf6650,296398
f0103cc1:	8b 4d 08             	mov    0x8(%ebp),%ecxf0103cc16651,296447
f0103cc4:	8b 55 0c             	mov    0xc(%ebp),%edxf0103cc46652,296501
f0103cc7:	b8 00 00 00 00       	mov    $0x0,%eaxf0103cc76656,296614
f0103ccc:	eb 03                	jmp    f0103cd1 <strnlen+0x13>f0103ccc6657,296663
f0103cce:	83 c0 01             	add    $0x1,%eaxf0103cce6659,296733
f0103cd1:	39 d0                	cmp    %edx,%eaxf0103cd16661,296832
f0103cd3:	74 06                	je     f0103cdb <strnlen+0x1d>f0103cd36662,296881
f0103cd5:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)f0103cd56663,296944
f0103cd9:	75 f3                	jne    f0103cce <strnlen+0x10>f0103cd96664,297002
f0103cdb:	5d                   	pop    %ebpf0103cdb6667,297078
f0103cdc:	c3                   	ret    f0103cdc6668,297122
f0103cdd <strcpy>:f0103cdd6670,297163
char *char6672,297183
f0103cdd:	55                   	push   %ebpf0103cdd6675,297227
f0103cde:	89 e5                	mov    %esp,%ebpf0103cde6676,297271
f0103ce0:	53                   	push   %ebxf0103ce06677,297320
f0103ce1:	8b 45 08             	mov    0x8(%ebp),%eaxf0103ce16678,297364
f0103ce4:	8b 4d 0c             	mov    0xc(%ebp),%ecxf0103ce46679,297418
	ret = dst;ret6682,297485
f0103ce7:	89 c2                	mov    %eax,%edxf0103ce76684,297532
f0103ce9:	83 c1 01             	add    $0x1,%ecxf0103ce96685,297581
f0103cec:	83 c2 01             	add    $0x1,%edxf0103cec6686,297630
f0103cef:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebxf0103cef6687,297679
f0103cf3:	88 5a ff             	mov    %bl,-0x1(%edx)f0103cf36688,297734
f0103cf6:	84 db                	test   %bl,%blf0103cf66689,297788
f0103cf8:	75 ef                	jne    f0103ce9 <strcpy+0xc>f0103cf86690,297835
f0103cfa:	5b                   	pop    %ebxf0103cfa6694,297931
f0103cfb:	5d                   	pop    %ebpf0103cfb6695,297975
f0103cfc:	c3                   	ret    f0103cfc6696,298019
f0103cfd <strcat>:f0103cfd6698,298060
char *char6700,298080
f0103cfd:	55                   	push   %ebpf0103cfd6703,298124
f0103cfe:	89 e5                	mov    %esp,%ebpf0103cfe6704,298168
f0103d00:	53                   	push   %ebxf0103d006705,298217
f0103d01:	8b 5d 08             	mov    0x8(%ebp),%ebxf0103d016706,298261
f0103d04:	53                   	push   %ebxf0103d046708,298339
f0103d05:	e8 9c ff ff ff       	call   f0103ca6 <strlen>f0103d056709,298383
f0103d0a:	83 c4 04             	add    $0x4,%espf0103d0a6710,298440
f0103d0d:	ff 75 0c             	pushl  0xc(%ebp)f0103d0d6712,298514
f0103d10:	01 d8                	add    %ebx,%eaxf0103d106713,298563
f0103d12:	50                   	push   %eaxf0103d126714,298612
f0103d13:	e8 c5 ff ff ff       	call   f0103cdd <strcpy>f0103d136715,298656
f0103d18:	89 d8                	mov    %ebx,%eaxf0103d186718,298728
f0103d1a:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0103d1a6719,298777
f0103d1d:	c9                   	leave  f0103d1d6720,298832
f0103d1e:	c3                   	ret    f0103d1e6721,298872
f0103d1f <strncpy>:f0103d1f6723,298913
char *char6725,298934
f0103d1f:	55                   	push   %ebpf0103d1f6727,298992
f0103d20:	89 e5                	mov    %esp,%ebpf0103d206728,299036
f0103d22:	56                   	push   %esif0103d226729,299085
f0103d23:	53                   	push   %ebxf0103d236730,299129
f0103d24:	8b 75 08             	mov    0x8(%ebp),%esif0103d246731,299173
f0103d27:	8b 4d 0c             	mov    0xc(%ebp),%ecxf0103d276732,299227
f0103d2a:	89 f3                	mov    %esi,%ebxf0103d2a6733,299281
f0103d2c:	03 5d 10             	add    0x10(%ebp),%ebxf0103d2c6734,299330
	ret = dst;ret6738,299409
f0103d2f:	89 f2                	mov    %esi,%edxf0103d2f6740,299451
f0103d31:	eb 0f                	jmp    f0103d42 <strncpy+0x23>f0103d316741,299500
f0103d33:	83 c2 01             	add    $0x1,%edxf0103d336743,299580
f0103d36:	0f b6 01             	movzbl (%ecx),%eaxf0103d366744,299629
f0103d39:	88 42 ff             	mov    %al,-0x1(%edx)f0103d396745,299680
f0103d3c:	80 39 01             	cmpb   $0x1,(%ecx)f0103d3c6749,299827
f0103d3f:	83 d9 ff             	sbb    $0xffffffff,%ecxf0103d3f6750,299878
f0103d42:	39 da                	cmp    %ebx,%edxf0103d426752,299964
f0103d44:	75 ed                	jne    f0103d33 <strncpy+0x14>f0103d446753,300013
f0103d46:	89 f0                	mov    %esi,%eaxf0103d466757,300094
f0103d48:	5b                   	pop    %ebxf0103d486758,300143
f0103d49:	5e                   	pop    %esif0103d496759,300187
f0103d4a:	5d                   	pop    %ebpf0103d4a6760,300231
f0103d4b:	c3                   	ret    f0103d4b6761,300275
f0103d4c <strlcpy>:f0103d4c6763,300316
size_tsize_t6765,300337
f0103d4c:	55                   	push   %ebpf0103d4c6768,300395
f0103d4d:	89 e5                	mov    %esp,%ebpf0103d4d6769,300439
f0103d4f:	56                   	push   %esif0103d4f6770,300488
f0103d50:	53                   	push   %ebxf0103d506771,300532
f0103d51:	8b 75 08             	mov    0x8(%ebp),%esif0103d516772,300576
f0103d54:	8b 55 0c             	mov    0xc(%ebp),%edxf0103d546773,300630
f0103d57:	8b 4d 10             	mov    0x10(%ebp),%ecxf0103d576774,300684
f0103d5a:	89 f0                	mov    %esi,%eaxf0103d5a6775,300739
f0103d5c:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebxf0103d5c6776,300788
	dst_in = dst;dst_in6779,300866
f0103d60:	85 c9                	test   %ecx,%ecxf0103d606781,300898
f0103d62:	75 0b                	jne    f0103d6f <strlcpy+0x23>f0103d626782,300947
f0103d64:	eb 17                	jmp    f0103d7d <strlcpy+0x31>f0103d646783,301010
f0103d66:	83 c2 01             	add    $0x1,%edxf0103d666786,301130
f0103d69:	83 c0 01             	add    $0x1,%eaxf0103d696787,301179
f0103d6c:	88 48 ff             	mov    %cl,-0x1(%eax)f0103d6c6788,301228
f0103d6f:	39 d8                	cmp    %ebx,%eaxf0103d6f6790,301319
f0103d71:	74 07                	je     f0103d7a <strlcpy+0x2e>f0103d716791,301368
f0103d73:	0f b6 0a             	movzbl (%edx),%ecxf0103d736792,301431
f0103d76:	84 c9                	test   %cl,%clf0103d766793,301482
f0103d78:	75 ec                	jne    f0103d66 <strlcpy+0x1a>f0103d786794,301529
f0103d7a:	c6 00 00             	movb   $0x0,(%eax)f0103d7a6796,301607
f0103d7d:	29 f0                	sub    %esi,%eaxf0103d7d6799,301683
f0103d7f:	5b                   	pop    %ebxf0103d7f6801,301734
f0103d80:	5e                   	pop    %esif0103d806802,301778
f0103d81:	5d                   	pop    %ebpf0103d816803,301822
f0103d82:	c3                   	ret    f0103d826804,301866
f0103d83 <strcmp>:f0103d836806,301907
intint6808,301927
f0103d83:	55                   	push   %ebpf0103d836811,301970
f0103d84:	89 e5                	mov    %esp,%ebpf0103d846812,302014
f0103d86:	8b 4d 08             	mov    0x8(%ebp),%ecxf0103d866813,302063
f0103d89:	8b 55 0c             	mov    0xc(%ebp),%edxf0103d896814,302117
f0103d8c:	eb 06                	jmp    f0103d94 <strcmp+0x11>f0103d8c6816,302195
f0103d8e:	83 c1 01             	add    $0x1,%ecxf0103d8e6818,302269
f0103d91:	83 c2 01             	add    $0x1,%edxf0103d916819,302318
f0103d94:	0f b6 01             	movzbl (%ecx),%eaxf0103d946821,302391
f0103d97:	84 c0                	test   %al,%alf0103d976822,302442
f0103d99:	74 04                	je     f0103d9f <strcmp+0x1c>f0103d996823,302489
f0103d9b:	3a 02                	cmp    (%edx),%alf0103d9b6824,302551
f0103d9d:	74 ef                	je     f0103d8e <strcmp+0xb>f0103d9d6825,302601
f0103d9f:	0f b6 c0             	movzbl %al,%eaxf0103d9f6827,302719
f0103da2:	0f b6 12             	movzbl (%edx),%edxf0103da26828,302767
f0103da5:	29 d0                	sub    %edx,%eaxf0103da56829,302818
f0103da7:	5d                   	pop    %ebpf0103da76831,302869
f0103da8:	c3                   	ret    f0103da86832,302913
f0103da9 <strncmp>:f0103da96834,302954
intint6836,302975
f0103da9:	55                   	push   %ebpf0103da96839,303029
f0103daa:	89 e5                	mov    %esp,%ebpf0103daa6840,303073
f0103dac:	53                   	push   %ebxf0103dac6841,303122
f0103dad:	8b 45 08             	mov    0x8(%ebp),%eaxf0103dad6842,303166
f0103db0:	8b 55 0c             	mov    0xc(%ebp),%edxf0103db06843,303220
f0103db3:	89 c3                	mov    %eax,%ebxf0103db36844,303274
f0103db5:	03 5d 10             	add    0x10(%ebp),%ebxf0103db56845,303323
f0103db8:	eb 06                	jmp    f0103dc0 <strncmp+0x17>f0103db86847,303411
f0103dba:	83 c0 01             	add    $0x1,%eaxf0103dba6849,303491
f0103dbd:	83 c2 01             	add    $0x1,%edxf0103dbd6850,303540
f0103dc0:	39 d8                	cmp    %ebx,%eaxf0103dc06852,303622
f0103dc2:	74 16                	je     f0103dda <strncmp+0x31>f0103dc26853,303671
f0103dc4:	0f b6 08             	movzbl (%eax),%ecxf0103dc46854,303734
f0103dc7:	84 c9                	test   %cl,%clf0103dc76855,303785
f0103dc9:	74 04                	je     f0103dcf <strncmp+0x26>f0103dc96856,303832
f0103dcb:	3a 0a                	cmp    (%edx),%clf0103dcb6857,303895
f0103dcd:	74 eb                	je     f0103dba <strncmp+0x11>f0103dcd6858,303945
f0103dcf:	0f b6 00             	movzbl (%eax),%eaxf0103dcf6863,304097
f0103dd2:	0f b6 12             	movzbl (%edx),%edxf0103dd26864,304148
f0103dd5:	29 d0                	sub    %edx,%eaxf0103dd56865,304199
f0103dd7:	5b                   	pop    %ebxf0103dd76867,304250
f0103dd8:	5d                   	pop    %ebpf0103dd86868,304294
f0103dd9:	c3                   	ret    f0103dd96869,304338
f0103dda:	b8 00 00 00 00       	mov    $0x0,%eaxf0103dda6871,304390
f0103ddf:	eb f6                	jmp    f0103dd7 <strncmp+0x2e>f0103ddf6872,304439
f0103de1 <strchr>:f0103de16874,304503
char *char6878,304629
f0103de1:	55                   	push   %ebpf0103de16881,304668
f0103de2:	89 e5                	mov    %esp,%ebpf0103de26882,304712
f0103de4:	8b 45 08             	mov    0x8(%ebp),%eaxf0103de46883,304761
f0103de7:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf0103de76884,304815
f0103deb:	0f b6 10             	movzbl (%eax),%edxf0103deb6886,304886
f0103dee:	84 d2                	test   %dl,%dlf0103dee6887,304937
f0103df0:	74 09                	je     f0103dfb <strchr+0x1a>f0103df06888,304984
f0103df2:	38 ca                	cmp    %cl,%dlf0103df26890,305061
f0103df4:	74 0a                	je     f0103e00 <strchr+0x1f>f0103df46891,305108
f0103df6:	83 c0 01             	add    $0x1,%eaxf0103df66893,305187
f0103df9:	eb f0                	jmp    f0103deb <strchr+0xa>f0103df96894,305236
f0103dfb:	b8 00 00 00 00       	mov    $0x0,%eaxf0103dfb6897,305330
f0103e00:	5d                   	pop    %ebpf0103e006899,305381
f0103e01:	c3                   	ret    f0103e016900,305425
f0103e02 <strfind>:f0103e026902,305466
char *char6906,305624
f0103e02:	55                   	push   %ebpf0103e026909,305664
f0103e03:	89 e5                	mov    %esp,%ebpf0103e036910,305708
f0103e05:	8b 45 08             	mov    0x8(%ebp),%eaxf0103e056911,305757
f0103e08:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf0103e086912,305811
f0103e0c:	eb 03                	jmp    f0103e11 <strfind+0xf>f0103e0c6914,305882
f0103e0e:	83 c0 01             	add    $0x1,%eaxf0103e0e6915,305944
f0103e11:	0f b6 10             	movzbl (%eax),%edxf0103e116916,305993
f0103e14:	38 ca                	cmp    %cl,%dlf0103e146918,306059
f0103e16:	74 04                	je     f0103e1c <strfind+0x1a>f0103e166919,306106
f0103e18:	84 d2                	test   %dl,%dlf0103e186920,306169
f0103e1a:	75 f2                	jne    f0103e0e <strfind+0xc>f0103e1a6921,306216
f0103e1c:	5d                   	pop    %ebpf0103e1c6925,306310
f0103e1d:	c3                   	ret    f0103e1d6926,306354
f0103e1e <memset>:f0103e1e6928,306395
void *void6931,306423
f0103e1e:	55                   	push   %ebpf0103e1e6934,306465
f0103e1f:	89 e5                	mov    %esp,%ebpf0103e1f6935,306509
f0103e21:	57                   	push   %edif0103e216936,306558
f0103e22:	56                   	push   %esif0103e226937,306602
f0103e23:	53                   	push   %ebxf0103e236938,306646
f0103e24:	8b 7d 08             	mov    0x8(%ebp),%edif0103e246939,306690
f0103e27:	8b 4d 10             	mov    0x10(%ebp),%ecxf0103e276940,306744
f0103e2a:	85 c9                	test   %ecx,%ecxf0103e2a6944,306823
f0103e2c:	74 13                	je     f0103e41 <memset+0x23>f0103e2c6945,306872
f0103e2e:	f7 c7 03 00 00 00    	test   $0x3,%edif0103e2e6948,306980
f0103e34:	75 05                	jne    f0103e3b <memset+0x1d>f0103e346949,307029
f0103e36:	f6 c1 03             	test   $0x3,%clf0103e366950,307091
f0103e39:	74 0d                	je     f0103e48 <memset+0x2a>f0103e396951,307139
		c = (c<<24)|(c<<16)|(c<<8)|c;c6952,307201
f0103e3b:	8b 45 0c             	mov    0xc(%ebp),%eaxf0103e3b6958,307365
f0103e3e:	fc                   	cld    f0103e3e6959,307419
f0103e3f:	f3 aa                	rep stos %al,%es:(%edi)f0103e3f6960,307459
f0103e41:	89 f8                	mov    %edi,%eaxf0103e416965,307582
f0103e43:	5b                   	pop    %ebxf0103e436966,307631
f0103e44:	5e                   	pop    %esif0103e446967,307675
f0103e45:	5f                   	pop    %edif0103e456968,307719
f0103e46:	5d                   	pop    %ebpf0103e466969,307763
f0103e47:	c3                   	ret    f0103e476970,307807
f0103e48:	0f b6 55 0c          	movzbl 0xc(%ebp),%edxf0103e486972,307860
		c = (c<<24)|(c<<16)|(c<<8)|c;c6973,307914
f0103e4c:	89 d3                	mov    %edx,%ebxf0103e4c6974,307946
f0103e4e:	c1 e3 08             	shl    $0x8,%ebxf0103e4e6975,307995
f0103e51:	89 d0                	mov    %edx,%eaxf0103e516976,308044
f0103e53:	c1 e0 18             	shl    $0x18,%eaxf0103e536977,308093
f0103e56:	89 d6                	mov    %edx,%esif0103e566978,308143
f0103e58:	c1 e6 10             	shl    $0x10,%esif0103e586979,308192
f0103e5b:	09 f0                	or     %esi,%eaxf0103e5b6980,308242
f0103e5d:	09 c2                	or     %eax,%edxf0103e5d6981,308291
f0103e5f:	09 da                	or     %ebx,%edxf0103e5f6982,308340
f0103e61:	c1 e9 02             	shr    $0x2,%ecxf0103e616984,308423
f0103e64:	89 d0                	mov    %edx,%eaxf0103e646986,308506
f0103e66:	fc                   	cld    f0103e666987,308555
f0103e67:	f3 ab                	rep stos %eax,%es:(%edi)f0103e676988,308595
f0103e69:	eb d6                	jmp    f0103e41 <memset+0x23>f0103e696989,308652
f0103e6b <memmove>:f0103e6b6991,308715
void *void6993,308736
f0103e6b:	55                   	push   %ebpf0103e6b6996,308791
f0103e6c:	89 e5                	mov    %esp,%ebpf0103e6c6997,308835
f0103e6e:	57                   	push   %edif0103e6e6998,308884
f0103e6f:	56                   	push   %esif0103e6f6999,308928
f0103e70:	8b 45 08             	mov    0x8(%ebp),%eaxf0103e707000,308972
f0103e73:	8b 75 0c             	mov    0xc(%ebp),%esif0103e737001,309026
f0103e76:	8b 4d 10             	mov    0x10(%ebp),%ecxf0103e767002,309080
	s = src;s7006,309162
	d = dst;d7007,309172
f0103e79:	39 c6                	cmp    %eax,%esif0103e797009,309209
f0103e7b:	73 35                	jae    f0103eb2 <memmove+0x47>f0103e7b7010,309258
f0103e7d:	8d 14 0e             	lea    (%esi,%ecx,1),%edxf0103e7d7011,309321
f0103e80:	39 c2                	cmp    %eax,%edxf0103e807012,309379
f0103e82:	76 2e                	jbe    f0103eb2 <memmove+0x47>f0103e827013,309428
f0103e84:	8d 3c 08             	lea    (%eax,%ecx,1),%edif0103e847016,309511
f0103e87:	89 d6                	mov    %edx,%esif0103e877018,309619
f0103e89:	09 fe                	or     %edi,%esif0103e897019,309668
f0103e8b:	f7 c6 03 00 00 00    	test   $0x3,%esif0103e8b7020,309717
f0103e91:	74 0c                	je     f0103e9f <memmove+0x34>f0103e917021,309766
f0103e93:	83 ef 01             	sub    $0x1,%edif0103e937027,310020
f0103e96:	8d 72 ff             	lea    -0x1(%edx),%esif0103e967028,310069
f0103e99:	fd                   	std    f0103e997030,310159
f0103e9a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f0103e9a7031,310199
f0103e9c:	fc                   	cld    f0103e9c7034,310344
f0103e9d:	eb 21                	jmp    f0103ec0 <memmove+0x55>f0103e9d7035,310384
f0103e9f:	f6 c1 03             	test   $0x3,%clf0103e9f7037,310497
f0103ea2:	75 ef                	jne    f0103e93 <memmove+0x28>f0103ea27038,310545
f0103ea4:	83 ef 04             	sub    $0x4,%edif0103ea47040,310666
f0103ea7:	8d 72 fc             	lea    -0x4(%edx),%esif0103ea77041,310715
f0103eaa:	c1 e9 02             	shr    $0x2,%ecxf0103eaa7042,310770
f0103ead:	fd                   	std    f0103ead7044,310854
f0103eae:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f0103eae7045,310894
f0103eb0:	eb ea                	jmp    f0103e9c <memmove+0x31>f0103eb07046,310958
f0103eb2:	89 f2                	mov    %esi,%edxf0103eb27049,311081
f0103eb4:	09 c2                	or     %eax,%edxf0103eb47050,311130
f0103eb6:	f6 c2 03             	test   $0x3,%dlf0103eb67051,311179
f0103eb9:	74 09                	je     f0103ec4 <memmove+0x59>f0103eb97052,311227
f0103ebb:	89 c7                	mov    %eax,%edif0103ebb7057,311421
f0103ebd:	fc                   	cld    f0103ebd7058,311470
f0103ebe:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f0103ebe7059,311510
f0103ec0:	5e                   	pop    %esif0103ec07064,311644
f0103ec1:	5f                   	pop    %edif0103ec17065,311688
f0103ec2:	5d                   	pop    %ebpf0103ec27066,311732
f0103ec3:	c3                   	ret    f0103ec37067,311776
f0103ec4:	f6 c1 03             	test   $0x3,%clf0103ec47069,311866
f0103ec7:	75 f2                	jne    f0103ebb <memmove+0x50>f0103ec77070,311914
f0103ec9:	c1 e9 02             	shr    $0x2,%ecxf0103ec97072,312031
f0103ecc:	89 c7                	mov    %eax,%edif0103ecc7074,312115
f0103ece:	fc                   	cld    f0103ece7075,312164
f0103ecf:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f0103ecf7076,312204
f0103ed1:	eb ed                	jmp    f0103ec0 <memmove+0x55>f0103ed17077,312268
f0103ed3 <memcpy>:f0103ed37079,312332
void *void7083,312361
f0103ed3:	55                   	push   %ebpf0103ed37086,312415
f0103ed4:	89 e5                	mov    %esp,%ebpf0103ed47087,312459
f0103ed6:	ff 75 10             	pushl  0x10(%ebp)f0103ed67089,312538
f0103ed9:	ff 75 0c             	pushl  0xc(%ebp)f0103ed97090,312588
f0103edc:	ff 75 08             	pushl  0x8(%ebp)f0103edc7091,312637
f0103edf:	e8 87 ff ff ff       	call   f0103e6b <memmove>f0103edf7092,312686
f0103ee4:	c9                   	leave  f0103ee47094,312746
f0103ee5:	c3                   	ret    f0103ee57095,312786
f0103ee6 <memcmp>:f0103ee67097,312827
intint7099,312847
f0103ee6:	55                   	push   %ebpf0103ee67102,312902
f0103ee7:	89 e5                	mov    %esp,%ebpf0103ee77103,312946
f0103ee9:	56                   	push   %esif0103ee97104,312995
f0103eea:	53                   	push   %ebxf0103eea7105,313039
f0103eeb:	8b 45 08             	mov    0x8(%ebp),%eaxf0103eeb7106,313083
f0103eee:	8b 55 0c             	mov    0xc(%ebp),%edxf0103eee7107,313137
f0103ef1:	89 c6                	mov    %eax,%esif0103ef17108,313191
f0103ef3:	03 75 10             	add    0x10(%ebp),%esif0103ef37109,313240
f0103ef6:	39 f0                	cmp    %esi,%eaxf0103ef67114,313401
f0103ef8:	74 1c                	je     f0103f16 <memcmp+0x30>f0103ef87115,313450
f0103efa:	0f b6 08             	movzbl (%eax),%ecxf0103efa7117,313530
f0103efd:	0f b6 1a             	movzbl (%edx),%ebxf0103efd7118,313581
f0103f00:	38 d9                	cmp    %bl,%clf0103f007119,313632
f0103f02:	75 08                	jne    f0103f0c <memcmp+0x26>f0103f027120,313679
f0103f04:	83 c0 01             	add    $0x1,%eaxf0103f047123,313788
f0103f07:	83 c2 01             	add    $0x1,%edxf0103f077124,313837
f0103f0a:	eb ea                	jmp    f0103ef6 <memcmp+0x10>f0103f0a7125,313886
f0103f0c:	0f b6 c1             	movzbl %cl,%eaxf0103f0c7127,313981
f0103f0f:	0f b6 db             	movzbl %bl,%ebxf0103f0f7128,314029
f0103f12:	29 d8                	sub    %ebx,%eaxf0103f127129,314077
f0103f14:	eb 05                	jmp    f0103f1b <memcmp+0x35>f0103f147130,314126
f0103f16:	b8 00 00 00 00       	mov    $0x0,%eaxf0103f167134,314203
f0103f1b:	5b                   	pop    %ebxf0103f1b7136,314254
f0103f1c:	5e                   	pop    %esif0103f1c7137,314298
f0103f1d:	5d                   	pop    %ebpf0103f1d7138,314342
f0103f1e:	c3                   	ret    f0103f1e7139,314386
f0103f1f <memfind>:f0103f1f7141,314427
void *void7143,314448
f0103f1f:	55                   	push   %ebpf0103f1f7146,314497
f0103f20:	89 e5                	mov    %esp,%ebpf0103f207147,314541
f0103f22:	8b 45 08             	mov    0x8(%ebp),%eaxf0103f227148,314590
f0103f25:	8b 4d 0c             	mov    0xc(%ebp),%ecxf0103f257149,314644
f0103f28:	89 c2                	mov    %eax,%edxf0103f287151,314740
f0103f2a:	03 55 10             	add    0x10(%ebp),%edxf0103f2a7152,314789
f0103f2d:	39 d0                	cmp    %edx,%eaxf0103f2d7154,314867
f0103f2f:	73 09                	jae    f0103f3a <memfind+0x1b>f0103f2f7155,314916
f0103f31:	38 08                	cmp    %cl,(%eax)f0103f317157,315034
f0103f33:	74 05                	je     f0103f3a <memfind+0x1b>f0103f337158,315084
f0103f35:	83 c0 01             	add    $0x1,%eaxf0103f357160,315170
f0103f38:	eb f3                	jmp    f0103f2d <memfind+0xe>f0103f387161,315219
f0103f3a:	5d                   	pop    %ebpf0103f3a7165,315313
f0103f3b:	c3                   	ret    f0103f3b7166,315357
f0103f3c <strtol>:f0103f3c7168,315398
longlong7170,315418
f0103f3c:	55                   	push   %ebpf0103f3c7173,315472
f0103f3d:	89 e5                	mov    %esp,%ebpf0103f3d7174,315516
f0103f3f:	57                   	push   %edif0103f3f7175,315565
f0103f40:	56                   	push   %esif0103f407176,315609
f0103f41:	53                   	push   %ebxf0103f417177,315653
f0103f42:	8b 4d 08             	mov    0x8(%ebp),%ecxf0103f427178,315697
f0103f45:	8b 5d 10             	mov    0x10(%ebp),%ebxf0103f457179,315751
f0103f48:	eb 03                	jmp    f0103f4d <strtol+0x11>f0103f487185,315899
f0103f4a:	83 c1 01             	add    $0x1,%ecxf0103f4a7187,315968
f0103f4d:	0f b6 01             	movzbl (%ecx),%eaxf0103f4d7189,316050
f0103f50:	3c 20                	cmp    $0x20,%alf0103f507190,316101
f0103f52:	74 f6                	je     f0103f4a <strtol+0xe>f0103f527191,316150
f0103f54:	3c 09                	cmp    $0x9,%alf0103f547192,316211
f0103f56:	74 f2                	je     f0103f4a <strtol+0xe>f0103f567193,316259
f0103f58:	3c 2b                	cmp    $0x2b,%alf0103f587197,316357
f0103f5a:	74 2e                	je     f0103f8a <strtol+0x4e>f0103f5a7198,316406
f0103f5c:	bf 00 00 00 00       	mov    $0x0,%edif0103f5c7200,316482
f0103f61:	3c 2d                	cmp    $0x2d,%alf0103f617203,316559
f0103f63:	74 2f                	je     f0103f94 <strtol+0x58>f0103f637204,316608
f0103f65:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebxf0103f657209,316780
f0103f6b:	75 05                	jne    f0103f72 <strtol+0x36>f0103f6b7210,316836
f0103f6d:	80 39 30             	cmpb   $0x30,(%ecx)f0103f6d7211,316898
f0103f70:	74 2c                	je     f0103f9e <strtol+0x62>f0103f707212,316950
f0103f72:	85 db                	test   %ebx,%ebxf0103f727215,317069
f0103f74:	75 0a                	jne    f0103f80 <strtol+0x44>f0103f747216,317118
		base = 10;base7219,317218
f0103f76:	bb 0a 00 00 00       	mov    $0xa,%ebxf0103f767220,317231
f0103f7b:	80 39 30             	cmpb   $0x30,(%ecx)f0103f7b7222,317316
f0103f7e:	74 28                	je     f0103fa8 <strtol+0x6c>f0103f7e7223,317368
		base = 10;base7224,317430
f0103f80:	b8 00 00 00 00       	mov    $0x0,%eaxf0103f807225,317443
f0103f85:	89 5d 10             	mov    %ebx,0x10(%ebp)f0103f857226,317492
f0103f88:	eb 50                	jmp    f0103fda <strtol+0x9e>f0103f887227,317547
f0103f8a:	83 c1 01             	add    $0x1,%ecxf0103f8a7229,317616
f0103f8d:	bf 00 00 00 00       	mov    $0x0,%edif0103f8d7231,317679
f0103f92:	eb d1                	jmp    f0103f65 <strtol+0x29>f0103f927232,317728
f0103f94:	83 c1 01             	add    $0x1,%ecxf0103f947234,317806
f0103f97:	bf 01 00 00 00       	mov    $0x1,%edif0103f977235,317855
f0103f9c:	eb c7                	jmp    f0103f65 <strtol+0x29>f0103f9c7236,317904
f0103f9e:	80 79 01 78          	cmpb   $0x78,0x1(%ecx)f0103f9e7238,318030
f0103fa2:	74 0e                	je     f0103fb2 <strtol+0x76>f0103fa27239,318085
f0103fa4:	85 db                	test   %ebx,%ebxf0103fa47241,318183
f0103fa6:	75 d8                	jne    f0103f80 <strtol+0x44>f0103fa67242,318232
f0103fa8:	83 c1 01             	add    $0x1,%ecxf0103fa87244,318311
f0103fab:	bb 08 00 00 00       	mov    $0x8,%ebxf0103fab7245,318360
f0103fb0:	eb ce                	jmp    f0103f80 <strtol+0x44>f0103fb07246,318409
f0103fb2:	83 c1 02             	add    $0x2,%ecxf0103fb27248,318492
f0103fb5:	bb 10 00 00 00       	mov    $0x10,%ebxf0103fb57249,318541
f0103fba:	eb c4                	jmp    f0103f80 <strtol+0x44>f0103fba7250,318591
			dig = *s - '0';dig7255,318708
f0103fbc:	8d 72 9f             	lea    -0x61(%edx),%esif0103fbc7257,318762
f0103fbf:	89 f3                	mov    %esi,%ebxf0103fbf7258,318818
f0103fc1:	80 fb 19             	cmp    $0x19,%blf0103fc17259,318867
f0103fc4:	77 29                	ja     f0103fef <strtol+0xb3>f0103fc47260,318916
			dig = *s - 'a' + 10;dig7261,318978
f0103fc6:	0f be d2             	movsbl %dl,%edxf0103fc67262,319002
f0103fc9:	83 ea 57             	sub    $0x57,%edxf0103fc97263,319050
			dig = *s - 'A' + 10;dig7265,319135
f0103fcc:	3b 55 10             	cmp    0x10(%ebp),%edxf0103fcc7269,319195
f0103fcf:	7d 30                	jge    f0104001 <strtol+0xc5>f0103fcf7270,319250
f0103fd1:	83 c1 01             	add    $0x1,%ecxf0103fd17273,319355
f0103fd4:	0f af 45 10          	imul   0x10(%ebp),%eaxf0103fd47274,319404
f0103fd8:	01 d0                	add    %edx,%eaxf0103fd87275,319459
f0103fda:	0f b6 11             	movzbl (%ecx),%edxf0103fda7277,319538
f0103fdd:	8d 72 d0             	lea    -0x30(%edx),%esif0103fdd7278,319589
f0103fe0:	89 f3                	mov    %esi,%ebxf0103fe07279,319645
f0103fe2:	80 fb 09             	cmp    $0x9,%blf0103fe27280,319694
f0103fe5:	77 d5                	ja     f0103fbc <strtol+0x80>f0103fe57281,319742
			dig = *s - '0';dig7282,319804
f0103fe7:	0f be d2             	movsbl %dl,%edxf0103fe77283,319823
f0103fea:	83 ea 30             	sub    $0x30,%edxf0103fea7284,319871
f0103fed:	eb dd                	jmp    f0103fcc <strtol+0x90>f0103fed7285,319921
f0103fef:	8d 72 bf             	lea    -0x41(%edx),%esif0103fef7287,320018
f0103ff2:	89 f3                	mov    %esi,%ebxf0103ff27288,320074
f0103ff4:	80 fb 19             	cmp    $0x19,%blf0103ff47289,320123
f0103ff7:	77 08                	ja     f0104001 <strtol+0xc5>f0103ff77290,320172
			dig = *s - 'A' + 10;dig7291,320234
f0103ff9:	0f be d2             	movsbl %dl,%edxf0103ff97292,320258
f0103ffc:	83 ea 37             	sub    $0x37,%edxf0103ffc7293,320306
f0103fff:	eb cb                	jmp    f0103fcc <strtol+0x90>f0103fff7294,320356
f0104001:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)f01040017299,320475
f0104005:	74 05                	je     f010400c <strtol+0xd0>f01040057300,320529
f0104007:	8b 75 0c             	mov    0xc(%ebp),%esif01040077302,320615
f010400a:	89 0e                	mov    %ecx,(%esi)f010400a7303,320669
f010400c:	89 c2                	mov    %eax,%edxf010400c7305,320748
f010400e:	f7 da                	neg    %edxf010400e7306,320797
f0104010:	85 ff                	test   %edi,%edif01040107307,320841
f0104012:	0f 45 c2             	cmovne %edx,%eaxf01040127308,320890
f0104015:	5b                   	pop    %ebxf01040157310,320941
f0104016:	5e                   	pop    %esif01040167311,320985
f0104017:	5f                   	pop    %edif01040177312,321029
f0104018:	5d                   	pop    %ebpf01040187313,321073
f0104019:	c3                   	ret    f01040197314,321117
f010401a:	66 90                	xchg   %ax,%axf010401a7315,321157
f010401c:	66 90                	xchg   %ax,%axf010401c7316,321204
f010401e:	66 90                	xchg   %ax,%axf010401e7317,321251
f0104020 <__udivdi3>:f01040207319,321299
f0104020:	55                   	push   %ebpf01040207320,321321
f0104021:	57                   	push   %edif01040217321,321365
f0104022:	56                   	push   %esif01040227322,321409
f0104023:	53                   	push   %ebxf01040237323,321453
f0104024:	83 ec 1c             	sub    $0x1c,%espf01040247324,321497
f0104027:	8b 54 24 3c          	mov    0x3c(%esp),%edxf01040277325,321547
f010402b:	8b 6c 24 30          	mov    0x30(%esp),%ebpf010402b7326,321602
f010402f:	8b 74 24 34          	mov    0x34(%esp),%esif010402f7327,321657
f0104033:	8b 5c 24 38          	mov    0x38(%esp),%ebxf01040337328,321712
f0104037:	85 d2                	test   %edx,%edxf01040377329,321767
f0104039:	75 35                	jne    f0104070 <__udivdi3+0x50>f01040397330,321816
f010403b:	39 f3                	cmp    %esi,%ebxf010403b7331,321881
f010403d:	0f 87 bd 00 00 00    	ja     f0104100 <__udivdi3+0xe0>f010403d7332,321930
f0104043:	85 db                	test   %ebx,%ebxf01040437333,321995
f0104045:	89 d9                	mov    %ebx,%ecxf01040457334,322044
f0104047:	75 0b                	jne    f0104054 <__udivdi3+0x34>f01040477335,322093
f0104049:	b8 01 00 00 00       	mov    $0x1,%eaxf01040497336,322158
f010404e:	31 d2                	xor    %edx,%edxf010404e7337,322207
f0104050:	f7 f3                	div    %ebxf01040507338,322256
f0104052:	89 c1                	mov    %eax,%ecxf01040527339,322300
f0104054:	31 d2                	xor    %edx,%edxf01040547340,322349
f0104056:	89 f0                	mov    %esi,%eaxf01040567341,322398
f0104058:	f7 f1                	div    %ecxf01040587342,322447
f010405a:	89 c6                	mov    %eax,%esif010405a7343,322491
f010405c:	89 e8                	mov    %ebp,%eaxf010405c7344,322540
f010405e:	89 f7                	mov    %esi,%edif010405e7345,322589
f0104060:	f7 f1                	div    %ecxf01040607346,322638
f0104062:	89 fa                	mov    %edi,%edxf01040627347,322682
f0104064:	83 c4 1c             	add    $0x1c,%espf01040647348,322731
f0104067:	5b                   	pop    %ebxf01040677349,322781
f0104068:	5e                   	pop    %esif01040687350,322825
f0104069:	5f                   	pop    %edif01040697351,322869
f010406a:	5d                   	pop    %ebpf010406a7352,322913
f010406b:	c3                   	ret    f010406b7353,322957
f010406c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif010406c7354,322997
f0104070:	39 f2                	cmp    %esi,%edxf01040707355,323058
f0104072:	77 7c                	ja     f01040f0 <__udivdi3+0xd0>f01040727356,323107
f0104074:	0f bd fa             	bsr    %edx,%edif01040747357,323172
f0104077:	83 f7 1f             	xor    $0x1f,%edif01040777358,323221
f010407a:	0f 84 98 00 00 00    	je     f0104118 <__udivdi3+0xf8>f010407a7359,323271
f0104080:	89 f9                	mov    %edi,%ecxf01040807360,323336
f0104082:	b8 20 00 00 00       	mov    $0x20,%eaxf01040827361,323385
f0104087:	29 f8                	sub    %edi,%eaxf01040877362,323435
f0104089:	d3 e2                	shl    %cl,%edxf01040897363,323484
f010408b:	89 54 24 08          	mov    %edx,0x8(%esp)f010408b7364,323532
f010408f:	89 c1                	mov    %eax,%ecxf010408f7365,323586
f0104091:	89 da                	mov    %ebx,%edxf01040917366,323635
f0104093:	d3 ea                	shr    %cl,%edxf01040937367,323684
f0104095:	8b 4c 24 08          	mov    0x8(%esp),%ecxf01040957368,323732
f0104099:	09 d1                	or     %edx,%ecxf01040997369,323786
f010409b:	89 f2                	mov    %esi,%edxf010409b7370,323835
f010409d:	89 4c 24 08          	mov    %ecx,0x8(%esp)f010409d7371,323884
f01040a1:	89 f9                	mov    %edi,%ecxf01040a17372,323938
f01040a3:	d3 e3                	shl    %cl,%ebxf01040a37373,323987
f01040a5:	89 c1                	mov    %eax,%ecxf01040a57374,324035
f01040a7:	d3 ea                	shr    %cl,%edxf01040a77375,324084
f01040a9:	89 f9                	mov    %edi,%ecxf01040a97376,324132
f01040ab:	89 5c 24 0c          	mov    %ebx,0xc(%esp)f01040ab7377,324181
f01040af:	d3 e6                	shl    %cl,%esif01040af7378,324235
f01040b1:	89 eb                	mov    %ebp,%ebxf01040b17379,324283
f01040b3:	89 c1                	mov    %eax,%ecxf01040b37380,324332
f01040b5:	d3 eb                	shr    %cl,%ebxf01040b57381,324381
f01040b7:	09 de                	or     %ebx,%esif01040b77382,324429
f01040b9:	89 f0                	mov    %esi,%eaxf01040b97383,324478
f01040bb:	f7 74 24 08          	divl   0x8(%esp)f01040bb7384,324527
f01040bf:	89 d6                	mov    %edx,%esif01040bf7385,324576
f01040c1:	89 c3                	mov    %eax,%ebxf01040c17386,324625
f01040c3:	f7 64 24 0c          	mull   0xc(%esp)f01040c37387,324674
f01040c7:	39 d6                	cmp    %edx,%esif01040c77388,324723
f01040c9:	72 0c                	jb     f01040d7 <__udivdi3+0xb7>f01040c97389,324772
f01040cb:	89 f9                	mov    %edi,%ecxf01040cb7390,324837
f01040cd:	d3 e5                	shl    %cl,%ebpf01040cd7391,324886
f01040cf:	39 c5                	cmp    %eax,%ebpf01040cf7392,324934
f01040d1:	73 5d                	jae    f0104130 <__udivdi3+0x110>f01040d17393,324983
f01040d3:	39 d6                	cmp    %edx,%esif01040d37394,325049
f01040d5:	75 59                	jne    f0104130 <__udivdi3+0x110>f01040d57395,325098
f01040d7:	8d 43 ff             	lea    -0x1(%ebx),%eaxf01040d77396,325164
f01040da:	31 ff                	xor    %edi,%edif01040da7397,325219
f01040dc:	89 fa                	mov    %edi,%edxf01040dc7398,325268
f01040de:	83 c4 1c             	add    $0x1c,%espf01040de7399,325317
f01040e1:	5b                   	pop    %ebxf01040e17400,325367
f01040e2:	5e                   	pop    %esif01040e27401,325411
f01040e3:	5f                   	pop    %edif01040e37402,325455
f01040e4:	5d                   	pop    %ebpf01040e47403,325499
f01040e5:	c3                   	ret    f01040e57404,325543
f01040e6:	8d 76 00             	lea    0x0(%esi),%esif01040e67405,325583
f01040e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif01040e97406,325637
f01040f0:	31 ff                	xor    %edi,%edif01040f07407,325698
f01040f2:	31 c0                	xor    %eax,%eaxf01040f27408,325747
f01040f4:	89 fa                	mov    %edi,%edxf01040f47409,325796
f01040f6:	83 c4 1c             	add    $0x1c,%espf01040f67410,325845
f01040f9:	5b                   	pop    %ebxf01040f97411,325895
f01040fa:	5e                   	pop    %esif01040fa7412,325939
f01040fb:	5f                   	pop    %edif01040fb7413,325983
f01040fc:	5d                   	pop    %ebpf01040fc7414,326027
f01040fd:	c3                   	ret    f01040fd7415,326071
f01040fe:	66 90                	xchg   %ax,%axf01040fe7416,326111
f0104100:	31 ff                	xor    %edi,%edif01041007417,326158
f0104102:	89 e8                	mov    %ebp,%eaxf01041027418,326207
f0104104:	89 f2                	mov    %esi,%edxf01041047419,326256
f0104106:	f7 f3                	div    %ebxf01041067420,326305
f0104108:	89 fa                	mov    %edi,%edxf01041087421,326349
f010410a:	83 c4 1c             	add    $0x1c,%espf010410a7422,326398
f010410d:	5b                   	pop    %ebxf010410d7423,326448
f010410e:	5e                   	pop    %esif010410e7424,326492
f010410f:	5f                   	pop    %edif010410f7425,326536
f0104110:	5d                   	pop    %ebpf01041107426,326580
f0104111:	c3                   	ret    f01041117427,326624
f0104112:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif01041127428,326664
f0104118:	39 f2                	cmp    %esi,%edxf01041187429,326718
f010411a:	72 06                	jb     f0104122 <__udivdi3+0x102>f010411a7430,326767
f010411c:	31 c0                	xor    %eax,%eaxf010411c7431,326833
f010411e:	39 eb                	cmp    %ebp,%ebxf010411e7432,326882
f0104120:	77 d2                	ja     f01040f4 <__udivdi3+0xd4>f01041207433,326931
f0104122:	b8 01 00 00 00       	mov    $0x1,%eaxf01041227434,326996
f0104127:	eb cb                	jmp    f01040f4 <__udivdi3+0xd4>f01041277435,327045
f0104129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01041297436,327110
f0104130:	89 d8                	mov    %ebx,%eaxf01041307437,327171
f0104132:	31 ff                	xor    %edi,%edif01041327438,327220
f0104134:	eb be                	jmp    f01040f4 <__udivdi3+0xd4>f01041347439,327269
f0104136:	66 90                	xchg   %ax,%axf01041367440,327334
f0104138:	66 90                	xchg   %ax,%axf01041387441,327381
f010413a:	66 90                	xchg   %ax,%axf010413a7442,327428
f010413c:	66 90                	xchg   %ax,%axf010413c7443,327475
f010413e:	66 90                	xchg   %ax,%axf010413e7444,327522
f0104140 <__umoddi3>:f01041407446,327570
f0104140:	55                   	push   %ebpf01041407447,327592
f0104141:	57                   	push   %edif01041417448,327636
f0104142:	56                   	push   %esif01041427449,327680
f0104143:	53                   	push   %ebxf01041437450,327724
f0104144:	83 ec 1c             	sub    $0x1c,%espf01041447451,327768
f0104147:	8b 6c 24 3c          	mov    0x3c(%esp),%ebpf01041477452,327818
f010414b:	8b 74 24 30          	mov    0x30(%esp),%esif010414b7453,327873
f010414f:	8b 5c 24 34          	mov    0x34(%esp),%ebxf010414f7454,327928
f0104153:	8b 7c 24 38          	mov    0x38(%esp),%edif01041537455,327983
f0104157:	85 ed                	test   %ebp,%ebpf01041577456,328038
f0104159:	89 f0                	mov    %esi,%eaxf01041597457,328087
f010415b:	89 da                	mov    %ebx,%edxf010415b7458,328136
f010415d:	75 19                	jne    f0104178 <__umoddi3+0x38>f010415d7459,328185
f010415f:	39 df                	cmp    %ebx,%edif010415f7460,328250
f0104161:	0f 86 b1 00 00 00    	jbe    f0104218 <__umoddi3+0xd8>f01041617461,328299
f0104167:	f7 f7                	div    %edif01041677462,328364
f0104169:	89 d0                	mov    %edx,%eaxf01041697463,328408
f010416b:	31 d2                	xor    %edx,%edxf010416b7464,328457
f010416d:	83 c4 1c             	add    $0x1c,%espf010416d7465,328506
f0104170:	5b                   	pop    %ebxf01041707466,328556
f0104171:	5e                   	pop    %esif01041717467,328600
f0104172:	5f                   	pop    %edif01041727468,328644
f0104173:	5d                   	pop    %ebpf01041737469,328688
f0104174:	c3                   	ret    f01041747470,328732
f0104175:	8d 76 00             	lea    0x0(%esi),%esif01041757471,328772
f0104178:	39 dd                	cmp    %ebx,%ebpf01041787472,328826
f010417a:	77 f1                	ja     f010416d <__umoddi3+0x2d>f010417a7473,328875
f010417c:	0f bd cd             	bsr    %ebp,%ecxf010417c7474,328940
f010417f:	83 f1 1f             	xor    $0x1f,%ecxf010417f7475,328989
f0104182:	89 4c 24 04          	mov    %ecx,0x4(%esp)f01041827476,329039
f0104186:	0f 84 b4 00 00 00    	je     f0104240 <__umoddi3+0x100>f01041867477,329093
f010418c:	b8 20 00 00 00       	mov    $0x20,%eaxf010418c7478,329159
f0104191:	89 c2                	mov    %eax,%edxf01041917479,329209
f0104193:	8b 44 24 04          	mov    0x4(%esp),%eaxf01041937480,329258
f0104197:	29 c2                	sub    %eax,%edxf01041977481,329312
f0104199:	89 c1                	mov    %eax,%ecxf01041997482,329361
f010419b:	89 f8                	mov    %edi,%eaxf010419b7483,329410
f010419d:	d3 e5                	shl    %cl,%ebpf010419d7484,329459
f010419f:	89 d1                	mov    %edx,%ecxf010419f7485,329507
f01041a1:	89 54 24 0c          	mov    %edx,0xc(%esp)f01041a17486,329556
f01041a5:	d3 e8                	shr    %cl,%eaxf01041a57487,329610
f01041a7:	09 c5                	or     %eax,%ebpf01041a77488,329658
f01041a9:	8b 44 24 04          	mov    0x4(%esp),%eaxf01041a97489,329707
f01041ad:	89 c1                	mov    %eax,%ecxf01041ad7490,329761
f01041af:	d3 e7                	shl    %cl,%edif01041af7491,329810
f01041b1:	89 d1                	mov    %edx,%ecxf01041b17492,329858
f01041b3:	89 7c 24 08          	mov    %edi,0x8(%esp)f01041b37493,329907
f01041b7:	89 df                	mov    %ebx,%edif01041b77494,329961
f01041b9:	d3 ef                	shr    %cl,%edif01041b97495,330010
f01041bb:	89 c1                	mov    %eax,%ecxf01041bb7496,330058
f01041bd:	89 f0                	mov    %esi,%eaxf01041bd7497,330107
f01041bf:	d3 e3                	shl    %cl,%ebxf01041bf7498,330156
f01041c1:	89 d1                	mov    %edx,%ecxf01041c17499,330204
f01041c3:	89 fa                	mov    %edi,%edxf01041c37500,330253
f01041c5:	d3 e8                	shr    %cl,%eaxf01041c57501,330302
f01041c7:	0f b6 4c 24 04       	movzbl 0x4(%esp),%ecxf01041c77502,330350
f01041cc:	09 d8                	or     %ebx,%eaxf01041cc7503,330404
f01041ce:	f7 f5                	div    %ebpf01041ce7504,330453
f01041d0:	d3 e6                	shl    %cl,%esif01041d07505,330497
f01041d2:	89 d1                	mov    %edx,%ecxf01041d27506,330545
f01041d4:	f7 64 24 08          	mull   0x8(%esp)f01041d47507,330594
f01041d8:	39 d1                	cmp    %edx,%ecxf01041d87508,330643
f01041da:	89 c3                	mov    %eax,%ebxf01041da7509,330692
f01041dc:	89 d7                	mov    %edx,%edif01041dc7510,330741
f01041de:	72 06                	jb     f01041e6 <__umoddi3+0xa6>f01041de7511,330790
f01041e0:	75 0e                	jne    f01041f0 <__umoddi3+0xb0>f01041e07512,330855
f01041e2:	39 c6                	cmp    %eax,%esif01041e27513,330920
f01041e4:	73 0a                	jae    f01041f0 <__umoddi3+0xb0>f01041e47514,330969
f01041e6:	2b 44 24 08          	sub    0x8(%esp),%eaxf01041e67515,331034
f01041ea:	19 ea                	sbb    %ebp,%edxf01041ea7516,331088
f01041ec:	89 d7                	mov    %edx,%edif01041ec7517,331137
f01041ee:	89 c3                	mov    %eax,%ebxf01041ee7518,331186
f01041f0:	89 ca                	mov    %ecx,%edxf01041f07519,331235
f01041f2:	0f b6 4c 24 0c       	movzbl 0xc(%esp),%ecxf01041f27520,331284
f01041f7:	29 de                	sub    %ebx,%esif01041f77521,331338
f01041f9:	19 fa                	sbb    %edi,%edxf01041f97522,331387
f01041fb:	8b 5c 24 04          	mov    0x4(%esp),%ebxf01041fb7523,331436
f01041ff:	89 d0                	mov    %edx,%eaxf01041ff7524,331490
f0104201:	d3 e0                	shl    %cl,%eaxf01042017525,331539
f0104203:	89 d9                	mov    %ebx,%ecxf01042037526,331587
f0104205:	d3 ee                	shr    %cl,%esif01042057527,331636
f0104207:	d3 ea                	shr    %cl,%edxf01042077528,331684
f0104209:	09 f0                	or     %esi,%eaxf01042097529,331732
f010420b:	83 c4 1c             	add    $0x1c,%espf010420b7530,331781
f010420e:	5b                   	pop    %ebxf010420e7531,331831
f010420f:	5e                   	pop    %esif010420f7532,331875
f0104210:	5f                   	pop    %edif01042107533,331919
f0104211:	5d                   	pop    %ebpf01042117534,331963
f0104212:	c3                   	ret    f01042127535,332007
f0104213:	90                   	nopf01042137536,332047
f0104214:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif01042147537,332083
f0104218:	85 ff                	test   %edi,%edif01042187538,332144
f010421a:	89 f9                	mov    %edi,%ecxf010421a7539,332193
f010421c:	75 0b                	jne    f0104229 <__umoddi3+0xe9>f010421c7540,332242
f010421e:	b8 01 00 00 00       	mov    $0x1,%eaxf010421e7541,332307
f0104223:	31 d2                	xor    %edx,%edxf01042237542,332356
f0104225:	f7 f7                	div    %edif01042257543,332405
f0104227:	89 c1                	mov    %eax,%ecxf01042277544,332449
f0104229:	89 d8                	mov    %ebx,%eaxf01042297545,332498
f010422b:	31 d2                	xor    %edx,%edxf010422b7546,332547
f010422d:	f7 f1                	div    %ecxf010422d7547,332596
f010422f:	89 f0                	mov    %esi,%eaxf010422f7548,332640
f0104231:	f7 f1                	div    %ecxf01042317549,332689
f0104233:	e9 31 ff ff ff       	jmp    f0104169 <__umoddi3+0x29>f01042337550,332733
f0104238:	90                   	nopf01042387551,332798
f0104239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01042397552,332834
f0104240:	39 dd                	cmp    %ebx,%ebpf01042407553,332895
f0104242:	72 08                	jb     f010424c <__umoddi3+0x10c>f01042427554,332944
f0104244:	39 f7                	cmp    %esi,%edif01042447555,333010
f0104246:	0f 87 21 ff ff ff    	ja     f010416d <__umoddi3+0x2d>f01042467556,333059
f010424c:	89 da                	mov    %ebx,%edxf010424c7557,333124
f010424e:	89 f0                	mov    %esi,%eaxf010424e7558,333173
f0104250:	29 f8                	sub    %edi,%eaxf01042507559,333222
f0104252:	19 ea                	sbb    %ebp,%edxf01042527560,333271
f0104254:	e9 14 ff ff ff       	jmp    f010416d <__umoddi3+0x2d>f01042547561,333320

fs/test.c,99
static char *msg = "This is the NEW message of the day!\n\n";msg6,63
fs_test(void)fs_test9,131

user/breakpoint.c,40
umain(int argc, char **argv)umain6,66

user/softint.c,40
umain(int argc, char **argv)umain6,84

user/faultwrite.c,40
umain(int argc, char **argv)umain6,84

user/badsegment.c,40
umain(int argc, char **argv)umain6,79

user/faultwritekernel.c,40
umain(int argc, char **argv)umain6,88

user/buggyhello2.c,91
const char *hello = "hello, world\n";hello6,150
umain(int argc, char **argv)umain9,194

user/divzero.c,60
int zero;zero5,76
umain(int argc, char **argv)umain8,92

user/hello.c,40
umain(int argc, char **argv)umain5,43

user/buggyhello.c,41
umain(int argc, char **argv)umain7,140

user/faultreadkernel.c,40
umain(int argc, char **argv)umain6,84

user/faultread.c,40
umain(int argc, char **argv)umain6,85

user/sendpage.c,265
const char *str1 = "hello child environment! how are you?";str16,128
const char *str2 = "hello parent environment! I'm good.";str27,188
#define TEMP_ADDR	TEMP_ADDR9,247
#define TEMP_ADDR_CHILD	TEMP_ADDR_CHILD10,283
umain(int argc, char **argv)umain13,331

user/evilhello.c,41
umain(int argc, char **argv)umain7,137

user/testbss.c,120
#define ARRAYSIZE ARRAYSIZE5,63
uint32_t bigarray[ARRAYSIZE];bigarray7,94
umain(int argc, char **argv)umain10,130

conf/env.mk,14
V = @V9,359

conf/lab.mk,71
LAB=3LAB1,0
PACKAGEDATE=Tue Sep 25 12:21:10 EDT 2018PACKAGEDATE2,6

kern/console.h,275
#define _CONSOLE_H__CONSOLE_H_4,68
#define MONO_BASE	MONO_BASE11,215
#define MONO_BUF	MONO_BUF12,239
#define CGA_BASE	CGA_BASE13,264
#define CGA_BUF	CGA_BUF14,287
#define CRT_ROWS	CRT_ROWS16,313
#define CRT_COLS	CRT_COLS17,333
#define CRT_SIZE	CRT_SIZE18,353

kern/kclock.c,116
mc146818_read(unsigned reg)mc146818_read11,169
mc146818_write(unsigned reg, unsigned datum)mc146818_write18,250

kern/trapentry.S,204
#define TRAPHANDLER(name, num)						\TRAPHANDLER23,772
	name:			/* function starts here */		\name27,969
#define TRAPHANDLER_NOEC(name, num)					\TRAPHANDLER_NOEC35,1229
	name:								\name39,1343

kern/monitor.c,913
#define CMDBUF_SIZE	CMDBUF_SIZE16,360
struct Command {Command19,417
	const char *name;name20,434
	const char *name;Command::name20,434
	const char *desc;desc21,453
	const char *desc;Command::desc21,453
	int (*func)(int argc, char** argv, struct Trapframe* tf);func23,511
	int (*func)(int argc, char** argv, struct Trapframe* tf);Command::func23,511
static struct Command commands[] = {commands26,574
mon_help(int argc, char **argv, struct Trapframe *tf)mon_help35,965
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)mon_kerninfo45,1152
mon_backtrace(int argc, char **argv, struct Trapframe *tf)mon_backtrace61,1773
int mon_showmappings(int argc, char **argv, struct Trapframe *tf)mon_showmappings67,1868
#define WHITESPACE WHITESPACE95,2648
#define MAXARGS MAXARGS96,2677
runcmd(char *buf, struct Trapframe *tf)runcmd99,2708
monitor(struct Trapframe *tf)monitor138,3500

kern/kdebug.h,1042
#define JOS_KERN_KDEBUG_HJOS_KERN_KDEBUG_H2,26
struct Eipdebuginfo {Eipdebuginfo7,137
	const char *eip_file;		// Source code filename for EIPeip_file8,159
	const char *eip_file;		// Source code filename for EIPEipdebuginfo::eip_file8,159
	int eip_line;			// Source code linenumber for EIPeip_line9,215
	int eip_line;			// Source code linenumber for EIPEipdebuginfo::eip_line9,215
	const char *eip_fn_name;	// Name of function containing EIPeip_fn_name11,267
	const char *eip_fn_name;	// Name of function containing EIPEipdebuginfo::eip_fn_name11,267
	int eip_fn_namelen;		// Length of function nameeip_fn_namelen13,366
	int eip_fn_namelen;		// Length of function nameEipdebuginfo::eip_fn_namelen13,366
	uintptr_t eip_fn_addr;		// Address of start of functioneip_fn_addr14,415
	uintptr_t eip_fn_addr;		// Address of start of functionEipdebuginfo::eip_fn_addr14,415
	int eip_fn_narg;		// Number of function argumentseip_fn_narg15,472
	int eip_fn_narg;		// Number of function argumentsEipdebuginfo::eip_fn_narg15,472

kern/trap.c,602
static struct Taskstate ts;ts12,214
static struct Trapframe *last_tf;last_tf18,434
struct Gatedesc idt[256] = { { 0 } };idt23,615
struct Pseudodesc idt_pd = {idt_pd24,653
static const char *trapname(int trapno)trapname29,720
trap_init(void)trap_init63,1394
trap_init_percpu(void)trap_init_percpu75,1566
print_trapframe(struct Trapframe *tf)print_trapframe97,2090
print_regs(struct PushRegs *regs)print_regs130,3266
trap_dispatch(struct Trapframe *tf)trap_dispatch143,3670
trap(struct Trapframe *tf)trap159,3968
page_fault_handler(struct Trapframe *tf)page_fault_handler198,5029

kern/console.c,2436
delay(void)delay16,352
#define COM1	COM126,448
#define COM_RX	COM_RX28,469
#define COM_TX	COM_TX29,518
#define COM_DLL	COM_DLL30,569
#define COM_DLM	COM_DLM31,623
#define COM_IER	COM_IER32,678
#define   COM_IER_RDI	COM_IER_RDI33,731
#define COM_IIR	COM_IIR34,794
#define COM_FCR	COM_FCR35,842
#define COM_LCR	COM_LCR36,891
#define	  COM_LCR_DLAB	COM_LCR_DLAB37,940
#define	  COM_LCR_WLEN8	COM_LCR_WLEN838,998
#define COM_MCR	COM_MCR39,1051
#define	  COM_MCR_RTS	COM_MCR_RTS40,1101
#define	  COM_MCR_DTR	COM_MCR_DTR41,1146
#define	  COM_MCR_OUT2	COM_MCR_OUT242,1191
#define COM_LSR	COM_LSR43,1238
#define   COM_LSR_DATA	COM_LSR_DATA44,1285
#define   COM_LSR_TXRDY	COM_LSR_TXRDY45,1333
#define   COM_LSR_TSRE	COM_LSR_TSRE46,1389
static bool serial_exists;serial_exists48,1439
serial_proc_data(void)serial_proc_data51,1478
serial_intr(void)serial_intr59,1592
serial_putc(int c)serial_putc66,1678
serial_init(void)serial_init79,1843
lpt_putc(int c)lpt_putc112,2633
static unsigned addr_6845;addr_6845128,2853
static uint16_t *crt_buf;crt_buf129,2880
static uint16_t crt_pos;crt_pos130,2906
cga_init(void)cga_init133,2944
cga_putc(int c)cga_putc163,3430
#define NO	NO214,4399
#define SHIFT	SHIFT216,4414
#define CTL	CTL217,4436
#define ALT	ALT218,4456
#define CAPSLOCK	CAPSLOCK220,4477
#define NUMLOCK	NUMLOCK221,4501
#define SCROLLLOCK	SCROLLLOCK222,4525
#define E0ESC	E0ESC224,4552
static uint8_t shiftcode[256] =shiftcode226,4575
static uint8_t togglecode[256] =togglecode236,4706
static uint8_t normalmap[256] =normalmap243,4805
static uint8_t shiftmap[256] =shiftmap264,5690
#define C(C285,6574
static uint8_t ctlmap[256] =ctlmap287,6598
static uint8_t *charcode[4] = {charcode304,7327
kbd_proc_data(void)kbd_proc_data316,7524
kbd_intr(void)kbd_intr368,8510
kbd_init(void)kbd_init374,8569
#define CONSBUFSIZE CONSBUFSIZE385,8809
	uint8_t buf[CONSBUFSIZE];buf388,8850
	uint8_t buf[CONSBUFSIZE];__anon5::buf388,8850
	uint32_t rpos;rpos389,8877
	uint32_t rpos;__anon5::rpos389,8877
	uint32_t wpos;wpos390,8893
	uint32_t wpos;__anon5::wpos390,8893
} cons;cons391,8909
cons_intr(int (*proc)(void))cons_intr396,9037
cons_getc(void)cons_getc411,9300
cons_putc(int c)cons_putc433,9754
cons_init(void)cons_init442,9860
cputchar(int c)cputchar456,10056
getchar(void)getchar462,10096
iscons(int fdnum)iscons472,10191

kern/entrypgdir.c,163
pte_t entry_pgtable[NPTENTRIES];entry_pgtable4,49
pde_t entry_pgdir[NPDENTRIES] = {entry_pgdir21,934
pte_t entry_pgtable[NPTENTRIES] = {entry_pgtable33,1329

kern/monitor.h,51
#define JOS_KERN_MONITOR_HJOS_KERN_MONITOR_H2,27

kern/env.c,996
struct Env *envs = NULL;		// All environmentsenvs15,278
struct Env *curenv = NULL;		// The current envcurenv16,324
static struct Env *env_free_list;	// Free environment listenv_free_list17,371
#define ENVGENSHIFT	ENVGENSHIFT20,465
struct Segdesc gdt[] =gdt37,1167
struct Pseudodesc gdt_pd = {gdt_pd58,1683
envid2env(envid_t envid, struct Env **env_store, bool checkperm)envid2env73,2093
env_init(void)env_init115,3360
env_init_percpu(void)env_init_percpu133,3706
env_setup_vm(struct Env *e)env_setup_vm163,4832
env_alloc(struct Env **newenv_store, envid_t parent_id)env_alloc206,6174
region_alloc(struct Env *e, void *va, size_t len)region_alloc268,8201
load_icode(struct Env *e, uint8_t *binary)load_icode302,9544
env_create(uint8_t *binary, enum EnvType type)env_create348,11334
env_free(struct Env *e)env_free357,11463
env_destroy(struct Env *e)env_destroy410,12713
env_pop_tf(struct Trapframe *tf)env_pop_tf427,13054
env_run(struct Env *e)env_run447,13492

kern/pmap.h,397
#define JOS_KERN_PMAP_HJOS_KERN_PMAP_H4,72
#define PADDR(PADDR26,657
_paddr(const char *file, int line, void *kva)_paddr29,734
#define KADDR(KADDR38,1069
_kaddr(const char *file, int line, physaddr_t pa)_kaddr41,1139
	ALLOC_ZERO = 1<<0,ALLOC_ZERO51,1378
page2pa(struct PageInfo *pp)page2pa70,1980
pa2page(physaddr_t pa)pa2page76,2078
page2kva(struct PageInfo *pp)page2kva84,2222

kern/syscall.c,290
sys_cputs(const char *s, size_t len)sys_cputs18,409
sys_cgetc(void)sys_cgetc32,785
sys_getenvid(void)sys_getenvid39,886
sys_env_destroy(envid_t envid)sys_env_destroy50,1196
syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)syscall67,1562

kern/pmap.c,1818
size_t npages;			// Amount of physical memory (in pages)npages14,284
static size_t npages_basemem;	// Amount of base memory (in pages)npages_basemem15,341
pde_t *kern_pgdir;		// Kernel's initial page directorykern_pgdir18,449
struct PageInfo *pages;		// Physical page state arraypages19,504
static struct PageInfo *page_free_list;	// Free list of physical pagespage_free_list20,558
nvram_read(int r)nvram_read28,818
i386_detect_memory(void)i386_detect_memory34,909
boot_alloc(uint32_t n)boot_alloc86,2729
mem_init(void)mem_init129,4192
page_init(void)page_init262,9640
page_alloc(int alloc_flags)page_alloc317,11514
page_free(struct PageInfo *pp)page_free338,11910
page_decref(struct PageInfo* pp)page_decref357,12375
pgdir_walk(pde_t *pgdir, const void *va, int create)pgdir_walk386,13511
boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)boot_map_region416,14315
page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)page_insert460,15769
page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)page_lookup482,16412
page_remove(pde_t *pgdir, void *va)page_remove505,17160
tlb_invalidate(pde_t *pgdir, void *va)tlb_invalidate519,17508
static uintptr_t user_mem_check_addr;user_mem_check_addr526,17704
user_mem_check(struct Env *env, const void *va, size_t len, int perm)user_mem_check547,18534
user_mem_assert(struct Env *env, const void *va, size_t len, int perm)user_mem_assert562,18948
check_page_free_list(bool only_low_memory)check_page_free_list580,19465
check_page_alloc(void)check_page_alloc642,21226
check_kern_pgdir(void)check_kern_pgdir724,23043
check_va2pa(pde_t *pgdir, uintptr_t va)check_va2pa777,24499
check_page(void)check_page793,24780
check_page_installed_pgdir(void)check_page_installed_pgdir945,29575

kern/env.h,119
#define JOS_KERN_ENV_HJOS_KERN_ENV_H4,71
#define ENV_PASTE3(ENV_PASTE326,866
#define ENV_CREATE(ENV_CREATE28,907

kern/entry.S,533
#define SRL(val, shamt)		(((val) >> (shamt)) & ~(-1 << (32 - (shamt))))SRL8,142
#define	RELOC(x) ((x) - KERNBASE)RELOC19,588
#define MULTIBOOT_HEADER_MAGIC (0x1BADB002)MULTIBOOT_HEADER_MAGIC21,623
#define MULTIBOOT_HEADER_FLAGS (0)MULTIBOOT_HEADER_FLAGS22,667
#define CHECKSUM (-(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS))CHECKSUM23,702
_start = RELOC(entry)_start41,1253
entry:entry44,1289
relocated:relocated70,2191
spin:	jmp	spinspin84,2523
bootstack:bootstack93,2756
bootstacktop:bootstacktop96,2810

kern/init.c,212
i386_init(void)i386_init16,272
const char *panicstr;panicstr55,1249
_panic(const char *file, int line, const char *fmt,...)_panic62,1397
_warn(const char *file, int line, const char *fmt,...)_warn87,1830

kern/trap.h,45
#define JOS_KERN_TRAP_HJOS_KERN_TRAP_H4,72

kern/syscall.h,51
#define JOS_KERN_SYSCALL_HJOS_KERN_SYSCALL_H2,27

kern/kdebug.c,615
struct UserStabData {UserStabData15,434
	const struct Stab *stabs;stabs16,456
	const struct Stab *stabs;UserStabData::stabs16,456
	const struct Stab *stab_end;stab_end17,483
	const struct Stab *stab_end;UserStabData::stab_end17,483
	const char *stabstr;stabstr18,513
	const char *stabstr;UserStabData::stabstr18,513
	const char *stabstr_end;stabstr_end19,535
	const char *stabstr_end;UserStabData::stabstr_end19,535
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,stab_binsearch60,1929
debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)debuginfo_eip114,3197

kern/kclock.h,420
#define JOS_KERN_KCLOCK_HJOS_KERN_KCLOCK_H4,74
#define	IO_RTC	IO_RTC9,203
#define	MC_NVRAM_START	MC_NVRAM_START11,242
#define	MC_NVRAM_SIZE	MC_NVRAM_SIZE12,301
#define NVRAM_BASELO	NVRAM_BASELO15,393
#define NVRAM_BASEHI	NVRAM_BASEHI16,465
#define NVRAM_EXTLO	NVRAM_EXTLO19,609
#define NVRAM_EXTHI	NVRAM_EXTHI20,680
#define NVRAM_EXT16LO	NVRAM_EXT16LO23,826
#define NVRAM_EXT16HI	NVRAM_EXT16HI24,900

kern/printf.c,136
putch(int ch, int *cnt)putch10,212
vcprintf(const char *fmt, va_list ap)vcprintf17,269
cprintf(const char *fmt, ...)cprintf26,385

grade-lab3,638
r = Runner(save("jos.out"),r5,47
def test_divzero():test_divzero9,126
def test_softint():test_softint20,466
def test_badsegment():test_badsegment31,824
def test_faultread():test_faultread44,1185
def test_faultreadkernel():test_faultreadkernel55,1571
def test_faultwrite():test_faultwrite66,1979
def test_faultwritekernel():test_faultwritekernel76,2314
def test_breakpoint():test_breakpoint86,2661
def test_testbss():test_testbss97,3022
def test_hello():test_hello105,3294
def test_buggyhello():test_buggyhello115,3616
def test_buggyhello2():test_buggyhello2121,3798
def test_evilhello():test_evilhello128,4015

grade-lab2,306
r = Runner(save("jos.out"),r5,47
def test_jos():test_jos9,140
def test_check_page_alloc():test_check_page_alloc13,228
def test_check_page():test_check_page17,352
def test_check_kern_pgdir():test_check_kern_pgdir21,470
def test_check_page_installed_pgdir():test_check_page_installed_pgdir25,596

gradelib.py,2816
__all__ = []__all__7,194
TESTS = []TESTS15,361
CURRENT_TEST = NoneCURRENT_TEST18,424
def test(points, title=None, parent=None):test20,445
    def register_test(fn, title=title):register_test26,703
        def run_test():run_test33,923
def end_part(name):end_part79,2398
    def show_part():show_part80,2418
def run_tests():run_tests89,2709
def get_current_test():get_current_test120,3671
def assert_equal(got, expect, msg=""):assert_equal131,3928
def assert_lines_match(text, *regexps, **kw):assert_lines_match140,4221
    def assert_lines_match_kw(no=[]):assert_lines_match_kw145,4445
MAKE_TIMESTAMP = 0MAKE_TIMESTAMP196,6022
def pre_make():pre_make198,6042
def post_make():post_make203,6197
def make(*target):make209,6385
def show_command(cmd):show_command215,6497
def maybe_unlink(*paths):maybe_unlink219,6593
COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m"}COLORS227,6784
def color(name, text):color229,6857
def reset_fs():reset_fs234,7032
class QEMU(object):QEMU244,7277
    _GDBPORT = None_GDBPORT245,7297
    def __init__(self, *make_args):__init__247,7318
    def get_gdb_port():get_gdb_port273,8258
    def fileno(self):fileno285,8713
    def handle_read(self):handle_read289,8803
    def wait(self):wait299,9115
    def kill(self):kill304,9216
class GDBClient(object):GDBClient308,9293
    def __init__(self, port, timeout=15):__init__309,9318
    def fileno(self):fileno322,9717
    def handle_read(self):handle_read326,9800
    def __send(self, cmd):__send348,10398
    def __send_break(self):__send_break352,10538
    def close(self):close355,10602
    def cont(self):cont360,10705
    def breakpoint(self, addr):breakpoint363,10751
class TerminateTest(Exception):TerminateTest373,10952
class Runner():Runner376,10994
    def __init__(self, *default_monitors):__init__377,11010
    def run_qemu(self, *monitors, **kw):run_qemu380,11105
        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):run_qemu_kw389,11629
    def __monitor_start(self, output):__monitor_start436,13129
    def __react(self, reactors, timeout):__react446,13439
    def user_test(self, binary, *monitors, **kw):user_test466,14081
    def match(self, *args, **kwargs):match476,14579
def save(path):save488,14924
    def setup_save(runner):setup_save492,15062
    def save_on_finish(fail):save_on_finish498,15236
def stop_breakpoint(addr):stop_breakpoint511,15660
    def setup_breakpoint(runner):setup_breakpoint515,15800
def call_on_line(regexp, callback):call_on_line525,16182
    def setup_call_on_line(runner):setup_call_on_line529,16316
        def handle_output(output):handle_output531,16378
def stop_on_line(regexp):stop_on_line541,16743
    def stop(line):stop545,16856

.dir-locals.el,0

GNUmakefile,1598
OBJDIR := objOBJDIR8,197
LABSETUP ?= ./LABSETUP22,403
TOP = .TOP24,419
GCCPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \GCCPREFIX36,874
QEMU := $(shell if which qemu >/dev/null 2>&1; \QEMU52,1637
GDBPORT	:= $(shell expr `id -u` % 5000 + 25000)GDBPORT67,2275
CC	:= $(GCCPREFIX)gcc -pipeCC69,2324
GDB	:= $(GCCPREFIX)gdbGDB70,2352
AS	:= $(GCCPREFIX)asAS71,2375
AR	:= $(GCCPREFIX)arAR72,2396
LD	:= $(GCCPREFIX)ldLD73,2417
OBJCOPY	:= $(GCCPREFIX)objcopyOBJCOPY74,2438
OBJDUMP	:= $(GCCPREFIX)objdumpOBJDUMP75,2469
NM	:= $(GCCPREFIX)nmNM76,2500
NCC	:= gcc $(CC_VER) -pipeNCC79,2540
NATIVE_CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -I$(TOP) -MD -WallNATIVE_CFLAGS80,2567
TAR	:= gtarTAR81,2632
PERL	:= perlPERL82,2644
CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -O1 -fno-builtin -I$(TOP) -MDCFLAGS87,2831
LDFLAGS := -m elf_i386LDFLAGS100,3389
ULDFLAGS := -T user/user.ldULDFLAGS103,3450
GCC_LIB := $(shell $(CC) $(CFLAGS) -print-libgcc-file-name)GCC_LIB105,3479
OBJDIRS :=OBJDIRS108,3599
KERN_CFLAGS := $(CFLAGS) -DJOS_KERNEL -gstabsKERN_CFLAGS124,3990
USER_CFLAGS := $(CFLAGS) -DJOS_USER -gstabsUSER_CFLAGS125,4036
QEMUOPTS = -drive file=$(OBJDIR)/kern/kernel.img,index=0,media=disk,format=raw -serial mon:stdio -gdb tcp::$(GDBPORT)QEMUOPTS145,4589
IMAGES = $(OBJDIR)/kern/kernel.imgIMAGES147,4802
WEBSUB := https://6828.scripts.mit.edu/2018/handin.pyWEBSUB225,6519
UPSTREAM := $(shell git remote -v | grep "pdos.csail.mit.edu/6.828/2018/jos.git (fetch)" | awk '{split($$0,a," "); print a[1]}')UPSTREAM258,7541
