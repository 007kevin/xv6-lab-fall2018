
grade-lab1,445
r = Runner(save("jos.out"),r6,57
def test_jos():test_jos10,150
def test_printf():test_printf14,211
BACKTRACE_RE = r"^ *ebp +f01[0-9a-z]{5} +eip +f0100[0-9a-z]{3} +args +([0-9a-z]+)"BACKTRACE_RE17,275
def test_backtrace_count():test_backtrace_count20,386
def test_backtrace_arguments():test_backtrace_arguments25,544
def test_backtrace_symbols():test_backtrace_symbols31,777
def test_backtrace_lines():test_backtrace_lines37,1018

mergedep.pl,31
sub readdeps {readdeps27,909

lib/readline.c,106
#define BUFLEN BUFLEN4,47
static char buf[BUFLEN];buf5,67
readline(const char *prompt)readline8,100

lib/string.c,1018
#define ASM ASM9,264
strlen(const char *s)strlen12,283
strnlen(const char *s, size_t size)strnlen22,371
strcpy(char *dst, const char *src)strcpy32,496
strcat(char *dst, const char *src)strcat43,636
strncpy(char *dst, const char *src, size_t size) {strncpy51,745
strlcpy(char *dst, const char *src, size_t size)strlcpy66,998
strcmp(const char *p, const char *q)strcmp80,1201
strncmp(const char *p, const char *q, size_t n)strncmp88,1340
strchr(const char *s, char c)strchr101,1645
strfind(const char *s, char c)strfind112,1889
memset(void *v, int c, size_t n)memset122,2002
memmove(void *dst, const void *src, size_t n)memmove142,2359
memset(void *v, int c, size_t n)memset174,3099
memmove(void *dst, const void *src, size_t n)memmove188,3221
memcpy(void *dst, const void *src, size_t n)memcpy209,3470
memcmp(const void *v1, const void *v2, size_t n)memcmp215,3554
memfind(const void *s, int c, size_t n)memfind230,3801
strtol(const char *s, char **endptr, int base)strtol240,4001

lib/printfmt.c,737
static const char * const error_string[MAXERROR] =error_string21,589
printnum(void (*putch)(int, void*), void *putdat,printnum36,995
getuint(va_list *ap, int lflag)getuint55,1609
getint(va_list *ap, int lflag)getint68,1897
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)vprintfmt83,2193
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)printfmt247,5283
struct sprintbuf {sprintbuf256,5443
	char *buf;buf257,5462
	char *ebuf;ebuf258,5474
	int cnt;cnt259,5487
sprintputch(int ch, struct sprintbuf *b)sprintputch263,5513
vsnprintf(char *buf, int n, const char *fmt, va_list ap)vsnprintf271,5615
snprintf(char *buf, int n, const char *fmt, ...)snprintf288,5913

inc/memlayout.h,915
#define JOS_INC_MEMLAYOUT_HJOS_INC_MEMLAYOUT_H2,28
#define GD_KT GD_KT15,324
#define GD_KD GD_KD16,366
#define GD_UT GD_UT17,408
#define GD_UD GD_UD18,448
#define GD_TSS0 GD_TSS019,488
#define	KERNBASE	KERNBASE87,4609
#define IOPHYSMEM	IOPHYSMEM92,4814
#define EXTPHYSMEM	EXTPHYSMEM93,4841
#define KSTACKTOP	KSTACKTOP96,4887
#define KSTKSIZE	KSTKSIZE97,4914
#define KSTKGAP	KSTKGAP98,4972
#define MMIOLIM	MMIOLIM101,5058
#define MMIOBASE	MMIOBASE102,5096
#define ULIM	ULIM104,5133
#define UVPT	UVPT112,5361
#define UPAGES	UPAGES114,5434
#define UENVS	UENVS116,5515
#define UTOP	UTOP123,5650
#define UXSTACKTOP	UXSTACKTOP125,5710
#define USTACKTOP	USTACKTOP128,5837
#define UTEXT	UTEXT131,5913
#define UTEMP	UTEMP134,6008
#define PFTEMP	PFTEMP137,6168
#define USTABDATA	USTABDATA139,6265
typedef uint32_t pte_t;pte_t143,6320
typedef uint32_t pde_t;pde_t144,6344

inc/stab.h,1187
#define JOS_STAB_HJOS_STAB_H2,19
#define	N_GSYM	N_GSYM15,436
#define	N_FNAME	N_FNAME16,474
#define	N_FUN	N_FUN17,517
#define	N_STSYM	N_STSYM18,555
#define	N_LCSYM	N_LCSYM19,602
#define	N_MAIN	N_MAIN20,648
#define	N_PC	N_PC21,691
#define	N_RSYM	N_RSYM22,734
#define	N_SLINE	N_SLINE23,776
#define	N_DSLINE	N_DSLINE24,826
#define	N_BSLINE	N_BSLINE25,876
#define	N_SSYM	N_SSYM26,925
#define	N_SO	N_SO27,973
#define	N_LSYM	N_LSYM28,1017
#define	N_BINCL	N_BINCL29,1056
#define	N_SOL	N_SOL30,1104
#define	N_PSYM	N_PSYM31,1153
#define	N_EINCL	N_EINCL32,1196
#define	N_ENTRY	N_ENTRY33,1238
#define	N_LBRAC	N_LBRAC34,1285
#define	N_EXCL	N_EXCL35,1323
#define	N_RBRAC	N_RBRAC36,1368
#define	N_BCOMM	N_BCOMM37,1407
#define	N_ECOMM	N_ECOMM38,1445
#define	N_ECOML	N_ECOML39,1481
#define	N_LENG	N_LENG40,1530
struct Stab {Stab43,1637
	uint32_t n_strx;	// index into string table of namen_strx44,1651
	uint8_t n_type;         // type of symboln_type45,1704
	uint8_t n_other;        // misc info (usually empty)n_other46,1747
	uint16_t n_desc;        // description fieldn_desc47,1801
	uintptr_t n_value;	// value of symboln_value48,1847

inc/string.h,47
#define JOS_INC_STRING_HJOS_INC_STRING_H2,25

inc/stdio.h,69
#define JOS_INC_STDIO_HJOS_INC_STDIO_H2,24
#define NULL	NULL7,87

inc/x86.h,1331
#define JOS_INC_X86_HJOS_INC_X86_H2,22
breakpoint(void)breakpoint7,88
inb(int port)inb13,155
insb(int port, void *addr, int cnt)insb21,278
inw(int port)inw30,481
insw(int port, void *addr, int cnt)insw38,605
inl(int port)inl47,808
insl(int port, void *addr, int cnt)insl55,932
outb(int port, uint8_t data)outb64,1131
outsb(int port, const void *addr, int cnt)outsb70,1241
outw(int port, uint16_t data)outw79,1438
outsw(int port, const void *addr, int cnt)outsw85,1549
outsl(int port, const void *addr, int cnt)outsl94,1746
outl(int port, uint32_t data)outl103,1943
invlpg(void *addr)invlpg109,2054
lidt(void *p)lidt115,2153
lgdt(void *p)lgdt121,2231
lldt(uint16_t sel)lldt127,2309
ltr(uint16_t sel)ltr133,2392
lcr0(uint32_t val)lcr0139,2473
rcr0(void)rcr0145,2566
rcr2(void)rcr2153,2678
lcr3(uint32_t val)lcr3161,2786
rcr3(void)rcr3167,2879
lcr4(uint32_t val)lcr4175,2987
rcr4(void)rcr4181,3080
tlbflush(void)tlbflush189,3188
read_eflags(void)read_eflags197,3337
write_eflags(uint32_t eflags)write_eflags205,3463
read_ebp(void)read_ebp211,3572
read_esp(void)read_esp219,3688
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)cpuid227,3800
read_tsc(void)read_tsc244,4147
xchg(volatile uint32_t *addr, uint32_t newval)xchg252,4255

inc/elf.h,1787
#define JOS_INC_ELF_HJOS_INC_ELF_H2,22
#define ELF_MAGIC ELF_MAGIC4,45
struct Elf {Elf6,109
	uint32_t e_magic;	// must equal ELF_MAGICe_magic7,122
	uint8_t e_elf[12];e_elf8,165
	uint16_t e_type;e_type9,185
	uint16_t e_machine;e_machine10,203
	uint32_t e_version;e_version11,224
	uint32_t e_entry;e_entry12,245
	uint32_t e_phoff;e_phoff13,264
	uint32_t e_shoff;e_shoff14,283
	uint32_t e_flags;e_flags15,302
	uint16_t e_ehsize;e_ehsize16,321
	uint16_t e_phentsize;e_phentsize17,341
	uint16_t e_phnum;e_phnum18,364
	uint16_t e_shentsize;e_shentsize19,383
	uint16_t e_shnum;e_shnum20,406
	uint16_t e_shstrndx;e_shstrndx21,425
struct Proghdr {Proghdr24,451
	uint32_t p_type;p_type25,468
	uint32_t p_offset;p_offset26,486
	uint32_t p_va;p_va27,506
	uint32_t p_pa;p_pa28,522
	uint32_t p_filesz;p_filesz29,538
	uint32_t p_memsz;p_memsz30,558
	uint32_t p_flags;p_flags31,577
	uint32_t p_align;p_align32,596
struct Secthdr {Secthdr35,619
	uint32_t sh_name;sh_name36,636
	uint32_t sh_type;sh_type37,655
	uint32_t sh_flags;sh_flags38,674
	uint32_t sh_addr;sh_addr39,694
	uint32_t sh_offset;sh_offset40,713
	uint32_t sh_size;sh_size41,734
	uint32_t sh_link;sh_link42,753
	uint32_t sh_info;sh_info43,772
	uint32_t sh_addralign;sh_addralign44,791
	uint32_t sh_entsize;sh_entsize45,815
#define ELF_PROG_LOAD	ELF_PROG_LOAD49,871
#define ELF_PROG_FLAG_EXEC	ELF_PROG_FLAG_EXEC52,931
#define ELF_PROG_FLAG_WRITE	ELF_PROG_FLAG_WRITE53,960
#define ELF_PROG_FLAG_READ	ELF_PROG_FLAG_READ54,990
#define ELF_SHT_NULL	ELF_SHT_NULL57,1051
#define ELF_SHT_PROGBITS	ELF_SHT_PROGBITS58,1075
#define ELF_SHT_SYMTAB	ELF_SHT_SYMTAB59,1102
#define ELF_SHT_STRTAB	ELF_SHT_STRTAB60,1128
#define ELF_SHN_UNDEF	ELF_SHN_UNDEF63,1186

inc/mmu.h,6682
#define JOS_INC_MMU_HJOS_INC_MMU_H2,22
#define PGNUM(PGNUM30,964
#define PDX(PDX33,1040
#define PTX(PTX36,1121
#define PGOFF(PGOFF39,1200
#define PGADDR(PGADDR42,1300
#define NPDENTRIES	NPDENTRIES45,1421
#define NPTENTRIES	NPTENTRIES46,1491
#define PGSIZE	PGSIZE48,1554
#define PGSHIFT	PGSHIFT49,1602
#define PTSIZE	PTSIZE51,1640
#define PTSHIFT	PTSHIFT52,1718
#define PTXSHIFT	PTXSHIFT54,1756
#define PDXSHIFT	PDXSHIFT55,1814
#define PTE_P	PTE_P58,1910
#define PTE_W	PTE_W59,1942
#define PTE_U	PTE_U60,1976
#define PTE_PWT	PTE_PWT61,2005
#define PTE_PCD	PTE_PCD62,2045
#define PTE_A	PTE_A63,2085
#define PTE_D	PTE_D64,2118
#define PTE_PS	PTE_PS65,2148
#define PTE_G	PTE_G66,2183
#define PTE_AVAIL	PTE_AVAIL70,2353
#define PTE_SYSCALL	PTE_SYSCALL73,2480
#define PTE_ADDR(PTE_ADDR76,2586
#define CR0_PE	CR0_PE79,2665
#define CR0_MP	CR0_MP80,2713
#define CR0_EM	CR0_EM81,2763
#define CR0_TS	CR0_TS82,2803
#define CR0_ET	CR0_ET83,2847
#define CR0_NE	CR0_NE84,2892
#define CR0_WP	CR0_WP85,2937
#define CR0_AM	CR0_AM86,2981
#define CR0_NW	CR0_NW87,3026
#define CR0_CD	CR0_CD88,3073
#define CR0_PG	CR0_PG89,3117
#define CR4_PCE	CR4_PCE91,3155
#define CR4_MCE	CR4_MCE92,3213
#define CR4_PSE	CR4_PSE93,3265
#define CR4_DE	CR4_DE94,3317
#define CR4_TSD	CR4_TSD95,3368
#define CR4_PVI	CR4_PVI96,3418
#define CR4_VME	CR4_VME97,3483
#define FL_CF	FL_CF100,3554
#define FL_PF	FL_PF101,3594
#define FL_AF	FL_AF102,3635
#define FL_ZF	FL_ZF103,3685
#define FL_SF	FL_SF104,3724
#define FL_TF	FL_TF105,3763
#define FL_IF	FL_IF106,3802
#define FL_DF	FL_DF107,3846
#define FL_OF	FL_OF108,3890
#define FL_IOPL_MASK	FL_IOPL_MASK109,3933
#define FL_IOPL_0	FL_IOPL_0110,3996
#define FL_IOPL_1	FL_IOPL_1111,4040
#define FL_IOPL_2	FL_IOPL_2112,4084
#define FL_IOPL_3	FL_IOPL_3113,4128
#define FL_NT	FL_NT114,4172
#define FL_RF	FL_RF115,4213
#define FL_VM	FL_VM116,4254
#define FL_AC	FL_AC117,4301
#define FL_VIF	FL_VIF118,4346
#define FL_VIP	FL_VIP119,4399
#define FL_ID	FL_ID120,4455
#define FEC_PR	FEC_PR123,4519
#define FEC_WR	FEC_WR124,4584
#define FEC_U	FEC_U125,4636
#define SEG_NULL	SEG_NULL139,4841
#define SEG(SEG142,4903
struct Segdesc {Segdesc152,5176
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitsd_lim_15_0153,5193
	unsigned sd_base_15_0 : 16; // Low bits of segment base addresssd_base_15_0154,5251
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addresssd_base_23_16155,5316
	unsigned sd_type : 4;       // Segment type (see STS_ constants)sd_type156,5384
	unsigned sd_s : 1;          // 0 = system, 1 = applicationsd_s157,5450
	unsigned sd_dpl : 2;        // Descriptor Privilege Levelsd_dpl158,5510
	unsigned sd_p : 1;          // Presentsd_p159,5569
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitsd_lim_19_16160,5609
	unsigned sd_avl : 1;        // Unused (available for software use)sd_avl161,5668
	unsigned sd_rsv1 : 1;       // Reservedsd_rsv1162,5736
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentsd_db163,5777
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setsd_g164,5848
	unsigned sd_base_31_24 : 8; // High bits of segment base addresssd_base_31_24165,5921
#define SEG_NULL	SEG_NULL168,6006
#define SEG_FAULT	SEG_FAULT170,6114
#define SEG(SEG172,6192
#define SEG16(SEG16176,6391
#define STA_X	STA_X184,6662
#define STA_E	STA_E185,6707
#define STA_C	STA_C186,6771
#define STA_W	STA_W187,6839
#define STA_R	STA_R188,6901
#define STA_A	STA_A189,6958
#define STS_T16A	STS_T16A192,7022
#define STS_LDT	STS_LDT193,7071
#define STS_T16B	STS_T16B194,7122
#define STS_CG16	STS_CG16195,7166
#define STS_TG	STS_TG196,7211
#define STS_IG16	STS_IG16197,7268
#define STS_TG16	STS_TG16198,7318
#define STS_T32A	STS_T32A199,7363
#define STS_T32B	STS_T32B200,7412
#define STS_CG32	STS_CG32201,7456
#define STS_IG32	STS_IG32202,7501
#define STS_TG32	STS_TG32203,7551
struct Taskstate {Taskstate215,7731
	uint32_t ts_link;	// Old ts selectorts_link216,7750
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsts_esp0217,7788
	uint16_t ts_ss0;	//   after an increase in privilege levelts_ss0218,7848
	uint16_t ts_padding1;ts_padding1219,7908
	uintptr_t ts_esp1;ts_esp1220,7931
	uint16_t ts_ss1;ts_ss1221,7951
	uint16_t ts_padding2;ts_padding2222,7969
	uintptr_t ts_esp2;ts_esp2223,7992
	uint16_t ts_ss2;ts_ss2224,8012
	uint16_t ts_padding3;ts_padding3225,8030
	physaddr_t ts_cr3;	// Page directory basets_cr3226,8053
	uintptr_t ts_eip;	// Saved state from last task switchts_eip227,8096
	uint32_t ts_eflags;ts_eflags228,8152
	uint32_t ts_eax;	// More saved state (registers)ts_eax229,8173
	uint32_t ts_ecx;ts_ecx230,8223
	uint32_t ts_edx;ts_edx231,8241
	uint32_t ts_ebx;ts_ebx232,8259
	uintptr_t ts_esp;ts_esp233,8277
	uintptr_t ts_ebp;ts_ebp234,8296
	uint32_t ts_esi;ts_esi235,8315
	uint32_t ts_edi;ts_edi236,8333
	uint16_t ts_es;		// Even more saved state (segment selectors)ts_es237,8351
	uint16_t ts_padding4;ts_padding4238,8414
	uint16_t ts_cs;ts_cs239,8437
	uint16_t ts_padding5;ts_padding5240,8454
	uint16_t ts_ss;ts_ss241,8477
	uint16_t ts_padding6;ts_padding6242,8494
	uint16_t ts_ds;ts_ds243,8517
	uint16_t ts_padding7;ts_padding7244,8534
	uint16_t ts_fs;ts_fs245,8557
	uint16_t ts_padding8;ts_padding8246,8574
	uint16_t ts_gs;ts_gs247,8597
	uint16_t ts_padding9;ts_padding9248,8614
	uint16_t ts_ldt;ts_ldt249,8637
	uint16_t ts_padding10;ts_padding10250,8655
	uint16_t ts_t;		// Trap on task switchts_t251,8679
	uint16_t ts_iomb;	// I/O map base addressts_iomb252,8719
struct Gatedesc {Gatedesc256,8811
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentgd_off_15_0257,8829
	unsigned gd_sel : 16;        // segment selectorgd_sel258,8895
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesgd_args259,8945
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)gd_rsv1260,9013
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})gd_type261,9079
	unsigned gd_s : 1;           // must be 0 (system)gd_s262,9137
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelgd_dpl263,9189
	unsigned gd_p : 1;           // Presentgd_p264,9262
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentgd_off_31_16265,9303
#define SETGATE(SETGATE282,10286
#define SETCALLGATE(SETCALLGATE296,10699
struct Pseudodesc {Pseudodesc310,11137
	uint16_t pd_lim;		// Limitpd_lim311,11157
	uint32_t pd_base;		// Base addresspd_base312,11185

inc/stdarg.h,189
#define	JOS_INC_STDARG_HJOS_INC_STDARG_H4,91
typedef __builtin_va_list va_list;va_list6,117
#define va_start(va_start8,153
#define va_arg(va_arg10,210
#define va_end(va_end12,263

inc/error.h,460
#define JOS_INC_ERROR_HJOS_INC_ERROR_H4,72
	E_UNSPECIFIED	= 1,	// Unspecified or unknown problemE_UNSPECIFIED8,172
	E_BAD_ENV	,	// Environment doesn't exist or otherwiseE_BAD_ENV9,226
	E_INVAL		,	// Invalid parameterE_INVAL11,323
	E_NO_MEM	,	// Request failed due to memory shortageE_NO_MEM12,356
	E_NO_FREE_ENV	,	// Attempt to create a new environment beyondE_NO_FREE_ENV13,409
	E_FAULT		,	// Memory faultE_FAULT15,499
	MAXERRORMAXERROR17,528

inc/kbdreg.h,2510
#define JOS_KBDREG_HJOS_KBDREG_H2,21
#define KEY_HOME	KEY_HOME5,63
#define KEY_END	KEY_END6,85
#define KEY_UP	KEY_UP7,107
#define KEY_DN	KEY_DN8,128
#define KEY_LF	KEY_LF9,149
#define KEY_RT	KEY_RT10,170
#define KEY_PGUP	KEY_PGUP11,191
#define KEY_PGDN	KEY_PGDN12,213
#define KEY_INS	KEY_INS13,235
#define KEY_DEL	KEY_DEL14,257
#define	KBSTATP	KBSTATP19,331
#define	 KBS_DIB	KBS_DIB20,389
#define	 KBS_IBF	KBS_IBF21,436
#define	 KBS_WARM	KBS_WARM22,485
#define	 KBS_OCMD	KBS_OCMD23,535
#define	 KBS_NOSEC	KBS_NOSEC24,594
#define	 KBS_TERR	KBS_TERR25,654
#define	 KBS_RERR	KBS_RERR26,720
#define	 KBS_PERR	KBS_PERR27,767
#define	KBCMDP	KBCMDP29,814
#define	 KBC_RAMREAD	KBC_RAMREAD30,864
#define	 KBC_RAMWRITE	KBC_RAMWRITE31,910
#define	 KBC_AUXDISABLE	KBC_AUXDISABLE32,956
#define	 KBC_AUXENABLE	KBC_AUXENABLE33,1014
#define	 KBC_AUXTEST	KBC_AUXTEST34,1070
#define	 KBC_KBDECHO	KBC_KBDECHO35,1122
#define	 KBC_AUXECHO	KBC_AUXECHO36,1176
#define	 KBC_AUXWRITE	KBC_AUXWRITE37,1231
#define	 KBC_SELFTEST	KBC_SELFTEST38,1288
#define	 KBC_KBDTEST	KBC_KBDTEST39,1337
#define	 KBC_KBDDISABLE	KBC_KBDDISABLE40,1388
#define	 KBC_KBDENABLE	KBC_KBDENABLE41,1445
#define	 KBC_PULSE0	KBC_PULSE042,1500
#define	 KBC_PULSE1	KBC_PULSE143,1550
#define	 KBC_PULSE2	KBC_PULSE244,1600
#define	 KBC_PULSE3	KBC_PULSE345,1650
#define	KBDATAP	KBDATAP47,1701
#define	KBOUTP	KBOUTP48,1746
#define	K_RDCMDBYTE	K_RDCMDBYTE50,1791
#define	K_LDCMDBYTE	K_LDCMDBYTE51,1816
#define	KC8_TRANS	KC8_TRANS53,1842
#define	KC8_MDISABLE	KC8_MDISABLE54,1897
#define	KC8_KDISABLE	KC8_KDISABLE55,1943
#define	KC8_IGNSEC	KC8_IGNSEC56,1992
#define	KC8_CPU	KC8_CPU57,2043
#define	KC8_MENABLE	KC8_MENABLE58,2102
#define	KC8_KENABLE	KC8_KENABLE59,2156
#define	CMDBYTE	CMDBYTE60,2213
#define	KBC_RESET	KBC_RESET63,2299
#define	KBC_RESEND	KBC_RESEND64,2347
#define	KBC_SETDEFAULT	KBC_SETDEFAULT65,2419
#define	KBC_DISABLE	KBC_DISABLE66,2494
#define	KBC_ENABLE	KBC_ENABLE67,2578
#define	KBC_TYPEMATIC	KBC_TYPEMATIC68,2628
#define	KBC_SETTABLE	KBC_SETTABLE69,2690
#define	KBC_MODEIND	KBC_MODEIND70,2753
#define	KBC_ECHO	KBC_ECHO71,2815
#define	KBR_EXTENDED	KBR_EXTENDED74,2903
#define	KBR_RESEND	KBR_RESEND75,2957
#define	KBR_ACK	KBR_ACK76,3011
#define	KBR_OVERRUN	KBR_OVERRUN77,3064
#define	KBR_FAILURE	KBR_FAILURE78,3103
#define	KBR_BREAK	KBR_BREAK79,3152
#define	KBR_RSTDONE	KBR_RSTDONE80,3221
#define	KBR_ECHO	KBR_ECHO81,3267

inc/types.h,1005
#define JOS_INC_TYPES_HJOS_INC_TYPES_H2,24
#define NULL NULL5,62
typedef _Bool bool;bool9,130
enum { false, true };false10,150
enum { false, true };true10,150
typedef __signed char int8_t;int8_t13,219
typedef unsigned char uint8_t;uint8_t14,249
typedef short int16_t;int16_t15,280
typedef unsigned short uint16_t;uint16_t16,303
typedef int int32_t;int32_t17,336
typedef unsigned int uint32_t;uint32_t18,357
typedef long long int64_t;int64_t19,388
typedef unsigned long long uint64_t;uint64_t20,415
typedef int32_t intptr_t;intptr_t26,673
typedef uint32_t uintptr_t;uintptr_t27,699
typedef uint32_t physaddr_t;physaddr_t28,727
typedef uint32_t ppn_t;ppn_t31,791
typedef uint32_t size_t;size_t34,859
typedef int32_t ssize_t;ssize_t37,975
typedef int32_t off_t;off_t40,1048
#define MIN(MIN43,1108
#define MAX(MAX49,1241
#define ROUNDDOWN(ROUNDDOWN58,1476
#define ROUNDUP(ROUNDUP64,1637
#define ARRAY_SIZE(ARRAY_SIZE70,1778
#define offsetof(offsetof73,1904

inc/assert.h,175
#define JOS_INC_ASSERT_HJOS_INC_ASSERT_H4,73
#define warn(warn11,247
#define panic(panic12,304
#define assert(assert14,364
#define static_assert(static_assert18,521

boot/sign.pl,0

boot/main.c,255
#define SECTSIZE	SECTSIZE32,1131
#define ELFHDR	ELFHDR33,1152
bootmain(void)bootmain39,1293
readseg(uint32_t pa, uint32_t count, uint32_t offset)readseg72,2092
waitdisk(void)waitdisk99,2821
readsect(void *dst, uint32_t offset)readsect107,2928

boot/boot.S,108
start:start13,454
protcseg:protcseg58,1980
spin:spin72,2494
gdt:gdt77,2595
gdtdesc:gdtdesc82,2722

obj/boot/boot.asm,729
Disassembly of section .text:Disassembly5,49
start:start11,174
protcseg:protcseg84,2890
spin:spin108,3818
voidvoid132,4393
static inline uint8_tstatic137,4460
voidvoid157,5073
static inline voidstatic169,5409
	offset = (offset / SECTSIZE) + 1;offset226,7580
	end_pa = pa + count;end_pa230,7716
	offset = (offset / SECTSIZE) + 1;offset234,7848
	end_pa = pa + count;end_pa236,7932
	offset = (offset / SECTSIZE) + 1;offset238,8003
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph282,9728
	eph = ph + ELFHDR->e_phnum;eph284,9845
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph286,9926
	eph = ph + ELFHDR->e_phnum;eph288,10049
static inline voidstatic309,10908

obj/kern/kernel.asm,174873
Disassembly of section .text:Disassembly5,47
f0100000 <_start+0xeffffff4>:f01000007,78
_start = RELOC(entry)_start9,123
entry:entry12,159
f0100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dhf010000014,200
f0100006:	00 00                	add    %al,(%eax)f010000615,256
f0100008:	fe 4f 52             	decb   0x52(%edi)f010000816,306
f010000b:	e4                   	.byte 0xe4f010000b17,356
f010000c <entry>:f010000c19,400
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472f010000c20,418
f0100013:	34 12 f010001321,471
f0100015:	b8 00 20 11 00       	mov    $0x112000,%eaxf010001528,696
f010001a:	0f 22 d8             	mov    %eax,%cr3f010001a30,767
f010001d:	0f 20 c0             	mov    %cr0,%eaxf010001d33,852
f0100020:	0d 01 00 01 80       	or     $0x80010001,%eaxf010002035,936
f0100025:	0f 22 c0             	mov    %eax,%cr0f010002537,1009
f0100028:	b8 2f 00 10 f0       	mov    $0xf010002f,%eaxf010002843,1219
f010002d:	ff e0                	jmp    *%eaxf010002d45,1286
f010002f <relocated>:f010002f47,1332
relocated:relocated48,1354
f010002f:	bd 00 00 00 00       	mov    $0x0,%ebpf010002f54,1542
f0100034:	bc 00 00 11 f0       	mov    $0xf0110000,%espf010003458,1644
f0100039:	e8 68 00 00 00       	call   f01000a6 <i386_init>f010003962,1734
f010003e <spin>:f010003e64,1795
spin:	jmp	spinspin67,1869
f010003e:	eb fe                	jmp    f010003e <spin>f010003e68,1884
f0100040 <test_backtrace>:f010004070,1940
voidvoid74,2044
f0100040:	55                   	push   %ebpf010004077,2073
f0100041:	89 e5                	mov    %esp,%ebpf010004178,2117
f0100043:	56                   	push   %esif010004379,2166
f0100044:	53                   	push   %ebxf010004480,2210
f0100045:	e8 72 01 00 00       	call   f01001bc <__x86.get_pc_thunk.bx>f010004581,2254
f010004a:	81 c3 be 12 01 00    	add    $0x112be,%ebxf010004a82,2326
f0100050:	8b 75 08             	mov    0x8(%ebp),%esif010005083,2379
f0100053:	83 ec 08             	sub    $0x8,%espf010005385,2478
f0100056:	56                   	push   %esif010005686,2527
f0100057:	8d 83 f8 06 ff ff    	lea    -0xf908(%ebx),%eaxf010005787,2571
f010005d:	50                   	push   %eaxf010005d88,2629
f010005e:	e8 e6 09 00 00       	call   f0100a49 <cprintf>f010005e89,2673
f0100063:	83 c4 10             	add    $0x10,%espf010006391,2743
f0100066:	85 f6                	test   %esi,%esif010006692,2793
f0100068:	7f 2b                	jg     f0100095 <test_backtrace+0x55>f010006893,2842
f010006a:	83 ec 04             	sub    $0x4,%espf010006a97,2967
f010006d:	6a 00                	push   $0x0f010006d98,3016
f010006f:	6a 00                	push   $0x0f010006f99,3060
f0100071:	6a 00                	push   $0x0f0100071100,3104
f0100073:	e8 0b 08 00 00       	call   f0100883 <mon_backtrace>f0100073101,3148
f0100078:	83 c4 10             	add    $0x10,%espf0100078102,3212
f010007b:	83 ec 08             	sub    $0x8,%espf010007b104,3306
f010007e:	56                   	push   %esif010007e105,3355
f010007f:	8d 83 14 07 ff ff    	lea    -0xf8ec(%ebx),%eaxf010007f106,3399
f0100085:	50                   	push   %eaxf0100085107,3457
f0100086:	e8 be 09 00 00       	call   f0100a49 <cprintf>f0100086108,3501
f010008b:	83 c4 10             	add    $0x10,%espf010008b110,3561
f010008e:	8d 65 f8             	lea    -0x8(%ebp),%espf010008e111,3611
f0100091:	5b                   	pop    %ebxf0100091112,3666
f0100092:	5e                   	pop    %esif0100092113,3710
f0100093:	5d                   	pop    %ebpf0100093114,3754
f0100094:	c3                   	ret    f0100094115,3798
f0100095:	83 ec 0c             	sub    $0xc,%espf0100095117,3861
f0100098:	8d 46 ff             	lea    -0x1(%esi),%eaxf0100098118,3910
f010009b:	50                   	push   %eaxf010009b119,3965
f010009c:	e8 9f ff ff ff       	call   f0100040 <test_backtrace>f010009c120,4009
f01000a1:	83 c4 10             	add    $0x10,%espf01000a1121,4074
f01000a4:	eb d5                	jmp    f010007b <test_backtrace+0x3b>f01000a4122,4124
f01000a6 <i386_init>:f01000a6124,4195
voidvoid126,4218
f01000a6:	55                   	push   %ebpf01000a6129,4241
f01000a7:	89 e5                	mov    %esp,%ebpf01000a7130,4285
f01000a9:	53                   	push   %ebxf01000a9131,4334
f01000aa:	83 ec 08             	sub    $0x8,%espf01000aa132,4378
f01000ad:	e8 0a 01 00 00       	call   f01001bc <__x86.get_pc_thunk.bx>f01000ad133,4427
f01000b2:	81 c3 56 12 01 00    	add    $0x11256,%ebxf01000b2134,4499
f01000b8:	c7 c2 60 30 11 f0    	mov    $0xf0113060,%edxf01000b8141,4816
f01000be:	c7 c0 a0 36 11 f0    	mov    $0xf01136a0,%eaxf01000be142,4872
f01000c4:	29 d0                	sub    %edx,%eaxf01000c4143,4928
f01000c6:	50                   	push   %eaxf01000c6144,4977
f01000c7:	6a 00                	push   $0x0f01000c7145,5021
f01000c9:	52                   	push   %edxf01000c9146,5065
f01000ca:	e8 da 14 00 00       	call   f01015a9 <memset>f01000ca147,5109
f01000cf:	e8 3d 05 00 00       	call   f0100611 <cons_init>f01000cf152,5256
f01000d4:	83 c4 08             	add    $0x8,%espf01000d4155,5364
f01000d7:	68 ac 1a 00 00       	push   $0x1aacf01000d7156,5413
f01000dc:	8d 83 2f 07 ff ff    	lea    -0xf8d1(%ebx),%eaxf01000dc157,5460
f01000e2:	50                   	push   %eaxf01000e2158,5518
f01000e3:	e8 61 09 00 00       	call   f0100a49 <cprintf>f01000e3159,5562
f01000e8:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)f01000e8163,5692
f01000ef:	e8 4c ff ff ff       	call   f0100040 <test_backtrace>f01000ef164,5743
f01000f4:	83 c4 10             	add    $0x10,%espf01000f4165,5808
f01000f7:	83 ec 0c             	sub    $0xc,%espf01000f7170,5921
f01000fa:	6a 00                	push   $0x0f01000fa171,5970
f01000fc:	e8 8c 07 00 00       	call   f010088d <monitor>f01000fc172,6014
f0100101:	83 c4 10             	add    $0x10,%espf0100101173,6072
f0100104:	eb f1                	jmp    f01000f7 <i386_init+0x51>f0100104174,6122
f0100106 <_panic>:f0100106176,6188
voidvoid180,6324
f0100106:	55                   	push   %ebpf0100106183,6387
f0100107:	89 e5                	mov    %esp,%ebpf0100107184,6431
f0100109:	57                   	push   %edif0100109185,6480
f010010a:	56                   	push   %esif010010a186,6524
f010010b:	53                   	push   %ebxf010010b187,6568
f010010c:	83 ec 0c             	sub    $0xc,%espf010010c188,6612
f010010f:	e8 a8 00 00 00       	call   f01001bc <__x86.get_pc_thunk.bx>f010010f189,6661
f0100114:	81 c3 f4 11 01 00    	add    $0x111f4,%ebxf0100114190,6733
f010011a:	8b 7d 10             	mov    0x10(%ebp),%edif010011a191,6786
f010011d:	c7 c0 a4 36 11 f0    	mov    $0xf01136a4,%eaxf010011d195,6870
f0100123:	83 38 00             	cmpl   $0x0,(%eax)f0100123196,6926
f0100126:	74 0f                	je     f0100137 <_panic+0x31>f0100126197,6977
dead:dead200,7053
f0100128:	83 ec 0c             	sub    $0xc,%espf0100128204,7124
f010012b:	6a 00                	push   $0x0f010012b205,7173
f010012d:	e8 5b 07 00 00       	call   f010088d <monitor>f010012d206,7217
f0100132:	83 c4 10             	add    $0x10,%espf0100132207,7275
f0100135:	eb f1                	jmp    f0100128 <_panic+0x22>f0100135208,7325
	panicstr = fmt;panicstr209,7387
f0100137:	89 38                	mov    %edi,(%eax)f0100137210,7404
f0100139:	fa                   	cli    f0100139212,7482
f010013a:	fc                   	cld    f010013a213,7522
f010013b:	8d 75 14             	lea    0x14(%ebp),%esif010013b215,7582
f010013e:	83 ec 04             	sub    $0x4,%espf010013e217,7686
f0100141:	ff 75 0c             	pushl  0xc(%ebp)f0100141218,7735
f0100144:	ff 75 08             	pushl  0x8(%ebp)f0100144219,7784
f0100147:	8d 83 4a 07 ff ff    	lea    -0xf8b6(%ebx),%eaxf0100147220,7833
f010014d:	50                   	push   %eaxf010014d221,7891
f010014e:	e8 f6 08 00 00       	call   f0100a49 <cprintf>f010014e222,7935
f0100153:	83 c4 08             	add    $0x8,%espf0100153224,8013
f0100156:	56                   	push   %esif0100156225,8062
f0100157:	57                   	push   %edif0100157226,8106
f0100158:	e8 b5 08 00 00       	call   f0100a12 <vcprintf>f0100158227,8150
f010015d:	8d 83 86 07 ff ff    	lea    -0xf87a(%ebx),%eaxf010015d229,8225
f0100163:	89 04 24             	mov    %eax,(%esp)f0100163230,8283
f0100166:	e8 de 08 00 00       	call   f0100a49 <cprintf>f0100166231,8334
f010016b:	83 c4 10             	add    $0x10,%espf010016b232,8392
f010016e:	eb b8                	jmp    f0100128 <_panic+0x22>f010016e233,8442
f0100170 <_warn>:f0100170235,8505
voidvoid239,8554
f0100170:	55                   	push   %ebpf0100170242,8616
f0100171:	89 e5                	mov    %esp,%ebpf0100171243,8660
f0100173:	56                   	push   %esif0100173244,8709
f0100174:	53                   	push   %ebxf0100174245,8753
f0100175:	e8 42 00 00 00       	call   f01001bc <__x86.get_pc_thunk.bx>f0100175246,8797
f010017a:	81 c3 8e 11 01 00    	add    $0x1118e,%ebxf010017a247,8869
f0100180:	8d 75 14             	lea    0x14(%ebp),%esif0100180251,8956
f0100183:	83 ec 04             	sub    $0x4,%espf0100183253,9062
f0100186:	ff 75 0c             	pushl  0xc(%ebp)f0100186254,9111
f0100189:	ff 75 08             	pushl  0x8(%ebp)f0100189255,9160
f010018c:	8d 83 62 07 ff ff    	lea    -0xf89e(%ebx),%eaxf010018c256,9209
f0100192:	50                   	push   %eaxf0100192257,9267
f0100193:	e8 b1 08 00 00       	call   f0100a49 <cprintf>f0100193258,9311
f0100198:	83 c4 08             	add    $0x8,%espf0100198260,9389
f010019b:	56                   	push   %esif010019b261,9438
f010019c:	ff 75 10             	pushl  0x10(%ebp)f010019c262,9482
f010019f:	e8 6e 08 00 00       	call   f0100a12 <vcprintf>f010019f263,9532
f01001a4:	8d 83 86 07 ff ff    	lea    -0xf87a(%ebx),%eaxf01001a4265,9607
f01001aa:	89 04 24             	mov    %eax,(%esp)f01001aa266,9665
f01001ad:	e8 97 08 00 00       	call   f0100a49 <cprintf>f01001ad267,9716
f01001b2:	83 c4 10             	add    $0x10,%espf01001b2270,9789
f01001b5:	8d 65 f8             	lea    -0x8(%ebp),%espf01001b5271,9839
f01001b8:	5b                   	pop    %ebxf01001b8272,9894
f01001b9:	5e                   	pop    %esif01001b9273,9938
f01001ba:	5d                   	pop    %ebpf01001ba274,9982
f01001bb:	c3                   	ret    f01001bb275,10026
f01001bc <__x86.get_pc_thunk.bx>:f01001bc277,10067
f01001bc:	8b 1c 24             	mov    (%esp),%ebxf01001bc278,10101
f01001bf:	c3                   	ret    f01001bf279,10152
f01001c0 <serial_proc_data>:f01001c0281,10193
static bool serial_exists;static283,10223
static intstatic285,10251
f01001c0:	55                   	push   %ebpf01001c0288,10287
f01001c1:	89 e5                	mov    %esp,%ebpf01001c1289,10331
static inline uint8_tstatic291,10381
f01001c3:	ba fd 03 00 00       	mov    $0x3fd,%edxf01001c3296,10490
f01001c8:	ec                   	in     (%dx),%alf01001c8297,10541
f01001c9:	a8 01                	test   $0x1,%alf01001c9299,10632
f01001cb:	74 0b                	je     f01001d8 <serial_proc_data+0x18>f01001cb300,10680
f01001cd:	ba f8 03 00 00       	mov    $0x3f8,%edxf01001cd301,10752
f01001d2:	ec                   	in     (%dx),%alf01001d2302,10803
f01001d3:	0f b6 c0             	movzbl %al,%eaxf01001d3305,10891
f01001d6:	5d                   	pop    %ebpf01001d6307,10941
f01001d7:	c3                   	ret    f01001d7308,10985
f01001d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf01001d8310,11038
f01001dd:	eb f7                	jmp    f01001d6 <serial_proc_data+0x16>f01001dd311,11094
f01001df <cons_intr>:f01001df313,11167
static voidstatic317,11297
f01001df:	55                   	push   %ebpf01001df320,11340
f01001e0:	89 e5                	mov    %esp,%ebpf01001e0321,11384
f01001e2:	56                   	push   %esif01001e2322,11433
f01001e3:	53                   	push   %ebxf01001e3323,11477
f01001e4:	e8 d3 ff ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f01001e4324,11521
f01001e9:	81 c3 1f 11 01 00    	add    $0x1111f,%ebxf01001e9325,11593
f01001ef:	89 c6                	mov    %eax,%esif01001ef326,11646
f01001f1:	ff d6                	call   *%esif01001f1330,11737
f01001f3:	83 f8 ff             	cmp    $0xffffffff,%eaxf01001f3331,11782
f01001f6:	74 2e                	je     f0100226 <cons_intr+0x47>f01001f6332,11838
f01001f8:	85 c0                	test   %eax,%eaxf01001f8334,11917
f01001fa:	74 f5                	je     f01001f1 <cons_intr+0x12>f01001fa335,11966
f01001fc:	8b 8b 7c 1f 00 00    	mov    0x1f7c(%ebx),%ecxf01001fc338,12073
f0100202:	8d 51 01             	lea    0x1(%ecx),%edxf0100202339,12130
f0100205:	89 93 7c 1f 00 00    	mov    %edx,0x1f7c(%ebx)f0100205340,12184
f010020b:	88 84 0b 78 1d 00 00 	mov    %al,0x1d78(%ebx,%ecx,1)f010020b341,12241
f0100212:	81 fa 00 02 00 00    	cmp    $0x200,%edxf0100212343,12336
f0100218:	75 d7                	jne    f01001f1 <cons_intr+0x12>f0100218344,12387
f010021a:	c7 83 7c 1f 00 00 00 	movl   $0x0,0x1f7c(%ebx)f010021a346,12470
f0100221:	00 00 00 f0100221347,12527
f0100224:	eb cb                	jmp    f01001f1 <cons_intr+0x12>f0100224348,12547
f0100226:	5b                   	pop    %ebxf0100226351,12617
f0100227:	5e                   	pop    %esif0100227352,12661
f0100228:	5d                   	pop    %ebpf0100228353,12705
f0100229:	c3                   	ret    f0100229354,12749
f010022a <kbd_proc_data>:f010022a356,12790
f010022a:	55                   	push   %ebpf010022a358,12818
f010022b:	89 e5                	mov    %esp,%ebpf010022b359,12862
f010022d:	56                   	push   %esif010022d360,12911
f010022e:	53                   	push   %ebxf010022e361,12955
f010022f:	e8 88 ff ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f010022f362,12999
f0100234:	81 c3 d4 10 01 00    	add    $0x110d4,%ebxf0100234363,13071
f010023a:	ba 64 00 00 00       	mov    $0x64,%edxf010023a364,13124
f010023f:	ec                   	in     (%dx),%alf010023f365,13174
f0100240:	a8 01                	test   $0x1,%alf0100240367,13251
f0100242:	0f 84 06 01 00 00    	je     f010034e <kbd_proc_data+0x124>f0100242368,13299
f0100248:	a8 20                	test   $0x20,%alf0100248370,13391
f010024a:	0f 85 05 01 00 00    	jne    f0100355 <kbd_proc_data+0x12b>f010024a371,13440
f0100250:	ba 60 00 00 00       	mov    $0x60,%edxf0100250372,13510
f0100255:	ec                   	in     (%dx),%alf0100255373,13560
f0100256:	89 c2                	mov    %eax,%edxf0100256374,13609
f0100258:	3c e0                	cmp    $0xe0,%alf0100258376,13679
f010025a:	0f 84 93 00 00 00    	je     f01002f3 <kbd_proc_data+0xc9>f010025a377,13728
f0100260:	84 c0                	test   %al,%alf0100260379,13824
f0100262:	0f 88 a0 00 00 00    	js     f0100308 <kbd_proc_data+0xde>f0100262380,13871
f0100268:	8b 8b 58 1d 00 00    	mov    0x1d58(%ebx),%ecxf0100268382,13969
f010026e:	f6 c1 40             	test   $0x40,%clf010026e383,14026
f0100271:	74 0e                	je     f0100281 <kbd_proc_data+0x57>f0100271384,14075
f0100273:	83 c8 80             	or     $0xffffff80,%eaxf0100273386,14160
f0100276:	89 c2                	mov    %eax,%edxf0100276387,14216
f0100278:	83 e1 bf             	and    $0xffffffbf,%ecxf0100278389,14284
f010027b:	89 8b 58 1d 00 00    	mov    %ecx,0x1d58(%ebx)f010027b390,14340
f0100281:	0f b6 d2             	movzbl %dl,%edxf0100281392,14424
f0100284:	0f b6 84 13 b8 08 ff 	movzbl -0xf748(%ebx,%edx,1),%eaxf0100284393,14472
f010028b:	ff f010028b394,14537
f010028c:	0b 83 58 1d 00 00    	or     0x1d58(%ebx),%eaxf010028c395,14551
f0100292:	0f b6 8c 13 b8 07 ff 	movzbl -0xf848(%ebx,%edx,1),%ecxf0100292397,14636
f0100299:	ff f0100299398,14701
f010029a:	31 c8                	xor    %ecx,%eaxf010029a399,14715
f010029c:	89 83 58 1d 00 00    	mov    %eax,0x1d58(%ebx)f010029c400,14764
	c = charcode[shift & (CTL | SHIFT)][data];c401,14821
f01002a2:	89 c1                	mov    %eax,%ecxf01002a2402,14865
f01002a4:	83 e1 03             	and    $0x3,%ecxf01002a4403,14914
f01002a7:	8b 8c 8b f8 1c 00 00 	mov    0x1cf8(%ebx,%ecx,4),%ecxf01002a7404,14963
f01002ae:	0f b6 14 11          	movzbl (%ecx,%edx,1),%edxf01002ae405,15027
f01002b2:	0f b6 f2             	movzbl %dl,%esif01002b2406,15085
f01002b5:	a8 08                	test   $0x8,%alf01002b5408,15158
f01002b7:	74 0d                	je     f01002c6 <kbd_proc_data+0x9c>f01002b7409,15206
f01002b9:	89 f2                	mov    %esi,%edxf01002b9411,15303
f01002bb:	8d 4e 9f             	lea    -0x61(%esi),%ecxf01002bb412,15352
f01002be:	83 f9 19             	cmp    $0x19,%ecxf01002be413,15408
f01002c1:	77 7a                	ja     f010033d <kbd_proc_data+0x113>f01002c1414,15458
f01002c3:	83 ee 20             	sub    $0x20,%esif01002c3416,15547
f01002c6:	f7 d0                	not    %eaxf01002c6418,15645
f01002c8:	a8 06                	test   $0x6,%alf01002c8419,15689
f01002ca:	75 33                	jne    f01002ff <kbd_proc_data+0xd5>f01002ca420,15737
f01002cc:	81 fe e9 00 00 00    	cmp    $0xe9,%esif01002cc421,15806
f01002d2:	75 2b                	jne    f01002ff <kbd_proc_data+0xd5>f01002d2422,15856
f01002d4:	83 ec 0c             	sub    $0xc,%espf01002d4424,15952
f01002d7:	8d 83 7c 07 ff ff    	lea    -0xf884(%ebx),%eaxf01002d7425,16001
f01002dd:	50                   	push   %eaxf01002dd426,16059
f01002de:	e8 66 07 00 00       	call   f0100a49 <cprintf>f01002de427,16103
static inline voidstatic430,16164
f01002e3:	b8 03 00 00 00       	mov    $0x3,%eaxf01002e3434,16271
f01002e8:	ba 92 00 00 00       	mov    $0x92,%edxf01002e8435,16320
f01002ed:	ee                   	out    %al,(%dx)f01002ed436,16370
f01002ee:	83 c4 10             	add    $0x10,%espf01002ee437,16419
f01002f1:	eb 0c                	jmp    f01002ff <kbd_proc_data+0xd5>f01002f1438,16469
f01002f3:	83 8b 58 1d 00 00 40 	orl    $0x40,0x1d58(%ebx)f01002f3440,16556
f01002fa:	be 00 00 00 00       	mov    $0x0,%esif01002fa442,16626
f01002ff:	89 f0                	mov    %esi,%eaxf01002ff444,16677
f0100301:	8d 65 f8             	lea    -0x8(%ebp),%espf0100301445,16726
f0100304:	5b                   	pop    %ebxf0100304446,16781
f0100305:	5e                   	pop    %esif0100305447,16825
f0100306:	5d                   	pop    %ebpf0100306448,16869
f0100307:	c3                   	ret    f0100307449,16913
		data = (shift & E0ESC ? data : data & 0x7F);data450,16953
f0100308:	8b 8b 58 1d 00 00    	mov    0x1d58(%ebx),%ecxf0100308451,17000
f010030e:	89 ce                	mov    %ecx,%esif010030e452,17057
f0100310:	83 e6 40             	and    $0x40,%esif0100310453,17106
f0100313:	83 e0 7f             	and    $0x7f,%eaxf0100313454,17156
f0100316:	85 f6                	test   %esi,%esif0100316455,17206
f0100318:	0f 44 d0             	cmove  %eax,%edxf0100318456,17255
f010031b:	0f b6 d2             	movzbl %dl,%edxf010031b458,17343
f010031e:	0f b6 84 13 b8 08 ff 	movzbl -0xf748(%ebx,%edx,1),%eaxf010031e459,17391
f0100325:	ff f0100325460,17456
f0100326:	83 c8 40             	or     $0x40,%eaxf0100326461,17470
f0100329:	0f b6 c0             	movzbl %al,%eaxf0100329462,17520
f010032c:	f7 d0                	not    %eaxf010032c463,17568
f010032e:	21 c8                	and    %ecx,%eaxf010032e464,17612
f0100330:	89 83 58 1d 00 00    	mov    %eax,0x1d58(%ebx)f0100330465,17661
f0100336:	be 00 00 00 00       	mov    $0x0,%esif0100336467,17730
f010033b:	eb c2                	jmp    f01002ff <kbd_proc_data+0xd5>f010033b468,17779
f010033d:	83 ea 41             	sub    $0x41,%edxf010033d470,17881
f0100340:	8d 4e 20             	lea    0x20(%esi),%ecxf0100340472,17950
f0100343:	83 fa 1a             	cmp    $0x1a,%edxf0100343473,18005
f0100346:	0f 42 f1             	cmovb  %ecx,%esif0100346474,18055
f0100349:	e9 78 ff ff ff       	jmp    f01002c6 <kbd_proc_data+0x9c>f0100349475,18104
f010034e:	be ff ff ff ff       	mov    $0xffffffff,%esif010034e477,18186
f0100353:	eb aa                	jmp    f01002ff <kbd_proc_data+0xd5>f0100353478,18242
f0100355:	be ff ff ff ff       	mov    $0xffffffff,%esif0100355480,18324
f010035a:	eb a3                	jmp    f01002ff <kbd_proc_data+0xd5>f010035a481,18380
f010035c <cons_putc>:f010035c483,18450
static voidstatic487,18512
f010035c:	55                   	push   %ebpf010035c490,18543
f010035d:	89 e5                	mov    %esp,%ebpf010035d491,18587
f010035f:	57                   	push   %edif010035f492,18636
f0100360:	56                   	push   %esif0100360493,18680
f0100361:	53                   	push   %ebxf0100361494,18724
f0100362:	83 ec 1c             	sub    $0x1c,%espf0100362495,18768
f0100365:	e8 52 fe ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f0100365496,18818
f010036a:	81 c3 9e 0f 01 00    	add    $0x10f9e,%ebxf010036a497,18890
f0100370:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100370498,18943
f0100373:	be 00 00 00 00       	mov    $0x0,%esif0100373500,19012
f0100378:	bf fd 03 00 00       	mov    $0x3fd,%edif0100378502,19117
f010037d:	b9 84 00 00 00       	mov    $0x84,%ecxf010037d503,19168
f0100382:	eb 09                	jmp    f010038d <cons_putc+0x31>f0100382504,19218
f0100384:	89 ca                	mov    %ecx,%edxf0100384505,19283
f0100386:	ec                   	in     (%dx),%alf0100386506,19332
f0100387:	ec                   	in     (%dx),%alf0100387507,19381
f0100388:	ec                   	in     (%dx),%alf0100388508,19430
f0100389:	ec                   	in     (%dx),%alf0100389509,19479
f010038a:	83 c6 01             	add    $0x1,%esif010038a511,19539
f010038d:	89 fa                	mov    %edi,%edxf010038d512,19588
f010038f:	ec                   	in     (%dx),%alf010038f513,19637
f0100390:	a8 20                	test   $0x20,%alf0100390515,19745
f0100392:	75 08                	jne    f010039c <cons_putc+0x40>f0100392516,19794
f0100394:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif0100394517,19859
f010039a:	7e e8                	jle    f0100384 <cons_putc+0x28>f010039a518,19911
f010039c:	8b 7d e4             	mov    -0x1c(%ebp),%edif010039c520,20001
f010039f:	89 f8                	mov    %edi,%eaxf010039f521,20057
f01003a1:	88 45 e3             	mov    %al,-0x1d(%ebp)f01003a1522,20106
f01003a4:	ba f8 03 00 00       	mov    $0x3f8,%edxf01003a4524,20218
f01003a9:	ee                   	out    %al,(%dx)f01003a9525,20269
f01003aa:	be 00 00 00 00       	mov    $0x0,%esif01003aa527,20373
f01003af:	bf 79 03 00 00       	mov    $0x379,%edif01003af529,20478
f01003b4:	b9 84 00 00 00       	mov    $0x84,%ecxf01003b4530,20529
f01003b9:	eb 09                	jmp    f01003c4 <cons_putc+0x68>f01003b9531,20579
f01003bb:	89 ca                	mov    %ecx,%edxf01003bb532,20644
f01003bd:	ec                   	in     (%dx),%alf01003bd533,20693
f01003be:	ec                   	in     (%dx),%alf01003be534,20742
f01003bf:	ec                   	in     (%dx),%alf01003bf535,20791
f01003c0:	ec                   	in     (%dx),%alf01003c0536,20840
f01003c1:	83 c6 01             	add    $0x1,%esif01003c1537,20889
f01003c4:	89 fa                	mov    %edi,%edxf01003c4538,20938
f01003c6:	ec                   	in     (%dx),%alf01003c6539,20987
f01003c7:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif01003c7540,21036
f01003cd:	7f 04                	jg     f01003d3 <cons_putc+0x77>f01003cd541,21088
f01003cf:	84 c0                	test   %al,%alf01003cf542,21153
f01003d1:	79 e8                	jns    f01003bb <cons_putc+0x5f>f01003d1543,21200
f01003d3:	ba 78 03 00 00       	mov    $0x378,%edxf01003d3545,21322
f01003d8:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eaxf01003d8546,21373
f01003dc:	ee                   	out    %al,(%dx)f01003dc547,21429
f01003dd:	ba 7a 03 00 00       	mov    $0x37a,%edxf01003dd548,21478
f01003e2:	b8 0d 00 00 00       	mov    $0xd,%eaxf01003e2549,21529
f01003e7:	ee                   	out    %al,(%dx)f01003e7550,21578
f01003e8:	b8 08 00 00 00       	mov    $0x8,%eaxf01003e8551,21627
f01003ed:	ee                   	out    %al,(%dx)f01003ed552,21676
f01003ee:	8b 7d e4             	mov    -0x1c(%ebp),%edif01003ee554,21744
f01003f1:	89 fa                	mov    %edi,%edxf01003f1555,21800
f01003f3:	81 e2 00 ff ff ff    	and    $0xffffff00,%edxf01003f3556,21849
f01003f9:	89 f8                	mov    %edi,%eaxf01003f9558,21920
f01003fb:	80 cc 07             	or     $0x7,%ahf01003fb559,21969
f01003fe:	85 d2                	test   %edx,%edxf01003fe560,22017
f0100400:	0f 45 c7             	cmovne %edi,%eaxf0100400561,22066
f0100403:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100403562,22115
f0100406:	0f b6 c0             	movzbl %al,%eaxf0100406564,22192
f0100409:	83 f8 09             	cmp    $0x9,%eaxf0100409565,22240
f010040c:	0f 84 b9 00 00 00    	je     f01004cb <cons_putc+0x16f>f010040c566,22289
f0100412:	83 f8 09             	cmp    $0x9,%eaxf0100412567,22355
f0100415:	7e 74                	jle    f010048b <cons_putc+0x12f>f0100415568,22404
f0100417:	83 f8 0a             	cmp    $0xa,%eaxf0100417569,22470
f010041a:	0f 84 9e 00 00 00    	je     f01004be <cons_putc+0x162>f010041a570,22519
f0100420:	83 f8 0d             	cmp    $0xd,%eaxf0100420571,22585
f0100423:	0f 85 d9 00 00 00    	jne    f0100502 <cons_putc+0x1a6>f0100423572,22634
f0100429:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf0100429574,22735
f0100430:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eaxf0100430575,22792
f0100436:	c1 e8 16             	shr    $0x16,%eaxf0100436576,22849
f0100439:	8d 04 80             	lea    (%eax,%eax,4),%eaxf0100439577,22899
f010043c:	c1 e0 04             	shl    $0x4,%eaxf010043c578,22957
f010043f:	66 89 83 80 1f 00 00 	mov    %ax,0x1f80(%ebx)f010043f579,23006
f0100446:	66 81 bb 80 1f 00 00 	cmpw   $0x7cf,0x1f80(%ebx)f0100446581,23090
f010044d:	cf 07 f010044d582,23149
f010044f:	0f 87 d4 00 00 00    	ja     f0100529 <cons_putc+0x1cd>f010044f583,23166
f0100455:	8b 8b 88 1f 00 00    	mov    0x1f88(%ebx),%ecxf0100455585,23254
f010045b:	b8 0e 00 00 00       	mov    $0xe,%eaxf010045b586,23311
f0100460:	89 ca                	mov    %ecx,%edxf0100460587,23360
f0100462:	ee                   	out    %al,(%dx)f0100462588,23409
f0100463:	0f b7 9b 80 1f 00 00 	movzwl 0x1f80(%ebx),%ebxf0100463590,23494
f010046a:	8d 71 01             	lea    0x1(%ecx),%esif010046a591,23551
f010046d:	89 d8                	mov    %ebx,%eaxf010046d592,23605
f010046f:	66 c1 e8 08          	shr    $0x8,%axf010046f593,23654
f0100473:	89 f2                	mov    %esi,%edxf0100473594,23702
f0100475:	ee                   	out    %al,(%dx)f0100475595,23751
f0100476:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100476596,23800
f010047b:	89 ca                	mov    %ecx,%edxf010047b597,23849
f010047d:	ee                   	out    %al,(%dx)f010047d598,23898
f010047e:	89 d8                	mov    %ebx,%eaxf010047e599,23947
f0100480:	89 f2                	mov    %esi,%edxf0100480600,23996
f0100482:	ee                   	out    %al,(%dx)f0100482601,24045
f0100483:	8d 65 f4             	lea    -0xc(%ebp),%espf0100483606,24141
f0100486:	5b                   	pop    %ebxf0100486607,24196
f0100487:	5e                   	pop    %esif0100487608,24240
f0100488:	5f                   	pop    %edif0100488609,24284
f0100489:	5d                   	pop    %ebpf0100489610,24328
f010048a:	c3                   	ret    f010048a611,24372
f010048b:	83 f8 08             	cmp    $0x8,%eaxf010048b613,24433
f010048e:	75 72                	jne    f0100502 <cons_putc+0x1a6>f010048e614,24482
f0100490:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf0100490616,24569
f0100497:	66 85 c0             	test   %ax,%axf0100497617,24626
f010049a:	74 b9                	je     f0100455 <cons_putc+0xf9>f010049a618,24673
f010049c:	83 e8 01             	sub    $0x1,%eaxf010049c620,24752
f010049f:	66 89 83 80 1f 00 00 	mov    %ax,0x1f80(%ebx)f010049f621,24801
f01004a6:	0f b7 c0             	movzwl %ax,%eaxf01004a6623,24898
f01004a9:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edxf01004a9624,24946
f01004ad:	b2 00                	mov    $0x0,%dlf01004ad625,25002
f01004af:	83 ca 20             	or     $0x20,%edxf01004af626,25050
f01004b2:	8b 8b 84 1f 00 00    	mov    0x1f84(%ebx),%ecxf01004b2627,25100
f01004b8:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)f01004b8628,25157
f01004bc:	eb 88                	jmp    f0100446 <cons_putc+0xea>f01004bc629,25214
f01004be:	66 83 83 80 1f 00 00 	addw   $0x50,0x1f80(%ebx)f01004be631,25302
f01004c5:	50 f01004c5632,25360
f01004c6:	e9 5e ff ff ff       	jmp    f0100429 <cons_putc+0xcd>f01004c6633,25374
f01004cb:	b8 20 00 00 00       	mov    $0x20,%eaxf01004cb635,25457
f01004d0:	e8 87 fe ff ff       	call   f010035c <cons_putc>f01004d0636,25507
f01004d5:	b8 20 00 00 00       	mov    $0x20,%eaxf01004d5638,25585
f01004da:	e8 7d fe ff ff       	call   f010035c <cons_putc>f01004da639,25635
f01004df:	b8 20 00 00 00       	mov    $0x20,%eaxf01004df641,25713
f01004e4:	e8 73 fe ff ff       	call   f010035c <cons_putc>f01004e4642,25763
f01004e9:	b8 20 00 00 00       	mov    $0x20,%eaxf01004e9644,25841
f01004ee:	e8 69 fe ff ff       	call   f010035c <cons_putc>f01004ee645,25891
f01004f3:	b8 20 00 00 00       	mov    $0x20,%eaxf01004f3647,25969
f01004f8:	e8 5f fe ff ff       	call   f010035c <cons_putc>f01004f8648,26019
f01004fd:	e9 44 ff ff ff       	jmp    f0100446 <cons_putc+0xea>f01004fd649,26079
f0100502:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf0100502651,26197
f0100509:	8d 50 01             	lea    0x1(%eax),%edxf0100509652,26254
f010050c:	66 89 93 80 1f 00 00 	mov    %dx,0x1f80(%ebx)f010050c653,26308
f0100513:	0f b7 c0             	movzwl %ax,%eaxf0100513654,26364
f0100516:	8b 93 84 1f 00 00    	mov    0x1f84(%ebx),%edxf0100516655,26412
f010051c:	0f b7 7d e4          	movzwl -0x1c(%ebp),%edif010051c656,26469
f0100520:	66 89 3c 42          	mov    %di,(%edx,%eax,2)f0100520657,26525
f0100524:	e9 1d ff ff ff       	jmp    f0100446 <cons_putc+0xea>f0100524658,26582
f0100529:	8b 83 84 1f 00 00    	mov    0x1f84(%ebx),%eaxf0100529660,26729
f010052f:	83 ec 04             	sub    $0x4,%espf010052f661,26786
f0100532:	68 00 0f 00 00       	push   $0xf00f0100532662,26835
f0100537:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edxf0100537663,26881
f010053d:	52                   	push   %edxf010053d664,26936
f010053e:	50                   	push   %eaxf010053e665,26980
f010053f:	e8 b2 10 00 00       	call   f01015f6 <memmove>f010053f666,27024
f0100544:	8b 93 84 1f 00 00    	mov    0x1f84(%ebx),%edxf0100544668,27112
f010054a:	8d 82 00 0f 00 00    	lea    0xf00(%edx),%eaxf010054a669,27169
f0100550:	81 c2 a0 0f 00 00    	add    $0xfa0,%edxf0100550670,27225
f0100556:	83 c4 10             	add    $0x10,%espf0100556671,27276
f0100559:	66 c7 00 20 07       	movw   $0x720,(%eax)f0100559672,27326
f010055e:	83 c0 02             	add    $0x2,%eaxf010055e673,27379
f0100561:	39 d0                	cmp    %edx,%eaxf0100561675,27479
f0100563:	75 f4                	jne    f0100559 <cons_putc+0x1fd>f0100563676,27528
f0100565:	66 83 ab 80 1f 00 00 	subw   $0x50,0x1f80(%ebx)f0100565678,27617
f010056c:	50 f010056c679,27675
f010056d:	e9 e3 fe ff ff       	jmp    f0100455 <cons_putc+0xf9>f010056d680,27689
f0100572 <serial_intr>:f0100572682,27755
f0100572:	e8 e7 01 00 00       	call   f010075e <__x86.get_pc_thunk.ax>f0100572684,27781
f0100577:	05 91 0d 01 00       	add    $0x10d91,%eaxf0100577685,27853
f010057c:	80 b8 8c 1f 00 00 00 	cmpb   $0x0,0x1f8c(%eax)f010057c687,27926
f0100583:	75 02                	jne    f0100587 <serial_intr+0x15>f0100583688,27983
f0100585:	f3 c3                	repz ret f0100585689,28050
f0100587:	55                   	push   %ebpf0100587691,28094
f0100588:	89 e5                	mov    %esp,%ebpf0100588692,28138
f010058a:	83 ec 08             	sub    $0x8,%espf010058a693,28187
f010058d:	8d 80 b8 ee fe ff    	lea    -0x11148(%eax),%eaxf010058d695,28267
f0100593:	e8 47 fc ff ff       	call   f01001df <cons_intr>f0100593696,28326
f0100598:	c9                   	leave  f0100598698,28388
f0100599:	c3                   	ret    f0100599699,28428
f010059a <kbd_intr>:f010059a701,28469
f010059a:	55                   	push   %ebpf010059a703,28492
f010059b:	89 e5                	mov    %esp,%ebpf010059b704,28536
f010059d:	83 ec 08             	sub    $0x8,%espf010059d705,28585
f01005a0:	e8 b9 01 00 00       	call   f010075e <__x86.get_pc_thunk.ax>f01005a0706,28634
f01005a5:	05 63 0d 01 00       	add    $0x10d63,%eaxf01005a5707,28706
f01005aa:	8d 80 22 ef fe ff    	lea    -0x110de(%eax),%eaxf01005aa709,28786
f01005b0:	e8 2a fc ff ff       	call   f01001df <cons_intr>f01005b0710,28845
f01005b5:	c9                   	leave  f01005b5712,28907
f01005b6:	c3                   	ret    f01005b6713,28947
f01005b7 <cons_getc>:f01005b7715,28988
f01005b7:	55                   	push   %ebpf01005b7717,29012
f01005b8:	89 e5                	mov    %esp,%ebpf01005b8718,29056
f01005ba:	53                   	push   %ebxf01005ba719,29105
f01005bb:	83 ec 04             	sub    $0x4,%espf01005bb720,29149
f01005be:	e8 f9 fb ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f01005be721,29198
f01005c3:	81 c3 45 0d 01 00    	add    $0x10d45,%ebxf01005c3722,29270
f01005c9:	e8 a4 ff ff ff       	call   f0100572 <serial_intr>f01005c9724,29339
f01005ce:	e8 c7 ff ff ff       	call   f010059a <kbd_intr>f01005ce726,29414
f01005d3:	8b 93 78 1f 00 00    	mov    0x1f78(%ebx),%edxf01005d3728,29504
f01005d9:	b8 00 00 00 00       	mov    $0x0,%eaxf01005d9730,29572
f01005de:	3b 93 7c 1f 00 00    	cmp    0x1f7c(%ebx),%edxf01005de732,29652
f01005e4:	74 19                	je     f01005ff <cons_getc+0x48>f01005e4733,29709
		c = cons.buf[cons.rpos++];c734,29774
f01005e6:	8d 4a 01             	lea    0x1(%edx),%ecxf01005e6735,29803
f01005e9:	89 8b 78 1f 00 00    	mov    %ecx,0x1f78(%ebx)f01005e9736,29857
f01005ef:	0f b6 84 13 78 1d 00 	movzbl 0x1d78(%ebx,%edx,1),%eaxf01005ef737,29914
f01005f6:	00 f01005f6738,29978
f01005f7:	81 f9 00 02 00 00    	cmp    $0x200,%ecxf01005f7740,30024
f01005fd:	74 06                	je     f0100605 <cons_getc+0x4e>f01005fd741,30075
f01005ff:	83 c4 04             	add    $0x4,%espf01005ff743,30142
f0100602:	5b                   	pop    %ebxf0100602744,30191
f0100603:	5d                   	pop    %ebpf0100603745,30235
f0100604:	c3                   	ret    f0100604746,30279
f0100605:	c7 83 78 1f 00 00 00 	movl   $0x0,0x1f78(%ebx)f0100605748,30337
f010060c:	00 00 00 f010060c749,30394
f010060f:	eb ee                	jmp    f01005ff <cons_getc+0x48>f010060f750,30414
f0100611 <cons_init>:f0100611752,30480
voidvoid755,30537
f0100611:	55                   	push   %ebpf0100611758,30560
f0100612:	89 e5                	mov    %esp,%ebpf0100612759,30604
f0100614:	57                   	push   %edif0100614760,30653
f0100615:	56                   	push   %esif0100615761,30697
f0100616:	53                   	push   %ebxf0100616762,30741
f0100617:	83 ec 1c             	sub    $0x1c,%espf0100617763,30785
f010061a:	e8 9d fb ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f010061a764,30835
f010061f:	81 c3 e9 0c 01 00    	add    $0x10ce9,%ebxf010061f765,30907
	was = *cp;was766,30960
f0100625:	0f b7 15 00 80 0b f0 	movzwl 0xf00b8000,%edxf0100625767,30972
f010062c:	66 c7 05 00 80 0b f0 	movw   $0xa55a,0xf00b8000f010062c769,31053
f0100633:	5a a5 f0100633770,31111
f0100635:	0f b7 05 00 80 0b f0 	movzwl 0xf00b8000,%eaxf0100635772,31150
f010063c:	66 3d 5a a5          	cmp    $0xa55a,%axf010063c773,31205
f0100640:	0f 84 bc 00 00 00    	je     f0100702 <cons_init+0xf1>f0100640774,31256
		addr_6845 = MONO_BASE;addr_6845775,31321
f0100646:	c7 83 88 1f 00 00 b4 	movl   $0x3b4,0x1f88(%ebx)f0100646776,31346
f010064d:	03 00 00 f010064d777,31405
		cp = (uint16_t*) (KERNBASE + MONO_BUF);cp778,31425
f0100650:	c7 45 e4 00 00 0b f0 	movl   $0xf00b0000,-0x1c(%ebp)f0100650779,31467
f0100657:	8b bb 88 1f 00 00    	mov    0x1f88(%ebx),%edif0100657781,31552
f010065d:	b8 0e 00 00 00       	mov    $0xe,%eaxf010065d782,31609
f0100662:	89 fa                	mov    %edi,%edxf0100662783,31658
f0100664:	ee                   	out    %al,(%dx)f0100664784,31707
	pos = inb(addr_6845 + 1) << 8;pos785,31756
f0100665:	8d 4f 01             	lea    0x1(%edi),%ecxf0100665786,31788
f0100668:	89 ca                	mov    %ecx,%edxf0100668788,31898
f010066a:	ec                   	in     (%dx),%alf010066a789,31947
f010066b:	0f b6 f0             	movzbl %al,%esif010066b790,31996
f010066e:	c1 e6 08             	shl    $0x8,%esif010066e791,32044
f0100671:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100671793,32150
f0100676:	89 fa                	mov    %edi,%edxf0100676794,32199
f0100678:	ee                   	out    %al,(%dx)f0100678795,32248
f0100679:	89 ca                	mov    %ecx,%edxf0100679797,32353
f010067b:	ec                   	in     (%dx),%alf010067b798,32402
	crt_buf = (uint16_t*) cp;crt_buf799,32451
f010067c:	8b 7d e4             	mov    -0x1c(%ebp),%edif010067c800,32478
f010067f:	89 bb 84 1f 00 00    	mov    %edi,0x1f84(%ebx)f010067f801,32534
f0100685:	0f b6 c0             	movzbl %al,%eaxf0100685803,32619
f0100688:	09 c6                	or     %eax,%esif0100688804,32667
	crt_pos = pos;crt_pos805,32716
f010068a:	66 89 b3 80 1f 00 00 	mov    %si,0x1f80(%ebx)f010068a806,32732
f0100691:	b9 00 00 00 00       	mov    $0x0,%ecxf0100691808,32845
f0100696:	89 c8                	mov    %ecx,%eaxf0100696809,32894
f0100698:	ba fa 03 00 00       	mov    $0x3fa,%edxf0100698810,32943
f010069d:	ee                   	out    %al,(%dx)f010069d811,32994
f010069e:	bf fb 03 00 00       	mov    $0x3fb,%edif010069e812,33043
f01006a3:	b8 80 ff ff ff       	mov    $0xffffff80,%eaxf01006a3813,33094
f01006a8:	89 fa                	mov    %edi,%edxf01006a8814,33150
f01006aa:	ee                   	out    %al,(%dx)f01006aa815,33199
f01006ab:	b8 0c 00 00 00       	mov    $0xc,%eaxf01006ab816,33248
f01006b0:	ba f8 03 00 00       	mov    $0x3f8,%edxf01006b0817,33297
f01006b5:	ee                   	out    %al,(%dx)f01006b5818,33348
f01006b6:	be f9 03 00 00       	mov    $0x3f9,%esif01006b6819,33397
f01006bb:	89 c8                	mov    %ecx,%eaxf01006bb820,33448
f01006bd:	89 f2                	mov    %esi,%edxf01006bd821,33497
f01006bf:	ee                   	out    %al,(%dx)f01006bf822,33546
f01006c0:	b8 03 00 00 00       	mov    $0x3,%eaxf01006c0823,33595
f01006c5:	89 fa                	mov    %edi,%edxf01006c5824,33644
f01006c7:	ee                   	out    %al,(%dx)f01006c7825,33693
f01006c8:	ba fc 03 00 00       	mov    $0x3fc,%edxf01006c8826,33742
f01006cd:	89 c8                	mov    %ecx,%eaxf01006cd827,33793
f01006cf:	ee                   	out    %al,(%dx)f01006cf828,33842
f01006d0:	b8 01 00 00 00       	mov    $0x1,%eaxf01006d0829,33891
f01006d5:	89 f2                	mov    %esi,%edxf01006d5830,33940
f01006d7:	ee                   	out    %al,(%dx)f01006d7831,33989
f01006d8:	ba fd 03 00 00       	mov    $0x3fd,%edxf01006d8833,34094
f01006dd:	ec                   	in     (%dx),%alf01006dd834,34145
f01006de:	89 c1                	mov    %eax,%ecxf01006de835,34194
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);serial_exists836,34243
f01006e0:	3c ff                	cmp    $0xff,%alf01006e0837,34289
f01006e2:	0f 95 83 8c 1f 00 00 	setne  0x1f8c(%ebx)f01006e2838,34338
f01006e9:	ba fa 03 00 00       	mov    $0x3fa,%edxf01006e9839,34390
f01006ee:	ec                   	in     (%dx),%alf01006ee840,34441
f01006ef:	ba f8 03 00 00       	mov    $0x3f8,%edxf01006ef841,34490
f01006f4:	ec                   	in     (%dx),%alf01006f4842,34541
f01006f5:	80 f9 ff             	cmp    $0xff,%clf01006f5848,34654
f01006f8:	74 25                	je     f010071f <cons_init+0x10e>f01006f8849,34703
f01006fa:	8d 65 f4             	lea    -0xc(%ebp),%espf01006fa852,34815
f01006fd:	5b                   	pop    %ebxf01006fd853,34870
f01006fe:	5e                   	pop    %esif01006fe854,34914
f01006ff:	5f                   	pop    %edif01006ff855,34958
f0100700:	5d                   	pop    %ebpf0100700856,35002
f0100701:	c3                   	ret    f0100701857,35046
f0100702:	66 89 15 00 80 0b f0 	mov    %dx,0xf00b8000f0100702859,35099
		addr_6845 = CGA_BASE;addr_6845860,35153
f0100709:	c7 83 88 1f 00 00 d4 	movl   $0x3d4,0x1f88(%ebx)f0100709861,35177
f0100710:	03 00 00 f0100710862,35236
	cp = (uint16_t*) (KERNBASE + CGA_BUF);cp863,35256
f0100713:	c7 45 e4 00 80 0b f0 	movl   $0xf00b8000,-0x1c(%ebp)f0100713864,35296
f010071a:	e9 38 ff ff ff       	jmp    f0100657 <cons_init+0x46>f010071a865,35359
f010071f:	83 ec 0c             	sub    $0xc,%espf010071f867,35468
f0100722:	8d 83 88 07 ff ff    	lea    -0xf878(%ebx),%eaxf0100722868,35517
f0100728:	50                   	push   %eaxf0100728869,35575
f0100729:	e8 1b 03 00 00       	call   f0100a49 <cprintf>f0100729870,35619
f010072e:	83 c4 10             	add    $0x10,%espf010072e871,35677
f0100731:	eb c7                	jmp    f01006fa <cons_init+0xe9>f0100731873,35729
f0100733 <cputchar>:f0100733875,35795
voidvoid879,35878
f0100733:	55                   	push   %ebpf0100733882,35901
f0100734:	89 e5                	mov    %esp,%ebpf0100734883,35945
f0100736:	83 ec 08             	sub    $0x8,%espf0100736884,35994
f0100739:	8b 45 08             	mov    0x8(%ebp),%eaxf0100739886,36058
f010073c:	e8 1b fc ff ff       	call   f010035c <cons_putc>f010073c887,36112
f0100741:	c9                   	leave  f0100741889,36174
f0100742:	c3                   	ret    f0100742890,36214
f0100743 <getchar>:f0100743892,36255
intint894,36276
f0100743:	55                   	push   %ebpf0100743897,36296
f0100744:	89 e5                	mov    %esp,%ebpf0100744898,36340
f0100746:	83 ec 08             	sub    $0x8,%espf0100746899,36389
f0100749:	e8 69 fe ff ff       	call   f01005b7 <cons_getc>f0100749903,36479
f010074e:	85 c0                	test   %eax,%eaxf010074e904,36539
f0100750:	74 f7                	je     f0100749 <getchar+0x6>f0100750905,36588
f0100752:	c9                   	leave  f0100752909,36683
f0100753:	c3                   	ret    f0100753910,36723
f0100754 <iscons>:f0100754912,36764
intint914,36784
f0100754:	55                   	push   %ebpf0100754917,36808
f0100755:	89 e5                	mov    %esp,%ebpf0100755918,36852
f0100757:	b8 01 00 00 00       	mov    $0x1,%eaxf0100757922,36935
f010075c:	5d                   	pop    %ebpf010075c923,36984
f010075d:	c3                   	ret    f010075d924,37028
f010075e <__x86.get_pc_thunk.ax>:f010075e926,37069
f010075e:	8b 04 24             	mov    (%esp),%eaxf010075e927,37103
f0100761:	c3                   	ret    f0100761928,37154
f0100762 <mon_help>:f0100762930,37195
intint934,37281
f0100762:	55                   	push   %ebpf0100762937,37341
f0100763:	89 e5                	mov    %esp,%ebpf0100763938,37385
f0100765:	56                   	push   %esif0100765939,37434
f0100766:	53                   	push   %ebxf0100766940,37478
f0100767:	e8 50 fa ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f0100767941,37522
f010076c:	81 c3 9c 0b 01 00    	add    $0x10b9c,%ebxf010076c942,37594
f0100772:	83 ec 04             	sub    $0x4,%espf0100772947,37760
f0100775:	8d 83 b8 09 ff ff    	lea    -0xf648(%ebx),%eaxf0100775948,37809
f010077b:	50                   	push   %eaxf010077b949,37867
f010077c:	8d 83 d6 09 ff ff    	lea    -0xf62a(%ebx),%eaxf010077c950,37911
f0100782:	50                   	push   %eaxf0100782951,37969
f0100783:	8d b3 db 09 ff ff    	lea    -0xf625(%ebx),%esif0100783952,38013
f0100789:	56                   	push   %esif0100789953,38071
f010078a:	e8 ba 02 00 00       	call   f0100a49 <cprintf>f010078a954,38115
f010078f:	83 c4 0c             	add    $0xc,%espf010078f955,38173
f0100792:	8d 83 44 0a ff ff    	lea    -0xf5bc(%ebx),%eaxf0100792956,38222
f0100798:	50                   	push   %eaxf0100798957,38280
f0100799:	8d 83 e4 09 ff ff    	lea    -0xf61c(%ebx),%eaxf0100799958,38324
f010079f:	50                   	push   %eaxf010079f959,38382
f01007a0:	56                   	push   %esif01007a0960,38426
f01007a1:	e8 a3 02 00 00       	call   f0100a49 <cprintf>f01007a1961,38470
f01007a6:	b8 00 00 00 00       	mov    $0x0,%eaxf01007a6964,38541
f01007ab:	8d 65 f8             	lea    -0x8(%ebp),%espf01007ab965,38590
f01007ae:	5b                   	pop    %ebxf01007ae966,38645
f01007af:	5e                   	pop    %esif01007af967,38689
f01007b0:	5d                   	pop    %ebpf01007b0968,38733
f01007b1:	c3                   	ret    f01007b1969,38777
f01007b2 <mon_kerninfo>:f01007b2971,38818
intint973,38844
f01007b2:	55                   	push   %ebpf01007b2976,38908
f01007b3:	89 e5                	mov    %esp,%ebpf01007b3977,38952
f01007b5:	57                   	push   %edif01007b5978,39001
f01007b6:	56                   	push   %esif01007b6979,39045
f01007b7:	53                   	push   %ebxf01007b7980,39089
f01007b8:	83 ec 18             	sub    $0x18,%espf01007b8981,39133
f01007bb:	e8 fc f9 ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f01007bb982,39183
f01007c0:	81 c3 48 0b 01 00    	add    $0x10b48,%ebxf01007c0983,39255
f01007c6:	8d 83 ed 09 ff ff    	lea    -0xf613(%ebx),%eaxf01007c6987,39405
f01007cc:	50                   	push   %eaxf01007cc988,39463
f01007cd:	e8 77 02 00 00       	call   f0100a49 <cprintf>f01007cd989,39507
f01007d2:	83 c4 08             	add    $0x8,%espf01007d2991,39626
f01007d5:	ff b3 f8 ff ff ff    	pushl  -0x8(%ebx)f01007d5992,39675
f01007db:	8d 83 6c 0a ff ff    	lea    -0xf594(%ebx),%eaxf01007db993,39725
f01007e1:	50                   	push   %eaxf01007e1994,39783
f01007e2:	e8 62 02 00 00       	call   f0100a49 <cprintf>f01007e2995,39827
f01007e7:	83 c4 0c             	add    $0xc,%espf01007e7997,39959
f01007ea:	c7 c7 0c 00 10 f0    	mov    $0xf010000c,%edif01007ea998,40008
f01007f0:	8d 87 00 00 00 10    	lea    0x10000000(%edi),%eaxf01007f0999,40064
f01007f6:	50                   	push   %eaxf01007f61000,40125
f01007f7:	57                   	push   %edif01007f71001,40169
f01007f8:	8d 83 94 0a ff ff    	lea    -0xf56c(%ebx),%eaxf01007f81002,40213
f01007fe:	50                   	push   %eaxf01007fe1003,40271
f01007ff:	e8 45 02 00 00       	call   f0100a49 <cprintf>f01007ff1004,40315
f0100804:	83 c4 0c             	add    $0xc,%espf01008041006,40447
f0100807:	c7 c0 e9 19 10 f0    	mov    $0xf01019e9,%eaxf01008071007,40496
f010080d:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf010080d1008,40552
f0100813:	52                   	push   %edxf01008131009,40613
f0100814:	50                   	push   %eaxf01008141010,40657
f0100815:	8d 83 b8 0a ff ff    	lea    -0xf548(%ebx),%eaxf01008151011,40701
f010081b:	50                   	push   %eaxf010081b1012,40759
f010081c:	e8 28 02 00 00       	call   f0100a49 <cprintf>f010081c1013,40803
f0100821:	83 c4 0c             	add    $0xc,%espf01008211015,40935
f0100824:	c7 c0 60 30 11 f0    	mov    $0xf0113060,%eaxf01008241016,40984
f010082a:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf010082a1017,41040
f0100830:	52                   	push   %edxf01008301018,41101
f0100831:	50                   	push   %eaxf01008311019,41145
f0100832:	8d 83 dc 0a ff ff    	lea    -0xf524(%ebx),%eaxf01008321020,41189
f0100838:	50                   	push   %eaxf01008381021,41247
f0100839:	e8 0b 02 00 00       	call   f0100a49 <cprintf>f01008391022,41291
f010083e:	83 c4 0c             	add    $0xc,%espf010083e1024,41419
f0100841:	c7 c6 a0 36 11 f0    	mov    $0xf01136a0,%esif01008411025,41468
f0100847:	8d 86 00 00 00 10    	lea    0x10000000(%esi),%eaxf01008471026,41524
f010084d:	50                   	push   %eaxf010084d1027,41585
f010084e:	56                   	push   %esif010084e1028,41629
f010084f:	8d 83 00 0b ff ff    	lea    -0xf500(%ebx),%eaxf010084f1029,41673
f0100855:	50                   	push   %eaxf01008551030,41731
f0100856:	e8 ee 01 00 00       	call   f0100a49 <cprintf>f01008561031,41775
f010085b:	83 c4 08             	add    $0x8,%espf010085b1033,41888
f010085e:	81 c6 ff 03 00 00    	add    $0x3ff,%esif010085e1035,41975
f0100864:	29 fe                	sub    %edi,%esif01008641036,42026
f0100866:	c1 fe 0a             	sar    $0xa,%esif01008661038,42130
f0100869:	56                   	push   %esif01008691039,42179
f010086a:	8d 83 24 0b ff ff    	lea    -0xf4dc(%ebx),%eaxf010086a1040,42223
f0100870:	50                   	push   %eaxf01008701041,42281
f0100871:	e8 d3 01 00 00       	call   f0100a49 <cprintf>f01008711042,42325
f0100876:	b8 00 00 00 00       	mov    $0x0,%eaxf01008761045,42396
f010087b:	8d 65 f4             	lea    -0xc(%ebp),%espf010087b1046,42445
f010087e:	5b                   	pop    %ebxf010087e1047,42500
f010087f:	5e                   	pop    %esif010087f1048,42544
f0100880:	5f                   	pop    %edif01008801049,42588
f0100881:	5d                   	pop    %ebpf01008811050,42632
f0100882:	c3                   	ret    f01008821051,42676
f0100883 <mon_backtrace>:f01008831053,42717
intint1055,42744
f0100883:	55                   	push   %ebpf01008831058,42809
f0100884:	89 e5                	mov    %esp,%ebpf01008841059,42853
f0100886:	b8 00 00 00 00       	mov    $0x0,%eaxf01008861063,42935
f010088b:	5d                   	pop    %ebpf010088b1064,42984
f010088c:	c3                   	ret    f010088c1065,43028
f010088d <monitor>:f010088d1067,43069
voidvoid1071,43103
f010088d:	55                   	push   %ebpf010088d1074,43140
f010088e:	89 e5                	mov    %esp,%ebpf010088e1075,43184
f0100890:	57                   	push   %edif01008901076,43233
f0100891:	56                   	push   %esif01008911077,43277
f0100892:	53                   	push   %ebxf01008921078,43321
f0100893:	83 ec 68             	sub    $0x68,%espf01008931079,43365
f0100896:	e8 21 f9 ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f01008961080,43415
f010089b:	81 c3 6d 0a 01 00    	add    $0x10a6d,%ebxf010089b1081,43487
f01008a1:	8d 83 50 0b ff ff    	lea    -0xf4b0(%ebx),%eaxf01008a11085,43603
f01008a7:	50                   	push   %eaxf01008a71086,43661
f01008a8:	e8 9c 01 00 00       	call   f0100a49 <cprintf>f01008a81087,43705
f01008ad:	8d 83 74 0b ff ff    	lea    -0xf48c(%ebx),%eaxf01008ad1089,43814
f01008b3:	89 04 24             	mov    %eax,(%esp)f01008b31090,43872
f01008b6:	e8 8e 01 00 00       	call   f0100a49 <cprintf>f01008b61091,43923
f01008bb:	83 c4 10             	add    $0x10,%espf01008bb1092,43981
f01008be:	8d bb 0a 0a ff ff    	lea    -0xf5f6(%ebx),%edif01008be1094,44074
f01008c4:	eb 4a                	jmp    f0100910 <monitor+0x83>f01008c41095,44132
f01008c6:	83 ec 08             	sub    $0x8,%espf01008c61096,44195
f01008c9:	0f be c0             	movsbl %al,%eaxf01008c91097,44244
f01008cc:	50                   	push   %eaxf01008cc1098,44292
f01008cd:	57                   	push   %edif01008cd1099,44336
f01008ce:	e8 99 0c 00 00       	call   f010156c <strchr>f01008ce1100,44380
f01008d3:	83 c4 10             	add    $0x10,%espf01008d31101,44437
f01008d6:	85 c0                	test   %eax,%eaxf01008d61102,44487
f01008d8:	74 08                	je     f01008e2 <monitor+0x55>f01008d81103,44536
f01008da:	c6 06 00             	movb   $0x0,(%esi)f01008da1105,44614
f01008dd:	8d 76 01             	lea    0x1(%esi),%esif01008dd1106,44665
f01008e0:	eb 79                	jmp    f010095b <monitor+0xce>f01008e01107,44719
f01008e2:	80 3e 00             	cmpb   $0x0,(%esi)f01008e21109,44799
f01008e5:	74 7f                	je     f0100966 <monitor+0xd9>f01008e51110,44850
f01008e7:	83 7d a4 0f          	cmpl   $0xf,-0x5c(%ebp)f01008e71112,44940
f01008eb:	74 0f                	je     f01008fc <monitor+0x6f>f01008eb1113,44996
f01008ed:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01008ed1115,45081
f01008f0:	8d 48 01             	lea    0x1(%eax),%ecxf01008f01116,45137
f01008f3:	89 4d a4             	mov    %ecx,-0x5c(%ebp)f01008f31117,45191
f01008f6:	89 74 85 a8          	mov    %esi,-0x58(%ebp,%eax,4)f01008f61118,45247
f01008fa:	eb 44                	jmp    f0100940 <monitor+0xb3>f01008fa1119,45310
f01008fc:	83 ec 08             	sub    $0x8,%espf01008fc1121,45427
f01008ff:	6a 10                	push   $0x10f01008ff1122,45476
f0100901:	8d 83 0f 0a ff ff    	lea    -0xf5f1(%ebx),%eaxf01009011123,45521
f0100907:	50                   	push   %eaxf01009071124,45579
f0100908:	e8 3c 01 00 00       	call   f0100a49 <cprintf>f01009081125,45623
f010090d:	83 c4 10             	add    $0x10,%espf010090d1126,45681
		buf = readline("K> ");buf1130,45746
f0100910:	8d 83 06 0a ff ff    	lea    -0xf5fa(%ebx),%eaxf01009101131,45771
f0100916:	89 45 a4             	mov    %eax,-0x5c(%ebp)f01009161132,45829
f0100919:	83 ec 0c             	sub    $0xc,%espf01009191133,45885
f010091c:	ff 75 a4             	pushl  -0x5c(%ebp)f010091c1134,45934
f010091f:	e8 10 0a 00 00       	call   f0101334 <readline>f010091f1135,45985
f0100924:	89 c6                	mov    %eax,%esif01009241136,46044
f0100926:	83 c4 10             	add    $0x10,%espf01009261138,46112
f0100929:	85 c0                	test   %eax,%eaxf01009291139,46162
f010092b:	74 ec                	je     f0100919 <monitor+0x8c>f010092b1140,46211
f010092d:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)f010092d1142,46291
	argc = 0;argc1143,46347
f0100934:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)f01009341144,46358
f010093b:	eb 1e                	jmp    f010095b <monitor+0xce>f010093b1145,46414
f010093d:	83 c6 01             	add    $0x1,%esif010093d1147,46487
f0100940:	0f b6 06             	movzbl (%esi),%eaxf01009401149,46580
f0100943:	84 c0                	test   %al,%alf01009431150,46631
f0100945:	74 14                	je     f010095b <monitor+0xce>f01009451151,46678
f0100947:	83 ec 08             	sub    $0x8,%espf01009471152,46741
f010094a:	0f be c0             	movsbl %al,%eaxf010094a1153,46790
f010094d:	50                   	push   %eaxf010094d1154,46838
f010094e:	57                   	push   %edif010094e1155,46882
f010094f:	e8 18 0c 00 00       	call   f010156c <strchr>f010094f1156,46926
f0100954:	83 c4 10             	add    $0x10,%espf01009541157,46983
f0100957:	85 c0                	test   %eax,%eaxf01009571158,47033
f0100959:	74 e2                	je     f010093d <monitor+0xb0>f01009591159,47082
f010095b:	0f b6 06             	movzbl (%esi),%eaxf010095b1161,47188
f010095e:	84 c0                	test   %al,%alf010095e1162,47239
f0100960:	0f 85 60 ff ff ff    	jne    f01008c6 <monitor+0x39>f01009601163,47286
f0100966:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01009661165,47366
f0100969:	c7 44 85 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%eax,4)f01009691166,47422
f0100970:	00 f01009701167,47485
f0100971:	85 c0                	test   %eax,%eaxf01009711169,47515
f0100973:	74 9b                	je     f0100910 <monitor+0x83>f01009731170,47564
f0100975:	83 ec 08             	sub    $0x8,%espf01009751172,47673
f0100978:	8d 83 d6 09 ff ff    	lea    -0xf62a(%ebx),%eaxf01009781173,47722
f010097e:	50                   	push   %eaxf010097e1174,47780
f010097f:	ff 75 a8             	pushl  -0x58(%ebp)f010097f1175,47824
f0100982:	e8 87 0b 00 00       	call   f010150e <strcmp>f01009821176,47875
f0100987:	83 c4 10             	add    $0x10,%espf01009871177,47932
f010098a:	85 c0                	test   %eax,%eaxf010098a1178,47982
f010098c:	74 38                	je     f01009c6 <monitor+0x139>f010098c1179,48031
f010098e:	83 ec 08             	sub    $0x8,%espf010098e1180,48095
f0100991:	8d 83 e4 09 ff ff    	lea    -0xf61c(%ebx),%eaxf01009911181,48144
f0100997:	50                   	push   %eaxf01009971182,48202
f0100998:	ff 75 a8             	pushl  -0x58(%ebp)f01009981183,48246
f010099b:	e8 6e 0b 00 00       	call   f010150e <strcmp>f010099b1184,48297
f01009a0:	83 c4 10             	add    $0x10,%espf01009a01185,48354
f01009a3:	85 c0                	test   %eax,%eaxf01009a31186,48404
f01009a5:	74 1a                	je     f01009c1 <monitor+0x134>f01009a51187,48453
f01009a7:	83 ec 08             	sub    $0x8,%espf01009a71189,48562
f01009aa:	ff 75 a8             	pushl  -0x58(%ebp)f01009aa1190,48611
f01009ad:	8d 83 2c 0a ff ff    	lea    -0xf5d4(%ebx),%eaxf01009ad1191,48662
f01009b3:	50                   	push   %eaxf01009b31192,48720
f01009b4:	e8 90 00 00 00       	call   f0100a49 <cprintf>f01009b41193,48764
f01009b9:	83 c4 10             	add    $0x10,%espf01009b91194,48822
f01009bc:	e9 4f ff ff ff       	jmp    f0100910 <monitor+0x83>f01009bc1195,48872
f01009c1:	b8 01 00 00 00       	mov    $0x1,%eaxf01009c11197,48981
f01009c6:	83 ec 04             	sub    $0x4,%espf01009c61199,49074
f01009c9:	8d 04 40             	lea    (%eax,%eax,2),%eaxf01009c91200,49123
f01009cc:	ff 75 08             	pushl  0x8(%ebp)f01009cc1201,49181
f01009cf:	8d 55 a8             	lea    -0x58(%ebp),%edxf01009cf1202,49230
f01009d2:	52                   	push   %edxf01009d21203,49286
f01009d3:	ff 75 a4             	pushl  -0x5c(%ebp)f01009d31204,49330
f01009d6:	ff 94 83 10 1d 00 00 	call   *0x1d10(%ebx,%eax,4)f01009d61205,49381
f01009dd:	83 c4 10             	add    $0x10,%espf01009dd1207,49469
f01009e0:	85 c0                	test   %eax,%eaxf01009e01208,49519
f01009e2:	0f 89 28 ff ff ff    	jns    f0100910 <monitor+0x83>f01009e21209,49568
f01009e8:	8d 65 f4             	lea    -0xc(%ebp),%espf01009e81213,49647
f01009eb:	5b                   	pop    %ebxf01009eb1214,49702
f01009ec:	5e                   	pop    %esif01009ec1215,49746
f01009ed:	5f                   	pop    %edif01009ed1216,49790
f01009ee:	5d                   	pop    %ebpf01009ee1217,49834
f01009ef:	c3                   	ret    f01009ef1218,49878
f01009f0 <putch>:f01009f01220,49919
static voidstatic1224,49963
f01009f0:	55                   	push   %ebpf01009f01227,50001
f01009f1:	89 e5                	mov    %esp,%ebpf01009f11228,50045
f01009f3:	53                   	push   %ebxf01009f31229,50094
f01009f4:	83 ec 10             	sub    $0x10,%espf01009f41230,50138
f01009f7:	e8 c0 f7 ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f01009f71231,50188
f01009fc:	81 c3 0c 09 01 00    	add    $0x1090c,%ebxf01009fc1232,50260
f0100a02:	ff 75 08             	pushl  0x8(%ebp)f0100a021234,50328
f0100a05:	e8 29 fd ff ff       	call   f0100733 <cputchar>f0100a051235,50377
f0100a0a:	83 c4 10             	add    $0x10,%espf0100a0a1238,50447
f0100a0d:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100a0d1239,50497
f0100a10:	c9                   	leave  f0100a101240,50552
f0100a11:	c3                   	ret    f0100a111241,50592
f0100a12 <vcprintf>:f0100a121243,50633
intint1245,50655
f0100a12:	55                   	push   %ebpf0100a121248,50699
f0100a13:	89 e5                	mov    %esp,%ebpf0100a131249,50743
f0100a15:	53                   	push   %ebxf0100a151250,50792
f0100a16:	83 ec 14             	sub    $0x14,%espf0100a161251,50836
f0100a19:	e8 9e f7 ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f0100a191252,50886
f0100a1e:	81 c3 ea 08 01 00    	add    $0x108ea,%ebxf0100a1e1253,50958
f0100a24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f0100a241255,51025
f0100a2b:	ff 75 0c             	pushl  0xc(%ebp)f0100a2b1258,51122
f0100a2e:	ff 75 08             	pushl  0x8(%ebp)f0100a2e1259,51171
f0100a31:	8d 45 f4             	lea    -0xc(%ebp),%eaxf0100a311260,51220
f0100a34:	50                   	push   %eaxf0100a341261,51275
f0100a35:	8d 83 e8 f6 fe ff    	lea    -0x10918(%ebx),%eaxf0100a351262,51319
f0100a3b:	50                   	push   %eaxf0100a3b1263,51378
f0100a3c:	e8 1c 04 00 00       	call   f0100e5d <vprintfmt>f0100a3c1264,51422
f0100a41:	8b 45 f4             	mov    -0xc(%ebp),%eaxf0100a411267,51497
f0100a44:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100a441268,51552
f0100a47:	c9                   	leave  f0100a471269,51607
f0100a48:	c3                   	ret    f0100a481270,51647
f0100a49 <cprintf>:f0100a491272,51688
intint1274,51709
f0100a49:	55                   	push   %ebpf0100a491277,51745
f0100a4a:	89 e5                	mov    %esp,%ebpf0100a4a1278,51789
f0100a4c:	83 ec 10             	sub    $0x10,%espf0100a4c1279,51838
f0100a4f:	8d 45 0c             	lea    0xc(%ebp),%eaxf0100a4f1284,51932
	cnt = vcprintf(fmt, ap);cnt1285,51986
f0100a52:	50                   	push   %eaxf0100a521286,52012
f0100a53:	ff 75 08             	pushl  0x8(%ebp)f0100a531287,52056
f0100a56:	e8 b7 ff ff ff       	call   f0100a12 <vcprintf>f0100a561288,52105
f0100a5b:	c9                   	leave  f0100a5b1293,52193
f0100a5c:	c3                   	ret    f0100a5c1294,52233
f0100a5d <stab_binsearch>:f0100a5d1296,52274
static voidstatic1299,52350
f0100a5d:	55                   	push   %ebpf0100a5d1303,52476
f0100a5e:	89 e5                	mov    %esp,%ebpf0100a5e1304,52520
f0100a60:	57                   	push   %edif0100a601305,52569
f0100a61:	56                   	push   %esif0100a611306,52613
f0100a62:	53                   	push   %ebxf0100a621307,52657
f0100a63:	83 ec 14             	sub    $0x14,%espf0100a631308,52701
f0100a66:	89 45 ec             	mov    %eax,-0x14(%ebp)f0100a661309,52751
f0100a69:	89 55 e4             	mov    %edx,-0x1c(%ebp)f0100a691310,52807
f0100a6c:	89 4d e0             	mov    %ecx,-0x20(%ebp)f0100a6c1311,52863
f0100a6f:	8b 7d 08             	mov    0x8(%ebp),%edif0100a6f1312,52919
f0100a72:	8b 32                	mov    (%edx),%esif0100a721314,53032
f0100a74:	8b 01                	mov    (%ecx),%eaxf0100a741315,53083
f0100a76:	89 45 f0             	mov    %eax,-0x10(%ebp)f0100a761316,53134
f0100a79:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)f0100a791317,53190
f0100a80:	eb 2f                	jmp    f0100ab1 <stab_binsearch+0x54>f0100a801320,53265
f0100a82:	83 e8 01             	sub    $0x1,%eaxf0100a821326,53474
f0100a85:	39 c6                	cmp    %eax,%esif0100a851328,53567
f0100a87:	7f 49                	jg     f0100ad2 <stab_binsearch+0x75>f0100a871329,53616
f0100a89:	0f b6 0a             	movzbl (%edx),%ecxf0100a891330,53686
f0100a8c:	83 ea 0c             	sub    $0xc,%edxf0100a8c1331,53737
f0100a8f:	39 f9                	cmp    %edi,%ecxf0100a8f1332,53786
f0100a91:	75 ef                	jne    f0100a82 <stab_binsearch+0x25>f0100a911333,53835
		any_matches = 1;any_matches1338,53949
f0100a93:	8d 14 40             	lea    (%eax,%eax,2),%edxf0100a931340,54001
f0100a96:	8b 4d ec             	mov    -0x14(%ebp),%ecxf0100a961341,54059
f0100a99:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edxf0100a991342,54115
f0100a9d:	3b 55 0c             	cmp    0xc(%ebp),%edxf0100a9d1343,54176
f0100aa0:	73 35                	jae    f0100ad7 <stab_binsearch+0x7a>f0100aa01344,54230
f0100aa2:	8b 75 e4             	mov    -0x1c(%ebp),%esif0100aa21346,54321
f0100aa5:	89 06                	mov    %eax,(%esi)f0100aa51347,54377
			l = true_m + 1;l1348,54428
f0100aa7:	8d 73 01             	lea    0x1(%ebx),%esif0100aa71349,54447
		any_matches = 1;any_matches1350,54501
f0100aaa:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f0100aaa1351,54520
f0100ab1:	3b 75 f0             	cmp    -0x10(%ebp),%esif0100ab11353,54594
f0100ab4:	7f 4e                	jg     f0100b04 <stab_binsearch+0xa7>f0100ab41354,54650
f0100ab6:	8b 45 f0             	mov    -0x10(%ebp),%eaxf0100ab61356,54760
f0100ab9:	01 f0                	add    %esi,%eaxf0100ab91357,54816
f0100abb:	89 c3                	mov    %eax,%ebxf0100abb1358,54865
f0100abd:	c1 eb 1f             	shr    $0x1f,%ebxf0100abd1359,54914
f0100ac0:	01 c3                	add    %eax,%ebxf0100ac01360,54964
f0100ac2:	d1 fb                	sar    %ebxf0100ac21361,55013
f0100ac4:	8d 04 5b             	lea    (%ebx,%ebx,2),%eaxf0100ac41362,55057
f0100ac7:	8b 4d ec             	mov    -0x14(%ebp),%ecxf0100ac71363,55115
f0100aca:	8d 54 81 04          	lea    0x4(%ecx,%eax,4),%edxf0100aca1364,55171
f0100ace:	89 d8                	mov    %ebx,%eaxf0100ace1365,55232
f0100ad0:	eb b3                	jmp    f0100a85 <stab_binsearch+0x28>f0100ad01367,55325
			l = true_m + 1;l1368,55395
f0100ad2:	8d 73 01             	lea    0x1(%ebx),%esif0100ad21369,55414
f0100ad5:	eb da                	jmp    f0100ab1 <stab_binsearch+0x54>f0100ad51371,55481
f0100ad7:	3b 55 0c             	cmp    0xc(%ebp),%edxf0100ad71373,55591
f0100ada:	76 14                	jbe    f0100af0 <stab_binsearch+0x93>f0100ada1374,55645
f0100adc:	83 e8 01             	sub    $0x1,%eaxf0100adc1376,55741
f0100adf:	89 45 f0             	mov    %eax,-0x10(%ebp)f0100adf1377,55790
f0100ae2:	8b 5d e0             	mov    -0x20(%ebp),%ebxf0100ae21378,55846
f0100ae5:	89 03                	mov    %eax,(%ebx)f0100ae51379,55902
		any_matches = 1;any_matches1380,55953
f0100ae7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f0100ae71381,55972
f0100aee:	eb c1                	jmp    f0100ab1 <stab_binsearch+0x54>f0100aee1382,56028
			r = m - 1;r1383,56098
f0100af0:	8b 75 e4             	mov    -0x1c(%ebp),%esif0100af01388,56220
f0100af3:	89 06                	mov    %eax,(%esi)f0100af31389,56276
			l = m;l1390,56327
f0100af5:	83 45 0c 01          	addl   $0x1,0xc(%ebp)f0100af51392,56348
f0100af9:	89 c6                	mov    %eax,%esif0100af91393,56402
		any_matches = 1;any_matches1394,56451
f0100afb:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f0100afb1395,56470
f0100b02:	eb ad                	jmp    f0100ab1 <stab_binsearch+0x54>f0100b021396,56526
f0100b04:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)f0100b041401,56623
f0100b08:	74 16                	je     f0100b20 <stab_binsearch+0xc3>f0100b081402,56679
f0100b0a:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100b0a1407,56864
f0100b0d:	8b 00                	mov    (%eax),%eaxf0100b0d1408,56920
f0100b0f:	8b 75 e4             	mov    -0x1c(%ebp),%esif0100b0f1410,57023
f0100b12:	8b 0e                	mov    (%esi),%ecxf0100b121411,57079
f0100b14:	8d 14 40             	lea    (%eax,%eax,2),%edxf0100b141412,57130
f0100b17:	8b 75 ec             	mov    -0x14(%ebp),%esif0100b171413,57188
f0100b1a:	8d 54 96 04          	lea    0x4(%esi,%edx,4),%edxf0100b1a1414,57244
f0100b1e:	eb 12                	jmp    f0100b32 <stab_binsearch+0xd5>f0100b1e1416,57331
f0100b20:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100b201418,57437
f0100b23:	8b 00                	mov    (%eax),%eaxf0100b231419,57493
f0100b25:	83 e8 01             	sub    $0x1,%eaxf0100b251420,57544
f0100b28:	8b 7d e0             	mov    -0x20(%ebp),%edif0100b281421,57593
f0100b2b:	89 07                	mov    %eax,(%edi)f0100b2b1422,57649
f0100b2d:	eb 16                	jmp    f0100b45 <stab_binsearch+0xe8>f0100b2d1423,57700
f0100b2f:	83 e8 01             	sub    $0x1,%eaxf0100b2f1425,57782
f0100b32:	39 c1                	cmp    %eax,%ecxf0100b321427,57857
f0100b34:	7d 0a                	jge    f0100b40 <stab_binsearch+0xe3>f0100b341428,57906
f0100b36:	0f b6 1a             	movzbl (%edx),%ebxf0100b361430,58028
f0100b39:	83 ea 0c             	sub    $0xc,%edxf0100b391431,58079
f0100b3c:	39 fb                	cmp    %edi,%ebxf0100b3c1432,58128
f0100b3e:	75 ef                	jne    f0100b2f <stab_binsearch+0xd2>f0100b3e1433,58177
f0100b40:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100b401436,58288
f0100b43:	89 07                	mov    %eax,(%edi)f0100b431437,58344
f0100b45:	83 c4 14             	add    $0x14,%espf0100b451440,58400
f0100b48:	5b                   	pop    %ebxf0100b481441,58450
f0100b49:	5e                   	pop    %esif0100b491442,58494
f0100b4a:	5f                   	pop    %edif0100b4a1443,58538
f0100b4b:	5d                   	pop    %ebpf0100b4b1444,58582
f0100b4c:	c3                   	ret    f0100b4c1445,58626
f0100b4d <debuginfo_eip>:f0100b4d1447,58667
intint1451,58797
f0100b4d:	55                   	push   %ebpf0100b4d1454,58860
f0100b4e:	89 e5                	mov    %esp,%ebpf0100b4e1455,58904
f0100b50:	57                   	push   %edif0100b501456,58953
f0100b51:	56                   	push   %esif0100b511457,58997
f0100b52:	53                   	push   %ebxf0100b521458,59041
f0100b53:	83 ec 2c             	sub    $0x2c,%espf0100b531459,59085
f0100b56:	e8 fa 01 00 00       	call   f0100d55 <__x86.get_pc_thunk.cx>f0100b561460,59135
f0100b5b:	81 c1 ad 07 01 00    	add    $0x107ad,%ecxf0100b5b1461,59207
f0100b61:	89 4d d4             	mov    %ecx,-0x2c(%ebp)f0100b611462,59260
f0100b64:	8b 5d 08             	mov    0x8(%ebp),%ebxf0100b641463,59316
f0100b67:	8b 7d 0c             	mov    0xc(%ebp),%edif0100b671464,59370
	const struct Stab *stabs, *stab_end;const1465,59424
f0100b6a:	8d 81 9c 0b ff ff    	lea    -0xf464(%ecx),%eaxf0100b6a1471,59596
f0100b70:	89 07                	mov    %eax,(%edi)f0100b701472,59654
f0100b72:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)f0100b721474,59726
f0100b79:	89 47 08             	mov    %eax,0x8(%edi)f0100b791476,59814
f0100b7c:	c7 47 0c 09 00 00 00 	movl   $0x9,0xc(%edi)f0100b7c1478,59895
f0100b83:	89 5f 10             	mov    %ebx,0x10(%edi)f0100b831480,59976
f0100b86:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)f0100b861482,60055
f0100b8d:	81 fb ff ff 7f ef    	cmp    $0xef7fffff,%ebxf0100b8d1486,60167
f0100b93:	0f 86 f4 00 00 00    	jbe    f0100c8d <debuginfo_eip+0x140>f0100b931487,60223
f0100b99:	c7 c0 55 5c 10 f0    	mov    $0xf0105c55,%eaxf0100b991494,60465
f0100b9f:	39 81 fc ff ff ff    	cmp    %eax,-0x4(%ecx)f0100b9f1495,60521
f0100ba5:	0f 86 88 01 00 00    	jbe    f0100d33 <debuginfo_eip+0x1e6>f0100ba51496,60576
f0100bab:	8b 75 d4             	mov    -0x2c(%ebp),%esif0100bab1497,60646
f0100bae:	c7 c0 9c 75 10 f0    	mov    $0xf010759c,%eaxf0100bae1498,60702
f0100bb4:	80 78 ff 00          	cmpb   $0x0,-0x1(%eax)f0100bb41499,60758
f0100bb8:	0f 85 7c 01 00 00    	jne    f0100d3a <debuginfo_eip+0x1ed>f0100bb81500,60813
	lfile = 0;lfile1506,61114
f0100bbe:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)f0100bbe1507,61126
	rfile = (stab_end - stabs) - 1;rfile1508,61182
f0100bc5:	c7 c0 c0 20 10 f0    	mov    $0xf01020c0,%eaxf0100bc51509,61215
f0100bcb:	c7 c2 54 5c 10 f0    	mov    $0xf0105c54,%edxf0100bcb1510,61271
f0100bd1:	29 c2                	sub    %eax,%edxf0100bd11511,61327
f0100bd3:	c1 fa 02             	sar    $0x2,%edxf0100bd31512,61376
f0100bd6:	69 d2 ab aa aa aa    	imul   $0xaaaaaaab,%edx,%edxf0100bd61513,61425
f0100bdc:	83 ea 01             	sub    $0x1,%edxf0100bdc1514,61486
f0100bdf:	89 55 e0             	mov    %edx,-0x20(%ebp)f0100bdf1515,61535
f0100be2:	8d 4d e0             	lea    -0x20(%ebp),%ecxf0100be21517,61643
f0100be5:	8d 55 e4             	lea    -0x1c(%ebp),%edxf0100be51518,61699
f0100be8:	83 ec 08             	sub    $0x8,%espf0100be81519,61755
f0100beb:	53                   	push   %ebxf0100beb1520,61804
f0100bec:	6a 64                	push   $0x64f0100bec1521,61848
f0100bee:	e8 6a fe ff ff       	call   f0100a5d <stab_binsearch>f0100bee1522,61893
f0100bf3:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100bf31524,61975
f0100bf6:	83 c4 10             	add    $0x10,%espf0100bf61525,62031
f0100bf9:	85 c0                	test   %eax,%eaxf0100bf91526,62081
f0100bfb:	0f 84 40 01 00 00    	je     f0100d41 <debuginfo_eip+0x1f4>f0100bfb1527,62130
	lfun = lfile;lfun1532,62291
f0100c01:	89 45 dc             	mov    %eax,-0x24(%ebp)f0100c011533,62306
	rfun = rfile;rfun1534,62362
f0100c04:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100c041535,62377
f0100c07:	89 45 d8             	mov    %eax,-0x28(%ebp)f0100c071536,62433
f0100c0a:	8d 4d d8             	lea    -0x28(%ebp),%ecxf0100c0a1538,62540
f0100c0d:	8d 55 dc             	lea    -0x24(%ebp),%edxf0100c0d1539,62596
f0100c10:	83 ec 08             	sub    $0x8,%espf0100c101540,62652
f0100c13:	53                   	push   %ebxf0100c131541,62701
f0100c14:	6a 24                	push   $0x24f0100c141542,62745
f0100c16:	89 75 d4             	mov    %esi,-0x2c(%ebp)f0100c161543,62790
f0100c19:	c7 c0 c0 20 10 f0    	mov    $0xf01020c0,%eaxf0100c191544,62846
f0100c1f:	e8 39 fe ff ff       	call   f0100a5d <stab_binsearch>f0100c1f1545,62902
f0100c24:	8b 75 dc             	mov    -0x24(%ebp),%esif0100c241548,62989
f0100c27:	83 c4 10             	add    $0x10,%espf0100c271549,63045
f0100c2a:	3b 75 d8             	cmp    -0x28(%ebp),%esif0100c2a1550,63095
f0100c2d:	7f 79                	jg     f0100ca8 <debuginfo_eip+0x15b>f0100c2d1551,63151
f0100c2f:	8d 04 76             	lea    (%esi,%esi,2),%eaxf0100c2f1555,63373
f0100c32:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0100c321556,63431
f0100c35:	c7 c2 c0 20 10 f0    	mov    $0xf01020c0,%edxf0100c351557,63487
f0100c3b:	8d 0c 82             	lea    (%edx,%eax,4),%ecxf0100c3b1558,63543
f0100c3e:	8b 11                	mov    (%ecx),%edxf0100c3e1559,63601
f0100c40:	c7 c0 9c 75 10 f0    	mov    $0xf010759c,%eaxf0100c401560,63652
f0100c46:	81 e8 55 5c 10 f0    	sub    $0xf0105c55,%eaxf0100c461561,63708
f0100c4c:	39 c2                	cmp    %eax,%edxf0100c4c1562,63764
f0100c4e:	73 09                	jae    f0100c59 <debuginfo_eip+0x10c>f0100c4e1563,63813
f0100c50:	81 c2 55 5c 10 f0    	add    $0xf0105c55,%edxf0100c501565,63936
f0100c56:	89 57 08             	mov    %edx,0x8(%edi)f0100c561566,63992
f0100c59:	8b 41 08             	mov    0x8(%ecx),%eaxf0100c591568,64089
f0100c5c:	89 47 10             	mov    %eax,0x10(%edi)f0100c5c1569,64143
		lline = lfile;lline1571,64226
		rline = rfile;rline1572,64243
f0100c5f:	83 ec 08             	sub    $0x8,%espf0100c5f1576,64374
f0100c62:	6a 3a                	push   $0x3af0100c621577,64423
f0100c64:	ff 77 08             	pushl  0x8(%edi)f0100c641578,64468
f0100c67:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0100c671579,64517
f0100c6a:	e8 1e 09 00 00       	call   f010158d <strfind>f0100c6a1580,64573
f0100c6f:	2b 47 08             	sub    0x8(%edi),%eaxf0100c6f1581,64631
f0100c72:	89 47 0c             	mov    %eax,0xc(%edi)f0100c721582,64685
f0100c75:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf0100c751589,65009
f0100c78:	8d 04 76             	lea    (%esi,%esi,2),%eaxf0100c781590,65065
f0100c7b:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0100c7b1591,65123
f0100c7e:	c7 c2 c0 20 10 f0    	mov    $0xf01020c0,%edxf0100c7e1592,65179
f0100c84:	8d 44 82 04          	lea    0x4(%edx,%eax,4),%eaxf0100c841593,65235
f0100c88:	83 c4 10             	add    $0x10,%espf0100c881594,65296
f0100c8b:	eb 29                	jmp    f0100cb6 <debuginfo_eip+0x169>f0100c8b1595,65346
f0100c8d:	83 ec 04             	sub    $0x4,%espf0100c8d1597,65450
f0100c90:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0100c901598,65499
f0100c93:	8d 83 a6 0b ff ff    	lea    -0xf45a(%ebx),%eaxf0100c931599,65555
f0100c99:	50                   	push   %eaxf0100c991600,65613
f0100c9a:	6a 7f                	push   $0x7ff0100c9a1601,65657
f0100c9c:	8d 83 b3 0b ff ff    	lea    -0xf44d(%ebx),%eaxf0100c9c1602,65702
f0100ca2:	50                   	push   %eaxf0100ca21603,65760
f0100ca3:	e8 5e f4 ff ff       	call   f0100106 <_panic>f0100ca31604,65804
f0100ca8:	89 5f 10             	mov    %ebx,0x10(%edi)f0100ca81606,65889
		lline = lfile;lline1607,65944
f0100cab:	8b 75 e4             	mov    -0x1c(%ebp),%esif0100cab1608,65961
f0100cae:	eb af                	jmp    f0100c5f <debuginfo_eip+0x112>f0100cae1609,66017
f0100cb0:	83 ee 01             	sub    $0x1,%esif0100cb01613,66205
f0100cb3:	83 e8 0c             	sub    $0xc,%eaxf0100cb31614,66254
f0100cb6:	39 f3                	cmp    %esi,%ebxf0100cb61616,66326
f0100cb8:	7f 3a                	jg     f0100cf4 <debuginfo_eip+0x1a7>f0100cb81617,66375
f0100cba:	0f b6 10             	movzbl (%eax),%edxf0100cba1619,66485
f0100cbd:	80 fa 84             	cmp    $0x84,%dlf0100cbd1620,66536
f0100cc0:	74 0b                	je     f0100ccd <debuginfo_eip+0x180>f0100cc01621,66585
f0100cc2:	80 fa 64             	cmp    $0x64,%dlf0100cc21623,66722
f0100cc5:	75 e9                	jne    f0100cb0 <debuginfo_eip+0x163>f0100cc51624,66771
f0100cc7:	83 78 04 00          	cmpl   $0x0,0x4(%eax)f0100cc71625,66841
f0100ccb:	74 e3                	je     f0100cb0 <debuginfo_eip+0x163>f0100ccb1626,66895
f0100ccd:	8d 14 76             	lea    (%esi,%esi,2),%edxf0100ccd1628,67033
f0100cd0:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0100cd01629,67091
f0100cd3:	c7 c0 c0 20 10 f0    	mov    $0xf01020c0,%eaxf0100cd31630,67147
f0100cd9:	8b 14 90             	mov    (%eax,%edx,4),%edxf0100cd91631,67203
f0100cdc:	c7 c0 9c 75 10 f0    	mov    $0xf010759c,%eaxf0100cdc1632,67261
f0100ce2:	81 e8 55 5c 10 f0    	sub    $0xf0105c55,%eaxf0100ce21633,67317
f0100ce8:	39 c2                	cmp    %eax,%edxf0100ce81634,67373
f0100cea:	73 08                	jae    f0100cf4 <debuginfo_eip+0x1a7>f0100cea1635,67422
f0100cec:	81 c2 55 5c 10 f0    	add    $0xf0105c55,%edxf0100cec1637,67542
f0100cf2:	89 17                	mov    %edx,(%edi)f0100cf21638,67598
f0100cf4:	8b 5d dc             	mov    -0x24(%ebp),%ebxf0100cf41644,67785
f0100cf7:	8b 4d d8             	mov    -0x28(%ebp),%ecxf0100cf71645,67841
f0100cfa:	b8 00 00 00 00       	mov    $0x0,%eaxf0100cfa1652,68028
f0100cff:	39 cb                	cmp    %ecx,%ebxf0100cff1654,68095
f0100d01:	7d 4a                	jge    f0100d4d <debuginfo_eip+0x200>f0100d011655,68144
f0100d03:	8d 53 01             	lea    0x1(%ebx),%edxf0100d031657,68239
f0100d06:	8d 1c 5b             	lea    (%ebx,%ebx,2),%ebxf0100d061658,68293
f0100d09:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0100d091659,68351
f0100d0c:	c7 c0 c0 20 10 f0    	mov    $0xf01020c0,%eaxf0100d0c1660,68407
f0100d12:	8d 44 98 10          	lea    0x10(%eax,%ebx,4),%eaxf0100d121661,68463
f0100d16:	eb 07                	jmp    f0100d1f <debuginfo_eip+0x1d2>f0100d161662,68525
f0100d18:	83 47 14 01          	addl   $0x1,0x14(%edi)f0100d181664,68619
f0100d1c:	83 c2 01             	add    $0x1,%edxf0100d1c1666,68690
f0100d1f:	39 d1                	cmp    %edx,%ecxf0100d1f1668,68764
f0100d21:	74 25                	je     f0100d48 <debuginfo_eip+0x1fb>f0100d211669,68813
f0100d23:	83 c0 0c             	add    $0xc,%eaxf0100d231670,68883
f0100d26:	80 78 f4 a0          	cmpb   $0xa0,-0xc(%eax)f0100d261672,68986
f0100d2a:	74 ec                	je     f0100d18 <debuginfo_eip+0x1cb>f0100d2a1673,69042
f0100d2c:	b8 00 00 00 00       	mov    $0x0,%eaxf0100d2c1675,69123
f0100d31:	eb 1a                	jmp    f0100d4d <debuginfo_eip+0x200>f0100d311676,69172
f0100d33:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100d331678,69255
f0100d38:	eb 13                	jmp    f0100d4d <debuginfo_eip+0x200>f0100d381679,69311
f0100d3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100d3a1680,69381
f0100d3f:	eb 0c                	jmp    f0100d4d <debuginfo_eip+0x200>f0100d3f1681,69437
f0100d41:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100d411683,69520
f0100d46:	eb 05                	jmp    f0100d4d <debuginfo_eip+0x200>f0100d461684,69576
f0100d48:	b8 00 00 00 00       	mov    $0x0,%eaxf0100d481686,69657
f0100d4d:	8d 65 f4             	lea    -0xc(%ebp),%espf0100d4d1688,69708
f0100d50:	5b                   	pop    %ebxf0100d501689,69763
f0100d51:	5e                   	pop    %esif0100d511690,69807
f0100d52:	5f                   	pop    %edif0100d521691,69851
f0100d53:	5d                   	pop    %ebpf0100d531692,69895
f0100d54:	c3                   	ret    f0100d541693,69939
f0100d55 <__x86.get_pc_thunk.cx>:f0100d551695,69980
f0100d55:	8b 0c 24             	mov    (%esp),%ecxf0100d551696,70014
f0100d58:	c3                   	ret    f0100d581697,70065
f0100d59 <printnum>:f0100d591699,70106
static voidstatic1702,70196
f0100d59:	55                   	push   %ebpf0100d591706,70322
f0100d5a:	89 e5                	mov    %esp,%ebpf0100d5a1707,70366
f0100d5c:	57                   	push   %edif0100d5c1708,70415
f0100d5d:	56                   	push   %esif0100d5d1709,70459
f0100d5e:	53                   	push   %ebxf0100d5e1710,70503
f0100d5f:	83 ec 2c             	sub    $0x2c,%espf0100d5f1711,70547
f0100d62:	e8 ee ff ff ff       	call   f0100d55 <__x86.get_pc_thunk.cx>f0100d621712,70597
f0100d67:	81 c1 a1 05 01 00    	add    $0x105a1,%ecxf0100d671713,70669
f0100d6d:	89 4d e4             	mov    %ecx,-0x1c(%ebp)f0100d6d1714,70722
f0100d70:	89 c7                	mov    %eax,%edif0100d701715,70778
f0100d72:	89 d6                	mov    %edx,%esif0100d721716,70827
f0100d74:	8b 45 08             	mov    0x8(%ebp),%eaxf0100d741717,70876
f0100d77:	8b 55 0c             	mov    0xc(%ebp),%edxf0100d771718,70930
f0100d7a:	89 45 d0             	mov    %eax,-0x30(%ebp)f0100d7a1719,70984
f0100d7d:	89 55 d4             	mov    %edx,-0x2c(%ebp)f0100d7d1720,71040
f0100d80:	8b 4d 10             	mov    0x10(%ebp),%ecxf0100d801723,71184
f0100d83:	bb 00 00 00 00       	mov    $0x0,%ebxf0100d831724,71239
f0100d88:	89 4d d8             	mov    %ecx,-0x28(%ebp)f0100d881725,71288
f0100d8b:	89 5d dc             	mov    %ebx,-0x24(%ebp)f0100d8b1726,71344
f0100d8e:	39 d3                	cmp    %edx,%ebxf0100d8e1727,71400
f0100d90:	72 09                	jb     f0100d9b <printnum+0x42>f0100d901728,71449
f0100d92:	39 45 10             	cmp    %eax,0x10(%ebp)f0100d921729,71513
f0100d95:	0f 87 83 00 00 00    	ja     f0100e1e <printnum+0xc5>f0100d951730,71568
f0100d9b:	83 ec 0c             	sub    $0xc,%espf0100d9b1732,71694
f0100d9e:	ff 75 18             	pushl  0x18(%ebp)f0100d9e1733,71743
f0100da1:	8b 45 14             	mov    0x14(%ebp),%eaxf0100da11734,71793
f0100da4:	8d 58 ff             	lea    -0x1(%eax),%ebxf0100da41735,71848
f0100da7:	53                   	push   %ebxf0100da71736,71903
f0100da8:	ff 75 10             	pushl  0x10(%ebp)f0100da81737,71947
f0100dab:	83 ec 08             	sub    $0x8,%espf0100dab1738,71997
f0100dae:	ff 75 dc             	pushl  -0x24(%ebp)f0100dae1739,72046
f0100db1:	ff 75 d8             	pushl  -0x28(%ebp)f0100db11740,72097
f0100db4:	ff 75 d4             	pushl  -0x2c(%ebp)f0100db41741,72148
f0100db7:	ff 75 d0             	pushl  -0x30(%ebp)f0100db71742,72199
f0100dba:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf0100dba1743,72250
f0100dbd:	e8 ee 09 00 00       	call   f01017b0 <__udivdi3>f0100dbd1744,72306
f0100dc2:	83 c4 18             	add    $0x18,%espf0100dc21745,72366
f0100dc5:	52                   	push   %edxf0100dc51746,72416
f0100dc6:	50                   	push   %eaxf0100dc61747,72460
f0100dc7:	89 f2                	mov    %esi,%edxf0100dc71748,72504
f0100dc9:	89 f8                	mov    %edi,%eaxf0100dc91749,72553
f0100dcb:	e8 89 ff ff ff       	call   f0100d59 <printnum>f0100dcb1750,72602
f0100dd0:	83 c4 20             	add    $0x20,%espf0100dd01751,72661
f0100dd3:	eb 13                	jmp    f0100de8 <printnum+0x8f>f0100dd31752,72711
f0100dd5:	83 ec 08             	sub    $0x8,%espf0100dd51757,72887
f0100dd8:	56                   	push   %esif0100dd81758,72936
f0100dd9:	ff 75 18             	pushl  0x18(%ebp)f0100dd91759,72980
f0100ddc:	ff d7                	call   *%edif0100ddc1760,73030
f0100dde:	83 c4 10             	add    $0x10,%espf0100dde1761,73075
f0100de1:	83 eb 01             	sub    $0x1,%ebxf0100de11763,73147
f0100de4:	85 db                	test   %ebx,%ebxf0100de41764,73196
f0100de6:	7f ed                	jg     f0100dd5 <printnum+0x7c>f0100de61765,73245
f0100de8:	83 ec 08             	sub    $0x8,%espf0100de81770,73411
f0100deb:	56                   	push   %esif0100deb1771,73460
f0100dec:	83 ec 04             	sub    $0x4,%espf0100dec1772,73504
f0100def:	ff 75 dc             	pushl  -0x24(%ebp)f0100def1773,73553
f0100df2:	ff 75 d8             	pushl  -0x28(%ebp)f0100df21774,73604
f0100df5:	ff 75 d4             	pushl  -0x2c(%ebp)f0100df51775,73655
f0100df8:	ff 75 d0             	pushl  -0x30(%ebp)f0100df81776,73706
f0100dfb:	8b 75 e4             	mov    -0x1c(%ebp),%esif0100dfb1777,73757
f0100dfe:	89 f3                	mov    %esi,%ebxf0100dfe1778,73813
f0100e00:	e8 cb 0a 00 00       	call   f01018d0 <__umoddi3>f0100e001779,73862
f0100e05:	83 c4 14             	add    $0x14,%espf0100e051780,73922
f0100e08:	0f be 84 06 c1 0b ff 	movsbl -0xf43f(%esi,%eax,1),%eaxf0100e081781,73972
f0100e0f:	ff f0100e0f1782,74037
f0100e10:	50                   	push   %eaxf0100e101783,74051
f0100e11:	ff d7                	call   *%edif0100e111784,74095
f0100e13:	83 c4 10             	add    $0x10,%espf0100e131786,74142
f0100e16:	8d 65 f4             	lea    -0xc(%ebp),%espf0100e161787,74192
f0100e19:	5b                   	pop    %ebxf0100e191788,74247
f0100e1a:	5e                   	pop    %esif0100e1a1789,74291
f0100e1b:	5f                   	pop    %edif0100e1b1790,74335
f0100e1c:	5d                   	pop    %ebpf0100e1c1791,74379
f0100e1d:	c3                   	ret    f0100e1d1792,74423
f0100e1e:	8b 5d 14             	mov    0x14(%ebp),%ebxf0100e1e1793,74463
f0100e21:	eb be                	jmp    f0100de1 <printnum+0x88>f0100e211794,74518
f0100e23 <sprintputch>:f0100e231796,74583
static voidstatic1800,74621
f0100e23:	55                   	push   %ebpf0100e231803,74676
f0100e24:	89 e5                	mov    %esp,%ebpf0100e241804,74720
f0100e26:	8b 45 0c             	mov    0xc(%ebp),%eaxf0100e261805,74769
f0100e29:	83 40 08 01          	addl   $0x1,0x8(%eax)f0100e291807,74834
f0100e2d:	8b 10                	mov    (%eax),%edxf0100e2d1809,74911
f0100e2f:	3b 50 04             	cmp    0x4(%eax),%edxf0100e2f1810,74962
f0100e32:	73 0a                	jae    f0100e3e <sprintputch+0x1b>f0100e321811,75016
f0100e34:	8d 4a 01             	lea    0x1(%edx),%ecxf0100e341813,75101
f0100e37:	89 08                	mov    %ecx,(%eax)f0100e371814,75155
f0100e39:	8b 45 08             	mov    0x8(%ebp),%eaxf0100e391815,75206
f0100e3c:	88 02                	mov    %al,(%edx)f0100e3c1816,75260
f0100e3e:	5d                   	pop    %ebpf0100e3e1818,75312
f0100e3f:	c3                   	ret    f0100e3f1819,75356
f0100e40 <printfmt>:f0100e401821,75397
f0100e40:	55                   	push   %ebpf0100e401823,75420
f0100e41:	89 e5                	mov    %esp,%ebpf0100e411824,75464
f0100e43:	83 ec 08             	sub    $0x8,%espf0100e431825,75513
f0100e46:	8d 45 14             	lea    0x14(%ebp),%eaxf0100e461827,75582
f0100e49:	50                   	push   %eaxf0100e491829,75673
f0100e4a:	ff 75 10             	pushl  0x10(%ebp)f0100e4a1830,75717
f0100e4d:	ff 75 0c             	pushl  0xc(%ebp)f0100e4d1831,75767
f0100e50:	ff 75 08             	pushl  0x8(%ebp)f0100e501832,75816
f0100e53:	e8 05 00 00 00       	call   f0100e5d <vprintfmt>f0100e531833,75865
f0100e58:	83 c4 10             	add    $0x10,%espf0100e581835,75927
f0100e5b:	c9                   	leave  f0100e5b1836,75977
f0100e5c:	c3                   	ret    f0100e5c1837,76017
f0100e5d <vprintfmt>:f0100e5d1839,76058
f0100e5d:	55                   	push   %ebpf0100e5d1841,76082
f0100e5e:	89 e5                	mov    %esp,%ebpf0100e5e1842,76126
f0100e60:	57                   	push   %edif0100e601843,76175
f0100e61:	56                   	push   %esif0100e611844,76219
f0100e62:	53                   	push   %ebxf0100e621845,76263
f0100e63:	83 ec 2c             	sub    $0x2c,%espf0100e631846,76307
f0100e66:	e8 51 f3 ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f0100e661847,76357
f0100e6b:	81 c3 9d 04 01 00    	add    $0x1049d,%ebxf0100e6b1848,76429
f0100e71:	8b 75 0c             	mov    0xc(%ebp),%esif0100e711849,76482
f0100e74:	8b 7d 10             	mov    0x10(%ebp),%edif0100e741850,76536
f0100e77:	e9 8e 03 00 00       	jmp    f010120a <.L35+0x48>f0100e771851,76591
		padc = ' ';padc1852,76651
f0100e7c:	c6 45 d4 20          	movb   $0x20,-0x2c(%ebp)f0100e7c1853,76665
		altflag = 0;altflag1854,76722
f0100e80:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)f0100e801855,76737
		precision = -1;precision1856,76793
f0100e87:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f0100e871857,76811
		width = -1;width1858,76874
f0100e8e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)f0100e8e1859,76888
		lflag = 0;lflag1860,76951
f0100e95:	b9 00 00 00 00       	mov    $0x0,%ecxf0100e951861,76964
f0100e9a:	89 4d cc             	mov    %ecx,-0x34(%ebp)f0100e9a1862,77013
f0100e9d:	8d 47 01             	lea    0x1(%edi),%eaxf0100e9d1864,77112
f0100ea0:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100ea01865,77166
f0100ea3:	0f b6 17             	movzbl (%edi),%edxf0100ea31866,77222
f0100ea6:	8d 42 dd             	lea    -0x23(%edx),%eaxf0100ea61867,77273
f0100ea9:	3c 55                	cmp    $0x55,%alf0100ea91868,77329
f0100eab:	0f 87 e1 03 00 00    	ja     f0101292 <.L22>f0100eab1869,77378
f0100eb1:	0f b6 c0             	movzbl %al,%eaxf0100eb11870,77433
f0100eb4:	89 d9                	mov    %ebx,%ecxf0100eb41871,77481
f0100eb6:	03 8c 83 50 0c ff ff 	add    -0xf3b0(%ebx,%eax,4),%ecxf0100eb61872,77530
f0100ebd:	ff e1                	jmp    *%ecxf0100ebd1873,77595
f0100ebf <.L67>:f0100ebf1875,77641
f0100ebf:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100ebf1876,77658
			padc = '-';padc1877,77714
f0100ec2:	c6 45 d4 2d          	movb   $0x2d,-0x2c(%ebp)f0100ec21878,77729
f0100ec6:	eb d5                	jmp    f0100e9d <vprintfmt+0x40>f0100ec61879,77786
f0100ec8 <.L28>:f0100ec81881,77852
f0100ec8:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100ec81883,77912
			padc = '0';padc1884,77968
f0100ecb:	c6 45 d4 30          	movb   $0x30,-0x2c(%ebp)f0100ecb1885,77983
f0100ecf:	eb cc                	jmp    f0100e9d <vprintfmt+0x40>f0100ecf1886,78040
f0100ed1 <.L29>:f0100ed11888,78106
f0100ed1:	0f b6 d2             	movzbl %dl,%edxf0100ed11890,78166
f0100ed4:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100ed41891,78214
f0100ed7:	b8 00 00 00 00       	mov    $0x0,%eaxf0100ed71893,78304
				precision = precision * 10 + ch - '0';precision1894,78353
f0100edc:	8d 04 80             	lea    (%eax,%eax,4),%eaxf0100edc1895,78396
f0100edf:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eaxf0100edf1896,78454
				ch = *fmt;ch1897,78517
f0100ee3:	0f be 17             	movsbl (%edi),%edxf0100ee31898,78532
f0100ee6:	8d 4a d0             	lea    -0x30(%edx),%ecxf0100ee61900,78613
f0100ee9:	83 f9 09             	cmp    $0x9,%ecxf0100ee91901,78669
f0100eec:	77 55                	ja     f0100f43 <.L23+0xf>f0100eec1902,78718
f0100eee:	83 c7 01             	add    $0x1,%edif0100eee1904,78811
				precision = precision * 10 + ch - '0';precision1905,78860
f0100ef1:	eb e9                	jmp    f0100edc <.L29+0xb>f0100ef11906,78903
f0100ef3 <.L26>:f0100ef31908,78963
			precision = va_arg(ap, int);precision1909,78980
f0100ef3:	8b 45 14             	mov    0x14(%ebp),%eaxf0100ef31910,79012
f0100ef6:	8b 00                	mov    (%eax),%eaxf0100ef61911,79067
f0100ef8:	89 45 d0             	mov    %eax,-0x30(%ebp)f0100ef81912,79118
f0100efb:	8b 45 14             	mov    0x14(%ebp),%eaxf0100efb1913,79174
f0100efe:	8d 40 04             	lea    0x4(%eax),%eaxf0100efe1914,79229
f0100f01:	89 45 14             	mov    %eax,0x14(%ebp)f0100f011915,79283
f0100f04:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100f041917,79381
f0100f07:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f0100f071919,79455
f0100f0b:	79 90                	jns    f0100e9d <vprintfmt+0x40>f0100f0b1920,79511
				width = precision, precision = -1;width1921,79576
f0100f0d:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0100f0d1922,79615
f0100f10:	89 45 e0             	mov    %eax,-0x20(%ebp)f0100f101923,79671
f0100f13:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f0100f131924,79727
f0100f1a:	eb 81                	jmp    f0100e9d <vprintfmt+0x40>f0100f1a1925,79790
f0100f1c <.L27>:f0100f1c1927,79856
f0100f1c:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100f1c1928,79873
f0100f1f:	85 c0                	test   %eax,%eaxf0100f1f1929,79929
f0100f21:	ba 00 00 00 00       	mov    $0x0,%edxf0100f211930,79978
f0100f26:	0f 49 d0             	cmovns %eax,%edxf0100f261931,80027
f0100f29:	89 55 e0             	mov    %edx,-0x20(%ebp)f0100f291932,80076
f0100f2c:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100f2c1934,80175
f0100f2f:	e9 69 ff ff ff       	jmp    f0100e9d <vprintfmt+0x40>f0100f2f1935,80231
f0100f34 <.L23>:f0100f341937,80297
f0100f34:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100f341938,80314
			altflag = 1;altflag1939,80370
f0100f37:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)f0100f371940,80386
f0100f3e:	e9 5a ff ff ff       	jmp    f0100e9d <vprintfmt+0x40>f0100f3e1942,80460
f0100f43:	89 45 d0             	mov    %eax,-0x30(%ebp)f0100f431943,80525
f0100f46:	eb bf                	jmp    f0100f07 <.L26+0x14>f0100f461944,80581
f0100f48 <.L33>:f0100f481946,80642
f0100f48:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f0100f481948,80671
f0100f4c:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100f4c1950,80770
f0100f4f:	e9 49 ff ff ff       	jmp    f0100e9d <vprintfmt+0x40>f0100f4f1952,80844
f0100f54 <.L30>:f0100f541954,80910
f0100f54:	8b 45 14             	mov    0x14(%ebp),%eaxf0100f541956,80962
f0100f57:	8d 78 04             	lea    0x4(%eax),%edif0100f571957,81017
f0100f5a:	83 ec 08             	sub    $0x8,%espf0100f5a1958,81071
f0100f5d:	56                   	push   %esif0100f5d1959,81120
f0100f5e:	ff 30                	pushl  (%eax)f0100f5e1960,81164
f0100f60:	ff 55 08             	call   *0x8(%ebp)f0100f601961,81210
f0100f63:	83 c4 10             	add    $0x10,%espf0100f631963,81270
f0100f66:	89 7d 14             	mov    %edi,0x14(%ebp)f0100f661965,81355
f0100f69:	e9 99 02 00 00       	jmp    f0101207 <.L35+0x45>f0100f691967,81420
f0100f6e <.L32>:f0100f6e1969,81481
			err = va_arg(ap, int);err1970,81498
f0100f6e:	8b 45 14             	mov    0x14(%ebp),%eaxf0100f6e1971,81524
f0100f71:	8d 78 04             	lea    0x4(%eax),%edif0100f711972,81579
f0100f74:	8b 00                	mov    (%eax),%eaxf0100f741973,81633
f0100f76:	99                   	cltd   f0100f761974,81684
f0100f77:	31 d0                	xor    %edx,%eaxf0100f771975,81724
f0100f79:	29 d0                	sub    %edx,%eaxf0100f791976,81773
f0100f7b:	83 f8 06             	cmp    $0x6,%eaxf0100f7b1978,81881
f0100f7e:	7f 27                	jg     f0100fa7 <.L32+0x39>f0100f7e1979,81930
f0100f80:	8b 94 83 20 1d 00 00 	mov    0x1d20(%ebx,%eax,4),%edxf0100f801980,81990
f0100f87:	85 d2                	test   %edx,%edxf0100f871981,82054
f0100f89:	74 1c                	je     f0100fa7 <.L32+0x39>f0100f891982,82103
f0100f8b:	52                   	push   %edxf0100f8b1984,82201
f0100f8c:	8d 83 e2 0b ff ff    	lea    -0xf41e(%ebx),%eaxf0100f8c1985,82245
f0100f92:	50                   	push   %eaxf0100f921986,82303
f0100f93:	56                   	push   %esif0100f931987,82347
f0100f94:	ff 75 08             	pushl  0x8(%ebp)f0100f941988,82391
f0100f97:	e8 a4 fe ff ff       	call   f0100e40 <printfmt>f0100f971989,82440
f0100f9c:	83 c4 10             	add    $0x10,%espf0100f9c1990,82499
			err = va_arg(ap, int);err1991,82549
f0100f9f:	89 7d 14             	mov    %edi,0x14(%ebp)f0100f9f1992,82575
f0100fa2:	e9 60 02 00 00       	jmp    f0101207 <.L35+0x45>f0100fa21993,82630
f0100fa7:	50                   	push   %eaxf0100fa71995,82736
f0100fa8:	8d 83 d9 0b ff ff    	lea    -0xf427(%ebx),%eaxf0100fa81996,82780
f0100fae:	50                   	push   %eaxf0100fae1997,82838
f0100faf:	56                   	push   %esif0100faf1998,82882
f0100fb0:	ff 75 08             	pushl  0x8(%ebp)f0100fb01999,82926
f0100fb3:	e8 88 fe ff ff       	call   f0100e40 <printfmt>f0100fb32000,82975
f0100fb8:	83 c4 10             	add    $0x10,%espf0100fb82001,83034
			err = va_arg(ap, int);err2002,83084
f0100fbb:	89 7d 14             	mov    %edi,0x14(%ebp)f0100fbb2003,83110
f0100fbe:	e9 44 02 00 00       	jmp    f0101207 <.L35+0x45>f0100fbe2005,83211
f0100fc3 <.L36>:f0100fc32007,83272
f0100fc3:	8b 45 14             	mov    0x14(%ebp),%eaxf0100fc32009,83330
f0100fc6:	83 c0 04             	add    $0x4,%eaxf0100fc62010,83385
f0100fc9:	89 45 cc             	mov    %eax,-0x34(%ebp)f0100fc92011,83434
f0100fcc:	8b 45 14             	mov    0x14(%ebp),%eaxf0100fcc2012,83490
f0100fcf:	8b 38                	mov    (%eax),%edif0100fcf2013,83545
				p = "(null)";p2014,83596
f0100fd1:	85 ff                	test   %edi,%edif0100fd12015,83614
f0100fd3:	8d 83 d2 0b ff ff    	lea    -0xf42e(%ebx),%eaxf0100fd32016,83663
f0100fd9:	0f 44 f8             	cmove  %eax,%edif0100fd92017,83721
f0100fdc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f0100fdc2019,83803
f0100fe0:	0f 8e b5 00 00 00    	jle    f010109b <.L36+0xd8>f0100fe02020,83859
f0100fe6:	80 7d d4 2d          	cmpb   $0x2d,-0x2c(%ebp)f0100fe62021,83919
f0100fea:	75 08                	jne    f0100ff4 <.L36+0x31>f0100fea2022,83976
f0100fec:	89 75 0c             	mov    %esi,0xc(%ebp)f0100fec2023,84036
f0100fef:	8b 75 d0             	mov    -0x30(%ebp),%esif0100fef2024,84090
f0100ff2:	eb 6d                	jmp    f0101061 <.L36+0x9e>f0100ff22025,84146
f0100ff4:	83 ec 08             	sub    $0x8,%espf0100ff42027,84267
f0100ff7:	ff 75 d0             	pushl  -0x30(%ebp)f0100ff72028,84316
f0100ffa:	57                   	push   %edif0100ffa2029,84367
f0100ffb:	e8 49 04 00 00       	call   f0101449 <strnlen>f0100ffb2030,84411
f0101000:	8b 55 e0             	mov    -0x20(%ebp),%edxf01010002031,84469
f0101003:	29 c2                	sub    %eax,%edxf01010032032,84525
f0101005:	89 55 c8             	mov    %edx,-0x38(%ebp)f01010052033,84574
f0101008:	83 c4 10             	add    $0x10,%espf01010082034,84630
f010100b:	0f be 45 d4          	movsbl -0x2c(%ebp),%eaxf010100b2036,84706
f010100f:	89 45 e0             	mov    %eax,-0x20(%ebp)f010100f2037,84762
f0101012:	89 7d d4             	mov    %edi,-0x2c(%ebp)f01010122038,84818
f0101015:	89 d7                	mov    %edx,%edif01010152039,84874
f0101017:	eb 10                	jmp    f0101029 <.L36+0x66>f01010172041,84984
f0101019:	83 ec 08             	sub    $0x8,%espf01010192043,85070
f010101c:	56                   	push   %esif010101c2044,85119
f010101d:	ff 75 e0             	pushl  -0x20(%ebp)f010101d2045,85163
f0101020:	ff 55 08             	call   *0x8(%ebp)f01010202046,85214
f0101023:	83 ef 01             	sub    $0x1,%edif01010232048,85325
f0101026:	83 c4 10             	add    $0x10,%espf01010262049,85374
f0101029:	85 ff                	test   %edi,%edif01010292050,85424
f010102b:	7f ec                	jg     f0101019 <.L36+0x56>f010102b2051,85473
f010102d:	8b 7d d4             	mov    -0x2c(%ebp),%edif010102d2052,85533
f0101030:	8b 55 c8             	mov    -0x38(%ebp),%edxf01010302053,85589
f0101033:	85 d2                	test   %edx,%edxf01010332054,85645
f0101035:	b8 00 00 00 00       	mov    $0x0,%eaxf01010352055,85694
f010103a:	0f 49 c2             	cmovns %edx,%eaxf010103a2056,85743
f010103d:	29 c2                	sub    %eax,%edxf010103d2057,85792
f010103f:	89 55 e0             	mov    %edx,-0x20(%ebp)f010103f2058,85841
f0101042:	89 75 0c             	mov    %esi,0xc(%ebp)f01010422059,85897
f0101045:	8b 75 d0             	mov    -0x30(%ebp),%esif01010452060,85951
f0101048:	eb 17                	jmp    f0101061 <.L36+0x9e>f01010482061,86007
f010104a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)f010104a2063,86110
f010104e:	75 30                	jne    f0101080 <.L36+0xbd>f010104e2064,86166
f0101050:	83 ec 08             	sub    $0x8,%espf01010502066,86250
f0101053:	ff 75 0c             	pushl  0xc(%ebp)f01010532067,86299
f0101056:	50                   	push   %eaxf01010562068,86348
f0101057:	ff 55 08             	call   *0x8(%ebp)f01010572069,86392
f010105a:	83 c4 10             	add    $0x10,%espf010105a2070,86442
f010105d:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)f010105d2072,86571
f0101061:	83 c7 01             	add    $0x1,%edif01010612073,86627
f0101064:	0f b6 57 ff          	movzbl -0x1(%edi),%edxf01010642074,86676
f0101068:	0f be c2             	movsbl %dl,%eaxf01010682075,86731
f010106b:	85 c0                	test   %eax,%eaxf010106b2076,86779
f010106d:	74 52                	je     f01010c1 <.L36+0xfe>f010106d2077,86828
f010106f:	85 f6                	test   %esi,%esif010106f2078,86888
f0101071:	78 d7                	js     f010104a <.L36+0x87>f01010712079,86937
f0101073:	83 ee 01             	sub    $0x1,%esif01010732080,86997
f0101076:	79 d2                	jns    f010104a <.L36+0x87>f01010762081,87046
f0101078:	8b 75 0c             	mov    0xc(%ebp),%esif01010782082,87106
f010107b:	8b 7d e0             	mov    -0x20(%ebp),%edif010107b2083,87160
f010107e:	eb 32                	jmp    f01010b2 <.L36+0xef>f010107e2084,87216
f0101080:	0f be d2             	movsbl %dl,%edxf01010802086,87319
f0101083:	83 ea 20             	sub    $0x20,%edxf01010832087,87367
f0101086:	83 fa 5e             	cmp    $0x5e,%edxf01010862088,87417
f0101089:	76 c5                	jbe    f0101050 <.L36+0x8d>f01010892089,87467
f010108b:	83 ec 08             	sub    $0x8,%espf010108b2091,87552
f010108e:	ff 75 0c             	pushl  0xc(%ebp)f010108e2092,87601
f0101091:	6a 3f                	push   $0x3ff01010912093,87650
f0101093:	ff 55 08             	call   *0x8(%ebp)f01010932094,87695
f0101096:	83 c4 10             	add    $0x10,%espf01010962095,87745
f0101099:	eb c2                	jmp    f010105d <.L36+0x9a>f01010992096,87795
f010109b:	89 75 0c             	mov    %esi,0xc(%ebp)f010109b2097,87855
f010109e:	8b 75 d0             	mov    -0x30(%ebp),%esif010109e2098,87909
f01010a1:	eb be                	jmp    f0101061 <.L36+0x9e>f01010a12099,87965
f01010a3:	83 ec 08             	sub    $0x8,%espf01010a32101,88049
f01010a6:	56                   	push   %esif01010a62102,88098
f01010a7:	6a 20                	push   $0x20f01010a72103,88142
f01010a9:	ff 55 08             	call   *0x8(%ebp)f01010a92104,88187
f01010ac:	83 ef 01             	sub    $0x1,%edif01010ac2106,88267
f01010af:	83 c4 10             	add    $0x10,%espf01010af2107,88316
f01010b2:	85 ff                	test   %edi,%edif01010b22108,88366
f01010b4:	7f ed                	jg     f01010a3 <.L36+0xe0>f01010b42109,88415
f01010b6:	8b 45 cc             	mov    -0x34(%ebp),%eaxf01010b62111,88516
f01010b9:	89 45 14             	mov    %eax,0x14(%ebp)f01010b92112,88572
f01010bc:	e9 46 01 00 00       	jmp    f0101207 <.L35+0x45>f01010bc2113,88627
f01010c1:	8b 7d e0             	mov    -0x20(%ebp),%edif01010c12114,88687
f01010c4:	8b 75 0c             	mov    0xc(%ebp),%esif01010c42115,88743
f01010c7:	eb e9                	jmp    f01010b2 <.L36+0xef>f01010c72116,88797
f01010c9 <.L31>:f01010c92118,88858
f01010c9:	8b 4d cc             	mov    -0x34(%ebp),%ecxf01010c92119,88875
f01010cc:	83 f9 01             	cmp    $0x1,%ecxf01010cc2121,88948
f01010cf:	7e 40                	jle    f0101111 <.L31+0x48>f01010cf2122,88997
f01010d1:	8b 45 14             	mov    0x14(%ebp),%eaxf01010d12124,89090
f01010d4:	8b 50 04             	mov    0x4(%eax),%edxf01010d42125,89145
f01010d7:	8b 00                	mov    (%eax),%eaxf01010d72126,89199
f01010d9:	89 45 d8             	mov    %eax,-0x28(%ebp)f01010d92127,89250
f01010dc:	89 55 dc             	mov    %edx,-0x24(%ebp)f01010dc2128,89306
f01010df:	8b 45 14             	mov    0x14(%ebp),%eaxf01010df2129,89362
f01010e2:	8d 40 08             	lea    0x8(%eax),%eaxf01010e22130,89417
f01010e5:	89 45 14             	mov    %eax,0x14(%ebp)f01010e52131,89471
f01010e8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)f01010e82133,89556
f01010ec:	79 55                	jns    f0101143 <.L31+0x7a>f01010ec2134,89612
f01010ee:	83 ec 08             	sub    $0x8,%espf01010ee2136,89696
f01010f1:	56                   	push   %esif01010f12137,89745
f01010f2:	6a 2d                	push   $0x2df01010f22138,89789
f01010f4:	ff 55 08             	call   *0x8(%ebp)f01010f42139,89834
				num = -(long long) num;num2140,89884
f01010f7:	8b 55 d8             	mov    -0x28(%ebp),%edxf01010f72141,89912
f01010fa:	8b 4d dc             	mov    -0x24(%ebp),%ecxf01010fa2142,89968
f01010fd:	f7 da                	neg    %edxf01010fd2143,90024
f01010ff:	83 d1 00             	adc    $0x0,%ecxf01010ff2144,90068
f0101102:	f7 d9                	neg    %ecxf01011022145,90117
f0101104:	83 c4 10             	add    $0x10,%espf01011042146,90161
			base = 10;base2147,90211
f0101107:	b8 0a 00 00 00       	mov    $0xa,%eaxf01011072148,90225
f010110c:	e9 db 00 00 00       	jmp    f01011ec <.L35+0x2a>f010110c2149,90274
f0101111:	85 c9                	test   %ecx,%ecxf01011112151,90351
f0101113:	75 17                	jne    f010112c <.L31+0x63>f01011132152,90400
f0101115:	8b 45 14             	mov    0x14(%ebp),%eaxf01011152154,90487
f0101118:	8b 00                	mov    (%eax),%eaxf01011182155,90542
f010111a:	89 45 d8             	mov    %eax,-0x28(%ebp)f010111a2156,90593
f010111d:	99                   	cltd   f010111d2157,90649
f010111e:	89 55 dc             	mov    %edx,-0x24(%ebp)f010111e2158,90689
f0101121:	8b 45 14             	mov    0x14(%ebp),%eaxf01011212159,90745
f0101124:	8d 40 04             	lea    0x4(%eax),%eaxf01011242160,90800
f0101127:	89 45 14             	mov    %eax,0x14(%ebp)f01011272161,90854
f010112a:	eb bc                	jmp    f01010e8 <.L31+0x1f>f010112a2162,90909
f010112c:	8b 45 14             	mov    0x14(%ebp),%eaxf010112c2164,90997
f010112f:	8b 00                	mov    (%eax),%eaxf010112f2165,91052
f0101131:	89 45 d8             	mov    %eax,-0x28(%ebp)f01011312166,91103
f0101134:	99                   	cltd   f01011342167,91159
f0101135:	89 55 dc             	mov    %edx,-0x24(%ebp)f01011352168,91199
f0101138:	8b 45 14             	mov    0x14(%ebp),%eaxf01011382169,91255
f010113b:	8d 40 04             	lea    0x4(%eax),%eaxf010113b2170,91310
f010113e:	89 45 14             	mov    %eax,0x14(%ebp)f010113e2171,91364
f0101141:	eb a5                	jmp    f01010e8 <.L31+0x1f>f01011412172,91419
			num = getint(&ap, lflag);num2173,91479
f0101143:	8b 55 d8             	mov    -0x28(%ebp),%edxf01011432174,91508
f0101146:	8b 4d dc             	mov    -0x24(%ebp),%ecxf01011462175,91564
			base = 10;base2176,91620
f0101149:	b8 0a 00 00 00       	mov    $0xa,%eaxf01011492177,91634
f010114e:	e9 99 00 00 00       	jmp    f01011ec <.L35+0x2a>f010114e2178,91683
f0101153 <.L37>:f01011532180,91744
f0101153:	8b 4d cc             	mov    -0x34(%ebp),%ecxf01011532181,91761
f0101156:	83 f9 01             	cmp    $0x1,%ecxf01011562183,91834
f0101159:	7e 15                	jle    f0101170 <.L37+0x1d>f01011592184,91883
f010115b:	8b 45 14             	mov    0x14(%ebp),%eaxf010115b2186,91985
f010115e:	8b 10                	mov    (%eax),%edxf010115e2187,92040
f0101160:	8b 48 04             	mov    0x4(%eax),%ecxf01011602188,92091
f0101163:	8d 40 08             	lea    0x8(%eax),%eaxf01011632189,92145
f0101166:	89 45 14             	mov    %eax,0x14(%ebp)f01011662190,92199
			base = 10;base2191,92254
f0101169:	b8 0a 00 00 00       	mov    $0xa,%eaxf01011692192,92268
f010116e:	eb 7c                	jmp    f01011ec <.L35+0x2a>f010116e2193,92317
f0101170:	85 c9                	test   %ecx,%ecxf01011702195,92394
f0101172:	75 17                	jne    f010118b <.L37+0x38>f01011722196,92443
f0101174:	8b 45 14             	mov    0x14(%ebp),%eaxf01011742198,92539
f0101177:	8b 10                	mov    (%eax),%edxf01011772199,92594
f0101179:	b9 00 00 00 00       	mov    $0x0,%ecxf01011792200,92645
f010117e:	8d 40 04             	lea    0x4(%eax),%eaxf010117e2201,92694
f0101181:	89 45 14             	mov    %eax,0x14(%ebp)f01011812202,92748
			base = 10;base2203,92803
f0101184:	b8 0a 00 00 00       	mov    $0xa,%eaxf01011842204,92817
f0101189:	eb 61                	jmp    f01011ec <.L35+0x2a>f01011892205,92866
f010118b:	8b 45 14             	mov    0x14(%ebp),%eaxf010118b2207,92963
f010118e:	8b 10                	mov    (%eax),%edxf010118e2208,93018
f0101190:	b9 00 00 00 00       	mov    $0x0,%ecxf01011902209,93069
f0101195:	8d 40 04             	lea    0x4(%eax),%eaxf01011952210,93118
f0101198:	89 45 14             	mov    %eax,0x14(%ebp)f01011982211,93172
			base = 10;base2212,93227
f010119b:	b8 0a 00 00 00       	mov    $0xa,%eaxf010119b2213,93241
f01011a0:	eb 4a                	jmp    f01011ec <.L35+0x2a>f01011a02214,93290
f01011a2 <.L34>:f01011a22216,93351
f01011a2:	83 ec 08             	sub    $0x8,%espf01011a22218,93391
f01011a5:	56                   	push   %esif01011a52219,93440
f01011a6:	6a 58                	push   $0x58f01011a62220,93484
f01011a8:	ff 55 08             	call   *0x8(%ebp)f01011a82221,93529
f01011ab:	83 c4 08             	add    $0x8,%espf01011ab2223,93602
f01011ae:	56                   	push   %esif01011ae2224,93651
f01011af:	6a 58                	push   $0x58f01011af2225,93695
f01011b1:	ff 55 08             	call   *0x8(%ebp)f01011b12226,93740
f01011b4:	83 c4 08             	add    $0x8,%espf01011b42228,93813
f01011b7:	56                   	push   %esif01011b72229,93862
f01011b8:	6a 58                	push   $0x58f01011b82230,93906
f01011ba:	ff 55 08             	call   *0x8(%ebp)f01011ba2231,93951
f01011bd:	83 c4 10             	add    $0x10,%espf01011bd2233,94011
f01011c0:	eb 45                	jmp    f0101207 <.L35+0x45>f01011c02234,94061
f01011c2 <.L35>:f01011c22236,94122
f01011c2:	83 ec 08             	sub    $0x8,%espf01011c22238,94162
f01011c5:	56                   	push   %esif01011c52239,94211
f01011c6:	6a 30                	push   $0x30f01011c62240,94255
f01011c8:	ff 55 08             	call   *0x8(%ebp)f01011c82241,94300
f01011cb:	83 c4 08             	add    $0x8,%espf01011cb2243,94373
f01011ce:	56                   	push   %esif01011ce2244,94422
f01011cf:	6a 78                	push   $0x78f01011cf2245,94466
f01011d1:	ff 55 08             	call   *0x8(%ebp)f01011d12246,94511
			num = (unsigned long long)num2247,94561
f01011d4:	8b 45 14             	mov    0x14(%ebp),%eaxf01011d42248,94591
f01011d7:	8b 10                	mov    (%eax),%edxf01011d72249,94646
f01011d9:	b9 00 00 00 00       	mov    $0x0,%ecxf01011d92250,94697
f01011de:	83 c4 10             	add    $0x10,%espf01011de2252,94762
f01011e1:	8d 40 04             	lea    0x4(%eax),%eaxf01011e12254,94848
f01011e4:	89 45 14             	mov    %eax,0x14(%ebp)f01011e42255,94902
			base = 16;base2256,94957
f01011e7:	b8 10 00 00 00       	mov    $0x10,%eaxf01011e72257,94971
f01011ec:	83 ec 0c             	sub    $0xc,%espf01011ec2259,95073
f01011ef:	0f be 7d d4          	movsbl -0x2c(%ebp),%edif01011ef2260,95122
f01011f3:	57                   	push   %edif01011f32261,95178
f01011f4:	ff 75 e0             	pushl  -0x20(%ebp)f01011f42262,95222
f01011f7:	50                   	push   %eaxf01011f72263,95273
f01011f8:	51                   	push   %ecxf01011f82264,95317
f01011f9:	52                   	push   %edxf01011f92265,95361
f01011fa:	89 f2                	mov    %esi,%edxf01011fa2266,95405
f01011fc:	8b 45 08             	mov    0x8(%ebp),%eaxf01011fc2267,95454
f01011ff:	e8 55 fb ff ff       	call   f0100d59 <printnum>f01011ff2268,95508
f0101204:	83 c4 20             	add    $0x20,%espf01012042270,95577
			err = va_arg(ap, int);err2271,95627
f0101207:	8b 7d e4             	mov    -0x1c(%ebp),%edif01012072272,95653
f010120a:	83 c7 01             	add    $0x1,%edif010120a2274,95760
f010120d:	0f b6 47 ff          	movzbl -0x1(%edi),%eaxf010120d2275,95809
f0101211:	83 f8 25             	cmp    $0x25,%eaxf01012112276,95864
f0101214:	0f 84 62 fc ff ff    	je     f0100e7c <vprintfmt+0x1f>f01012142277,95914
f010121a:	85 c0                	test   %eax,%eaxf010121a2279,95998
f010121c:	0f 84 91 00 00 00    	je     f01012b3 <.L22+0x21>f010121c2280,96047
f0101222:	83 ec 08             	sub    $0x8,%espf01012222282,96129
f0101225:	56                   	push   %esif01012252283,96178
f0101226:	50                   	push   %eaxf01012262284,96222
f0101227:	ff 55 08             	call   *0x8(%ebp)f01012272285,96266
f010122a:	83 c4 10             	add    $0x10,%espf010122a2286,96316
f010122d:	eb db                	jmp    f010120a <.L35+0x48>f010122d2287,96366
f010122f <.L38>:f010122f2289,96427
f010122f:	8b 4d cc             	mov    -0x34(%ebp),%ecxf010122f2290,96444
f0101232:	83 f9 01             	cmp    $0x1,%ecxf01012322292,96517
f0101235:	7e 15                	jle    f010124c <.L38+0x1d>f01012352293,96566
f0101237:	8b 45 14             	mov    0x14(%ebp),%eaxf01012372295,96668
f010123a:	8b 10                	mov    (%eax),%edxf010123a2296,96723
f010123c:	8b 48 04             	mov    0x4(%eax),%ecxf010123c2297,96774
f010123f:	8d 40 08             	lea    0x8(%eax),%eaxf010123f2298,96828
f0101242:	89 45 14             	mov    %eax,0x14(%ebp)f01012422299,96882
			base = 16;base2300,96937
f0101245:	b8 10 00 00 00       	mov    $0x10,%eaxf01012452301,96951
f010124a:	eb a0                	jmp    f01011ec <.L35+0x2a>f010124a2302,97001
f010124c:	85 c9                	test   %ecx,%ecxf010124c2304,97078
f010124e:	75 17                	jne    f0101267 <.L38+0x38>f010124e2305,97127
f0101250:	8b 45 14             	mov    0x14(%ebp),%eaxf01012502307,97223
f0101253:	8b 10                	mov    (%eax),%edxf01012532308,97278
f0101255:	b9 00 00 00 00       	mov    $0x0,%ecxf01012552309,97329
f010125a:	8d 40 04             	lea    0x4(%eax),%eaxf010125a2310,97378
f010125d:	89 45 14             	mov    %eax,0x14(%ebp)f010125d2311,97432
			base = 16;base2312,97487
f0101260:	b8 10 00 00 00       	mov    $0x10,%eaxf01012602313,97501
f0101265:	eb 85                	jmp    f01011ec <.L35+0x2a>f01012652314,97551
f0101267:	8b 45 14             	mov    0x14(%ebp),%eaxf01012672316,97648
f010126a:	8b 10                	mov    (%eax),%edxf010126a2317,97703
f010126c:	b9 00 00 00 00       	mov    $0x0,%ecxf010126c2318,97754
f0101271:	8d 40 04             	lea    0x4(%eax),%eaxf01012712319,97803
f0101274:	89 45 14             	mov    %eax,0x14(%ebp)f01012742320,97857
			base = 16;base2321,97912
f0101277:	b8 10 00 00 00       	mov    $0x10,%eaxf01012772322,97926
f010127c:	e9 6b ff ff ff       	jmp    f01011ec <.L35+0x2a>f010127c2323,97976
f0101281 <.L25>:f01012812325,98037
f0101281:	83 ec 08             	sub    $0x8,%espf01012812327,98076
f0101284:	56                   	push   %esif01012842328,98125
f0101285:	6a 25                	push   $0x25f01012852329,98169
f0101287:	ff 55 08             	call   *0x8(%ebp)f01012872330,98214
f010128a:	83 c4 10             	add    $0x10,%espf010128a2332,98274
f010128d:	e9 75 ff ff ff       	jmp    f0101207 <.L35+0x45>f010128d2333,98324
f0101292 <.L22>:f01012922335,98385
f0101292:	83 ec 08             	sub    $0x8,%espf01012922337,98425
f0101295:	56                   	push   %esif01012952338,98474
f0101296:	6a 25                	push   $0x25f01012962339,98518
f0101298:	ff 55 08             	call   *0x8(%ebp)f01012982340,98563
f010129b:	83 c4 10             	add    $0x10,%espf010129b2342,98651
f010129e:	89 f8                	mov    %edi,%eaxf010129e2343,98701
f01012a0:	eb 03                	jmp    f01012a5 <.L22+0x13>f01012a02344,98750
f01012a2:	83 e8 01             	sub    $0x1,%eaxf01012a22345,98810
f01012a5:	80 78 ff 25          	cmpb   $0x25,-0x1(%eax)f01012a52346,98859
f01012a9:	75 f7                	jne    f01012a2 <.L22+0x10>f01012a92347,98915
f01012ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01012ab2348,98975
f01012ae:	e9 54 ff ff ff       	jmp    f0101207 <.L35+0x45>f01012ae2349,99031
f01012b3:	8d 65 f4             	lea    -0xc(%ebp),%espf01012b32351,99093
f01012b6:	5b                   	pop    %ebxf01012b62352,99148
f01012b7:	5e                   	pop    %esif01012b72353,99192
f01012b8:	5f                   	pop    %edif01012b82354,99236
f01012b9:	5d                   	pop    %ebpf01012b92355,99280
f01012ba:	c3                   	ret    f01012ba2356,99324
f01012bb <vsnprintf>:f01012bb2358,99365
intint2360,99388
f01012bb:	55                   	push   %ebpf01012bb2363,99451
f01012bc:	89 e5                	mov    %esp,%ebpf01012bc2364,99495
f01012be:	53                   	push   %ebxf01012be2365,99544
f01012bf:	83 ec 14             	sub    $0x14,%espf01012bf2366,99588
f01012c2:	e8 f5 ee ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f01012c22367,99638
f01012c7:	81 c3 41 00 01 00    	add    $0x10041,%ebxf01012c72368,99710
f01012cd:	8b 45 08             	mov    0x8(%ebp),%eaxf01012cd2369,99763
f01012d0:	8b 55 0c             	mov    0xc(%ebp),%edxf01012d02370,99817
f01012d3:	89 45 ec             	mov    %eax,-0x14(%ebp)f01012d32372,99912
f01012d6:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecxf01012d62373,99968
f01012da:	89 4d f0             	mov    %ecx,-0x10(%ebp)f01012da2374,100030
f01012dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f01012dd2375,100086
f01012e4:	85 c0                	test   %eax,%eaxf01012e42378,100169
f01012e6:	74 2b                	je     f0101313 <vsnprintf+0x58>f01012e62379,100218
f01012e8:	85 d2                	test   %edx,%edxf01012e82380,100283
f01012ea:	7e 27                	jle    f0101313 <vsnprintf+0x58>f01012ea2381,100332
f01012ec:	ff 75 14             	pushl  0x14(%ebp)f01012ec2386,100497
f01012ef:	ff 75 10             	pushl  0x10(%ebp)f01012ef2387,100547
f01012f2:	8d 45 ec             	lea    -0x14(%ebp),%eaxf01012f22388,100597
f01012f5:	50                   	push   %eaxf01012f52389,100653
f01012f6:	8d 83 1b fb fe ff    	lea    -0x104e5(%ebx),%eaxf01012f62390,100697
f01012fc:	50                   	push   %eaxf01012fc2391,100756
f01012fd:	e8 5b fb ff ff       	call   f0100e5d <vprintfmt>f01012fd2392,100800
f0101302:	8b 45 ec             	mov    -0x14(%ebp),%eaxf01013022396,100907
f0101305:	c6 00 00             	movb   $0x0,(%eax)f01013052397,100963
f0101308:	8b 45 f4             	mov    -0xc(%ebp),%eaxf01013082400,101030
f010130b:	83 c4 10             	add    $0x10,%espf010130b2401,101085
f010130e:	8b 5d fc             	mov    -0x4(%ebp),%ebxf010130e2403,101137
f0101311:	c9                   	leave  f01013112404,101192
f0101312:	c3                   	ret    f01013122405,101232
f0101313:	b8 fd ff ff ff       	mov    $0xfffffffd,%eaxf01013132407,101291
f0101318:	eb f4                	jmp    f010130e <vsnprintf+0x53>f01013182408,101347
f010131a <snprintf>:f010131a2410,101413
intint2412,101435
f010131a:	55                   	push   %ebpf010131a2415,101490
f010131b:	89 e5                	mov    %esp,%ebpf010131b2416,101534
f010131d:	83 ec 08             	sub    $0x8,%espf010131d2417,101583
f0101320:	8d 45 14             	lea    0x14(%ebp),%eaxf01013202422,101675
	rc = vsnprintf(buf, n, fmt, ap);rc2423,101730
f0101323:	50                   	push   %eaxf01013232424,101764
f0101324:	ff 75 10             	pushl  0x10(%ebp)f01013242425,101808
f0101327:	ff 75 0c             	pushl  0xc(%ebp)f01013272426,101858
f010132a:	ff 75 08             	pushl  0x8(%ebp)f010132a2427,101907
f010132d:	e8 89 ff ff ff       	call   f01012bb <vsnprintf>f010132d2428,101956
f0101332:	c9                   	leave  f01013322433,102044
f0101333:	c3                   	ret    f01013332434,102084
f0101334 <readline>:f01013342436,102125
#define BUFLEN 1024BUFLEN2437,102146
static char buf[BUFLEN];static2438,102166
char *char2440,102192
f0101334:	55                   	push   %ebpf01013342443,102230
f0101335:	89 e5                	mov    %esp,%ebpf01013352444,102274
f0101337:	57                   	push   %edif01013372445,102323
f0101338:	56                   	push   %esif01013382446,102367
f0101339:	53                   	push   %ebxf01013392447,102411
f010133a:	83 ec 1c             	sub    $0x1c,%espf010133a2448,102455
f010133d:	e8 7a ee ff ff       	call   f01001bc <__x86.get_pc_thunk.bx>f010133d2449,102505
f0101342:	81 c3 c6 ff 00 00    	add    $0xffc6,%ebxf01013422450,102577
f0101348:	8b 45 08             	mov    0x8(%ebp),%eaxf01013482451,102629
f010134b:	85 c0                	test   %eax,%eaxf010134b2455,102725
f010134d:	74 13                	je     f0101362 <readline+0x2e>f010134d2456,102774
f010134f:	83 ec 08             	sub    $0x8,%espf010134f2458,102863
f0101352:	50                   	push   %eaxf01013522459,102912
f0101353:	8d 83 e2 0b ff ff    	lea    -0xf41e(%ebx),%eaxf01013532460,102956
f0101359:	50                   	push   %eaxf01013592461,103014
f010135a:	e8 ea f6 ff ff       	call   f0100a49 <cprintf>f010135a2462,103058
f010135f:	83 c4 10             	add    $0x10,%espf010135f2463,103116
	i = 0;i2465,103167
	echoing = iscons(0);echoing2466,103175
f0101362:	83 ec 0c             	sub    $0xc,%espf01013622467,103197
f0101365:	6a 00                	push   $0x0f01013652468,103246
f0101367:	e8 e8 f3 ff ff       	call   f0100754 <iscons>f01013672469,103290
f010136c:	89 45 e4             	mov    %eax,-0x1c(%ebp)f010136c2470,103347
f010136f:	83 c4 10             	add    $0x10,%espf010136f2471,103403
	i = 0;i2472,103453
f0101372:	bf 00 00 00 00       	mov    $0x0,%edif01013722473,103461
f0101377:	eb 46                	jmp    f01013bf <readline+0x8b>f01013772474,103510
		c = getchar();c2476,103587
f0101379:	83 ec 08             	sub    $0x8,%espf01013792479,103654
f010137c:	50                   	push   %eaxf010137c2480,103703
f010137d:	8d 83 a8 0d ff ff    	lea    -0xf258(%ebx),%eaxf010137d2481,103747
f0101383:	50                   	push   %eaxf01013832482,103805
f0101384:	e8 c0 f6 ff ff       	call   f0100a49 <cprintf>f01013842483,103849
f0101389:	83 c4 10             	add    $0x10,%espf01013892485,103923
f010138c:	b8 00 00 00 00       	mov    $0x0,%eaxf010138c2486,103973
f0101391:	8d 65 f4             	lea    -0xc(%ebp),%espf01013912493,104081
f0101394:	5b                   	pop    %ebxf01013942494,104136
f0101395:	5e                   	pop    %esif01013952495,104180
f0101396:	5f                   	pop    %edif01013962496,104224
f0101397:	5d                   	pop    %ebpf01013972497,104268
f0101398:	c3                   	ret    f01013982498,104312
f0101399:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01013992500,104368
f010139d:	75 05                	jne    f01013a4 <readline+0x70>f010139d2501,104424
f010139f:	83 ef 01             	sub    $0x1,%edif010139f2503,104496
f01013a2:	eb 1b                	jmp    f01013bf <readline+0x8b>f01013a22504,104545
f01013a4:	83 ec 0c             	sub    $0xc,%espf01013a42506,104629
f01013a7:	6a 08                	push   $0x8f01013a72507,104678
f01013a9:	e8 85 f3 ff ff       	call   f0100733 <cputchar>f01013a92508,104722
f01013ae:	83 c4 10             	add    $0x10,%espf01013ae2509,104781
f01013b1:	eb ec                	jmp    f010139f <readline+0x6b>f01013b12510,104831
f01013b3:	89 f0                	mov    %esi,%eaxf01013b32512,104912
f01013b5:	88 84 3b 98 1f 00 00 	mov    %al,0x1f98(%ebx,%edi,1)f01013b52513,104961
f01013bc:	8d 7f 01             	lea    0x1(%edi),%edif01013bc2514,105024
		c = getchar();c2515,105078
f01013bf:	e8 7f f3 ff ff       	call   f0100743 <getchar>f01013bf2516,105095
f01013c4:	89 c6                	mov    %eax,%esif01013c42517,105153
f01013c6:	85 c0                	test   %eax,%eaxf01013c62519,105217
f01013c8:	78 af                	js     f0101379 <readline+0x45>f01013c82520,105266
f01013ca:	83 f8 08             	cmp    $0x8,%eaxf01013ca2522,105382
f01013cd:	0f 94 c2             	sete   %dlf01013cd2523,105431
f01013d0:	83 f8 7f             	cmp    $0x7f,%eaxf01013d02524,105474
f01013d3:	0f 94 c0             	sete   %alf01013d32525,105524
f01013d6:	08 c2                	or     %al,%dlf01013d62526,105567
f01013d8:	74 04                	je     f01013de <readline+0xaa>f01013d82527,105614
f01013da:	85 ff                	test   %edi,%edif01013da2528,105678
f01013dc:	7f bb                	jg     f0101399 <readline+0x65>f01013dc2529,105727
f01013de:	83 fe 1f             	cmp    $0x1f,%esif01013de2531,105832
f01013e1:	7e 1c                	jle    f01013ff <readline+0xcb>f01013e12532,105882
f01013e3:	81 ff fe 03 00 00    	cmp    $0x3fe,%edif01013e32533,105946
f01013e9:	7f 14                	jg     f01013ff <readline+0xcb>f01013e92534,105997
f01013eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01013eb2536,106077
f01013ef:	74 c2                	je     f01013b3 <readline+0x7f>f01013ef2537,106133
f01013f1:	83 ec 0c             	sub    $0xc,%espf01013f12539,106214
f01013f4:	56                   	push   %esif01013f42540,106263
f01013f5:	e8 39 f3 ff ff       	call   f0100733 <cputchar>f01013f52541,106307
f01013fa:	83 c4 10             	add    $0x10,%espf01013fa2542,106366
f01013fd:	eb b4                	jmp    f01013b3 <readline+0x7f>f01013fd2543,106416
f01013ff:	83 fe 0a             	cmp    $0xa,%esif01013ff2545,106519
f0101402:	74 05                	je     f0101409 <readline+0xd5>f01014022546,106568
f0101404:	83 fe 0d             	cmp    $0xd,%esif01014042547,106632
f0101407:	75 b6                	jne    f01013bf <readline+0x8b>f01014072548,106681
f0101409:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01014092550,106761
f010140d:	75 13                	jne    f0101422 <readline+0xee>f010140d2551,106817
f010140f:	c6 84 3b 98 1f 00 00 	movb   $0x0,0x1f98(%ebx,%edi,1)f010140f2553,106896
f0101416:	00 f01014162554,106960
f0101417:	8d 83 98 1f 00 00    	lea    0x1f98(%ebx),%eaxf01014172556,106989
f010141d:	e9 6f ff ff ff       	jmp    f0101391 <readline+0x5d>f010141d2557,107046
f0101422:	83 ec 0c             	sub    $0xc,%espf01014222559,107130
f0101425:	6a 0a                	push   $0xaf01014252560,107179
f0101427:	e8 07 f3 ff ff       	call   f0100733 <cputchar>f01014272561,107223
f010142c:	83 c4 10             	add    $0x10,%espf010142c2562,107282
f010142f:	eb de                	jmp    f010140f <readline+0xdb>f010142f2563,107332
f0101431 <strlen>:f01014312565,107397
#define ASM 1ASM2567,107455
intint2569,107470
f0101431:	55                   	push   %ebpf01014312572,107498
f0101432:	89 e5                	mov    %esp,%ebpf01014322573,107542
f0101434:	8b 55 08             	mov    0x8(%ebp),%edxf01014342574,107591
f0101437:	b8 00 00 00 00       	mov    $0x0,%eaxf01014372578,107684
f010143c:	eb 03                	jmp    f0101441 <strlen+0x10>f010143c2579,107733
f010143e:	83 c0 01             	add    $0x1,%eaxf010143e2581,107802
f0101441:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)f01014412583,107881
f0101445:	75 f7                	jne    f010143e <strlen+0xd>f01014452584,107939
f0101447:	5d                   	pop    %ebpf01014472587,108013
f0101448:	c3                   	ret    f01014482588,108057
f0101449 <strnlen>:f01014492590,108098
intint2592,108119
f0101449:	55                   	push   %ebpf01014492595,108161
f010144a:	89 e5                	mov    %esp,%ebpf010144a2596,108205
f010144c:	8b 4d 08             	mov    0x8(%ebp),%ecxf010144c2597,108254
f010144f:	8b 55 0c             	mov    0xc(%ebp),%edxf010144f2598,108308
f0101452:	b8 00 00 00 00       	mov    $0x0,%eaxf01014522602,108421
f0101457:	eb 03                	jmp    f010145c <strnlen+0x13>f01014572603,108470
f0101459:	83 c0 01             	add    $0x1,%eaxf01014592605,108540
f010145c:	39 d0                	cmp    %edx,%eaxf010145c2607,108639
f010145e:	74 06                	je     f0101466 <strnlen+0x1d>f010145e2608,108688
f0101460:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)f01014602609,108751
f0101464:	75 f3                	jne    f0101459 <strnlen+0x10>f01014642610,108809
f0101466:	5d                   	pop    %ebpf01014662613,108885
f0101467:	c3                   	ret    f01014672614,108929
f0101468 <strcpy>:f01014682616,108970
char *char2618,108990
f0101468:	55                   	push   %ebpf01014682621,109034
f0101469:	89 e5                	mov    %esp,%ebpf01014692622,109078
f010146b:	53                   	push   %ebxf010146b2623,109127
f010146c:	8b 45 08             	mov    0x8(%ebp),%eaxf010146c2624,109171
f010146f:	8b 4d 0c             	mov    0xc(%ebp),%ecxf010146f2625,109225
	ret = dst;ret2628,109292
f0101472:	89 c2                	mov    %eax,%edxf01014722630,109339
f0101474:	83 c1 01             	add    $0x1,%ecxf01014742631,109388
f0101477:	83 c2 01             	add    $0x1,%edxf01014772632,109437
f010147a:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebxf010147a2633,109486
f010147e:	88 5a ff             	mov    %bl,-0x1(%edx)f010147e2634,109541
f0101481:	84 db                	test   %bl,%blf01014812635,109595
f0101483:	75 ef                	jne    f0101474 <strcpy+0xc>f01014832636,109642
f0101485:	5b                   	pop    %ebxf01014852640,109738
f0101486:	5d                   	pop    %ebpf01014862641,109782
f0101487:	c3                   	ret    f01014872642,109826
f0101488 <strcat>:f01014882644,109867
char *char2646,109887
f0101488:	55                   	push   %ebpf01014882649,109931
f0101489:	89 e5                	mov    %esp,%ebpf01014892650,109975
f010148b:	53                   	push   %ebxf010148b2651,110024
f010148c:	8b 5d 08             	mov    0x8(%ebp),%ebxf010148c2652,110068
f010148f:	53                   	push   %ebxf010148f2654,110146
f0101490:	e8 9c ff ff ff       	call   f0101431 <strlen>f01014902655,110190
f0101495:	83 c4 04             	add    $0x4,%espf01014952656,110247
f0101498:	ff 75 0c             	pushl  0xc(%ebp)f01014982658,110321
f010149b:	01 d8                	add    %ebx,%eaxf010149b2659,110370
f010149d:	50                   	push   %eaxf010149d2660,110419
f010149e:	e8 c5 ff ff ff       	call   f0101468 <strcpy>f010149e2661,110463
f01014a3:	89 d8                	mov    %ebx,%eaxf01014a32664,110535
f01014a5:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01014a52665,110584
f01014a8:	c9                   	leave  f01014a82666,110639
f01014a9:	c3                   	ret    f01014a92667,110679
f01014aa <strncpy>:f01014aa2669,110720
char *char2671,110741
f01014aa:	55                   	push   %ebpf01014aa2673,110799
f01014ab:	89 e5                	mov    %esp,%ebpf01014ab2674,110843
f01014ad:	56                   	push   %esif01014ad2675,110892
f01014ae:	53                   	push   %ebxf01014ae2676,110936
f01014af:	8b 75 08             	mov    0x8(%ebp),%esif01014af2677,110980
f01014b2:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01014b22678,111034
f01014b5:	89 f3                	mov    %esi,%ebxf01014b52679,111088
f01014b7:	03 5d 10             	add    0x10(%ebp),%ebxf01014b72680,111137
	ret = dst;ret2684,111216
f01014ba:	89 f2                	mov    %esi,%edxf01014ba2686,111258
f01014bc:	eb 0f                	jmp    f01014cd <strncpy+0x23>f01014bc2687,111307
f01014be:	83 c2 01             	add    $0x1,%edxf01014be2689,111387
f01014c1:	0f b6 01             	movzbl (%ecx),%eaxf01014c12690,111436
f01014c4:	88 42 ff             	mov    %al,-0x1(%edx)f01014c42691,111487
f01014c7:	80 39 01             	cmpb   $0x1,(%ecx)f01014c72695,111634
f01014ca:	83 d9 ff             	sbb    $0xffffffff,%ecxf01014ca2696,111685
f01014cd:	39 da                	cmp    %ebx,%edxf01014cd2698,111771
f01014cf:	75 ed                	jne    f01014be <strncpy+0x14>f01014cf2699,111820
f01014d1:	89 f0                	mov    %esi,%eaxf01014d12703,111901
f01014d3:	5b                   	pop    %ebxf01014d32704,111950
f01014d4:	5e                   	pop    %esif01014d42705,111994
f01014d5:	5d                   	pop    %ebpf01014d52706,112038
f01014d6:	c3                   	ret    f01014d62707,112082
f01014d7 <strlcpy>:f01014d72709,112123
size_tsize_t2711,112144
f01014d7:	55                   	push   %ebpf01014d72714,112202
f01014d8:	89 e5                	mov    %esp,%ebpf01014d82715,112246
f01014da:	56                   	push   %esif01014da2716,112295
f01014db:	53                   	push   %ebxf01014db2717,112339
f01014dc:	8b 75 08             	mov    0x8(%ebp),%esif01014dc2718,112383
f01014df:	8b 55 0c             	mov    0xc(%ebp),%edxf01014df2719,112437
f01014e2:	8b 4d 10             	mov    0x10(%ebp),%ecxf01014e22720,112491
f01014e5:	89 f0                	mov    %esi,%eaxf01014e52721,112546
f01014e7:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebxf01014e72722,112595
	dst_in = dst;dst_in2725,112673
f01014eb:	85 c9                	test   %ecx,%ecxf01014eb2727,112705
f01014ed:	75 0b                	jne    f01014fa <strlcpy+0x23>f01014ed2728,112754
f01014ef:	eb 17                	jmp    f0101508 <strlcpy+0x31>f01014ef2729,112817
f01014f1:	83 c2 01             	add    $0x1,%edxf01014f12732,112937
f01014f4:	83 c0 01             	add    $0x1,%eaxf01014f42733,112986
f01014f7:	88 48 ff             	mov    %cl,-0x1(%eax)f01014f72734,113035
f01014fa:	39 d8                	cmp    %ebx,%eaxf01014fa2736,113126
f01014fc:	74 07                	je     f0101505 <strlcpy+0x2e>f01014fc2737,113175
f01014fe:	0f b6 0a             	movzbl (%edx),%ecxf01014fe2738,113238
f0101501:	84 c9                	test   %cl,%clf01015012739,113289
f0101503:	75 ec                	jne    f01014f1 <strlcpy+0x1a>f01015032740,113336
f0101505:	c6 00 00             	movb   $0x0,(%eax)f01015052742,113414
f0101508:	29 f0                	sub    %esi,%eaxf01015082745,113490
f010150a:	5b                   	pop    %ebxf010150a2747,113541
f010150b:	5e                   	pop    %esif010150b2748,113585
f010150c:	5d                   	pop    %ebpf010150c2749,113629
f010150d:	c3                   	ret    f010150d2750,113673
f010150e <strcmp>:f010150e2752,113714
intint2754,113734
f010150e:	55                   	push   %ebpf010150e2757,113777
f010150f:	89 e5                	mov    %esp,%ebpf010150f2758,113821
f0101511:	8b 4d 08             	mov    0x8(%ebp),%ecxf01015112759,113870
f0101514:	8b 55 0c             	mov    0xc(%ebp),%edxf01015142760,113924
f0101517:	eb 06                	jmp    f010151f <strcmp+0x11>f01015172762,114002
f0101519:	83 c1 01             	add    $0x1,%ecxf01015192764,114076
f010151c:	83 c2 01             	add    $0x1,%edxf010151c2765,114125
f010151f:	0f b6 01             	movzbl (%ecx),%eaxf010151f2767,114198
f0101522:	84 c0                	test   %al,%alf01015222768,114249
f0101524:	74 04                	je     f010152a <strcmp+0x1c>f01015242769,114296
f0101526:	3a 02                	cmp    (%edx),%alf01015262770,114358
f0101528:	74 ef                	je     f0101519 <strcmp+0xb>f01015282771,114408
f010152a:	0f b6 c0             	movzbl %al,%eaxf010152a2773,114526
f010152d:	0f b6 12             	movzbl (%edx),%edxf010152d2774,114574
f0101530:	29 d0                	sub    %edx,%eaxf01015302775,114625
f0101532:	5d                   	pop    %ebpf01015322777,114676
f0101533:	c3                   	ret    f01015332778,114720
f0101534 <strncmp>:f01015342780,114761
intint2782,114782
f0101534:	55                   	push   %ebpf01015342785,114836
f0101535:	89 e5                	mov    %esp,%ebpf01015352786,114880
f0101537:	53                   	push   %ebxf01015372787,114929
f0101538:	8b 45 08             	mov    0x8(%ebp),%eaxf01015382788,114973
f010153b:	8b 55 0c             	mov    0xc(%ebp),%edxf010153b2789,115027
f010153e:	89 c3                	mov    %eax,%ebxf010153e2790,115081
f0101540:	03 5d 10             	add    0x10(%ebp),%ebxf01015402791,115130
f0101543:	eb 06                	jmp    f010154b <strncmp+0x17>f01015432793,115218
f0101545:	83 c0 01             	add    $0x1,%eaxf01015452795,115298
f0101548:	83 c2 01             	add    $0x1,%edxf01015482796,115347
f010154b:	39 d8                	cmp    %ebx,%eaxf010154b2798,115429
f010154d:	74 16                	je     f0101565 <strncmp+0x31>f010154d2799,115478
f010154f:	0f b6 08             	movzbl (%eax),%ecxf010154f2800,115541
f0101552:	84 c9                	test   %cl,%clf01015522801,115592
f0101554:	74 04                	je     f010155a <strncmp+0x26>f01015542802,115639
f0101556:	3a 0a                	cmp    (%edx),%clf01015562803,115702
f0101558:	74 eb                	je     f0101545 <strncmp+0x11>f01015582804,115752
f010155a:	0f b6 00             	movzbl (%eax),%eaxf010155a2809,115904
f010155d:	0f b6 12             	movzbl (%edx),%edxf010155d2810,115955
f0101560:	29 d0                	sub    %edx,%eaxf01015602811,116006
f0101562:	5b                   	pop    %ebxf01015622813,116057
f0101563:	5d                   	pop    %ebpf01015632814,116101
f0101564:	c3                   	ret    f01015642815,116145
f0101565:	b8 00 00 00 00       	mov    $0x0,%eaxf01015652817,116197
f010156a:	eb f6                	jmp    f0101562 <strncmp+0x2e>f010156a2818,116246
f010156c <strchr>:f010156c2820,116310
char *char2824,116436
f010156c:	55                   	push   %ebpf010156c2827,116475
f010156d:	89 e5                	mov    %esp,%ebpf010156d2828,116519
f010156f:	8b 45 08             	mov    0x8(%ebp),%eaxf010156f2829,116568
f0101572:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf01015722830,116622
f0101576:	0f b6 10             	movzbl (%eax),%edxf01015762832,116693
f0101579:	84 d2                	test   %dl,%dlf01015792833,116744
f010157b:	74 09                	je     f0101586 <strchr+0x1a>f010157b2834,116791
f010157d:	38 ca                	cmp    %cl,%dlf010157d2836,116868
f010157f:	74 0a                	je     f010158b <strchr+0x1f>f010157f2837,116915
f0101581:	83 c0 01             	add    $0x1,%eaxf01015812839,116994
f0101584:	eb f0                	jmp    f0101576 <strchr+0xa>f01015842840,117043
f0101586:	b8 00 00 00 00       	mov    $0x0,%eaxf01015862843,117137
f010158b:	5d                   	pop    %ebpf010158b2845,117188
f010158c:	c3                   	ret    f010158c2846,117232
f010158d <strfind>:f010158d2848,117273
char *char2852,117431
f010158d:	55                   	push   %ebpf010158d2855,117471
f010158e:	89 e5                	mov    %esp,%ebpf010158e2856,117515
f0101590:	8b 45 08             	mov    0x8(%ebp),%eaxf01015902857,117564
f0101593:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf01015932858,117618
f0101597:	eb 03                	jmp    f010159c <strfind+0xf>f01015972860,117689
f0101599:	83 c0 01             	add    $0x1,%eaxf01015992861,117751
f010159c:	0f b6 10             	movzbl (%eax),%edxf010159c2862,117800
f010159f:	38 ca                	cmp    %cl,%dlf010159f2864,117866
f01015a1:	74 04                	je     f01015a7 <strfind+0x1a>f01015a12865,117913
f01015a3:	84 d2                	test   %dl,%dlf01015a32866,117976
f01015a5:	75 f2                	jne    f0101599 <strfind+0xc>f01015a52867,118023
f01015a7:	5d                   	pop    %ebpf01015a72871,118117
f01015a8:	c3                   	ret    f01015a82872,118161
f01015a9 <memset>:f01015a92874,118202
void *void2877,118230
f01015a9:	55                   	push   %ebpf01015a92880,118272
f01015aa:	89 e5                	mov    %esp,%ebpf01015aa2881,118316
f01015ac:	57                   	push   %edif01015ac2882,118365
f01015ad:	56                   	push   %esif01015ad2883,118409
f01015ae:	53                   	push   %ebxf01015ae2884,118453
f01015af:	8b 7d 08             	mov    0x8(%ebp),%edif01015af2885,118497
f01015b2:	8b 4d 10             	mov    0x10(%ebp),%ecxf01015b22886,118551
f01015b5:	85 c9                	test   %ecx,%ecxf01015b52890,118630
f01015b7:	74 13                	je     f01015cc <memset+0x23>f01015b72891,118679
f01015b9:	f7 c7 03 00 00 00    	test   $0x3,%edif01015b92894,118787
f01015bf:	75 05                	jne    f01015c6 <memset+0x1d>f01015bf2895,118836
f01015c1:	f6 c1 03             	test   $0x3,%clf01015c12896,118898
f01015c4:	74 0d                	je     f01015d3 <memset+0x2a>f01015c42897,118946
		c = (c<<24)|(c<<16)|(c<<8)|c;c2898,119008
f01015c6:	8b 45 0c             	mov    0xc(%ebp),%eaxf01015c62904,119172
f01015c9:	fc                   	cld    f01015c92905,119226
f01015ca:	f3 aa                	rep stos %al,%es:(%edi)f01015ca2906,119266
f01015cc:	89 f8                	mov    %edi,%eaxf01015cc2911,119389
f01015ce:	5b                   	pop    %ebxf01015ce2912,119438
f01015cf:	5e                   	pop    %esif01015cf2913,119482
f01015d0:	5f                   	pop    %edif01015d02914,119526
f01015d1:	5d                   	pop    %ebpf01015d12915,119570
f01015d2:	c3                   	ret    f01015d22916,119614
f01015d3:	0f b6 55 0c          	movzbl 0xc(%ebp),%edxf01015d32918,119667
		c = (c<<24)|(c<<16)|(c<<8)|c;c2919,119721
f01015d7:	89 d3                	mov    %edx,%ebxf01015d72920,119753
f01015d9:	c1 e3 08             	shl    $0x8,%ebxf01015d92921,119802
f01015dc:	89 d0                	mov    %edx,%eaxf01015dc2922,119851
f01015de:	c1 e0 18             	shl    $0x18,%eaxf01015de2923,119900
f01015e1:	89 d6                	mov    %edx,%esif01015e12924,119950
f01015e3:	c1 e6 10             	shl    $0x10,%esif01015e32925,119999
f01015e6:	09 f0                	or     %esi,%eaxf01015e62926,120049
f01015e8:	09 c2                	or     %eax,%edxf01015e82927,120098
f01015ea:	09 da                	or     %ebx,%edxf01015ea2928,120147
f01015ec:	c1 e9 02             	shr    $0x2,%ecxf01015ec2930,120230
f01015ef:	89 d0                	mov    %edx,%eaxf01015ef2932,120313
f01015f1:	fc                   	cld    f01015f12933,120362
f01015f2:	f3 ab                	rep stos %eax,%es:(%edi)f01015f22934,120402
f01015f4:	eb d6                	jmp    f01015cc <memset+0x23>f01015f42935,120459
f01015f6 <memmove>:f01015f62937,120522
void *void2939,120543
f01015f6:	55                   	push   %ebpf01015f62942,120598
f01015f7:	89 e5                	mov    %esp,%ebpf01015f72943,120642
f01015f9:	57                   	push   %edif01015f92944,120691
f01015fa:	56                   	push   %esif01015fa2945,120735
f01015fb:	8b 45 08             	mov    0x8(%ebp),%eaxf01015fb2946,120779
f01015fe:	8b 75 0c             	mov    0xc(%ebp),%esif01015fe2947,120833
f0101601:	8b 4d 10             	mov    0x10(%ebp),%ecxf01016012948,120887
	s = src;s2952,120969
	d = dst;d2953,120979
f0101604:	39 c6                	cmp    %eax,%esif01016042955,121016
f0101606:	73 35                	jae    f010163d <memmove+0x47>f01016062956,121065
f0101608:	8d 14 0e             	lea    (%esi,%ecx,1),%edxf01016082957,121128
f010160b:	39 c2                	cmp    %eax,%edxf010160b2958,121186
f010160d:	76 2e                	jbe    f010163d <memmove+0x47>f010160d2959,121235
f010160f:	8d 3c 08             	lea    (%eax,%ecx,1),%edif010160f2962,121318
f0101612:	89 d6                	mov    %edx,%esif01016122964,121426
f0101614:	09 fe                	or     %edi,%esif01016142965,121475
f0101616:	f7 c6 03 00 00 00    	test   $0x3,%esif01016162966,121524
f010161c:	74 0c                	je     f010162a <memmove+0x34>f010161c2967,121573
f010161e:	83 ef 01             	sub    $0x1,%edif010161e2973,121827
f0101621:	8d 72 ff             	lea    -0x1(%edx),%esif01016212974,121876
f0101624:	fd                   	std    f01016242976,121966
f0101625:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f01016252977,122006
f0101627:	fc                   	cld    f01016272980,122151
f0101628:	eb 21                	jmp    f010164b <memmove+0x55>f01016282981,122191
f010162a:	f6 c1 03             	test   $0x3,%clf010162a2983,122304
f010162d:	75 ef                	jne    f010161e <memmove+0x28>f010162d2984,122352
f010162f:	83 ef 04             	sub    $0x4,%edif010162f2986,122473
f0101632:	8d 72 fc             	lea    -0x4(%edx),%esif01016322987,122522
f0101635:	c1 e9 02             	shr    $0x2,%ecxf01016352988,122577
f0101638:	fd                   	std    f01016382990,122661
f0101639:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01016392991,122701
f010163b:	eb ea                	jmp    f0101627 <memmove+0x31>f010163b2992,122765
f010163d:	89 f2                	mov    %esi,%edxf010163d2995,122888
f010163f:	09 c2                	or     %eax,%edxf010163f2996,122937
f0101641:	f6 c2 03             	test   $0x3,%dlf01016412997,122986
f0101644:	74 09                	je     f010164f <memmove+0x59>f01016442998,123034
f0101646:	89 c7                	mov    %eax,%edif01016463003,123228
f0101648:	fc                   	cld    f01016483004,123277
f0101649:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f01016493005,123317
f010164b:	5e                   	pop    %esif010164b3010,123451
f010164c:	5f                   	pop    %edif010164c3011,123495
f010164d:	5d                   	pop    %ebpf010164d3012,123539
f010164e:	c3                   	ret    f010164e3013,123583
f010164f:	f6 c1 03             	test   $0x3,%clf010164f3015,123673
f0101652:	75 f2                	jne    f0101646 <memmove+0x50>f01016523016,123721
f0101654:	c1 e9 02             	shr    $0x2,%ecxf01016543018,123838
f0101657:	89 c7                	mov    %eax,%edif01016573020,123922
f0101659:	fc                   	cld    f01016593021,123971
f010165a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f010165a3022,124011
f010165c:	eb ed                	jmp    f010164b <memmove+0x55>f010165c3023,124075
f010165e <memcpy>:f010165e3025,124139
void *void3029,124168
f010165e:	55                   	push   %ebpf010165e3032,124222
f010165f:	89 e5                	mov    %esp,%ebpf010165f3033,124266
f0101661:	ff 75 10             	pushl  0x10(%ebp)f01016613035,124345
f0101664:	ff 75 0c             	pushl  0xc(%ebp)f01016643036,124395
f0101667:	ff 75 08             	pushl  0x8(%ebp)f01016673037,124444
f010166a:	e8 87 ff ff ff       	call   f01015f6 <memmove>f010166a3038,124493
f010166f:	c9                   	leave  f010166f3040,124553
f0101670:	c3                   	ret    f01016703041,124593
f0101671 <memcmp>:f01016713043,124634
intint3045,124654
f0101671:	55                   	push   %ebpf01016713048,124709
f0101672:	89 e5                	mov    %esp,%ebpf01016723049,124753
f0101674:	56                   	push   %esif01016743050,124802
f0101675:	53                   	push   %ebxf01016753051,124846
f0101676:	8b 45 08             	mov    0x8(%ebp),%eaxf01016763052,124890
f0101679:	8b 55 0c             	mov    0xc(%ebp),%edxf01016793053,124944
f010167c:	89 c6                	mov    %eax,%esif010167c3054,124998
f010167e:	03 75 10             	add    0x10(%ebp),%esif010167e3055,125047
f0101681:	39 f0                	cmp    %esi,%eaxf01016813060,125208
f0101683:	74 1c                	je     f01016a1 <memcmp+0x30>f01016833061,125257
f0101685:	0f b6 08             	movzbl (%eax),%ecxf01016853063,125337
f0101688:	0f b6 1a             	movzbl (%edx),%ebxf01016883064,125388
f010168b:	38 d9                	cmp    %bl,%clf010168b3065,125439
f010168d:	75 08                	jne    f0101697 <memcmp+0x26>f010168d3066,125486
f010168f:	83 c0 01             	add    $0x1,%eaxf010168f3069,125595
f0101692:	83 c2 01             	add    $0x1,%edxf01016923070,125644
f0101695:	eb ea                	jmp    f0101681 <memcmp+0x10>f01016953071,125693
f0101697:	0f b6 c1             	movzbl %cl,%eaxf01016973073,125788
f010169a:	0f b6 db             	movzbl %bl,%ebxf010169a3074,125836
f010169d:	29 d8                	sub    %ebx,%eaxf010169d3075,125884
f010169f:	eb 05                	jmp    f01016a6 <memcmp+0x35>f010169f3076,125933
f01016a1:	b8 00 00 00 00       	mov    $0x0,%eaxf01016a13080,126010
f01016a6:	5b                   	pop    %ebxf01016a63082,126061
f01016a7:	5e                   	pop    %esif01016a73083,126105
f01016a8:	5d                   	pop    %ebpf01016a83084,126149
f01016a9:	c3                   	ret    f01016a93085,126193
f01016aa <memfind>:f01016aa3087,126234
void *void3089,126255
f01016aa:	55                   	push   %ebpf01016aa3092,126304
f01016ab:	89 e5                	mov    %esp,%ebpf01016ab3093,126348
f01016ad:	8b 45 08             	mov    0x8(%ebp),%eaxf01016ad3094,126397
f01016b0:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01016b03095,126451
f01016b3:	89 c2                	mov    %eax,%edxf01016b33097,126547
f01016b5:	03 55 10             	add    0x10(%ebp),%edxf01016b53098,126596
f01016b8:	39 d0                	cmp    %edx,%eaxf01016b83100,126674
f01016ba:	73 09                	jae    f01016c5 <memfind+0x1b>f01016ba3101,126723
f01016bc:	38 08                	cmp    %cl,(%eax)f01016bc3103,126841
f01016be:	74 05                	je     f01016c5 <memfind+0x1b>f01016be3104,126891
f01016c0:	83 c0 01             	add    $0x1,%eaxf01016c03106,126977
f01016c3:	eb f3                	jmp    f01016b8 <memfind+0xe>f01016c33107,127026
f01016c5:	5d                   	pop    %ebpf01016c53111,127120
f01016c6:	c3                   	ret    f01016c63112,127164
f01016c7 <strtol>:f01016c73114,127205
longlong3116,127225
f01016c7:	55                   	push   %ebpf01016c73119,127279
f01016c8:	89 e5                	mov    %esp,%ebpf01016c83120,127323
f01016ca:	57                   	push   %edif01016ca3121,127372
f01016cb:	56                   	push   %esif01016cb3122,127416
f01016cc:	53                   	push   %ebxf01016cc3123,127460
f01016cd:	8b 4d 08             	mov    0x8(%ebp),%ecxf01016cd3124,127504
f01016d0:	8b 5d 10             	mov    0x10(%ebp),%ebxf01016d03125,127558
f01016d3:	eb 03                	jmp    f01016d8 <strtol+0x11>f01016d33131,127706
f01016d5:	83 c1 01             	add    $0x1,%ecxf01016d53133,127775
f01016d8:	0f b6 01             	movzbl (%ecx),%eaxf01016d83135,127857
f01016db:	3c 20                	cmp    $0x20,%alf01016db3136,127908
f01016dd:	74 f6                	je     f01016d5 <strtol+0xe>f01016dd3137,127957
f01016df:	3c 09                	cmp    $0x9,%alf01016df3138,128018
f01016e1:	74 f2                	je     f01016d5 <strtol+0xe>f01016e13139,128066
f01016e3:	3c 2b                	cmp    $0x2b,%alf01016e33143,128164
f01016e5:	74 2e                	je     f0101715 <strtol+0x4e>f01016e53144,128213
f01016e7:	bf 00 00 00 00       	mov    $0x0,%edif01016e73146,128289
f01016ec:	3c 2d                	cmp    $0x2d,%alf01016ec3149,128366
f01016ee:	74 2f                	je     f010171f <strtol+0x58>f01016ee3150,128415
f01016f0:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebxf01016f03155,128587
f01016f6:	75 05                	jne    f01016fd <strtol+0x36>f01016f63156,128643
f01016f8:	80 39 30             	cmpb   $0x30,(%ecx)f01016f83157,128705
f01016fb:	74 2c                	je     f0101729 <strtol+0x62>f01016fb3158,128757
f01016fd:	85 db                	test   %ebx,%ebxf01016fd3161,128876
f01016ff:	75 0a                	jne    f010170b <strtol+0x44>f01016ff3162,128925
		base = 10;base3165,129025
f0101701:	bb 0a 00 00 00       	mov    $0xa,%ebxf01017013166,129038
f0101706:	80 39 30             	cmpb   $0x30,(%ecx)f01017063168,129123
f0101709:	74 28                	je     f0101733 <strtol+0x6c>f01017093169,129175
		base = 10;base3170,129237
f010170b:	b8 00 00 00 00       	mov    $0x0,%eaxf010170b3171,129250
f0101710:	89 5d 10             	mov    %ebx,0x10(%ebp)f01017103172,129299
f0101713:	eb 50                	jmp    f0101765 <strtol+0x9e>f01017133173,129354
f0101715:	83 c1 01             	add    $0x1,%ecxf01017153175,129423
f0101718:	bf 00 00 00 00       	mov    $0x0,%edif01017183177,129486
f010171d:	eb d1                	jmp    f01016f0 <strtol+0x29>f010171d3178,129535
f010171f:	83 c1 01             	add    $0x1,%ecxf010171f3180,129613
f0101722:	bf 01 00 00 00       	mov    $0x1,%edif01017223181,129662
f0101727:	eb c7                	jmp    f01016f0 <strtol+0x29>f01017273182,129711
f0101729:	80 79 01 78          	cmpb   $0x78,0x1(%ecx)f01017293184,129837
f010172d:	74 0e                	je     f010173d <strtol+0x76>f010172d3185,129892
f010172f:	85 db                	test   %ebx,%ebxf010172f3187,129990
f0101731:	75 d8                	jne    f010170b <strtol+0x44>f01017313188,130039
f0101733:	83 c1 01             	add    $0x1,%ecxf01017333190,130118
f0101736:	bb 08 00 00 00       	mov    $0x8,%ebxf01017363191,130167
f010173b:	eb ce                	jmp    f010170b <strtol+0x44>f010173b3192,130216
f010173d:	83 c1 02             	add    $0x2,%ecxf010173d3194,130299
f0101740:	bb 10 00 00 00       	mov    $0x10,%ebxf01017403195,130348
f0101745:	eb c4                	jmp    f010170b <strtol+0x44>f01017453196,130398
			dig = *s - '0';dig3201,130515
f0101747:	8d 72 9f             	lea    -0x61(%edx),%esif01017473203,130569
f010174a:	89 f3                	mov    %esi,%ebxf010174a3204,130625
f010174c:	80 fb 19             	cmp    $0x19,%blf010174c3205,130674
f010174f:	77 29                	ja     f010177a <strtol+0xb3>f010174f3206,130723
			dig = *s - 'a' + 10;dig3207,130785
f0101751:	0f be d2             	movsbl %dl,%edxf01017513208,130809
f0101754:	83 ea 57             	sub    $0x57,%edxf01017543209,130857
			dig = *s - 'A' + 10;dig3211,130942
f0101757:	3b 55 10             	cmp    0x10(%ebp),%edxf01017573215,131002
f010175a:	7d 30                	jge    f010178c <strtol+0xc5>f010175a3216,131057
f010175c:	83 c1 01             	add    $0x1,%ecxf010175c3219,131162
f010175f:	0f af 45 10          	imul   0x10(%ebp),%eaxf010175f3220,131211
f0101763:	01 d0                	add    %edx,%eaxf01017633221,131266
f0101765:	0f b6 11             	movzbl (%ecx),%edxf01017653223,131345
f0101768:	8d 72 d0             	lea    -0x30(%edx),%esif01017683224,131396
f010176b:	89 f3                	mov    %esi,%ebxf010176b3225,131452
f010176d:	80 fb 09             	cmp    $0x9,%blf010176d3226,131501
f0101770:	77 d5                	ja     f0101747 <strtol+0x80>f01017703227,131549
			dig = *s - '0';dig3228,131611
f0101772:	0f be d2             	movsbl %dl,%edxf01017723229,131630
f0101775:	83 ea 30             	sub    $0x30,%edxf01017753230,131678
f0101778:	eb dd                	jmp    f0101757 <strtol+0x90>f01017783231,131728
f010177a:	8d 72 bf             	lea    -0x41(%edx),%esif010177a3233,131825
f010177d:	89 f3                	mov    %esi,%ebxf010177d3234,131881
f010177f:	80 fb 19             	cmp    $0x19,%blf010177f3235,131930
f0101782:	77 08                	ja     f010178c <strtol+0xc5>f01017823236,131979
			dig = *s - 'A' + 10;dig3237,132041
f0101784:	0f be d2             	movsbl %dl,%edxf01017843238,132065
f0101787:	83 ea 37             	sub    $0x37,%edxf01017873239,132113
f010178a:	eb cb                	jmp    f0101757 <strtol+0x90>f010178a3240,132163
f010178c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)f010178c3245,132282
f0101790:	74 05                	je     f0101797 <strtol+0xd0>f01017903246,132336
f0101792:	8b 75 0c             	mov    0xc(%ebp),%esif01017923248,132422
f0101795:	89 0e                	mov    %ecx,(%esi)f01017953249,132476
f0101797:	89 c2                	mov    %eax,%edxf01017973251,132555
f0101799:	f7 da                	neg    %edxf01017993252,132604
f010179b:	85 ff                	test   %edi,%edif010179b3253,132648
f010179d:	0f 45 c2             	cmovne %edx,%eaxf010179d3254,132697
f01017a0:	5b                   	pop    %ebxf01017a03256,132748
f01017a1:	5e                   	pop    %esif01017a13257,132792
f01017a2:	5f                   	pop    %edif01017a23258,132836
f01017a3:	5d                   	pop    %ebpf01017a33259,132880
f01017a4:	c3                   	ret    f01017a43260,132924
f01017a5:	66 90                	xchg   %ax,%axf01017a53261,132964
f01017a7:	66 90                	xchg   %ax,%axf01017a73262,133011
f01017a9:	66 90                	xchg   %ax,%axf01017a93263,133058
f01017ab:	66 90                	xchg   %ax,%axf01017ab3264,133105
f01017ad:	66 90                	xchg   %ax,%axf01017ad3265,133152
f01017af:	90                   	nopf01017af3266,133199
f01017b0 <__udivdi3>:f01017b03268,133236
f01017b0:	55                   	push   %ebpf01017b03269,133258
f01017b1:	57                   	push   %edif01017b13270,133302
f01017b2:	56                   	push   %esif01017b23271,133346
f01017b3:	53                   	push   %ebxf01017b33272,133390
f01017b4:	83 ec 1c             	sub    $0x1c,%espf01017b43273,133434
f01017b7:	8b 54 24 3c          	mov    0x3c(%esp),%edxf01017b73274,133484
f01017bb:	8b 6c 24 30          	mov    0x30(%esp),%ebpf01017bb3275,133539
f01017bf:	8b 74 24 34          	mov    0x34(%esp),%esif01017bf3276,133594
f01017c3:	8b 5c 24 38          	mov    0x38(%esp),%ebxf01017c33277,133649
f01017c7:	85 d2                	test   %edx,%edxf01017c73278,133704
f01017c9:	75 35                	jne    f0101800 <__udivdi3+0x50>f01017c93279,133753
f01017cb:	39 f3                	cmp    %esi,%ebxf01017cb3280,133818
f01017cd:	0f 87 bd 00 00 00    	ja     f0101890 <__udivdi3+0xe0>f01017cd3281,133867
f01017d3:	85 db                	test   %ebx,%ebxf01017d33282,133932
f01017d5:	89 d9                	mov    %ebx,%ecxf01017d53283,133981
f01017d7:	75 0b                	jne    f01017e4 <__udivdi3+0x34>f01017d73284,134030
f01017d9:	b8 01 00 00 00       	mov    $0x1,%eaxf01017d93285,134095
f01017de:	31 d2                	xor    %edx,%edxf01017de3286,134144
f01017e0:	f7 f3                	div    %ebxf01017e03287,134193
f01017e2:	89 c1                	mov    %eax,%ecxf01017e23288,134237
f01017e4:	31 d2                	xor    %edx,%edxf01017e43289,134286
f01017e6:	89 f0                	mov    %esi,%eaxf01017e63290,134335
f01017e8:	f7 f1                	div    %ecxf01017e83291,134384
f01017ea:	89 c6                	mov    %eax,%esif01017ea3292,134428
f01017ec:	89 e8                	mov    %ebp,%eaxf01017ec3293,134477
f01017ee:	89 f7                	mov    %esi,%edif01017ee3294,134526
f01017f0:	f7 f1                	div    %ecxf01017f03295,134575
f01017f2:	89 fa                	mov    %edi,%edxf01017f23296,134619
f01017f4:	83 c4 1c             	add    $0x1c,%espf01017f43297,134668
f01017f7:	5b                   	pop    %ebxf01017f73298,134718
f01017f8:	5e                   	pop    %esif01017f83299,134762
f01017f9:	5f                   	pop    %edif01017f93300,134806
f01017fa:	5d                   	pop    %ebpf01017fa3301,134850
f01017fb:	c3                   	ret    f01017fb3302,134894
f01017fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif01017fc3303,134934
f0101800:	39 f2                	cmp    %esi,%edxf01018003304,134995
f0101802:	77 7c                	ja     f0101880 <__udivdi3+0xd0>f01018023305,135044
f0101804:	0f bd fa             	bsr    %edx,%edif01018043306,135109
f0101807:	83 f7 1f             	xor    $0x1f,%edif01018073307,135158
f010180a:	0f 84 98 00 00 00    	je     f01018a8 <__udivdi3+0xf8>f010180a3308,135208
f0101810:	89 f9                	mov    %edi,%ecxf01018103309,135273
f0101812:	b8 20 00 00 00       	mov    $0x20,%eaxf01018123310,135322
f0101817:	29 f8                	sub    %edi,%eaxf01018173311,135372
f0101819:	d3 e2                	shl    %cl,%edxf01018193312,135421
f010181b:	89 54 24 08          	mov    %edx,0x8(%esp)f010181b3313,135469
f010181f:	89 c1                	mov    %eax,%ecxf010181f3314,135523
f0101821:	89 da                	mov    %ebx,%edxf01018213315,135572
f0101823:	d3 ea                	shr    %cl,%edxf01018233316,135621
f0101825:	8b 4c 24 08          	mov    0x8(%esp),%ecxf01018253317,135669
f0101829:	09 d1                	or     %edx,%ecxf01018293318,135723
f010182b:	89 f2                	mov    %esi,%edxf010182b3319,135772
f010182d:	89 4c 24 08          	mov    %ecx,0x8(%esp)f010182d3320,135821
f0101831:	89 f9                	mov    %edi,%ecxf01018313321,135875
f0101833:	d3 e3                	shl    %cl,%ebxf01018333322,135924
f0101835:	89 c1                	mov    %eax,%ecxf01018353323,135972
f0101837:	d3 ea                	shr    %cl,%edxf01018373324,136021
f0101839:	89 f9                	mov    %edi,%ecxf01018393325,136069
f010183b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)f010183b3326,136118
f010183f:	d3 e6                	shl    %cl,%esif010183f3327,136172
f0101841:	89 eb                	mov    %ebp,%ebxf01018413328,136220
f0101843:	89 c1                	mov    %eax,%ecxf01018433329,136269
f0101845:	d3 eb                	shr    %cl,%ebxf01018453330,136318
f0101847:	09 de                	or     %ebx,%esif01018473331,136366
f0101849:	89 f0                	mov    %esi,%eaxf01018493332,136415
f010184b:	f7 74 24 08          	divl   0x8(%esp)f010184b3333,136464
f010184f:	89 d6                	mov    %edx,%esif010184f3334,136513
f0101851:	89 c3                	mov    %eax,%ebxf01018513335,136562
f0101853:	f7 64 24 0c          	mull   0xc(%esp)f01018533336,136611
f0101857:	39 d6                	cmp    %edx,%esif01018573337,136660
f0101859:	72 0c                	jb     f0101867 <__udivdi3+0xb7>f01018593338,136709
f010185b:	89 f9                	mov    %edi,%ecxf010185b3339,136774
f010185d:	d3 e5                	shl    %cl,%ebpf010185d3340,136823
f010185f:	39 c5                	cmp    %eax,%ebpf010185f3341,136871
f0101861:	73 5d                	jae    f01018c0 <__udivdi3+0x110>f01018613342,136920
f0101863:	39 d6                	cmp    %edx,%esif01018633343,136986
f0101865:	75 59                	jne    f01018c0 <__udivdi3+0x110>f01018653344,137035
f0101867:	8d 43 ff             	lea    -0x1(%ebx),%eaxf01018673345,137101
f010186a:	31 ff                	xor    %edi,%edif010186a3346,137156
f010186c:	89 fa                	mov    %edi,%edxf010186c3347,137205
f010186e:	83 c4 1c             	add    $0x1c,%espf010186e3348,137254
f0101871:	5b                   	pop    %ebxf01018713349,137304
f0101872:	5e                   	pop    %esif01018723350,137348
f0101873:	5f                   	pop    %edif01018733351,137392
f0101874:	5d                   	pop    %ebpf01018743352,137436
f0101875:	c3                   	ret    f01018753353,137480
f0101876:	8d 76 00             	lea    0x0(%esi),%esif01018763354,137520
f0101879:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif01018793355,137574
f0101880:	31 ff                	xor    %edi,%edif01018803356,137635
f0101882:	31 c0                	xor    %eax,%eaxf01018823357,137684
f0101884:	89 fa                	mov    %edi,%edxf01018843358,137733
f0101886:	83 c4 1c             	add    $0x1c,%espf01018863359,137782
f0101889:	5b                   	pop    %ebxf01018893360,137832
f010188a:	5e                   	pop    %esif010188a3361,137876
f010188b:	5f                   	pop    %edif010188b3362,137920
f010188c:	5d                   	pop    %ebpf010188c3363,137964
f010188d:	c3                   	ret    f010188d3364,138008
f010188e:	66 90                	xchg   %ax,%axf010188e3365,138048
f0101890:	31 ff                	xor    %edi,%edif01018903366,138095
f0101892:	89 e8                	mov    %ebp,%eaxf01018923367,138144
f0101894:	89 f2                	mov    %esi,%edxf01018943368,138193
f0101896:	f7 f3                	div    %ebxf01018963369,138242
f0101898:	89 fa                	mov    %edi,%edxf01018983370,138286
f010189a:	83 c4 1c             	add    $0x1c,%espf010189a3371,138335
f010189d:	5b                   	pop    %ebxf010189d3372,138385
f010189e:	5e                   	pop    %esif010189e3373,138429
f010189f:	5f                   	pop    %edif010189f3374,138473
f01018a0:	5d                   	pop    %ebpf01018a03375,138517
f01018a1:	c3                   	ret    f01018a13376,138561
f01018a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif01018a23377,138601
f01018a8:	39 f2                	cmp    %esi,%edxf01018a83378,138655
f01018aa:	72 06                	jb     f01018b2 <__udivdi3+0x102>f01018aa3379,138704
f01018ac:	31 c0                	xor    %eax,%eaxf01018ac3380,138770
f01018ae:	39 eb                	cmp    %ebp,%ebxf01018ae3381,138819
f01018b0:	77 d2                	ja     f0101884 <__udivdi3+0xd4>f01018b03382,138868
f01018b2:	b8 01 00 00 00       	mov    $0x1,%eaxf01018b23383,138933
f01018b7:	eb cb                	jmp    f0101884 <__udivdi3+0xd4>f01018b73384,138982
f01018b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01018b93385,139047
f01018c0:	89 d8                	mov    %ebx,%eaxf01018c03386,139108
f01018c2:	31 ff                	xor    %edi,%edif01018c23387,139157
f01018c4:	eb be                	jmp    f0101884 <__udivdi3+0xd4>f01018c43388,139206
f01018c6:	66 90                	xchg   %ax,%axf01018c63389,139271
f01018c8:	66 90                	xchg   %ax,%axf01018c83390,139318
f01018ca:	66 90                	xchg   %ax,%axf01018ca3391,139365
f01018cc:	66 90                	xchg   %ax,%axf01018cc3392,139412
f01018ce:	66 90                	xchg   %ax,%axf01018ce3393,139459
f01018d0 <__umoddi3>:f01018d03395,139507
f01018d0:	55                   	push   %ebpf01018d03396,139529
f01018d1:	57                   	push   %edif01018d13397,139573
f01018d2:	56                   	push   %esif01018d23398,139617
f01018d3:	53                   	push   %ebxf01018d33399,139661
f01018d4:	83 ec 1c             	sub    $0x1c,%espf01018d43400,139705
f01018d7:	8b 6c 24 3c          	mov    0x3c(%esp),%ebpf01018d73401,139755
f01018db:	8b 74 24 30          	mov    0x30(%esp),%esif01018db3402,139810
f01018df:	8b 5c 24 34          	mov    0x34(%esp),%ebxf01018df3403,139865
f01018e3:	8b 7c 24 38          	mov    0x38(%esp),%edif01018e33404,139920
f01018e7:	85 ed                	test   %ebp,%ebpf01018e73405,139975
f01018e9:	89 f0                	mov    %esi,%eaxf01018e93406,140024
f01018eb:	89 da                	mov    %ebx,%edxf01018eb3407,140073
f01018ed:	75 19                	jne    f0101908 <__umoddi3+0x38>f01018ed3408,140122
f01018ef:	39 df                	cmp    %ebx,%edif01018ef3409,140187
f01018f1:	0f 86 b1 00 00 00    	jbe    f01019a8 <__umoddi3+0xd8>f01018f13410,140236
f01018f7:	f7 f7                	div    %edif01018f73411,140301
f01018f9:	89 d0                	mov    %edx,%eaxf01018f93412,140345
f01018fb:	31 d2                	xor    %edx,%edxf01018fb3413,140394
f01018fd:	83 c4 1c             	add    $0x1c,%espf01018fd3414,140443
f0101900:	5b                   	pop    %ebxf01019003415,140493
f0101901:	5e                   	pop    %esif01019013416,140537
f0101902:	5f                   	pop    %edif01019023417,140581
f0101903:	5d                   	pop    %ebpf01019033418,140625
f0101904:	c3                   	ret    f01019043419,140669
f0101905:	8d 76 00             	lea    0x0(%esi),%esif01019053420,140709
f0101908:	39 dd                	cmp    %ebx,%ebpf01019083421,140763
f010190a:	77 f1                	ja     f01018fd <__umoddi3+0x2d>f010190a3422,140812
f010190c:	0f bd cd             	bsr    %ebp,%ecxf010190c3423,140877
f010190f:	83 f1 1f             	xor    $0x1f,%ecxf010190f3424,140926
f0101912:	89 4c 24 04          	mov    %ecx,0x4(%esp)f01019123425,140976
f0101916:	0f 84 b4 00 00 00    	je     f01019d0 <__umoddi3+0x100>f01019163426,141030
f010191c:	b8 20 00 00 00       	mov    $0x20,%eaxf010191c3427,141096
f0101921:	89 c2                	mov    %eax,%edxf01019213428,141146
f0101923:	8b 44 24 04          	mov    0x4(%esp),%eaxf01019233429,141195
f0101927:	29 c2                	sub    %eax,%edxf01019273430,141249
f0101929:	89 c1                	mov    %eax,%ecxf01019293431,141298
f010192b:	89 f8                	mov    %edi,%eaxf010192b3432,141347
f010192d:	d3 e5                	shl    %cl,%ebpf010192d3433,141396
f010192f:	89 d1                	mov    %edx,%ecxf010192f3434,141444
f0101931:	89 54 24 0c          	mov    %edx,0xc(%esp)f01019313435,141493
f0101935:	d3 e8                	shr    %cl,%eaxf01019353436,141547
f0101937:	09 c5                	or     %eax,%ebpf01019373437,141595
f0101939:	8b 44 24 04          	mov    0x4(%esp),%eaxf01019393438,141644
f010193d:	89 c1                	mov    %eax,%ecxf010193d3439,141698
f010193f:	d3 e7                	shl    %cl,%edif010193f3440,141747
f0101941:	89 d1                	mov    %edx,%ecxf01019413441,141795
f0101943:	89 7c 24 08          	mov    %edi,0x8(%esp)f01019433442,141844
f0101947:	89 df                	mov    %ebx,%edif01019473443,141898
f0101949:	d3 ef                	shr    %cl,%edif01019493444,141947
f010194b:	89 c1                	mov    %eax,%ecxf010194b3445,141995
f010194d:	89 f0                	mov    %esi,%eaxf010194d3446,142044
f010194f:	d3 e3                	shl    %cl,%ebxf010194f3447,142093
f0101951:	89 d1                	mov    %edx,%ecxf01019513448,142141
f0101953:	89 fa                	mov    %edi,%edxf01019533449,142190
f0101955:	d3 e8                	shr    %cl,%eaxf01019553450,142239
f0101957:	0f b6 4c 24 04       	movzbl 0x4(%esp),%ecxf01019573451,142287
f010195c:	09 d8                	or     %ebx,%eaxf010195c3452,142341
f010195e:	f7 f5                	div    %ebpf010195e3453,142390
f0101960:	d3 e6                	shl    %cl,%esif01019603454,142434
f0101962:	89 d1                	mov    %edx,%ecxf01019623455,142482
f0101964:	f7 64 24 08          	mull   0x8(%esp)f01019643456,142531
f0101968:	39 d1                	cmp    %edx,%ecxf01019683457,142580
f010196a:	89 c3                	mov    %eax,%ebxf010196a3458,142629
f010196c:	89 d7                	mov    %edx,%edif010196c3459,142678
f010196e:	72 06                	jb     f0101976 <__umoddi3+0xa6>f010196e3460,142727
f0101970:	75 0e                	jne    f0101980 <__umoddi3+0xb0>f01019703461,142792
f0101972:	39 c6                	cmp    %eax,%esif01019723462,142857
f0101974:	73 0a                	jae    f0101980 <__umoddi3+0xb0>f01019743463,142906
f0101976:	2b 44 24 08          	sub    0x8(%esp),%eaxf01019763464,142971
f010197a:	19 ea                	sbb    %ebp,%edxf010197a3465,143025
f010197c:	89 d7                	mov    %edx,%edif010197c3466,143074
f010197e:	89 c3                	mov    %eax,%ebxf010197e3467,143123
f0101980:	89 ca                	mov    %ecx,%edxf01019803468,143172
f0101982:	0f b6 4c 24 0c       	movzbl 0xc(%esp),%ecxf01019823469,143221
f0101987:	29 de                	sub    %ebx,%esif01019873470,143275
f0101989:	19 fa                	sbb    %edi,%edxf01019893471,143324
f010198b:	8b 5c 24 04          	mov    0x4(%esp),%ebxf010198b3472,143373
f010198f:	89 d0                	mov    %edx,%eaxf010198f3473,143427
f0101991:	d3 e0                	shl    %cl,%eaxf01019913474,143476
f0101993:	89 d9                	mov    %ebx,%ecxf01019933475,143524
f0101995:	d3 ee                	shr    %cl,%esif01019953476,143573
f0101997:	d3 ea                	shr    %cl,%edxf01019973477,143621
f0101999:	09 f0                	or     %esi,%eaxf01019993478,143669
f010199b:	83 c4 1c             	add    $0x1c,%espf010199b3479,143718
f010199e:	5b                   	pop    %ebxf010199e3480,143768
f010199f:	5e                   	pop    %esif010199f3481,143812
f01019a0:	5f                   	pop    %edif01019a03482,143856
f01019a1:	5d                   	pop    %ebpf01019a13483,143900
f01019a2:	c3                   	ret    f01019a23484,143944
f01019a3:	90                   	nopf01019a33485,143984
f01019a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif01019a43486,144020
f01019a8:	85 ff                	test   %edi,%edif01019a83487,144081
f01019aa:	89 f9                	mov    %edi,%ecxf01019aa3488,144130
f01019ac:	75 0b                	jne    f01019b9 <__umoddi3+0xe9>f01019ac3489,144179
f01019ae:	b8 01 00 00 00       	mov    $0x1,%eaxf01019ae3490,144244
f01019b3:	31 d2                	xor    %edx,%edxf01019b33491,144293
f01019b5:	f7 f7                	div    %edif01019b53492,144342
f01019b7:	89 c1                	mov    %eax,%ecxf01019b73493,144386
f01019b9:	89 d8                	mov    %ebx,%eaxf01019b93494,144435
f01019bb:	31 d2                	xor    %edx,%edxf01019bb3495,144484
f01019bd:	f7 f1                	div    %ecxf01019bd3496,144533
f01019bf:	89 f0                	mov    %esi,%eaxf01019bf3497,144577
f01019c1:	f7 f1                	div    %ecxf01019c13498,144626
f01019c3:	e9 31 ff ff ff       	jmp    f01018f9 <__umoddi3+0x29>f01019c33499,144670
f01019c8:	90                   	nopf01019c83500,144735
f01019c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01019c93501,144771
f01019d0:	39 dd                	cmp    %ebx,%ebpf01019d03502,144832
f01019d2:	72 08                	jb     f01019dc <__umoddi3+0x10c>f01019d23503,144881
f01019d4:	39 f7                	cmp    %esi,%edif01019d43504,144947
f01019d6:	0f 87 21 ff ff ff    	ja     f01018fd <__umoddi3+0x2d>f01019d63505,144996
f01019dc:	89 da                	mov    %ebx,%edxf01019dc3506,145061
f01019de:	89 f0                	mov    %esi,%eaxf01019de3507,145110
f01019e0:	29 f8                	sub    %edi,%eaxf01019e03508,145159
f01019e2:	19 ea                	sbb    %ebp,%edxf01019e23509,145208
f01019e4:	e9 14 ff ff ff       	jmp    f01018fd <__umoddi3+0x2d>f01019e43510,145257

fs/test.c,99
static char *msg = "This is the NEW message of the day!\n\n";msg6,63
fs_test(void)fs_test9,131

user/sendpage.c,265
const char *str1 = "hello child environment! how are you?";str16,128
const char *str2 = "hello parent environment! I'm good.";str27,188
#define TEMP_ADDR	TEMP_ADDR9,247
#define TEMP_ADDR_CHILD	TEMP_ADDR_CHILD10,283
umain(int argc, char **argv)umain13,331

conf/env.mk,14
V = @V9,359

conf/lab.mk,71
LAB=1LAB1,0
PACKAGEDATE=Thu Aug 30 15:16:04 EDT 2018PACKAGEDATE2,6

kern/console.h,275
#define _CONSOLE_H__CONSOLE_H_4,68
#define MONO_BASE	MONO_BASE11,215
#define MONO_BUF	MONO_BUF12,239
#define CGA_BASE	CGA_BASE13,264
#define CGA_BUF	CGA_BUF14,287
#define CRT_ROWS	CRT_ROWS16,313
#define CRT_COLS	CRT_COLS17,333
#define CRT_SIZE	CRT_SIZE18,353

kern/monitor.c,661
#define CMDBUF_SIZE	CMDBUF_SIZE14,314
struct Command {Command17,371
	const char *name;name18,388
	const char *desc;desc19,407
	int (*func)(int argc, char** argv, struct Trapframe* tf);func21,465
static struct Command commands[] = {commands24,528
mon_help(int argc, char **argv, struct Trapframe *tf)mon_help32,764
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)mon_kerninfo42,951
mon_backtrace(int argc, char **argv, struct Trapframe *tf)mon_backtrace58,1572
#define WHITESPACE WHITESPACE68,1719
#define MAXARGS MAXARGS69,1748
runcmd(char *buf, struct Trapframe *tf)runcmd72,1779
monitor(struct Trapframe *tf)monitor111,2571

kern/kdebug.h,524
#define JOS_KERN_KDEBUG_HJOS_KERN_KDEBUG_H2,26
struct Eipdebuginfo {Eipdebuginfo7,137
	const char *eip_file;		// Source code filename for EIPeip_file8,159
	int eip_line;			// Source code linenumber for EIPeip_line9,215
	const char *eip_fn_name;	// Name of function containing EIPeip_fn_name11,267
	int eip_fn_namelen;		// Length of function nameeip_fn_namelen13,366
	uintptr_t eip_fn_addr;		// Address of start of functioneip_fn_addr14,415
	int eip_fn_narg;		// Number of function argumentseip_fn_narg15,472

kern/console.c,2309
delay(void)delay16,352
#define COM1	COM126,448
#define COM_RX	COM_RX28,469
#define COM_TX	COM_TX29,518
#define COM_DLL	COM_DLL30,569
#define COM_DLM	COM_DLM31,623
#define COM_IER	COM_IER32,678
#define   COM_IER_RDI	COM_IER_RDI33,731
#define COM_IIR	COM_IIR34,794
#define COM_FCR	COM_FCR35,842
#define COM_LCR	COM_LCR36,891
#define	  COM_LCR_DLAB	COM_LCR_DLAB37,940
#define	  COM_LCR_WLEN8	COM_LCR_WLEN838,998
#define COM_MCR	COM_MCR39,1051
#define	  COM_MCR_RTS	COM_MCR_RTS40,1101
#define	  COM_MCR_DTR	COM_MCR_DTR41,1146
#define	  COM_MCR_OUT2	COM_MCR_OUT242,1191
#define COM_LSR	COM_LSR43,1238
#define   COM_LSR_DATA	COM_LSR_DATA44,1285
#define   COM_LSR_TXRDY	COM_LSR_TXRDY45,1333
#define   COM_LSR_TSRE	COM_LSR_TSRE46,1389
static bool serial_exists;serial_exists48,1439
serial_proc_data(void)serial_proc_data51,1478
serial_intr(void)serial_intr59,1592
serial_putc(int c)serial_putc66,1678
serial_init(void)serial_init79,1843
lpt_putc(int c)lpt_putc112,2633
static unsigned addr_6845;addr_6845128,2853
static uint16_t *crt_buf;crt_buf129,2880
static uint16_t crt_pos;crt_pos130,2906
cga_init(void)cga_init133,2944
cga_putc(int c)cga_putc163,3430
#define NO	NO214,4399
#define SHIFT	SHIFT216,4414
#define CTL	CTL217,4436
#define ALT	ALT218,4456
#define CAPSLOCK	CAPSLOCK220,4477
#define NUMLOCK	NUMLOCK221,4501
#define SCROLLLOCK	SCROLLLOCK222,4525
#define E0ESC	E0ESC224,4552
static uint8_t shiftcode[256] =shiftcode226,4575
static uint8_t togglecode[256] =togglecode236,4706
static uint8_t normalmap[256] =normalmap243,4805
static uint8_t shiftmap[256] =shiftmap264,5690
#define C(C285,6574
static uint8_t ctlmap[256] =ctlmap287,6598
static uint8_t *charcode[4] = {charcode304,7327
kbd_proc_data(void)kbd_proc_data316,7524
kbd_intr(void)kbd_intr368,8510
kbd_init(void)kbd_init374,8569
#define CONSBUFSIZE CONSBUFSIZE385,8809
	uint8_t buf[CONSBUFSIZE];buf388,8850
	uint32_t rpos;rpos389,8877
	uint32_t wpos;wpos390,8893
} cons;cons391,8909
cons_intr(int (*proc)(void))cons_intr396,9037
cons_getc(void)cons_getc411,9300
cons_putc(int c)cons_putc433,9754
cons_init(void)cons_init442,9860
cputchar(int c)cputchar456,10056
getchar(void)getchar462,10096
iscons(int fdnum)iscons472,10191

kern/entrypgdir.c,163
pte_t entry_pgtable[NPTENTRIES];entry_pgtable4,49
pde_t entry_pgdir[NPDENTRIES] = {entry_pgdir21,934
pte_t entry_pgtable[NPTENTRIES] = {entry_pgtable33,1329

kern/monitor.h,51
#define JOS_KERN_MONITOR_HJOS_KERN_MONITOR_H2,27

kern/entry.S,533
#define SRL(val, shamt)		(((val) >> (shamt)) & ~(-1 << (32 - (shamt))))SRL7,120
#define	RELOC(x) ((x) - KERNBASE)RELOC18,566
#define MULTIBOOT_HEADER_MAGIC (0x1BADB002)MULTIBOOT_HEADER_MAGIC20,601
#define MULTIBOOT_HEADER_FLAGS (0)MULTIBOOT_HEADER_FLAGS21,645
#define CHECKSUM (-(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS))CHECKSUM22,680
_start = RELOC(entry)_start40,1231
entry:entry43,1267
relocated:relocated69,2169
spin:	jmp	spinspin83,2501
bootstack:bootstack92,2734
bootstacktop:bootstacktop95,2788

kern/init.c,256
test_backtrace(int x)test_backtrace12,228
i386_init(void)i386_init23,416
const char *panicstr;panicstr51,1115
_panic(const char *file, int line, const char *fmt,...)_panic58,1263
_warn(const char *file, int line, const char *fmt,...)_warn83,1696

kern/kdebug.c,181
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,stab_binsearch51,1753
debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)debuginfo_eip105,3021

kern/printf.c,136
putch(int ch, int *cnt)putch10,212
vcprintf(const char *fmt, va_list ap)vcprintf17,269
cprintf(const char *fmt, ...)cprintf26,385

gradelib.py,2816
__all__ = []__all__7,194
TESTS = []TESTS15,361
CURRENT_TEST = NoneCURRENT_TEST18,424
def test(points, title=None, parent=None):test20,445
    def register_test(fn, title=title):register_test26,703
        def run_test():run_test33,923
def end_part(name):end_part79,2398
    def show_part():show_part80,2418
def run_tests():run_tests89,2709
def get_current_test():get_current_test120,3671
def assert_equal(got, expect, msg=""):assert_equal131,3928
def assert_lines_match(text, *regexps, **kw):assert_lines_match140,4221
    def assert_lines_match_kw(no=[]):assert_lines_match_kw145,4445
MAKE_TIMESTAMP = 0MAKE_TIMESTAMP196,6022
def pre_make():pre_make198,6042
def post_make():post_make203,6197
def make(*target):make209,6385
def show_command(cmd):show_command215,6497
def maybe_unlink(*paths):maybe_unlink219,6593
COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m"}COLORS227,6784
def color(name, text):color229,6857
def reset_fs():reset_fs234,7032
class QEMU(object):QEMU244,7277
    _GDBPORT = None_GDBPORT245,7297
    def __init__(self, *make_args):__init__247,7318
    def get_gdb_port():get_gdb_port273,8258
    def fileno(self):fileno285,8713
    def handle_read(self):handle_read289,8803
    def wait(self):wait299,9115
    def kill(self):kill304,9216
class GDBClient(object):GDBClient308,9293
    def __init__(self, port, timeout=15):__init__309,9318
    def fileno(self):fileno322,9717
    def handle_read(self):handle_read326,9800
    def __send(self, cmd):__send348,10398
    def __send_break(self):__send_break352,10538
    def close(self):close355,10602
    def cont(self):cont360,10705
    def breakpoint(self, addr):breakpoint363,10751
class TerminateTest(Exception):TerminateTest373,10952
class Runner():Runner376,10994
    def __init__(self, *default_monitors):__init__377,11010
    def run_qemu(self, *monitors, **kw):run_qemu380,11105
        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):run_qemu_kw389,11629
    def __monitor_start(self, output):__monitor_start436,13129
    def __react(self, reactors, timeout):__react446,13439
    def user_test(self, binary, *monitors, **kw):user_test466,14081
    def match(self, *args, **kwargs):match476,14579
def save(path):save488,14924
    def setup_save(runner):setup_save492,15062
    def save_on_finish(fail):save_on_finish498,15236
def stop_breakpoint(addr):stop_breakpoint511,15660
    def setup_breakpoint(runner):setup_breakpoint515,15800
def call_on_line(regexp, callback):call_on_line525,16182
    def setup_call_on_line(runner):setup_call_on_line529,16316
        def handle_output(output):handle_output531,16378
def stop_on_line(regexp):stop_on_line541,16743
    def stop(line):stop545,16856

.dir-locals.el,0

GNUmakefile,1562
OBJDIR := objOBJDIR8,197
LABSETUP ?= ./LABSETUP22,403
TOP = .TOP24,419
GCCPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \GCCPREFIX36,874
QEMU := $(shell if which qemu >/dev/null 2>&1; \QEMU52,1637
GDBPORT	:= $(shell expr `id -u` % 5000 + 25000)GDBPORT67,2275
CC	:= $(GCCPREFIX)gcc -pipeCC69,2324
AS	:= $(GCCPREFIX)asAS70,2352
AR	:= $(GCCPREFIX)arAR71,2373
LD	:= $(GCCPREFIX)ldLD72,2394
OBJCOPY	:= $(GCCPREFIX)objcopyOBJCOPY73,2415
OBJDUMP	:= $(GCCPREFIX)objdumpOBJDUMP74,2446
NM	:= $(GCCPREFIX)nmNM75,2477
NCC	:= gcc $(CC_VER) -pipeNCC78,2517
NATIVE_CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -I$(TOP) -MD -WallNATIVE_CFLAGS79,2544
TAR	:= gtarTAR80,2609
PERL	:= perlPERL81,2621
CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -O1 -fno-builtin -I$(TOP) -MDCFLAGS86,2808
LDFLAGS := -m elf_i386LDFLAGS99,3366
ULDFLAGS := -T user/user.ldULDFLAGS102,3427
GCC_LIB := $(shell $(CC) $(CFLAGS) -print-libgcc-file-name)GCC_LIB104,3456
OBJDIRS :=OBJDIRS107,3576
KERN_CFLAGS := $(CFLAGS) -DJOS_KERNEL -gstabsKERN_CFLAGS123,3967
USER_CFLAGS := $(CFLAGS) -DJOS_USER -gstabsUSER_CFLAGS124,4013
QEMUOPTS = -drive file=$(OBJDIR)/kern/kernel.img,index=0,media=disk,format=raw -serial mon:stdio -gdb tcp::$(GDBPORT)QEMUOPTS142,4523
IMAGES = $(OBJDIR)/kern/kernel.imgIMAGES144,4736
WEBSUB := https://6828.scripts.mit.edu/2018/handin.pyWEBSUB222,6450
UPSTREAM := $(shell git remote -v | grep "pdos.csail.mit.edu/6.828/2018/jos.git (fetch)" | awk '{split($$0,a," "); print a[1]}')UPSTREAM255,7472
