
grade-lab1,445
r = Runner(save("jos.out"),r6,57
def test_jos():test_jos10,150
def test_printf():test_printf14,211
BACKTRACE_RE = r"^ *ebp +f01[0-9a-z]{5} +eip +f0100[0-9a-z]{3} +args +([0-9a-z]+)"BACKTRACE_RE17,275
def test_backtrace_count():test_backtrace_count20,386
def test_backtrace_arguments():test_backtrace_arguments25,544
def test_backtrace_symbols():test_backtrace_symbols31,777
def test_backtrace_lines():test_backtrace_lines37,1018

mergedep.pl,31
sub readdeps {readdeps27,909

lib/console.c,60
cputchar(int ch)cputchar6,52
getchar(void)getchar16,214

lib/syscall.c,289
syscall(int num, int check, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)syscall7,92
sys_cputs(const char *s, size_t len)sys_cputs41,922
sys_cgetc(void)sys_cgetc47,1019
sys_env_destroy(envid_t envid)sys_env_destroy53,1090
sys_getenvid(void)sys_getenvid59,1190

lib/panic.c,71
_panic(const char *file, int line, const char *fmt, ...)_panic10,206

lib/entry.S,52
_start:_start21,498
args_exist:args_exist32,779

lib/readline.c,106
#define BUFLEN BUFLEN4,47
static char buf[BUFLEN];buf5,67
readline(const char *prompt)readline8,100

lib/string.c,1018
#define ASM ASM9,264
strlen(const char *s)strlen12,283
strnlen(const char *s, size_t size)strnlen22,371
strcpy(char *dst, const char *src)strcpy32,496
strcat(char *dst, const char *src)strcat43,636
strncpy(char *dst, const char *src, size_t size) {strncpy51,745
strlcpy(char *dst, const char *src, size_t size)strlcpy66,998
strcmp(const char *p, const char *q)strcmp80,1201
strncmp(const char *p, const char *q, size_t n)strncmp88,1340
strchr(const char *s, char c)strchr101,1645
strfind(const char *s, char c)strfind112,1889
memset(void *v, int c, size_t n)memset122,2002
memmove(void *dst, const void *src, size_t n)memmove142,2359
memset(void *v, int c, size_t n)memset174,3099
memmove(void *dst, const void *src, size_t n)memmove188,3221
memcpy(void *dst, const void *src, size_t n)memcpy209,3470
memcmp(const void *v1, const void *v2, size_t n)memcmp215,3554
memfind(const void *s, int c, size_t n)memfind230,3801
strtol(const char *s, char **endptr, int base)strtol240,4001

lib/printfmt.c,845
static const char * const error_string[MAXERROR] =error_string21,589
printnum(void (*putch)(int, void*), void *putdat,printnum36,995
getuint(va_list *ap, int lflag)getuint55,1609
getint(va_list *ap, int lflag)getint68,1897
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)vprintfmt83,2193
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)printfmt247,5283
struct sprintbuf {sprintbuf256,5443
	char *buf;buf257,5462
	char *buf;sprintbuf::buf257,5462
	char *ebuf;ebuf258,5474
	char *ebuf;sprintbuf::ebuf258,5474
	int cnt;cnt259,5487
	int cnt;sprintbuf::cnt259,5487
sprintputch(int ch, struct sprintbuf *b)sprintputch263,5513
vsnprintf(char *buf, int n, const char *fmt, va_list ap)vsnprintf271,5615
snprintf(char *buf, int n, const char *fmt, ...)snprintf288,5913

lib/libmain.c,151
const volatile struct Env *thisenv;thisenv8,176
const char *binaryname = "<unknown>";binaryname9,212
libmain(int argc, char **argv)libmain12,256

lib/exit.c,21
exit(void)exit5,28

lib/printf.c,457
struct printbuf {printbuf19,664
	int idx;	// current buffer indexidx20,682
	int idx;	// current buffer indexprintbuf::idx20,682
	int cnt;	// total bytes printed so farcnt21,716
	int cnt;	// total bytes printed so farprintbuf::cnt21,716
	char buf[256];buf22,756
	char buf[256];printbuf::buf22,756
putch(int ch, struct printbuf *b)putch27,789
vcprintf(const char *fmt, va_list ap)vcprintf38,937
cprintf(const char *fmt, ...)cprintf51,1110

inc/memlayout.h,1127
#define JOS_INC_MEMLAYOUT_HJOS_INC_MEMLAYOUT_H2,28
#define GD_KT GD_KT15,324
#define GD_KD GD_KD16,366
#define GD_UT GD_UT17,408
#define GD_UD GD_UD18,448
#define GD_TSS0 GD_TSS019,488
#define	KERNBASE	KERNBASE87,4609
#define IOPHYSMEM	IOPHYSMEM92,4814
#define EXTPHYSMEM	EXTPHYSMEM93,4841
#define KSTACKTOP	KSTACKTOP96,4887
#define KSTKSIZE	KSTKSIZE97,4914
#define KSTKGAP	KSTKGAP98,4972
#define MMIOLIM	MMIOLIM101,5058
#define MMIOBASE	MMIOBASE102,5096
#define ULIM	ULIM104,5133
#define UVPT	UVPT112,5361
#define UPAGES	UPAGES114,5434
#define UENVS	UENVS116,5515
#define UTOP	UTOP123,5650
#define UXSTACKTOP	UXSTACKTOP125,5710
#define USTACKTOP	USTACKTOP128,5837
#define UTEXT	UTEXT131,5913
#define UTEMP	UTEMP134,6008
#define PFTEMP	PFTEMP137,6168
#define USTABDATA	USTABDATA139,6265
typedef uint32_t pte_t;pte_t143,6320
typedef uint32_t pde_t;pde_t144,6344
struct PageInfo {PageInfo175,7643
	struct PageInfo *pp_link;pp_link177,7693
	struct PageInfo *pp_link;PageInfo::pp_link177,7693
	uint16_t pp_ref;pp_ref184,7951
	uint16_t pp_ref;PageInfo::pp_ref184,7951

inc/stab.h,1529
#define JOS_STAB_HJOS_STAB_H2,19
#define	N_GSYM	N_GSYM15,436
#define	N_FNAME	N_FNAME16,474
#define	N_FUN	N_FUN17,517
#define	N_STSYM	N_STSYM18,555
#define	N_LCSYM	N_LCSYM19,602
#define	N_MAIN	N_MAIN20,648
#define	N_PC	N_PC21,691
#define	N_RSYM	N_RSYM22,734
#define	N_SLINE	N_SLINE23,776
#define	N_DSLINE	N_DSLINE24,826
#define	N_BSLINE	N_BSLINE25,876
#define	N_SSYM	N_SSYM26,925
#define	N_SO	N_SO27,973
#define	N_LSYM	N_LSYM28,1017
#define	N_BINCL	N_BINCL29,1056
#define	N_SOL	N_SOL30,1104
#define	N_PSYM	N_PSYM31,1153
#define	N_EINCL	N_EINCL32,1196
#define	N_ENTRY	N_ENTRY33,1238
#define	N_LBRAC	N_LBRAC34,1285
#define	N_EXCL	N_EXCL35,1323
#define	N_RBRAC	N_RBRAC36,1368
#define	N_BCOMM	N_BCOMM37,1407
#define	N_ECOMM	N_ECOMM38,1445
#define	N_ECOML	N_ECOML39,1481
#define	N_LENG	N_LENG40,1530
struct Stab {Stab43,1637
	uint32_t n_strx;	// index into string table of namen_strx44,1651
	uint32_t n_strx;	// index into string table of nameStab::n_strx44,1651
	uint8_t n_type;         // type of symboln_type45,1704
	uint8_t n_type;         // type of symbolStab::n_type45,1704
	uint8_t n_other;        // misc info (usually empty)n_other46,1747
	uint8_t n_other;        // misc info (usually empty)Stab::n_other46,1747
	uint16_t n_desc;        // description fieldn_desc47,1801
	uint16_t n_desc;        // description fieldStab::n_desc47,1801
	uintptr_t n_value;	// value of symboln_value48,1847
	uintptr_t n_value;	// value of symbolStab::n_value48,1847

inc/string.h,47
#define JOS_INC_STRING_HJOS_INC_STRING_H2,25

inc/lib.h,337
#define JOS_INC_LIB_H JOS_INC_LIB_H8,296
#define USED(USED20,536
#define	O_RDONLY	O_RDONLY46,1053
#define	O_WRONLY	O_WRONLY47,1106
#define	O_RDWR	O_RDWR48,1159
#define	O_ACCMODE	O_ACCMODE49,1218
#define	O_CREAT	O_CREAT51,1272
#define	O_TRUNC	O_TRUNC52,1325
#define	O_EXCL	O_EXCL53,1380
#define O_MKDIR	O_MKDIR54,1434

inc/stdio.h,69
#define JOS_INC_STDIO_HJOS_INC_STDIO_H2,24
#define NULL	NULL7,87

inc/x86.h,1331
#define JOS_INC_X86_HJOS_INC_X86_H2,22
breakpoint(void)breakpoint7,88
inb(int port)inb13,155
insb(int port, void *addr, int cnt)insb21,278
inw(int port)inw30,481
insw(int port, void *addr, int cnt)insw38,605
inl(int port)inl47,808
insl(int port, void *addr, int cnt)insl55,932
outb(int port, uint8_t data)outb64,1131
outsb(int port, const void *addr, int cnt)outsb70,1241
outw(int port, uint16_t data)outw79,1438
outsw(int port, const void *addr, int cnt)outsw85,1549
outsl(int port, const void *addr, int cnt)outsl94,1746
outl(int port, uint32_t data)outl103,1943
invlpg(void *addr)invlpg109,2054
lidt(void *p)lidt115,2153
lgdt(void *p)lgdt121,2231
lldt(uint16_t sel)lldt127,2309
ltr(uint16_t sel)ltr133,2392
lcr0(uint32_t val)lcr0139,2473
rcr0(void)rcr0145,2566
rcr2(void)rcr2153,2678
lcr3(uint32_t val)lcr3161,2786
rcr3(void)rcr3167,2879
lcr4(uint32_t val)lcr4175,2987
rcr4(void)rcr4181,3080
tlbflush(void)tlbflush189,3188
read_eflags(void)read_eflags197,3337
write_eflags(uint32_t eflags)write_eflags205,3463
read_ebp(void)read_ebp211,3572
read_esp(void)read_esp219,3688
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)cpuid227,3800
read_tsc(void)read_tsc244,4147
xchg(volatile uint32_t *addr, uint32_t newval)xchg252,4255

inc/env.h,1621
#define JOS_INC_ENV_HJOS_INC_ENV_H4,70
typedef int32_t envid_t;envid_t10,166
#define LOG2NENV	LOG2NENV28,953
#define NENV	NENV29,974
#define ENVX(ENVX30,1005
	ENV_FREE = 0,ENV_FREE34,1095
	ENV_DYING,ENV_DYING35,1110
	ENV_RUNNABLE,ENV_RUNNABLE36,1122
	ENV_RUNNING,ENV_RUNNING37,1137
	ENV_NOT_RUNNABLEENV_NOT_RUNNABLE38,1151
enum EnvType {EnvType42,1202
	ENV_TYPE_USER = 0,ENV_TYPE_USER43,1217
struct Env {Env46,1241
	struct Trapframe env_tf;	// Saved registersenv_tf47,1254
	struct Trapframe env_tf;	// Saved registersEnv::env_tf47,1254
	struct Env *env_link;		// Next free Envenv_link48,1299
	struct Env *env_link;		// Next free EnvEnv::env_link48,1299
	envid_t env_id;			// Unique environment identifierenv_id49,1340
	envid_t env_id;			// Unique environment identifierEnv::env_id49,1340
	envid_t env_parent_id;		// env_id of this env's parentenv_parent_id50,1392
	envid_t env_parent_id;		// env_id of this env's parentEnv::env_parent_id50,1392
	enum EnvType env_type;		// Indicates special system environmentsenv_type51,1448
	enum EnvType env_type;		// Indicates special system environmentsEnv::env_type51,1448
	unsigned env_status;		// Status of the environmentenv_status52,1514
	unsigned env_status;		// Status of the environmentEnv::env_status52,1514
	uint32_t env_runs;		// Number of times environment has runenv_runs53,1566
	uint32_t env_runs;		// Number of times environment has runEnv::env_runs53,1566
	pde_t *env_pgdir;		// Kernel virtual address of page direnv_pgdir56,1645
	pde_t *env_pgdir;		// Kernel virtual address of page dirEnv::env_pgdir56,1645

inc/elf.h,3208
#define JOS_INC_ELF_HJOS_INC_ELF_H2,22
#define ELF_MAGIC ELF_MAGIC4,45
struct Elf {Elf6,109
	uint32_t e_magic;	// must equal ELF_MAGICe_magic7,122
	uint32_t e_magic;	// must equal ELF_MAGICElf::e_magic7,122
	uint8_t e_elf[12];e_elf8,165
	uint8_t e_elf[12];Elf::e_elf8,165
	uint16_t e_type;e_type9,185
	uint16_t e_type;Elf::e_type9,185
	uint16_t e_machine;e_machine10,203
	uint16_t e_machine;Elf::e_machine10,203
	uint32_t e_version;e_version11,224
	uint32_t e_version;Elf::e_version11,224
	uint32_t e_entry;e_entry12,245
	uint32_t e_entry;Elf::e_entry12,245
	uint32_t e_phoff;e_phoff13,264
	uint32_t e_phoff;Elf::e_phoff13,264
	uint32_t e_shoff;e_shoff14,283
	uint32_t e_shoff;Elf::e_shoff14,283
	uint32_t e_flags;e_flags15,302
	uint32_t e_flags;Elf::e_flags15,302
	uint16_t e_ehsize;e_ehsize16,321
	uint16_t e_ehsize;Elf::e_ehsize16,321
	uint16_t e_phentsize;e_phentsize17,341
	uint16_t e_phentsize;Elf::e_phentsize17,341
	uint16_t e_phnum;e_phnum18,364
	uint16_t e_phnum;Elf::e_phnum18,364
	uint16_t e_shentsize;e_shentsize19,383
	uint16_t e_shentsize;Elf::e_shentsize19,383
	uint16_t e_shnum;e_shnum20,406
	uint16_t e_shnum;Elf::e_shnum20,406
	uint16_t e_shstrndx;e_shstrndx21,425
	uint16_t e_shstrndx;Elf::e_shstrndx21,425
struct Proghdr {Proghdr24,451
	uint32_t p_type;p_type25,468
	uint32_t p_type;Proghdr::p_type25,468
	uint32_t p_offset;p_offset26,486
	uint32_t p_offset;Proghdr::p_offset26,486
	uint32_t p_va;p_va27,506
	uint32_t p_va;Proghdr::p_va27,506
	uint32_t p_pa;p_pa28,522
	uint32_t p_pa;Proghdr::p_pa28,522
	uint32_t p_filesz;p_filesz29,538
	uint32_t p_filesz;Proghdr::p_filesz29,538
	uint32_t p_memsz;p_memsz30,558
	uint32_t p_memsz;Proghdr::p_memsz30,558
	uint32_t p_flags;p_flags31,577
	uint32_t p_flags;Proghdr::p_flags31,577
	uint32_t p_align;p_align32,596
	uint32_t p_align;Proghdr::p_align32,596
struct Secthdr {Secthdr35,619
	uint32_t sh_name;sh_name36,636
	uint32_t sh_name;Secthdr::sh_name36,636
	uint32_t sh_type;sh_type37,655
	uint32_t sh_type;Secthdr::sh_type37,655
	uint32_t sh_flags;sh_flags38,674
	uint32_t sh_flags;Secthdr::sh_flags38,674
	uint32_t sh_addr;sh_addr39,694
	uint32_t sh_addr;Secthdr::sh_addr39,694
	uint32_t sh_offset;sh_offset40,713
	uint32_t sh_offset;Secthdr::sh_offset40,713
	uint32_t sh_size;sh_size41,734
	uint32_t sh_size;Secthdr::sh_size41,734
	uint32_t sh_link;sh_link42,753
	uint32_t sh_link;Secthdr::sh_link42,753
	uint32_t sh_info;sh_info43,772
	uint32_t sh_info;Secthdr::sh_info43,772
	uint32_t sh_addralign;sh_addralign44,791
	uint32_t sh_addralign;Secthdr::sh_addralign44,791
	uint32_t sh_entsize;sh_entsize45,815
	uint32_t sh_entsize;Secthdr::sh_entsize45,815
#define ELF_PROG_LOAD	ELF_PROG_LOAD49,871
#define ELF_PROG_FLAG_EXEC	ELF_PROG_FLAG_EXEC52,931
#define ELF_PROG_FLAG_WRITE	ELF_PROG_FLAG_WRITE53,960
#define ELF_PROG_FLAG_READ	ELF_PROG_FLAG_READ54,990
#define ELF_SHT_NULL	ELF_SHT_NULL57,1051
#define ELF_SHT_PROGBITS	ELF_SHT_PROGBITS58,1075
#define ELF_SHT_SYMTAB	ELF_SHT_SYMTAB59,1102
#define ELF_SHT_STRTAB	ELF_SHT_STRTAB60,1128
#define ELF_SHN_UNDEF	ELF_SHN_UNDEF63,1186

inc/mmu.h,10794
#define JOS_INC_MMU_HJOS_INC_MMU_H2,22
#define PGNUM(PGNUM30,964
#define PDX(PDX33,1040
#define PTX(PTX36,1121
#define PGOFF(PGOFF39,1200
#define PGADDR(PGADDR42,1300
#define NPDENTRIES	NPDENTRIES45,1421
#define NPTENTRIES	NPTENTRIES46,1491
#define PGSIZE	PGSIZE48,1554
#define PGSHIFT	PGSHIFT49,1602
#define PTSIZE	PTSIZE51,1640
#define PTSHIFT	PTSHIFT52,1718
#define PTXSHIFT	PTXSHIFT54,1756
#define PDXSHIFT	PDXSHIFT55,1814
#define PTE_P	PTE_P58,1910
#define PTE_W	PTE_W59,1942
#define PTE_U	PTE_U60,1976
#define PTE_PWT	PTE_PWT61,2005
#define PTE_PCD	PTE_PCD62,2045
#define PTE_A	PTE_A63,2085
#define PTE_D	PTE_D64,2118
#define PTE_PS	PTE_PS65,2148
#define PTE_G	PTE_G66,2183
#define PTE_AVAIL	PTE_AVAIL70,2353
#define PTE_SYSCALL	PTE_SYSCALL73,2480
#define PTE_ADDR(PTE_ADDR76,2586
#define CR0_PE	CR0_PE79,2665
#define CR0_MP	CR0_MP80,2713
#define CR0_EM	CR0_EM81,2763
#define CR0_TS	CR0_TS82,2803
#define CR0_ET	CR0_ET83,2847
#define CR0_NE	CR0_NE84,2892
#define CR0_WP	CR0_WP85,2937
#define CR0_AM	CR0_AM86,2981
#define CR0_NW	CR0_NW87,3026
#define CR0_CD	CR0_CD88,3073
#define CR0_PG	CR0_PG89,3117
#define CR4_PCE	CR4_PCE91,3155
#define CR4_MCE	CR4_MCE92,3213
#define CR4_PSE	CR4_PSE93,3265
#define CR4_DE	CR4_DE94,3317
#define CR4_TSD	CR4_TSD95,3368
#define CR4_PVI	CR4_PVI96,3418
#define CR4_VME	CR4_VME97,3483
#define FL_CF	FL_CF100,3554
#define FL_PF	FL_PF101,3594
#define FL_AF	FL_AF102,3635
#define FL_ZF	FL_ZF103,3685
#define FL_SF	FL_SF104,3724
#define FL_TF	FL_TF105,3763
#define FL_IF	FL_IF106,3802
#define FL_DF	FL_DF107,3846
#define FL_OF	FL_OF108,3890
#define FL_IOPL_MASK	FL_IOPL_MASK109,3933
#define FL_IOPL_0	FL_IOPL_0110,3996
#define FL_IOPL_1	FL_IOPL_1111,4040
#define FL_IOPL_2	FL_IOPL_2112,4084
#define FL_IOPL_3	FL_IOPL_3113,4128
#define FL_NT	FL_NT114,4172
#define FL_RF	FL_RF115,4213
#define FL_VM	FL_VM116,4254
#define FL_AC	FL_AC117,4301
#define FL_VIF	FL_VIF118,4346
#define FL_VIP	FL_VIP119,4399
#define FL_ID	FL_ID120,4455
#define FEC_PR	FEC_PR123,4519
#define FEC_WR	FEC_WR124,4584
#define FEC_U	FEC_U125,4636
#define SEG_NULL	SEG_NULL139,4841
#define SEG(SEG142,4903
struct Segdesc {Segdesc152,5176
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitsd_lim_15_0153,5193
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitSegdesc::sd_lim_15_0153,5193
	unsigned sd_base_15_0 : 16; // Low bits of segment base addresssd_base_15_0154,5251
	unsigned sd_base_15_0 : 16; // Low bits of segment base addressSegdesc::sd_base_15_0154,5251
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addresssd_base_23_16155,5316
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addressSegdesc::sd_base_23_16155,5316
	unsigned sd_type : 4;       // Segment type (see STS_ constants)sd_type156,5384
	unsigned sd_type : 4;       // Segment type (see STS_ constants)Segdesc::sd_type156,5384
	unsigned sd_s : 1;          // 0 = system, 1 = applicationsd_s157,5450
	unsigned sd_s : 1;          // 0 = system, 1 = applicationSegdesc::sd_s157,5450
	unsigned sd_dpl : 2;        // Descriptor Privilege Levelsd_dpl158,5510
	unsigned sd_dpl : 2;        // Descriptor Privilege LevelSegdesc::sd_dpl158,5510
	unsigned sd_p : 1;          // Presentsd_p159,5569
	unsigned sd_p : 1;          // PresentSegdesc::sd_p159,5569
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitsd_lim_19_16160,5609
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitSegdesc::sd_lim_19_16160,5609
	unsigned sd_avl : 1;        // Unused (available for software use)sd_avl161,5668
	unsigned sd_avl : 1;        // Unused (available for software use)Segdesc::sd_avl161,5668
	unsigned sd_rsv1 : 1;       // Reservedsd_rsv1162,5736
	unsigned sd_rsv1 : 1;       // ReservedSegdesc::sd_rsv1162,5736
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentsd_db163,5777
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentSegdesc::sd_db163,5777
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setsd_g164,5848
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setSegdesc::sd_g164,5848
	unsigned sd_base_31_24 : 8; // High bits of segment base addresssd_base_31_24165,5921
	unsigned sd_base_31_24 : 8; // High bits of segment base addressSegdesc::sd_base_31_24165,5921
#define SEG_NULL	SEG_NULL168,6006
#define SEG_FAULT	SEG_FAULT170,6114
#define SEG(SEG172,6192
#define SEG16(SEG16176,6391
#define STA_X	STA_X184,6662
#define STA_E	STA_E185,6707
#define STA_C	STA_C186,6771
#define STA_W	STA_W187,6839
#define STA_R	STA_R188,6901
#define STA_A	STA_A189,6958
#define STS_T16A	STS_T16A192,7022
#define STS_LDT	STS_LDT193,7071
#define STS_T16B	STS_T16B194,7122
#define STS_CG16	STS_CG16195,7166
#define STS_TG	STS_TG196,7211
#define STS_IG16	STS_IG16197,7268
#define STS_TG16	STS_TG16198,7318
#define STS_T32A	STS_T32A199,7363
#define STS_T32B	STS_T32B200,7412
#define STS_CG32	STS_CG32201,7456
#define STS_IG32	STS_IG32202,7501
#define STS_TG32	STS_TG32203,7551
struct Taskstate {Taskstate215,7731
	uint32_t ts_link;	// Old ts selectorts_link216,7750
	uint32_t ts_link;	// Old ts selectorTaskstate::ts_link216,7750
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsts_esp0217,7788
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsTaskstate::ts_esp0217,7788
	uint16_t ts_ss0;	//   after an increase in privilege levelts_ss0218,7848
	uint16_t ts_ss0;	//   after an increase in privilege levelTaskstate::ts_ss0218,7848
	uint16_t ts_padding1;ts_padding1219,7908
	uint16_t ts_padding1;Taskstate::ts_padding1219,7908
	uintptr_t ts_esp1;ts_esp1220,7931
	uintptr_t ts_esp1;Taskstate::ts_esp1220,7931
	uint16_t ts_ss1;ts_ss1221,7951
	uint16_t ts_ss1;Taskstate::ts_ss1221,7951
	uint16_t ts_padding2;ts_padding2222,7969
	uint16_t ts_padding2;Taskstate::ts_padding2222,7969
	uintptr_t ts_esp2;ts_esp2223,7992
	uintptr_t ts_esp2;Taskstate::ts_esp2223,7992
	uint16_t ts_ss2;ts_ss2224,8012
	uint16_t ts_ss2;Taskstate::ts_ss2224,8012
	uint16_t ts_padding3;ts_padding3225,8030
	uint16_t ts_padding3;Taskstate::ts_padding3225,8030
	physaddr_t ts_cr3;	// Page directory basets_cr3226,8053
	physaddr_t ts_cr3;	// Page directory baseTaskstate::ts_cr3226,8053
	uintptr_t ts_eip;	// Saved state from last task switchts_eip227,8096
	uintptr_t ts_eip;	// Saved state from last task switchTaskstate::ts_eip227,8096
	uint32_t ts_eflags;ts_eflags228,8152
	uint32_t ts_eflags;Taskstate::ts_eflags228,8152
	uint32_t ts_eax;	// More saved state (registers)ts_eax229,8173
	uint32_t ts_eax;	// More saved state (registers)Taskstate::ts_eax229,8173
	uint32_t ts_ecx;ts_ecx230,8223
	uint32_t ts_ecx;Taskstate::ts_ecx230,8223
	uint32_t ts_edx;ts_edx231,8241
	uint32_t ts_edx;Taskstate::ts_edx231,8241
	uint32_t ts_ebx;ts_ebx232,8259
	uint32_t ts_ebx;Taskstate::ts_ebx232,8259
	uintptr_t ts_esp;ts_esp233,8277
	uintptr_t ts_esp;Taskstate::ts_esp233,8277
	uintptr_t ts_ebp;ts_ebp234,8296
	uintptr_t ts_ebp;Taskstate::ts_ebp234,8296
	uint32_t ts_esi;ts_esi235,8315
	uint32_t ts_esi;Taskstate::ts_esi235,8315
	uint32_t ts_edi;ts_edi236,8333
	uint32_t ts_edi;Taskstate::ts_edi236,8333
	uint16_t ts_es;		// Even more saved state (segment selectors)ts_es237,8351
	uint16_t ts_es;		// Even more saved state (segment selectors)Taskstate::ts_es237,8351
	uint16_t ts_padding4;ts_padding4238,8414
	uint16_t ts_padding4;Taskstate::ts_padding4238,8414
	uint16_t ts_cs;ts_cs239,8437
	uint16_t ts_cs;Taskstate::ts_cs239,8437
	uint16_t ts_padding5;ts_padding5240,8454
	uint16_t ts_padding5;Taskstate::ts_padding5240,8454
	uint16_t ts_ss;ts_ss241,8477
	uint16_t ts_ss;Taskstate::ts_ss241,8477
	uint16_t ts_padding6;ts_padding6242,8494
	uint16_t ts_padding6;Taskstate::ts_padding6242,8494
	uint16_t ts_ds;ts_ds243,8517
	uint16_t ts_ds;Taskstate::ts_ds243,8517
	uint16_t ts_padding7;ts_padding7244,8534
	uint16_t ts_padding7;Taskstate::ts_padding7244,8534
	uint16_t ts_fs;ts_fs245,8557
	uint16_t ts_fs;Taskstate::ts_fs245,8557
	uint16_t ts_padding8;ts_padding8246,8574
	uint16_t ts_padding8;Taskstate::ts_padding8246,8574
	uint16_t ts_gs;ts_gs247,8597
	uint16_t ts_gs;Taskstate::ts_gs247,8597
	uint16_t ts_padding9;ts_padding9248,8614
	uint16_t ts_padding9;Taskstate::ts_padding9248,8614
	uint16_t ts_ldt;ts_ldt249,8637
	uint16_t ts_ldt;Taskstate::ts_ldt249,8637
	uint16_t ts_padding10;ts_padding10250,8655
	uint16_t ts_padding10;Taskstate::ts_padding10250,8655
	uint16_t ts_t;		// Trap on task switchts_t251,8679
	uint16_t ts_t;		// Trap on task switchTaskstate::ts_t251,8679
	uint16_t ts_iomb;	// I/O map base addressts_iomb252,8719
	uint16_t ts_iomb;	// I/O map base addressTaskstate::ts_iomb252,8719
struct Gatedesc {Gatedesc256,8811
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentgd_off_15_0257,8829
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentGatedesc::gd_off_15_0257,8829
	unsigned gd_sel : 16;        // segment selectorgd_sel258,8895
	unsigned gd_sel : 16;        // segment selectorGatedesc::gd_sel258,8895
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesgd_args259,8945
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesGatedesc::gd_args259,8945
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)gd_rsv1260,9013
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)Gatedesc::gd_rsv1260,9013
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})gd_type261,9079
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})Gatedesc::gd_type261,9079
	unsigned gd_s : 1;           // must be 0 (system)gd_s262,9137
	unsigned gd_s : 1;           // must be 0 (system)Gatedesc::gd_s262,9137
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelgd_dpl263,9189
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelGatedesc::gd_dpl263,9189
	unsigned gd_p : 1;           // Presentgd_p264,9262
	unsigned gd_p : 1;           // PresentGatedesc::gd_p264,9262
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentgd_off_31_16265,9303
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentGatedesc::gd_off_31_16265,9303
#define SETGATE(SETGATE282,10286
#define SETCALLGATE(SETCALLGATE296,10699
struct Pseudodesc {Pseudodesc310,11137
	uint16_t pd_lim;		// Limitpd_lim311,11157
	uint16_t pd_lim;		// LimitPseudodesc::pd_lim311,11157
	uint32_t pd_base;		// Base addresspd_base312,11185
	uint32_t pd_base;		// Base addressPseudodesc::pd_base312,11185

inc/stdarg.h,189
#define	JOS_INC_STDARG_HJOS_INC_STDARG_H4,91
typedef __builtin_va_list va_list;va_list6,117
#define va_start(va_start8,153
#define va_arg(va_arg10,210
#define va_end(va_end12,263

inc/error.h,460
#define JOS_INC_ERROR_HJOS_INC_ERROR_H4,72
	E_UNSPECIFIED	= 1,	// Unspecified or unknown problemE_UNSPECIFIED8,172
	E_BAD_ENV	,	// Environment doesn't exist or otherwiseE_BAD_ENV9,226
	E_INVAL		,	// Invalid parameterE_INVAL11,323
	E_NO_MEM	,	// Request failed due to memory shortageE_NO_MEM12,356
	E_NO_FREE_ENV	,	// Attempt to create a new environment beyondE_NO_FREE_ENV13,409
	E_FAULT		,	// Memory faultE_FAULT15,499
	MAXERRORMAXERROR17,528

inc/trap.h,2883
#define JOS_INC_TRAP_HJOS_INC_TRAP_H2,23
#define T_DIVIDE T_DIVIDE6,95
#define T_DEBUG T_DEBUG7,135
#define T_NMI T_NMI8,178
#define T_BRKPT T_BRKPT9,228
#define T_OFLOW T_OFLOW10,266
#define T_BOUND T_BOUND11,302
#define T_ILLOP T_ILLOP12,342
#define T_DEVICE T_DEVICE13,384
#define T_DBLFLT T_DBLFLT14,432
#define T_TSS T_TSS16,547
#define T_SEGNP T_SEGNP17,602
#define T_STACK T_STACK18,649
#define T_GPFLT T_GPFLT19,692
#define T_PGFLT T_PGFLT20,744
#define T_FPERR T_FPERR22,820
#define T_ALIGN T_ALIGN23,868
#define T_MCHK T_MCHK24,910
#define T_SIMDERR T_SIMDERR25,951
#define T_SYSCALL T_SYSCALL29,1121
#define T_DEFAULT T_DEFAULT30,1160
#define IRQ_OFFSET	IRQ_OFFSET32,1198
#define IRQ_TIMER IRQ_TIMER35,1331
#define IRQ_KBD IRQ_KBD36,1358
#define IRQ_SERIAL IRQ_SERIAL37,1385
#define IRQ_SPURIOUS IRQ_SPURIOUS38,1412
#define IRQ_IDE IRQ_IDE39,1439
#define IRQ_ERROR IRQ_ERROR40,1466
struct PushRegs {PushRegs46,1541
	uint32_t reg_edi;reg_edi48,1595
	uint32_t reg_edi;PushRegs::reg_edi48,1595
	uint32_t reg_esi;reg_esi49,1614
	uint32_t reg_esi;PushRegs::reg_esi49,1614
	uint32_t reg_ebp;reg_ebp50,1633
	uint32_t reg_ebp;PushRegs::reg_ebp50,1633
	uint32_t reg_oesp;		/* Useless */reg_oesp51,1652
	uint32_t reg_oesp;		/* Useless */PushRegs::reg_oesp51,1652
	uint32_t reg_ebx;reg_ebx52,1687
	uint32_t reg_ebx;PushRegs::reg_ebx52,1687
	uint32_t reg_edx;reg_edx53,1706
	uint32_t reg_edx;PushRegs::reg_edx53,1706
	uint32_t reg_ecx;reg_ecx54,1725
	uint32_t reg_ecx;PushRegs::reg_ecx54,1725
	uint32_t reg_eax;reg_eax55,1744
	uint32_t reg_eax;PushRegs::reg_eax55,1744
struct Trapframe {Trapframe58,1791
	struct PushRegs tf_regs;tf_regs59,1810
	struct PushRegs tf_regs;Trapframe::tf_regs59,1810
	uint16_t tf_es;tf_es60,1836
	uint16_t tf_es;Trapframe::tf_es60,1836
	uint16_t tf_padding1;tf_padding161,1853
	uint16_t tf_padding1;Trapframe::tf_padding161,1853
	uint16_t tf_ds;tf_ds62,1876
	uint16_t tf_ds;Trapframe::tf_ds62,1876
	uint16_t tf_padding2;tf_padding263,1893
	uint16_t tf_padding2;Trapframe::tf_padding263,1893
	uint32_t tf_trapno;tf_trapno64,1916
	uint32_t tf_trapno;Trapframe::tf_trapno64,1916
	uint32_t tf_err;tf_err66,1979
	uint32_t tf_err;Trapframe::tf_err66,1979
	uintptr_t tf_eip;tf_eip67,1997
	uintptr_t tf_eip;Trapframe::tf_eip67,1997
	uint16_t tf_cs;tf_cs68,2016
	uint16_t tf_cs;Trapframe::tf_cs68,2016
	uint16_t tf_padding3;tf_padding369,2033
	uint16_t tf_padding3;Trapframe::tf_padding369,2033
	uint32_t tf_eflags;tf_eflags70,2056
	uint32_t tf_eflags;Trapframe::tf_eflags70,2056
	uintptr_t tf_esp;tf_esp72,2149
	uintptr_t tf_esp;Trapframe::tf_esp72,2149
	uint16_t tf_ss;tf_ss73,2168
	uint16_t tf_ss;Trapframe::tf_ss73,2168
	uint16_t tf_padding4;tf_padding474,2185
	uint16_t tf_padding4;Trapframe::tf_padding474,2185

inc/syscall.h,210
#define JOS_INC_SYSCALL_HJOS_INC_SYSCALL_H2,26
	SYS_cputs = 0,SYS_cputs6,86
	SYS_cgetc,SYS_cgetc7,102
	SYS_getenvid,SYS_getenvid8,114
	SYS_env_destroy,SYS_env_destroy9,129
	NSYSCALLSNSYSCALLS10,147

inc/kbdreg.h,2510
#define JOS_KBDREG_HJOS_KBDREG_H2,21
#define KEY_HOME	KEY_HOME5,63
#define KEY_END	KEY_END6,85
#define KEY_UP	KEY_UP7,107
#define KEY_DN	KEY_DN8,128
#define KEY_LF	KEY_LF9,149
#define KEY_RT	KEY_RT10,170
#define KEY_PGUP	KEY_PGUP11,191
#define KEY_PGDN	KEY_PGDN12,213
#define KEY_INS	KEY_INS13,235
#define KEY_DEL	KEY_DEL14,257
#define	KBSTATP	KBSTATP19,331
#define	 KBS_DIB	KBS_DIB20,389
#define	 KBS_IBF	KBS_IBF21,436
#define	 KBS_WARM	KBS_WARM22,485
#define	 KBS_OCMD	KBS_OCMD23,535
#define	 KBS_NOSEC	KBS_NOSEC24,594
#define	 KBS_TERR	KBS_TERR25,654
#define	 KBS_RERR	KBS_RERR26,720
#define	 KBS_PERR	KBS_PERR27,767
#define	KBCMDP	KBCMDP29,814
#define	 KBC_RAMREAD	KBC_RAMREAD30,864
#define	 KBC_RAMWRITE	KBC_RAMWRITE31,910
#define	 KBC_AUXDISABLE	KBC_AUXDISABLE32,956
#define	 KBC_AUXENABLE	KBC_AUXENABLE33,1014
#define	 KBC_AUXTEST	KBC_AUXTEST34,1070
#define	 KBC_KBDECHO	KBC_KBDECHO35,1122
#define	 KBC_AUXECHO	KBC_AUXECHO36,1176
#define	 KBC_AUXWRITE	KBC_AUXWRITE37,1231
#define	 KBC_SELFTEST	KBC_SELFTEST38,1288
#define	 KBC_KBDTEST	KBC_KBDTEST39,1337
#define	 KBC_KBDDISABLE	KBC_KBDDISABLE40,1388
#define	 KBC_KBDENABLE	KBC_KBDENABLE41,1445
#define	 KBC_PULSE0	KBC_PULSE042,1500
#define	 KBC_PULSE1	KBC_PULSE143,1550
#define	 KBC_PULSE2	KBC_PULSE244,1600
#define	 KBC_PULSE3	KBC_PULSE345,1650
#define	KBDATAP	KBDATAP47,1701
#define	KBOUTP	KBOUTP48,1746
#define	K_RDCMDBYTE	K_RDCMDBYTE50,1791
#define	K_LDCMDBYTE	K_LDCMDBYTE51,1816
#define	KC8_TRANS	KC8_TRANS53,1842
#define	KC8_MDISABLE	KC8_MDISABLE54,1897
#define	KC8_KDISABLE	KC8_KDISABLE55,1943
#define	KC8_IGNSEC	KC8_IGNSEC56,1992
#define	KC8_CPU	KC8_CPU57,2043
#define	KC8_MENABLE	KC8_MENABLE58,2102
#define	KC8_KENABLE	KC8_KENABLE59,2156
#define	CMDBYTE	CMDBYTE60,2213
#define	KBC_RESET	KBC_RESET63,2299
#define	KBC_RESEND	KBC_RESEND64,2347
#define	KBC_SETDEFAULT	KBC_SETDEFAULT65,2419
#define	KBC_DISABLE	KBC_DISABLE66,2494
#define	KBC_ENABLE	KBC_ENABLE67,2578
#define	KBC_TYPEMATIC	KBC_TYPEMATIC68,2628
#define	KBC_SETTABLE	KBC_SETTABLE69,2690
#define	KBC_MODEIND	KBC_MODEIND70,2753
#define	KBC_ECHO	KBC_ECHO71,2815
#define	KBR_EXTENDED	KBR_EXTENDED74,2903
#define	KBR_RESEND	KBR_RESEND75,2957
#define	KBR_ACK	KBR_ACK76,3011
#define	KBR_OVERRUN	KBR_OVERRUN77,3064
#define	KBR_FAILURE	KBR_FAILURE78,3103
#define	KBR_BREAK	KBR_BREAK79,3152
#define	KBR_RSTDONE	KBR_RSTDONE80,3221
#define	KBR_ECHO	KBR_ECHO81,3267

inc/types.h,1005
#define JOS_INC_TYPES_HJOS_INC_TYPES_H2,24
#define NULL NULL5,62
typedef _Bool bool;bool9,130
enum { false, true };false10,150
enum { false, true };true10,150
typedef __signed char int8_t;int8_t13,219
typedef unsigned char uint8_t;uint8_t14,249
typedef short int16_t;int16_t15,280
typedef unsigned short uint16_t;uint16_t16,303
typedef int int32_t;int32_t17,336
typedef unsigned int uint32_t;uint32_t18,357
typedef long long int64_t;int64_t19,388
typedef unsigned long long uint64_t;uint64_t20,415
typedef int32_t intptr_t;intptr_t26,673
typedef uint32_t uintptr_t;uintptr_t27,699
typedef uint32_t physaddr_t;physaddr_t28,727
typedef uint32_t ppn_t;ppn_t31,791
typedef uint32_t size_t;size_t34,859
typedef int32_t ssize_t;ssize_t37,975
typedef int32_t off_t;off_t40,1048
#define MIN(MIN43,1108
#define MAX(MAX49,1241
#define ROUNDDOWN(ROUNDDOWN58,1476
#define ROUNDUP(ROUNDUP64,1637
#define ARRAY_SIZE(ARRAY_SIZE70,1778
#define offsetof(offsetof73,1904

inc/assert.h,175
#define JOS_INC_ASSERT_HJOS_INC_ASSERT_H4,73
#define warn(warn11,247
#define panic(panic12,304
#define assert(assert14,364
#define static_assert(static_assert18,521

boot/sign.pl,0

boot/main.c,255
#define SECTSIZE	SECTSIZE32,1131
#define ELFHDR	ELFHDR33,1152
bootmain(void)bootmain39,1293
readseg(uint32_t pa, uint32_t count, uint32_t offset)readseg72,2092
waitdisk(void)waitdisk99,2821
readsect(void *dst, uint32_t offset)readsect107,2928

boot/boot.S,108
start:start13,454
protcseg:protcseg58,1983
spin:spin72,2497
gdt:gdt77,2598
gdtdesc:gdtdesc82,2757

obj/boot/boot.asm,729
Disassembly of section .text:Disassembly5,49
start:start11,174
protcseg:protcseg84,2893
spin:spin108,3821
voidvoid132,4396
static inline uint8_tstatic137,4463
voidvoid157,5076
static inline voidstatic169,5412
	offset = (offset / SECTSIZE) + 1;offset226,7583
	end_pa = pa + count;end_pa230,7719
	offset = (offset / SECTSIZE) + 1;offset234,7851
	end_pa = pa + count;end_pa236,7935
	offset = (offset / SECTSIZE) + 1;offset238,8006
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph282,9731
	eph = ph + ELFHDR->e_phnum;eph284,9848
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph286,9929
	eph = ph + ELFHDR->e_phnum;eph288,10052
static inline voidstatic309,10911

obj/user/faultread.asm,2611
Disassembly of section .text:Disassembly5,50
_start:_start11,194
args_exist:args_exist28,702
voidvoid38,899
const volatile struct Env *thisenv;const63,1837
const char *binaryname = "<unknown>";const64,1873
voidvoid66,1912
	thisenv = 0;thisenv79,2450
		binaryname = argv[0];binaryname87,2755
voidvoid111,3434
static voidstatic133,4101
intint176,5749
intint217,7218
	cnt = vcprintf(fmt, ap);cnt228,7495
static voidstatic242,7871
static voidstatic340,12277
		padc = ' ';padc392,14298
		altflag = 0;altflag394,14369
		precision = -1;precision396,14440
		width = -1;width398,14521
		lflag = 0;lflag400,14598
			padc = '-';padc417,15359
			padc = '0';padc424,15611
				precision = precision * 10 + ch - '0';precision434,15994
				ch = *fmt;ch437,16158
				precision = precision * 10 + ch - '0';precision445,16499
			precision = va_arg(ap, int);precision449,16617
				width = precision, precision = -1;width461,17211
			altflag = 1;altflag479,18001
			err = va_arg(ap, int);err510,19121
			err = va_arg(ap, int);err531,20164
			err = va_arg(ap, int);err542,20695
				p = "(null)";p554,21205
				num = -(long long) num;num680,27453
			base = 10;base687,27780
			num = getint(&ap, lflag);num713,29040
			base = 10;base716,29181
			base = 10;base731,29811
			base = 10;base743,30356
			base = 10;base752,30778
			num = (unsigned long long)num787,32108
			base = 16;base796,32504
			err = va_arg(ap, int);err811,33172
			base = 16;base840,34474
			base = 16;base852,35020
			base = 16;base861,35443
intint900,36909
intint952,38944
	rc = vsnprintf(buf, n, fmt, ap);rc963,39239
#define ASM 1ASM982,39816
intint984,39831
intint1007,40476
char *char1033,41341
	ret = dst;ret1043,41643
char *char1061,42236
char *char1086,43086
	ret = dst;ret1099,43561
size_tsize_t1126,44485
	dst_in = dst;dst_in1140,45014
intint1169,46067
intint1197,47109
char *char1239,48753
char *char1267,49742
void *void1292,50535
		c = (c<<24)|(c<<16)|(c<<8)|c;c1313,51307
		c = (c<<24)|(c<<16)|(c<<8)|c;c1334,52020
void *void1354,52840
	s = src;s1367,53266
	d = dst;d1368,53276
void *void1444,56447
intint1460,56931
void *void1504,58524
longlong1531,59488
		base = 10;base1580,61272
		base = 10;base1585,61482
			dig = *s - '0';dig1616,62746
			dig = *s - 'a' + 10;dig1622,63014
			dig = *s - 'A' + 10;dig1626,63171
			dig = *s - '0';dig1643,63836
			dig = *s - 'A' + 10;dig1652,64262
voidvoid1681,65220
intint1707,66156
intint1733,67061
envid_tenvid_t1778,68962
voidvoid1810,70120

obj/user/testbss.asm,2669
Disassembly of section .text:Disassembly5,48
_start:_start11,192
args_exist:args_exist28,700
uint32_t bigarray[ARRAYSIZE];uint32_t36,875
voidvoid38,906
const volatile struct Env *thisenv;const125,4733
const char *binaryname = "<unknown>";const126,4769
voidvoid128,4808
	thisenv = 0;thisenv141,5346
		binaryname = argv[0];binaryname149,5651
voidvoid173,6330
voidvoid195,7119
static voidstatic246,8991
intint289,10639
intint330,12108
	cnt = vcprintf(fmt, ap);cnt341,12385
static voidstatic355,12761
static voidstatic453,17167
		padc = ' ';padc505,19188
		altflag = 0;altflag507,19259
		precision = -1;precision509,19330
		width = -1;width511,19411
		lflag = 0;lflag513,19488
			padc = '-';padc530,20248
			padc = '0';padc537,20500
				precision = precision * 10 + ch - '0';precision547,20883
				ch = *fmt;ch550,21047
				precision = precision * 10 + ch - '0';precision558,21388
			precision = va_arg(ap, int);precision562,21506
				width = precision, precision = -1;width574,22100
			altflag = 1;altflag592,22890
			err = va_arg(ap, int);err623,24010
			err = va_arg(ap, int);err644,25053
			err = va_arg(ap, int);err655,25584
				p = "(null)";p667,26094
				num = -(long long) num;num793,32342
			base = 10;base800,32669
			num = getint(&ap, lflag);num826,33929
			base = 10;base829,34070
			base = 10;base844,34700
			base = 10;base856,35245
			base = 10;base865,35667
			num = (unsigned long long)num900,36997
			base = 16;base909,37393
			err = va_arg(ap, int);err924,38061
			base = 16;base953,39363
			base = 16;base965,39909
			base = 16;base974,40332
intint1013,41798
intint1065,43833
	rc = vsnprintf(buf, n, fmt, ap);rc1076,44128
#define ASM 1ASM1095,44705
intint1097,44720
intint1120,45365
char *char1146,46230
	ret = dst;ret1156,46532
char *char1174,47125
char *char1199,47975
	ret = dst;ret1212,48450
size_tsize_t1239,49374
	dst_in = dst;dst_in1253,49903
intint1282,50956
intint1310,51998
char *char1352,53642
char *char1380,54631
void *void1405,55424
		c = (c<<24)|(c<<16)|(c<<8)|c;c1426,56196
		c = (c<<24)|(c<<16)|(c<<8)|c;c1447,56909
void *void1467,57729
	s = src;s1480,58155
	d = dst;d1481,58165
void *void1557,61336
intint1573,61820
void *void1617,63413
longlong1644,64377
		base = 10;base1693,66161
		base = 10;base1698,66371
			dig = *s - '0';dig1729,67635
			dig = *s - 'a' + 10;dig1735,67903
			dig = *s - 'A' + 10;dig1739,68060
			dig = *s - '0';dig1756,68725
			dig = *s - 'A' + 10;dig1765,69151
voidvoid1794,70109
intint1820,71045
intint1846,71950
envid_tenvid_t1891,73851

obj/user/divzero.asm,2656
Disassembly of section .text:Disassembly5,48
_start:_start11,192
args_exist:args_exist28,700
int zero;int36,875
voidvoid38,886
	zero = 0;zero47,1230
const volatile struct Env *thisenv;const70,2100
const char *binaryname = "<unknown>";const71,2136
voidvoid73,2175
	thisenv = 0;thisenv86,2713
		binaryname = argv[0];binaryname94,3018
voidvoid118,3697
static voidstatic140,4364
intint183,6012
intint224,7481
	cnt = vcprintf(fmt, ap);cnt235,7758
static voidstatic249,8134
static voidstatic347,12540
		padc = ' ';padc399,14561
		altflag = 0;altflag401,14632
		precision = -1;precision403,14703
		width = -1;width405,14784
		lflag = 0;lflag407,14861
			padc = '-';padc424,15622
			padc = '0';padc431,15874
				precision = precision * 10 + ch - '0';precision441,16257
				ch = *fmt;ch444,16421
				precision = precision * 10 + ch - '0';precision452,16762
			precision = va_arg(ap, int);precision456,16880
				width = precision, precision = -1;width468,17474
			altflag = 1;altflag486,18264
			err = va_arg(ap, int);err517,19384
			err = va_arg(ap, int);err538,20427
			err = va_arg(ap, int);err549,20958
				p = "(null)";p561,21468
				num = -(long long) num;num687,27716
			base = 10;base694,28043
			num = getint(&ap, lflag);num720,29303
			base = 10;base723,29444
			base = 10;base738,30074
			base = 10;base750,30619
			base = 10;base759,31041
			num = (unsigned long long)num794,32371
			base = 16;base803,32767
			err = va_arg(ap, int);err818,33435
			base = 16;base847,34737
			base = 16;base859,35283
			base = 16;base868,35706
intint907,37172
intint959,39207
	rc = vsnprintf(buf, n, fmt, ap);rc970,39502
#define ASM 1ASM989,40079
intint991,40094
intint1014,40739
char *char1040,41604
	ret = dst;ret1050,41906
char *char1068,42499
char *char1093,43349
	ret = dst;ret1106,43824
size_tsize_t1133,44748
	dst_in = dst;dst_in1147,45277
intint1176,46330
intint1204,47372
char *char1246,49016
char *char1274,50005
void *void1299,50798
		c = (c<<24)|(c<<16)|(c<<8)|c;c1320,51570
		c = (c<<24)|(c<<16)|(c<<8)|c;c1341,52283
void *void1361,53103
	s = src;s1374,53529
	d = dst;d1375,53539
void *void1451,56710
intint1467,57194
void *void1511,58787
longlong1538,59751
		base = 10;base1587,61535
		base = 10;base1592,61745
			dig = *s - '0';dig1623,63009
			dig = *s - 'a' + 10;dig1629,63277
			dig = *s - 'A' + 10;dig1633,63434
			dig = *s - '0';dig1650,64099
			dig = *s - 'A' + 10;dig1659,64525
voidvoid1688,65483
intint1714,66419
intint1740,67324
envid_tenvid_t1785,69225
voidvoid1817,70383

obj/user/faultwrite.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const51,1224
const char *binaryname = "<unknown>";const52,1260
voidvoid54,1299
	thisenv = 0;thisenv67,1837
		binaryname = argv[0];binaryname75,2142
voidvoid103,2947
voidvoid125,3629
intint151,4565
intint177,5470
envid_tenvid_t222,7373
voidvoid254,8531
static voidstatic305,10403
intint348,12051
intint389,13520
	cnt = vcprintf(fmt, ap);cnt400,13797
static voidstatic414,14173
static voidstatic512,18579
		padc = ' ';padc564,20600
		altflag = 0;altflag566,20671
		precision = -1;precision568,20742
		width = -1;width570,20823
		lflag = 0;lflag572,20900
			padc = '-';padc589,21661
			padc = '0';padc596,21913
				precision = precision * 10 + ch - '0';precision606,22296
				ch = *fmt;ch609,22460
				precision = precision * 10 + ch - '0';precision617,22801
			precision = va_arg(ap, int);precision621,22919
				width = precision, precision = -1;width633,23513
			altflag = 1;altflag651,24303
			err = va_arg(ap, int);err682,25423
			err = va_arg(ap, int);err703,26466
			err = va_arg(ap, int);err714,26997
				p = "(null)";p726,27507
				num = -(long long) num;num852,33755
			base = 10;base859,34082
			num = getint(&ap, lflag);num885,35342
			base = 10;base888,35483
			base = 10;base903,36113
			base = 10;base915,36658
			base = 10;base924,37080
			num = (unsigned long long)num959,38410
			base = 16;base968,38806
			err = va_arg(ap, int);err983,39474
			base = 16;base1012,40776
			base = 16;base1024,41322
			base = 16;base1033,41745
intint1072,43211
intint1124,45246
	rc = vsnprintf(buf, n, fmt, ap);rc1135,45541
#define ASM 1ASM1154,46118
intint1156,46133
intint1179,46778
char *char1205,47643
	ret = dst;ret1215,47945
char *char1233,48538
char *char1258,49388
	ret = dst;ret1271,49863
size_tsize_t1298,50787
	dst_in = dst;dst_in1312,51316
intint1341,52369
intint1369,53411
char *char1411,55055
char *char1439,56044
void *void1464,56837
		c = (c<<24)|(c<<16)|(c<<8)|c;c1485,57609
		c = (c<<24)|(c<<16)|(c<<8)|c;c1506,58322
void *void1526,59142
	s = src;s1539,59568
	d = dst;d1540,59578
void *void1616,62749
intint1632,63233
void *void1676,64826
longlong1703,65790
		base = 10;base1752,67574
		base = 10;base1757,67784
			dig = *s - '0';dig1788,69048
			dig = *s - 'a' + 10;dig1794,69316
			dig = *s - 'A' + 10;dig1798,69473
			dig = *s - '0';dig1815,70138
			dig = *s - 'A' + 10;dig1824,70564

obj/user/badsegment.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const52,1344
const char *binaryname = "<unknown>";const53,1380
voidvoid55,1419
	thisenv = 0;thisenv68,1957
		binaryname = argv[0];binaryname76,2262
voidvoid104,3067
voidvoid126,3749
intint152,4685
intint178,5590
envid_tenvid_t223,7493
voidvoid255,8651
static voidstatic306,10523
intint349,12171
intint390,13640
	cnt = vcprintf(fmt, ap);cnt401,13917
static voidstatic415,14293
static voidstatic513,18699
		padc = ' ';padc565,20720
		altflag = 0;altflag567,20791
		precision = -1;precision569,20862
		width = -1;width571,20943
		lflag = 0;lflag573,21020
			padc = '-';padc590,21781
			padc = '0';padc597,22033
				precision = precision * 10 + ch - '0';precision607,22416
				ch = *fmt;ch610,22580
				precision = precision * 10 + ch - '0';precision618,22921
			precision = va_arg(ap, int);precision622,23039
				width = precision, precision = -1;width634,23633
			altflag = 1;altflag652,24423
			err = va_arg(ap, int);err683,25543
			err = va_arg(ap, int);err704,26586
			err = va_arg(ap, int);err715,27117
				p = "(null)";p727,27627
				num = -(long long) num;num853,33875
			base = 10;base860,34202
			num = getint(&ap, lflag);num886,35462
			base = 10;base889,35603
			base = 10;base904,36233
			base = 10;base916,36778
			base = 10;base925,37200
			num = (unsigned long long)num960,38530
			base = 16;base969,38926
			err = va_arg(ap, int);err984,39594
			base = 16;base1013,40896
			base = 16;base1025,41442
			base = 16;base1034,41865
intint1073,43331
intint1125,45366
	rc = vsnprintf(buf, n, fmt, ap);rc1136,45661
#define ASM 1ASM1155,46238
intint1157,46253
intint1180,46898
char *char1206,47763
	ret = dst;ret1216,48065
char *char1234,48658
char *char1259,49508
	ret = dst;ret1272,49983
size_tsize_t1299,50907
	dst_in = dst;dst_in1313,51436
intint1342,52489
intint1370,53531
char *char1412,55175
char *char1440,56164
void *void1465,56957
		c = (c<<24)|(c<<16)|(c<<8)|c;c1486,57729
		c = (c<<24)|(c<<16)|(c<<8)|c;c1507,58442
void *void1527,59262
	s = src;s1540,59688
	d = dst;d1541,59698
void *void1617,62869
intint1633,63353
void *void1677,64946
longlong1704,65910
		base = 10;base1753,67694
		base = 10;base1758,67904
			dig = *s - '0';dig1789,69168
			dig = *s - 'a' + 10;dig1795,69436
			dig = *s - 'A' + 10;dig1799,69593
			dig = *s - '0';dig1816,70258
			dig = *s - 'A' + 10;dig1825,70684

obj/user/faultreadkernel.asm,2611
Disassembly of section .text:Disassembly5,56
_start:_start11,200
args_exist:args_exist28,708
voidvoid38,905
const volatile struct Env *thisenv;const63,1868
const char *binaryname = "<unknown>";const64,1904
voidvoid66,1943
	thisenv = 0;thisenv79,2481
		binaryname = argv[0];binaryname87,2786
voidvoid111,3465
static voidstatic133,4132
intint176,5780
intint217,7249
	cnt = vcprintf(fmt, ap);cnt228,7526
static voidstatic242,7902
static voidstatic340,12308
		padc = ' ';padc392,14329
		altflag = 0;altflag394,14400
		precision = -1;precision396,14471
		width = -1;width398,14552
		lflag = 0;lflag400,14629
			padc = '-';padc417,15390
			padc = '0';padc424,15642
				precision = precision * 10 + ch - '0';precision434,16025
				ch = *fmt;ch437,16189
				precision = precision * 10 + ch - '0';precision445,16530
			precision = va_arg(ap, int);precision449,16648
				width = precision, precision = -1;width461,17242
			altflag = 1;altflag479,18032
			err = va_arg(ap, int);err510,19152
			err = va_arg(ap, int);err531,20195
			err = va_arg(ap, int);err542,20726
				p = "(null)";p554,21236
				num = -(long long) num;num680,27484
			base = 10;base687,27811
			num = getint(&ap, lflag);num713,29071
			base = 10;base716,29212
			base = 10;base731,29842
			base = 10;base743,30387
			base = 10;base752,30809
			num = (unsigned long long)num787,32139
			base = 16;base796,32535
			err = va_arg(ap, int);err811,33203
			base = 16;base840,34505
			base = 16;base852,35051
			base = 16;base861,35474
intint900,36940
intint952,38975
	rc = vsnprintf(buf, n, fmt, ap);rc963,39270
#define ASM 1ASM982,39847
intint984,39862
intint1007,40507
char *char1033,41372
	ret = dst;ret1043,41674
char *char1061,42267
char *char1086,43117
	ret = dst;ret1099,43592
size_tsize_t1126,44516
	dst_in = dst;dst_in1140,45045
intint1169,46098
intint1197,47140
char *char1239,48784
char *char1267,49773
void *void1292,50566
		c = (c<<24)|(c<<16)|(c<<8)|c;c1313,51338
		c = (c<<24)|(c<<16)|(c<<8)|c;c1334,52051
void *void1354,52871
	s = src;s1367,53297
	d = dst;d1368,53307
void *void1444,56478
intint1460,56962
void *void1504,58555
longlong1531,59519
		base = 10;base1580,61303
		base = 10;base1585,61513
			dig = *s - '0';dig1616,62777
			dig = *s - 'a' + 10;dig1622,63045
			dig = *s - 'A' + 10;dig1626,63202
			dig = *s - '0';dig1643,63867
			dig = *s - 'A' + 10;dig1652,64293
voidvoid1681,65251
intint1707,66187
intint1733,67092
envid_tenvid_t1778,68993
voidvoid1810,70151

obj/user/evilhello.asm,2614
Disassembly of section .text:Disassembly5,50
_start:_start11,194
args_exist:args_exist28,702
voidvoid38,899
const volatile struct Env *thisenv;const63,1832
const char *binaryname = "<unknown>";const64,1868
voidvoid66,1907
	thisenv = 0;thisenv79,2445
		binaryname = argv[0];binaryname87,2750
voidvoid111,3429
voidvoid133,4111
intint159,5047
intint185,5952
envid_tenvid_t230,7855
voidvoid262,9013
static voidstatic313,10885
intint356,12533
intint397,14002
	cnt = vcprintf(fmt, ap);cnt408,14279
static voidstatic422,14655
static voidstatic520,19061
		padc = ' ';padc572,21082
		altflag = 0;altflag574,21153
		precision = -1;precision576,21224
		width = -1;width578,21305
		lflag = 0;lflag580,21382
			padc = '-';padc597,22143
			padc = '0';padc604,22395
				precision = precision * 10 + ch - '0';precision614,22778
				ch = *fmt;ch617,22942
				precision = precision * 10 + ch - '0';precision625,23283
			precision = va_arg(ap, int);precision629,23401
				width = precision, precision = -1;width641,23995
			altflag = 1;altflag659,24785
			err = va_arg(ap, int);err690,25905
			err = va_arg(ap, int);err711,26948
			err = va_arg(ap, int);err722,27479
				p = "(null)";p734,27989
				num = -(long long) num;num860,34237
			base = 10;base867,34564
			num = getint(&ap, lflag);num893,35824
			base = 10;base896,35965
			base = 10;base911,36595
			base = 10;base923,37140
			base = 10;base932,37562
			num = (unsigned long long)num967,38892
			base = 16;base976,39288
			err = va_arg(ap, int);err991,39956
			base = 16;base1020,41258
			base = 16;base1032,41804
			base = 16;base1041,42227
intint1080,43693
intint1132,45728
	rc = vsnprintf(buf, n, fmt, ap);rc1143,46023
#define ASM 1ASM1162,46600
intint1164,46615
intint1187,47260
char *char1213,48125
	ret = dst;ret1223,48427
char *char1241,49020
char *char1266,49870
	ret = dst;ret1279,50345
size_tsize_t1306,51269
	dst_in = dst;dst_in1320,51798
intint1349,52851
intint1377,53893
char *char1419,55537
char *char1447,56526
void *void1472,57319
		c = (c<<24)|(c<<16)|(c<<8)|c;c1493,58091
		c = (c<<24)|(c<<16)|(c<<8)|c;c1514,58804
void *void1534,59624
	s = src;s1547,60050
	d = dst;d1548,60060
void *void1624,63231
intint1640,63715
void *void1684,65308
longlong1711,66272
		base = 10;base1760,68056
		base = 10;base1765,68266
			dig = *s - '0';dig1796,69530
			dig = *s - 'a' + 10;dig1802,69798
			dig = *s - 'A' + 10;dig1806,69955
			dig = *s - '0';dig1823,70620
			dig = *s - 'A' + 10;dig1832,71046

obj/user/breakpoint.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const50,1201
const char *binaryname = "<unknown>";const51,1237
voidvoid53,1276
	thisenv = 0;thisenv66,1814
		binaryname = argv[0];binaryname74,2119
voidvoid102,2924
voidvoid124,3606
intint150,4542
intint176,5447
envid_tenvid_t221,7350
voidvoid253,8508
static voidstatic304,10380
intint347,12028
intint388,13497
	cnt = vcprintf(fmt, ap);cnt399,13774
static voidstatic413,14150
static voidstatic511,18556
		padc = ' ';padc563,20577
		altflag = 0;altflag565,20648
		precision = -1;precision567,20719
		width = -1;width569,20800
		lflag = 0;lflag571,20877
			padc = '-';padc588,21638
			padc = '0';padc595,21890
				precision = precision * 10 + ch - '0';precision605,22273
				ch = *fmt;ch608,22437
				precision = precision * 10 + ch - '0';precision616,22778
			precision = va_arg(ap, int);precision620,22896
				width = precision, precision = -1;width632,23490
			altflag = 1;altflag650,24280
			err = va_arg(ap, int);err681,25400
			err = va_arg(ap, int);err702,26443
			err = va_arg(ap, int);err713,26974
				p = "(null)";p725,27484
				num = -(long long) num;num851,33732
			base = 10;base858,34059
			num = getint(&ap, lflag);num884,35319
			base = 10;base887,35460
			base = 10;base902,36090
			base = 10;base914,36635
			base = 10;base923,37057
			num = (unsigned long long)num958,38387
			base = 16;base967,38783
			err = va_arg(ap, int);err982,39451
			base = 16;base1011,40753
			base = 16;base1023,41299
			base = 16;base1032,41722
intint1071,43188
intint1123,45223
	rc = vsnprintf(buf, n, fmt, ap);rc1134,45518
#define ASM 1ASM1153,46095
intint1155,46110
intint1178,46755
char *char1204,47620
	ret = dst;ret1214,47922
char *char1232,48515
char *char1257,49365
	ret = dst;ret1270,49840
size_tsize_t1297,50764
	dst_in = dst;dst_in1311,51293
intint1340,52346
intint1368,53388
char *char1410,55032
char *char1438,56021
void *void1463,56814
		c = (c<<24)|(c<<16)|(c<<8)|c;c1484,57586
		c = (c<<24)|(c<<16)|(c<<8)|c;c1505,58299
void *void1525,59119
	s = src;s1538,59545
	d = dst;d1539,59555
void *void1615,62726
intint1631,63210
void *void1675,64803
longlong1702,65767
		base = 10;base1751,67551
		base = 10;base1756,67761
			dig = *s - '0';dig1787,69025
			dig = *s - 'a' + 10;dig1793,69293
			dig = *s - 'A' + 10;dig1797,69450
			dig = *s - '0';dig1814,70115
			dig = *s - 'A' + 10;dig1823,70541

obj/user/buggyhello2.asm,2665
Disassembly of section .text:Disassembly5,52
_start:_start11,196
args_exist:args_exist28,704
const char *hello = "hello, world\n";const36,879
voidvoid38,918
const volatile struct Env *thisenv;const62,1782
const char *binaryname = "<unknown>";const63,1818
voidvoid65,1857
	thisenv = 0;thisenv78,2395
		binaryname = argv[0];binaryname86,2700
voidvoid110,3380
voidvoid132,4062
intint158,4998
intint184,5903
envid_tenvid_t229,7806
voidvoid261,8964
static voidstatic312,10836
intint355,12484
intint396,13953
	cnt = vcprintf(fmt, ap);cnt407,14230
static voidstatic421,14606
static voidstatic519,19012
		padc = ' ';padc571,21033
		altflag = 0;altflag573,21104
		precision = -1;precision575,21175
		width = -1;width577,21256
		lflag = 0;lflag579,21333
			padc = '-';padc596,22094
			padc = '0';padc603,22346
				precision = precision * 10 + ch - '0';precision613,22729
				ch = *fmt;ch616,22893
				precision = precision * 10 + ch - '0';precision624,23234
			precision = va_arg(ap, int);precision628,23352
				width = precision, precision = -1;width640,23946
			altflag = 1;altflag658,24736
			err = va_arg(ap, int);err689,25856
			err = va_arg(ap, int);err710,26899
			err = va_arg(ap, int);err721,27430
				p = "(null)";p733,27940
				num = -(long long) num;num859,34188
			base = 10;base866,34515
			num = getint(&ap, lflag);num892,35775
			base = 10;base895,35916
			base = 10;base910,36546
			base = 10;base922,37091
			base = 10;base931,37513
			num = (unsigned long long)num966,38843
			base = 16;base975,39239
			err = va_arg(ap, int);err990,39907
			base = 16;base1019,41209
			base = 16;base1031,41755
			base = 16;base1040,42178
intint1079,43644
intint1131,45679
	rc = vsnprintf(buf, n, fmt, ap);rc1142,45974
#define ASM 1ASM1161,46551
intint1163,46566
intint1186,47211
char *char1212,48076
	ret = dst;ret1222,48378
char *char1240,48971
char *char1265,49821
	ret = dst;ret1278,50296
size_tsize_t1305,51220
	dst_in = dst;dst_in1319,51749
intint1348,52802
intint1376,53844
char *char1418,55488
char *char1446,56477
void *void1471,57270
		c = (c<<24)|(c<<16)|(c<<8)|c;c1492,58042
		c = (c<<24)|(c<<16)|(c<<8)|c;c1513,58755
void *void1533,59575
	s = src;s1546,60001
	d = dst;d1547,60011
void *void1623,63182
intint1639,63666
void *void1683,65259
longlong1710,66223
		base = 10;base1759,68007
		base = 10;base1764,68217
			dig = *s - '0';dig1795,69481
			dig = *s - 'a' + 10;dig1801,69749
			dig = *s - 'A' + 10;dig1805,69906
			dig = *s - '0';dig1822,70571
			dig = *s - 'A' + 10;dig1831,70997

obj/user/buggyhello.asm,2614
Disassembly of section .text:Disassembly5,51
_start:_start11,195
args_exist:args_exist28,703
voidvoid38,900
const volatile struct Env *thisenv;const62,1749
const char *binaryname = "<unknown>";const63,1785
voidvoid65,1824
	thisenv = 0;thisenv78,2362
		binaryname = argv[0];binaryname86,2667
voidvoid110,3346
voidvoid132,4028
intint158,4964
intint184,5869
envid_tenvid_t229,7772
voidvoid261,8930
static voidstatic312,10802
intint355,12450
intint396,13919
	cnt = vcprintf(fmt, ap);cnt407,14196
static voidstatic421,14572
static voidstatic519,18978
		padc = ' ';padc571,20999
		altflag = 0;altflag573,21070
		precision = -1;precision575,21141
		width = -1;width577,21222
		lflag = 0;lflag579,21299
			padc = '-';padc596,22060
			padc = '0';padc603,22312
				precision = precision * 10 + ch - '0';precision613,22695
				ch = *fmt;ch616,22859
				precision = precision * 10 + ch - '0';precision624,23200
			precision = va_arg(ap, int);precision628,23318
				width = precision, precision = -1;width640,23912
			altflag = 1;altflag658,24702
			err = va_arg(ap, int);err689,25822
			err = va_arg(ap, int);err710,26865
			err = va_arg(ap, int);err721,27396
				p = "(null)";p733,27906
				num = -(long long) num;num859,34154
			base = 10;base866,34481
			num = getint(&ap, lflag);num892,35741
			base = 10;base895,35882
			base = 10;base910,36512
			base = 10;base922,37057
			base = 10;base931,37479
			num = (unsigned long long)num966,38809
			base = 16;base975,39205
			err = va_arg(ap, int);err990,39873
			base = 16;base1019,41175
			base = 16;base1031,41721
			base = 16;base1040,42144
intint1079,43610
intint1131,45645
	rc = vsnprintf(buf, n, fmt, ap);rc1142,45940
#define ASM 1ASM1161,46517
intint1163,46532
intint1186,47177
char *char1212,48042
	ret = dst;ret1222,48344
char *char1240,48937
char *char1265,49787
	ret = dst;ret1278,50262
size_tsize_t1305,51186
	dst_in = dst;dst_in1319,51715
intint1348,52768
intint1376,53810
char *char1418,55454
char *char1446,56443
void *void1471,57236
		c = (c<<24)|(c<<16)|(c<<8)|c;c1492,58008
		c = (c<<24)|(c<<16)|(c<<8)|c;c1513,58721
void *void1533,59541
	s = src;s1546,59967
	d = dst;d1547,59977
void *void1623,63148
intint1639,63632
void *void1683,65225
longlong1710,66189
		base = 10;base1759,67973
		base = 10;base1764,68183
			dig = *s - '0';dig1795,69447
			dig = *s - 'a' + 10;dig1801,69715
			dig = *s - 'A' + 10;dig1805,69872
			dig = *s - '0';dig1822,70537
			dig = *s - 'A' + 10;dig1831,70963

obj/user/hello.asm,2611
Disassembly of section .text:Disassembly5,46
_start:_start11,190
args_exist:args_exist28,698
voidvoid38,910
const volatile struct Env *thisenv;const71,2240
const char *binaryname = "<unknown>";const72,2276
voidvoid74,2315
	thisenv = 0;thisenv87,2853
		binaryname = argv[0];binaryname95,3158
voidvoid119,3837
static voidstatic141,4504
intint184,6152
intint225,7621
	cnt = vcprintf(fmt, ap);cnt236,7898
static voidstatic250,8274
static voidstatic348,12680
		padc = ' ';padc400,14701
		altflag = 0;altflag402,14772
		precision = -1;precision404,14843
		width = -1;width406,14924
		lflag = 0;lflag408,15001
			padc = '-';padc425,15762
			padc = '0';padc432,16014
				precision = precision * 10 + ch - '0';precision442,16397
				ch = *fmt;ch445,16561
				precision = precision * 10 + ch - '0';precision453,16902
			precision = va_arg(ap, int);precision457,17020
				width = precision, precision = -1;width469,17614
			altflag = 1;altflag487,18404
			err = va_arg(ap, int);err518,19524
			err = va_arg(ap, int);err539,20567
			err = va_arg(ap, int);err550,21098
				p = "(null)";p562,21608
				num = -(long long) num;num688,27856
			base = 10;base695,28183
			num = getint(&ap, lflag);num721,29443
			base = 10;base724,29584
			base = 10;base739,30214
			base = 10;base751,30759
			base = 10;base760,31181
			num = (unsigned long long)num795,32511
			base = 16;base804,32907
			err = va_arg(ap, int);err819,33575
			base = 16;base848,34877
			base = 16;base860,35423
			base = 16;base869,35846
intint908,37312
intint960,39347
	rc = vsnprintf(buf, n, fmt, ap);rc971,39642
#define ASM 1ASM990,40219
intint992,40234
intint1015,40879
char *char1041,41744
	ret = dst;ret1051,42046
char *char1069,42639
char *char1094,43489
	ret = dst;ret1107,43964
size_tsize_t1134,44888
	dst_in = dst;dst_in1148,45417
intint1177,46470
intint1205,47512
char *char1247,49156
char *char1275,50145
void *void1300,50938
		c = (c<<24)|(c<<16)|(c<<8)|c;c1321,51710
		c = (c<<24)|(c<<16)|(c<<8)|c;c1342,52423
void *void1362,53243
	s = src;s1375,53669
	d = dst;d1376,53679
void *void1452,56850
intint1468,57334
void *void1512,58927
longlong1539,59891
		base = 10;base1588,61675
		base = 10;base1593,61885
			dig = *s - '0';dig1624,63149
			dig = *s - 'a' + 10;dig1630,63417
			dig = *s - 'A' + 10;dig1634,63574
			dig = *s - '0';dig1651,64239
			dig = *s - 'A' + 10;dig1660,64665
voidvoid1689,65623
intint1715,66559
intint1741,67464
envid_tenvid_t1786,69365
voidvoid1818,70523

obj/user/softint.asm,2614
Disassembly of section .text:Disassembly5,48
_start:_start11,192
args_exist:args_exist28,700
voidvoid38,897
const volatile struct Env *thisenv;const50,1217
const char *binaryname = "<unknown>";const51,1253
voidvoid53,1292
	thisenv = 0;thisenv66,1830
		binaryname = argv[0];binaryname74,2135
voidvoid102,2940
voidvoid124,3622
intint150,4558
intint176,5463
envid_tenvid_t221,7366
voidvoid253,8524
static voidstatic304,10396
intint347,12044
intint388,13513
	cnt = vcprintf(fmt, ap);cnt399,13790
static voidstatic413,14166
static voidstatic511,18572
		padc = ' ';padc563,20593
		altflag = 0;altflag565,20664
		precision = -1;precision567,20735
		width = -1;width569,20816
		lflag = 0;lflag571,20893
			padc = '-';padc588,21654
			padc = '0';padc595,21906
				precision = precision * 10 + ch - '0';precision605,22289
				ch = *fmt;ch608,22453
				precision = precision * 10 + ch - '0';precision616,22794
			precision = va_arg(ap, int);precision620,22912
				width = precision, precision = -1;width632,23506
			altflag = 1;altflag650,24296
			err = va_arg(ap, int);err681,25416
			err = va_arg(ap, int);err702,26459
			err = va_arg(ap, int);err713,26990
				p = "(null)";p725,27500
				num = -(long long) num;num851,33748
			base = 10;base858,34075
			num = getint(&ap, lflag);num884,35335
			base = 10;base887,35476
			base = 10;base902,36106
			base = 10;base914,36651
			base = 10;base923,37073
			num = (unsigned long long)num958,38403
			base = 16;base967,38799
			err = va_arg(ap, int);err982,39467
			base = 16;base1011,40769
			base = 16;base1023,41315
			base = 16;base1032,41738
intint1071,43204
intint1123,45239
	rc = vsnprintf(buf, n, fmt, ap);rc1134,45534
#define ASM 1ASM1153,46111
intint1155,46126
intint1178,46771
char *char1204,47636
	ret = dst;ret1214,47938
char *char1232,48531
char *char1257,49381
	ret = dst;ret1270,49856
size_tsize_t1297,50780
	dst_in = dst;dst_in1311,51309
intint1340,52362
intint1368,53404
char *char1410,55048
char *char1438,56037
void *void1463,56830
		c = (c<<24)|(c<<16)|(c<<8)|c;c1484,57602
		c = (c<<24)|(c<<16)|(c<<8)|c;c1505,58315
void *void1525,59135
	s = src;s1538,59561
	d = dst;d1539,59571
void *void1615,62742
intint1631,63226
void *void1675,64819
longlong1702,65783
		base = 10;base1751,67567
		base = 10;base1756,67777
			dig = *s - '0';dig1787,69041
			dig = *s - 'a' + 10;dig1793,69309
			dig = *s - 'A' + 10;dig1797,69466
			dig = *s - '0';dig1814,70131
			dig = *s - 'A' + 10;dig1823,70557

obj/user/faultwritekernel.asm,2614
Disassembly of section .text:Disassembly5,57
_start:_start11,201
args_exist:args_exist28,709
voidvoid38,906
const volatile struct Env *thisenv;const51,1246
const char *binaryname = "<unknown>";const52,1282
voidvoid54,1321
	thisenv = 0;thisenv67,1859
		binaryname = argv[0];binaryname75,2164
voidvoid103,2969
voidvoid125,3651
intint151,4587
intint177,5492
envid_tenvid_t222,7395
voidvoid254,8553
static voidstatic305,10425
intint348,12073
intint389,13542
	cnt = vcprintf(fmt, ap);cnt400,13819
static voidstatic414,14195
static voidstatic512,18601
		padc = ' ';padc564,20622
		altflag = 0;altflag566,20693
		precision = -1;precision568,20764
		width = -1;width570,20845
		lflag = 0;lflag572,20922
			padc = '-';padc589,21683
			padc = '0';padc596,21935
				precision = precision * 10 + ch - '0';precision606,22318
				ch = *fmt;ch609,22482
				precision = precision * 10 + ch - '0';precision617,22823
			precision = va_arg(ap, int);precision621,22941
				width = precision, precision = -1;width633,23535
			altflag = 1;altflag651,24325
			err = va_arg(ap, int);err682,25445
			err = va_arg(ap, int);err703,26488
			err = va_arg(ap, int);err714,27019
				p = "(null)";p726,27529
				num = -(long long) num;num852,33777
			base = 10;base859,34104
			num = getint(&ap, lflag);num885,35364
			base = 10;base888,35505
			base = 10;base903,36135
			base = 10;base915,36680
			base = 10;base924,37102
			num = (unsigned long long)num959,38432
			base = 16;base968,38828
			err = va_arg(ap, int);err983,39496
			base = 16;base1012,40798
			base = 16;base1024,41344
			base = 16;base1033,41767
intint1072,43233
intint1124,45268
	rc = vsnprintf(buf, n, fmt, ap);rc1135,45563
#define ASM 1ASM1154,46140
intint1156,46155
intint1179,46800
char *char1205,47665
	ret = dst;ret1215,47967
char *char1233,48560
char *char1258,49410
	ret = dst;ret1271,49885
size_tsize_t1298,50809
	dst_in = dst;dst_in1312,51338
intint1341,52391
intint1369,53433
char *char1411,55077
char *char1439,56066
void *void1464,56859
		c = (c<<24)|(c<<16)|(c<<8)|c;c1485,57631
		c = (c<<24)|(c<<16)|(c<<8)|c;c1506,58344
void *void1526,59164
	s = src;s1539,59590
	d = dst;d1540,59600
void *void1616,62771
intint1632,63255
void *void1676,64848
longlong1703,65812
		base = 10;base1752,67596
		base = 10;base1757,67806
			dig = *s - '0';dig1788,69070
			dig = *s - 'a' + 10;dig1794,69338
			dig = *s - 'A' + 10;dig1798,69495
			dig = *s - '0';dig1815,70160
			dig = *s - 'A' + 10;dig1824,70586

obj/kern/kernel.asm,447682
Disassembly of section .text:Disassembly5,47
f0100000 <_start+0xeffffff4>:f01000007,78
_start = RELOC(entry)_start9,123
entry:entry12,159
f0100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dhf010000014,200
f0100006:	00 00                	add    %al,(%eax)f010000615,256
f0100008:	fe 4f 52             	decb   0x52(%edi)f010000816,306
f010000b:	e4                   	.byte 0xe4f010000b17,356
f010000c <entry>:f010000c19,400
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472f010000c20,418
f0100013:	34 12 f010001321,471
f0100015:	b8 00 00 18 00       	mov    $0x180000,%eaxf010001528,696
f010001a:	0f 22 d8             	mov    %eax,%cr3f010001a30,767
f010001d:	0f 20 c0             	mov    %cr0,%eaxf010001d33,852
f0100020:	0d 01 00 01 80       	or     $0x80010001,%eaxf010002035,936
f0100025:	0f 22 c0             	mov    %eax,%cr0f010002537,1009
f0100028:	b8 2f 00 10 f0       	mov    $0xf010002f,%eaxf010002843,1219
f010002d:	ff e0                	jmp    *%eaxf010002d45,1286
f010002f <relocated>:f010002f47,1332
relocated:relocated48,1354
f010002f:	bd 00 00 00 00       	mov    $0x0,%ebpf010002f54,1542
f0100034:	bc 00 90 11 f0       	mov    $0xf0119000,%espf010003458,1644
f0100039:	e8 02 00 00 00       	call   f0100040 <i386_init>f010003962,1734
f010003e <spin>:f010003e64,1795
spin:	jmp	spinspin67,1869
f010003e:	eb fe                	jmp    f010003e <spin>f010003e68,1884
f0100040 <i386_init>:f010004070,1940
voidvoid74,1987
f0100040:	55                   	push   %ebpf010004077,2010
f0100041:	89 e5                	mov    %esp,%ebpf010004178,2054
f0100043:	53                   	push   %ebxf010004379,2103
f0100044:	83 ec 08             	sub    $0x8,%espf010004480,2147
f0100047:	e8 1b 01 00 00       	call   f0100167 <__x86.get_pc_thunk.bx>f010004781,2196
f010004c:	81 c3 d4 ef 07 00    	add    $0x7efd4,%ebxf010004c82,2268
f0100052:	c7 c0 00 20 18 f0    	mov    $0xf0182000,%eaxf010005289,2585
f0100058:	c7 c2 00 11 18 f0    	mov    $0xf0181100,%edxf010005890,2641
f010005e:	29 d0                	sub    %edx,%eaxf010005e91,2697
f0100060:	50                   	push   %eaxf010006092,2746
f0100061:	6a 00                	push   $0x0f010006193,2790
f0100063:	52                   	push   %edxf010006394,2834
f0100064:	e8 8b 46 00 00       	call   f01046f4 <memset>f010006495,2878
f0100069:	e8 4e 05 00 00       	call   f01005bc <cons_init>f0100069100,3025
f010006e:	83 c4 08             	add    $0x8,%espf010006e103,3133
f0100071:	68 ac 1a 00 00       	push   $0x1aacf0100071104,3182
f0100076:	8d 83 20 5b f8 ff    	lea    -0x7a4e0(%ebx),%eaxf0100076105,3229
f010007c:	50                   	push   %eaxf010007c106,3288
f010007d:	e8 98 36 00 00       	call   f010371a <cprintf>f010007d107,3332
f0100082:	e8 78 13 00 00       	call   f01013ff <mem_init>f0100082111,3457
f0100087:	e8 2a 32 00 00       	call   f01032b6 <env_init>f0100087115,3582
f010008c:	e8 3c 37 00 00       	call   f01037cd <trap_init>f010008c117,3655
f0100091:	83 c4 08             	add    $0x8,%espf0100091124,3880
f0100094:	6a 00                	push   $0x0f0100094125,3929
f0100096:	ff b3 f4 ff ff ff    	pushl  -0xc(%ebx)f0100096126,3973
f010009c:	e8 4e 33 00 00       	call   f01033ef <env_create>f010009c127,4023
f01000a1:	83 c4 04             	add    $0x4,%espf01000a1132,4184
f01000a4:	c7 c0 48 13 18 f0    	mov    $0xf0181348,%eaxf01000a4133,4233
f01000aa:	ff 30                	pushl  (%eax)f01000aa134,4289
f01000ac:	e8 b8 35 00 00       	call   f0103669 <env_run>f01000ac135,4335
f01000b1 <_panic>:f01000b1137,4394
voidvoid141,4530
f01000b1:	55                   	push   %ebpf01000b1144,4593
f01000b2:	89 e5                	mov    %esp,%ebpf01000b2145,4637
f01000b4:	57                   	push   %edif01000b4146,4686
f01000b5:	56                   	push   %esif01000b5147,4730
f01000b6:	53                   	push   %ebxf01000b6148,4774
f01000b7:	83 ec 0c             	sub    $0xc,%espf01000b7149,4818
f01000ba:	e8 a8 00 00 00       	call   f0100167 <__x86.get_pc_thunk.bx>f01000ba150,4867
f01000bf:	81 c3 61 ef 07 00    	add    $0x7ef61,%ebxf01000bf151,4939
f01000c5:	8b 7d 10             	mov    0x10(%ebp),%edif01000c5152,4992
f01000c8:	c7 c0 04 20 18 f0    	mov    $0xf0182004,%eaxf01000c8156,5076
f01000ce:	83 38 00             	cmpl   $0x0,(%eax)f01000ce157,5132
f01000d1:	74 0f                	je     f01000e2 <_panic+0x31>f01000d1158,5183
dead:dead161,5259
f01000d3:	83 ec 0c             	sub    $0xc,%espf01000d3165,5330
f01000d6:	6a 00                	push   $0x0f01000d6166,5379
f01000d8:	e8 67 08 00 00       	call   f0100944 <monitor>f01000d8167,5423
f01000dd:	83 c4 10             	add    $0x10,%espf01000dd168,5481
f01000e0:	eb f1                	jmp    f01000d3 <_panic+0x22>f01000e0169,5531
	panicstr = fmt;panicstr170,5593
f01000e2:	89 38                	mov    %edi,(%eax)f01000e2171,5610
f01000e4:	fa                   	cli    f01000e4173,5688
f01000e5:	fc                   	cld    f01000e5174,5728
f01000e6:	8d 75 14             	lea    0x14(%ebp),%esif01000e6176,5788
f01000e9:	83 ec 04             	sub    $0x4,%espf01000e9178,5892
f01000ec:	ff 75 0c             	pushl  0xc(%ebp)f01000ec179,5941
f01000ef:	ff 75 08             	pushl  0x8(%ebp)f01000ef180,5990
f01000f2:	8d 83 3b 5b f8 ff    	lea    -0x7a4c5(%ebx),%eaxf01000f2181,6039
f01000f8:	50                   	push   %eaxf01000f8182,6098
f01000f9:	e8 1c 36 00 00       	call   f010371a <cprintf>f01000f9183,6142
f01000fe:	83 c4 08             	add    $0x8,%espf01000fe185,6220
f0100101:	56                   	push   %esif0100101186,6269
f0100102:	57                   	push   %edif0100102187,6313
f0100103:	e8 db 35 00 00       	call   f01036e3 <vcprintf>f0100103188,6357
f0100108:	8d 83 e2 6b f8 ff    	lea    -0x7941e(%ebx),%eaxf0100108190,6432
f010010e:	89 04 24             	mov    %eax,(%esp)f010010e191,6491
f0100111:	e8 04 36 00 00       	call   f010371a <cprintf>f0100111192,6542
f0100116:	83 c4 10             	add    $0x10,%espf0100116193,6600
f0100119:	eb b8                	jmp    f01000d3 <_panic+0x22>f0100119194,6650
f010011b <_warn>:f010011b196,6713
voidvoid200,6762
f010011b:	55                   	push   %ebpf010011b203,6824
f010011c:	89 e5                	mov    %esp,%ebpf010011c204,6868
f010011e:	56                   	push   %esif010011e205,6917
f010011f:	53                   	push   %ebxf010011f206,6961
f0100120:	e8 42 00 00 00       	call   f0100167 <__x86.get_pc_thunk.bx>f0100120207,7005
f0100125:	81 c3 fb ee 07 00    	add    $0x7eefb,%ebxf0100125208,7077
f010012b:	8d 75 14             	lea    0x14(%ebp),%esif010012b212,7164
f010012e:	83 ec 04             	sub    $0x4,%espf010012e214,7270
f0100131:	ff 75 0c             	pushl  0xc(%ebp)f0100131215,7319
f0100134:	ff 75 08             	pushl  0x8(%ebp)f0100134216,7368
f0100137:	8d 83 53 5b f8 ff    	lea    -0x7a4ad(%ebx),%eaxf0100137217,7417
f010013d:	50                   	push   %eaxf010013d218,7476
f010013e:	e8 d7 35 00 00       	call   f010371a <cprintf>f010013e219,7520
f0100143:	83 c4 08             	add    $0x8,%espf0100143221,7598
f0100146:	56                   	push   %esif0100146222,7647
f0100147:	ff 75 10             	pushl  0x10(%ebp)f0100147223,7691
f010014a:	e8 94 35 00 00       	call   f01036e3 <vcprintf>f010014a224,7741
f010014f:	8d 83 e2 6b f8 ff    	lea    -0x7941e(%ebx),%eaxf010014f226,7816
f0100155:	89 04 24             	mov    %eax,(%esp)f0100155227,7875
f0100158:	e8 bd 35 00 00       	call   f010371a <cprintf>f0100158228,7926
f010015d:	83 c4 10             	add    $0x10,%espf010015d231,7999
f0100160:	8d 65 f8             	lea    -0x8(%ebp),%espf0100160232,8049
f0100163:	5b                   	pop    %ebxf0100163233,8104
f0100164:	5e                   	pop    %esif0100164234,8148
f0100165:	5d                   	pop    %ebpf0100165235,8192
f0100166:	c3                   	ret    f0100166236,8236
f0100167 <__x86.get_pc_thunk.bx>:f0100167238,8277
f0100167:	8b 1c 24             	mov    (%esp),%ebxf0100167239,8311
f010016a:	c3                   	ret    f010016a240,8362
f010016b <serial_proc_data>:f010016b242,8403
static bool serial_exists;static244,8433
static intstatic246,8461
f010016b:	55                   	push   %ebpf010016b249,8497
f010016c:	89 e5                	mov    %esp,%ebpf010016c250,8541
static inline uint8_tstatic252,8591
f010016e:	ba fd 03 00 00       	mov    $0x3fd,%edxf010016e257,8700
f0100173:	ec                   	in     (%dx),%alf0100173258,8751
f0100174:	a8 01                	test   $0x1,%alf0100174260,8842
f0100176:	74 0b                	je     f0100183 <serial_proc_data+0x18>f0100176261,8890
f0100178:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100178262,8962
f010017d:	ec                   	in     (%dx),%alf010017d263,9013
f010017e:	0f b6 c0             	movzbl %al,%eaxf010017e266,9101
f0100181:	5d                   	pop    %ebpf0100181268,9151
f0100182:	c3                   	ret    f0100182269,9195
f0100183:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100183271,9248
f0100188:	eb f7                	jmp    f0100181 <serial_proc_data+0x16>f0100188272,9304
f010018a <cons_intr>:f010018a274,9377
static voidstatic278,9507
f010018a:	55                   	push   %ebpf010018a281,9550
f010018b:	89 e5                	mov    %esp,%ebpf010018b282,9594
f010018d:	56                   	push   %esif010018d283,9643
f010018e:	53                   	push   %ebxf010018e284,9687
f010018f:	e8 d3 ff ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010018f285,9731
f0100194:	81 c3 8c ee 07 00    	add    $0x7ee8c,%ebxf0100194286,9803
f010019a:	89 c6                	mov    %eax,%esif010019a287,9856
f010019c:	ff d6                	call   *%esif010019c291,9947
f010019e:	83 f8 ff             	cmp    $0xffffffff,%eaxf010019e292,9992
f01001a1:	74 2e                	je     f01001d1 <cons_intr+0x47>f01001a1293,10048
f01001a3:	85 c0                	test   %eax,%eaxf01001a3295,10127
f01001a5:	74 f5                	je     f010019c <cons_intr+0x12>f01001a5296,10176
f01001a7:	8b 8b 04 23 00 00    	mov    0x2304(%ebx),%ecxf01001a7299,10283
f01001ad:	8d 51 01             	lea    0x1(%ecx),%edxf01001ad300,10340
f01001b0:	89 93 04 23 00 00    	mov    %edx,0x2304(%ebx)f01001b0301,10394
f01001b6:	88 84 0b 00 21 00 00 	mov    %al,0x2100(%ebx,%ecx,1)f01001b6302,10451
f01001bd:	81 fa 00 02 00 00    	cmp    $0x200,%edxf01001bd304,10546
f01001c3:	75 d7                	jne    f010019c <cons_intr+0x12>f01001c3305,10597
f01001c5:	c7 83 04 23 00 00 00 	movl   $0x0,0x2304(%ebx)f01001c5307,10680
f01001cc:	00 00 00 f01001cc308,10737
f01001cf:	eb cb                	jmp    f010019c <cons_intr+0x12>f01001cf309,10757
f01001d1:	5b                   	pop    %ebxf01001d1312,10827
f01001d2:	5e                   	pop    %esif01001d2313,10871
f01001d3:	5d                   	pop    %ebpf01001d3314,10915
f01001d4:	c3                   	ret    f01001d4315,10959
f01001d5 <kbd_proc_data>:f01001d5317,11000
f01001d5:	55                   	push   %ebpf01001d5319,11028
f01001d6:	89 e5                	mov    %esp,%ebpf01001d6320,11072
f01001d8:	56                   	push   %esif01001d8321,11121
f01001d9:	53                   	push   %ebxf01001d9322,11165
f01001da:	e8 88 ff ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01001da323,11209
f01001df:	81 c3 41 ee 07 00    	add    $0x7ee41,%ebxf01001df324,11281
f01001e5:	ba 64 00 00 00       	mov    $0x64,%edxf01001e5325,11334
f01001ea:	ec                   	in     (%dx),%alf01001ea326,11384
f01001eb:	a8 01                	test   $0x1,%alf01001eb328,11461
f01001ed:	0f 84 06 01 00 00    	je     f01002f9 <kbd_proc_data+0x124>f01001ed329,11509
f01001f3:	a8 20                	test   $0x20,%alf01001f3331,11601
f01001f5:	0f 85 05 01 00 00    	jne    f0100300 <kbd_proc_data+0x12b>f01001f5332,11650
f01001fb:	ba 60 00 00 00       	mov    $0x60,%edxf01001fb333,11720
f0100200:	ec                   	in     (%dx),%alf0100200334,11770
f0100201:	89 c2                	mov    %eax,%edxf0100201335,11819
f0100203:	3c e0                	cmp    $0xe0,%alf0100203337,11889
f0100205:	0f 84 93 00 00 00    	je     f010029e <kbd_proc_data+0xc9>f0100205338,11938
f010020b:	84 c0                	test   %al,%alf010020b340,12034
f010020d:	0f 88 a0 00 00 00    	js     f01002b3 <kbd_proc_data+0xde>f010020d341,12081
f0100213:	8b 8b e0 20 00 00    	mov    0x20e0(%ebx),%ecxf0100213343,12179
f0100219:	f6 c1 40             	test   $0x40,%clf0100219344,12236
f010021c:	74 0e                	je     f010022c <kbd_proc_data+0x57>f010021c345,12285
f010021e:	83 c8 80             	or     $0xffffff80,%eaxf010021e347,12370
f0100221:	89 c2                	mov    %eax,%edxf0100221348,12426
f0100223:	83 e1 bf             	and    $0xffffffbf,%ecxf0100223350,12494
f0100226:	89 8b e0 20 00 00    	mov    %ecx,0x20e0(%ebx)f0100226351,12550
f010022c:	0f b6 d2             	movzbl %dl,%edxf010022c353,12634
f010022f:	0f b6 84 13 a0 5c f8 	movzbl -0x7a360(%ebx,%edx,1),%eaxf010022f354,12682
f0100236:	ff f0100236355,12748
f0100237:	0b 83 e0 20 00 00    	or     0x20e0(%ebx),%eaxf0100237356,12762
f010023d:	0f b6 8c 13 a0 5b f8 	movzbl -0x7a460(%ebx,%edx,1),%ecxf010023d358,12847
f0100244:	ff f0100244359,12913
f0100245:	31 c8                	xor    %ecx,%eaxf0100245360,12927
f0100247:	89 83 e0 20 00 00    	mov    %eax,0x20e0(%ebx)f0100247361,12976
	c = charcode[shift & (CTL | SHIFT)][data];c362,13033
f010024d:	89 c1                	mov    %eax,%ecxf010024d363,13077
f010024f:	83 e1 03             	and    $0x3,%ecxf010024f364,13126
f0100252:	8b 8c 8b 00 20 00 00 	mov    0x2000(%ebx,%ecx,4),%ecxf0100252365,13175
f0100259:	0f b6 14 11          	movzbl (%ecx,%edx,1),%edxf0100259366,13239
f010025d:	0f b6 f2             	movzbl %dl,%esif010025d367,13297
f0100260:	a8 08                	test   $0x8,%alf0100260369,13370
f0100262:	74 0d                	je     f0100271 <kbd_proc_data+0x9c>f0100262370,13418
f0100264:	89 f2                	mov    %esi,%edxf0100264372,13515
f0100266:	8d 4e 9f             	lea    -0x61(%esi),%ecxf0100266373,13564
f0100269:	83 f9 19             	cmp    $0x19,%ecxf0100269374,13620
f010026c:	77 7a                	ja     f01002e8 <kbd_proc_data+0x113>f010026c375,13670
f010026e:	83 ee 20             	sub    $0x20,%esif010026e377,13759
f0100271:	f7 d0                	not    %eaxf0100271379,13857
f0100273:	a8 06                	test   $0x6,%alf0100273380,13901
f0100275:	75 33                	jne    f01002aa <kbd_proc_data+0xd5>f0100275381,13949
f0100277:	81 fe e9 00 00 00    	cmp    $0xe9,%esif0100277382,14018
f010027d:	75 2b                	jne    f01002aa <kbd_proc_data+0xd5>f010027d383,14068
f010027f:	83 ec 0c             	sub    $0xc,%espf010027f385,14164
f0100282:	8d 83 6d 5b f8 ff    	lea    -0x7a493(%ebx),%eaxf0100282386,14213
f0100288:	50                   	push   %eaxf0100288387,14272
f0100289:	e8 8c 34 00 00       	call   f010371a <cprintf>f0100289388,14316
static inline voidstatic391,14377
f010028e:	b8 03 00 00 00       	mov    $0x3,%eaxf010028e395,14484
f0100293:	ba 92 00 00 00       	mov    $0x92,%edxf0100293396,14533
f0100298:	ee                   	out    %al,(%dx)f0100298397,14583
f0100299:	83 c4 10             	add    $0x10,%espf0100299398,14632
f010029c:	eb 0c                	jmp    f01002aa <kbd_proc_data+0xd5>f010029c399,14682
f010029e:	83 8b e0 20 00 00 40 	orl    $0x40,0x20e0(%ebx)f010029e401,14769
f01002a5:	be 00 00 00 00       	mov    $0x0,%esif01002a5403,14839
f01002aa:	89 f0                	mov    %esi,%eaxf01002aa405,14890
f01002ac:	8d 65 f8             	lea    -0x8(%ebp),%espf01002ac406,14939
f01002af:	5b                   	pop    %ebxf01002af407,14994
f01002b0:	5e                   	pop    %esif01002b0408,15038
f01002b1:	5d                   	pop    %ebpf01002b1409,15082
f01002b2:	c3                   	ret    f01002b2410,15126
		data = (shift & E0ESC ? data : data & 0x7F);data411,15166
f01002b3:	8b 8b e0 20 00 00    	mov    0x20e0(%ebx),%ecxf01002b3412,15213
f01002b9:	89 ce                	mov    %ecx,%esif01002b9413,15270
f01002bb:	83 e6 40             	and    $0x40,%esif01002bb414,15319
f01002be:	83 e0 7f             	and    $0x7f,%eaxf01002be415,15369
f01002c1:	85 f6                	test   %esi,%esif01002c1416,15419
f01002c3:	0f 44 d0             	cmove  %eax,%edxf01002c3417,15468
f01002c6:	0f b6 d2             	movzbl %dl,%edxf01002c6419,15556
f01002c9:	0f b6 84 13 a0 5c f8 	movzbl -0x7a360(%ebx,%edx,1),%eaxf01002c9420,15604
f01002d0:	ff f01002d0421,15670
f01002d1:	83 c8 40             	or     $0x40,%eaxf01002d1422,15684
f01002d4:	0f b6 c0             	movzbl %al,%eaxf01002d4423,15734
f01002d7:	f7 d0                	not    %eaxf01002d7424,15782
f01002d9:	21 c8                	and    %ecx,%eaxf01002d9425,15826
f01002db:	89 83 e0 20 00 00    	mov    %eax,0x20e0(%ebx)f01002db426,15875
f01002e1:	be 00 00 00 00       	mov    $0x0,%esif01002e1428,15944
f01002e6:	eb c2                	jmp    f01002aa <kbd_proc_data+0xd5>f01002e6429,15993
f01002e8:	83 ea 41             	sub    $0x41,%edxf01002e8431,16095
f01002eb:	8d 4e 20             	lea    0x20(%esi),%ecxf01002eb433,16164
f01002ee:	83 fa 1a             	cmp    $0x1a,%edxf01002ee434,16219
f01002f1:	0f 42 f1             	cmovb  %ecx,%esif01002f1435,16269
f01002f4:	e9 78 ff ff ff       	jmp    f0100271 <kbd_proc_data+0x9c>f01002f4436,16318
f01002f9:	be ff ff ff ff       	mov    $0xffffffff,%esif01002f9438,16400
f01002fe:	eb aa                	jmp    f01002aa <kbd_proc_data+0xd5>f01002fe439,16456
f0100300:	be ff ff ff ff       	mov    $0xffffffff,%esif0100300441,16538
f0100305:	eb a3                	jmp    f01002aa <kbd_proc_data+0xd5>f0100305442,16594
f0100307 <cons_putc>:f0100307444,16664
static voidstatic448,16726
f0100307:	55                   	push   %ebpf0100307451,16757
f0100308:	89 e5                	mov    %esp,%ebpf0100308452,16801
f010030a:	57                   	push   %edif010030a453,16850
f010030b:	56                   	push   %esif010030b454,16894
f010030c:	53                   	push   %ebxf010030c455,16938
f010030d:	83 ec 1c             	sub    $0x1c,%espf010030d456,16982
f0100310:	e8 52 fe ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100310457,17032
f0100315:	81 c3 0b ed 07 00    	add    $0x7ed0b,%ebxf0100315458,17104
f010031b:	89 45 e4             	mov    %eax,-0x1c(%ebp)f010031b459,17157
f010031e:	be 00 00 00 00       	mov    $0x0,%esif010031e461,17226
f0100323:	bf fd 03 00 00       	mov    $0x3fd,%edif0100323463,17331
f0100328:	b9 84 00 00 00       	mov    $0x84,%ecxf0100328464,17382
f010032d:	eb 09                	jmp    f0100338 <cons_putc+0x31>f010032d465,17432
f010032f:	89 ca                	mov    %ecx,%edxf010032f466,17497
f0100331:	ec                   	in     (%dx),%alf0100331467,17546
f0100332:	ec                   	in     (%dx),%alf0100332468,17595
f0100333:	ec                   	in     (%dx),%alf0100333469,17644
f0100334:	ec                   	in     (%dx),%alf0100334470,17693
f0100335:	83 c6 01             	add    $0x1,%esif0100335472,17753
f0100338:	89 fa                	mov    %edi,%edxf0100338473,17802
f010033a:	ec                   	in     (%dx),%alf010033a474,17851
f010033b:	a8 20                	test   $0x20,%alf010033b476,17959
f010033d:	75 08                	jne    f0100347 <cons_putc+0x40>f010033d477,18008
f010033f:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif010033f478,18073
f0100345:	7e e8                	jle    f010032f <cons_putc+0x28>f0100345479,18125
f0100347:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100347481,18215
f010034a:	89 f8                	mov    %edi,%eaxf010034a482,18271
f010034c:	88 45 e3             	mov    %al,-0x1d(%ebp)f010034c483,18320
f010034f:	ba f8 03 00 00       	mov    $0x3f8,%edxf010034f485,18432
f0100354:	ee                   	out    %al,(%dx)f0100354486,18483
f0100355:	be 00 00 00 00       	mov    $0x0,%esif0100355488,18587
f010035a:	bf 79 03 00 00       	mov    $0x379,%edif010035a490,18692
f010035f:	b9 84 00 00 00       	mov    $0x84,%ecxf010035f491,18743
f0100364:	eb 09                	jmp    f010036f <cons_putc+0x68>f0100364492,18793
f0100366:	89 ca                	mov    %ecx,%edxf0100366493,18858
f0100368:	ec                   	in     (%dx),%alf0100368494,18907
f0100369:	ec                   	in     (%dx),%alf0100369495,18956
f010036a:	ec                   	in     (%dx),%alf010036a496,19005
f010036b:	ec                   	in     (%dx),%alf010036b497,19054
f010036c:	83 c6 01             	add    $0x1,%esif010036c498,19103
f010036f:	89 fa                	mov    %edi,%edxf010036f499,19152
f0100371:	ec                   	in     (%dx),%alf0100371500,19201
f0100372:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif0100372501,19250
f0100378:	7f 04                	jg     f010037e <cons_putc+0x77>f0100378502,19302
f010037a:	84 c0                	test   %al,%alf010037a503,19367
f010037c:	79 e8                	jns    f0100366 <cons_putc+0x5f>f010037c504,19414
f010037e:	ba 78 03 00 00       	mov    $0x378,%edxf010037e506,19536
f0100383:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eaxf0100383507,19587
f0100387:	ee                   	out    %al,(%dx)f0100387508,19643
f0100388:	ba 7a 03 00 00       	mov    $0x37a,%edxf0100388509,19692
f010038d:	b8 0d 00 00 00       	mov    $0xd,%eaxf010038d510,19743
f0100392:	ee                   	out    %al,(%dx)f0100392511,19792
f0100393:	b8 08 00 00 00       	mov    $0x8,%eaxf0100393512,19841
f0100398:	ee                   	out    %al,(%dx)f0100398513,19890
f0100399:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100399515,19958
f010039c:	89 fa                	mov    %edi,%edxf010039c516,20014
f010039e:	81 e2 00 ff ff ff    	and    $0xffffff00,%edxf010039e517,20063
f01003a4:	89 f8                	mov    %edi,%eaxf01003a4519,20134
f01003a6:	80 cc 07             	or     $0x7,%ahf01003a6520,20183
f01003a9:	85 d2                	test   %edx,%edxf01003a9521,20231
f01003ab:	0f 45 c7             	cmovne %edi,%eaxf01003ab522,20280
f01003ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01003ae523,20329
f01003b1:	0f b6 c0             	movzbl %al,%eaxf01003b1525,20406
f01003b4:	83 f8 09             	cmp    $0x9,%eaxf01003b4526,20454
f01003b7:	0f 84 b9 00 00 00    	je     f0100476 <cons_putc+0x16f>f01003b7527,20503
f01003bd:	83 f8 09             	cmp    $0x9,%eaxf01003bd528,20569
f01003c0:	7e 74                	jle    f0100436 <cons_putc+0x12f>f01003c0529,20618
f01003c2:	83 f8 0a             	cmp    $0xa,%eaxf01003c2530,20684
f01003c5:	0f 84 9e 00 00 00    	je     f0100469 <cons_putc+0x162>f01003c5531,20733
f01003cb:	83 f8 0d             	cmp    $0xd,%eaxf01003cb532,20799
f01003ce:	0f 85 d9 00 00 00    	jne    f01004ad <cons_putc+0x1a6>f01003ce533,20848
f01003d4:	0f b7 83 08 23 00 00 	movzwl 0x2308(%ebx),%eaxf01003d4535,20949
f01003db:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eaxf01003db536,21006
f01003e1:	c1 e8 16             	shr    $0x16,%eaxf01003e1537,21063
f01003e4:	8d 04 80             	lea    (%eax,%eax,4),%eaxf01003e4538,21113
f01003e7:	c1 e0 04             	shl    $0x4,%eaxf01003e7539,21171
f01003ea:	66 89 83 08 23 00 00 	mov    %ax,0x2308(%ebx)f01003ea540,21220
f01003f1:	66 81 bb 08 23 00 00 	cmpw   $0x7cf,0x2308(%ebx)f01003f1542,21304
f01003f8:	cf 07 f01003f8543,21363
f01003fa:	0f 87 d4 00 00 00    	ja     f01004d4 <cons_putc+0x1cd>f01003fa544,21380
f0100400:	8b 8b 10 23 00 00    	mov    0x2310(%ebx),%ecxf0100400546,21468
f0100406:	b8 0e 00 00 00       	mov    $0xe,%eaxf0100406547,21525
f010040b:	89 ca                	mov    %ecx,%edxf010040b548,21574
f010040d:	ee                   	out    %al,(%dx)f010040d549,21623
f010040e:	0f b7 9b 08 23 00 00 	movzwl 0x2308(%ebx),%ebxf010040e551,21708
f0100415:	8d 71 01             	lea    0x1(%ecx),%esif0100415552,21765
f0100418:	89 d8                	mov    %ebx,%eaxf0100418553,21819
f010041a:	66 c1 e8 08          	shr    $0x8,%axf010041a554,21868
f010041e:	89 f2                	mov    %esi,%edxf010041e555,21916
f0100420:	ee                   	out    %al,(%dx)f0100420556,21965
f0100421:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100421557,22014
f0100426:	89 ca                	mov    %ecx,%edxf0100426558,22063
f0100428:	ee                   	out    %al,(%dx)f0100428559,22112
f0100429:	89 d8                	mov    %ebx,%eaxf0100429560,22161
f010042b:	89 f2                	mov    %esi,%edxf010042b561,22210
f010042d:	ee                   	out    %al,(%dx)f010042d562,22259
f010042e:	8d 65 f4             	lea    -0xc(%ebp),%espf010042e567,22355
f0100431:	5b                   	pop    %ebxf0100431568,22410
f0100432:	5e                   	pop    %esif0100432569,22454
f0100433:	5f                   	pop    %edif0100433570,22498
f0100434:	5d                   	pop    %ebpf0100434571,22542
f0100435:	c3                   	ret    f0100435572,22586
f0100436:	83 f8 08             	cmp    $0x8,%eaxf0100436574,22647
f0100439:	75 72                	jne    f01004ad <cons_putc+0x1a6>f0100439575,22696
f010043b:	0f b7 83 08 23 00 00 	movzwl 0x2308(%ebx),%eaxf010043b577,22783
f0100442:	66 85 c0             	test   %ax,%axf0100442578,22840
f0100445:	74 b9                	je     f0100400 <cons_putc+0xf9>f0100445579,22887
f0100447:	83 e8 01             	sub    $0x1,%eaxf0100447581,22966
f010044a:	66 89 83 08 23 00 00 	mov    %ax,0x2308(%ebx)f010044a582,23015
f0100451:	0f b7 c0             	movzwl %ax,%eaxf0100451584,23112
f0100454:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edxf0100454585,23160
f0100458:	b2 00                	mov    $0x0,%dlf0100458586,23216
f010045a:	83 ca 20             	or     $0x20,%edxf010045a587,23264
f010045d:	8b 8b 0c 23 00 00    	mov    0x230c(%ebx),%ecxf010045d588,23314
f0100463:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)f0100463589,23371
f0100467:	eb 88                	jmp    f01003f1 <cons_putc+0xea>f0100467590,23428
f0100469:	66 83 83 08 23 00 00 	addw   $0x50,0x2308(%ebx)f0100469592,23516
f0100470:	50 f0100470593,23574
f0100471:	e9 5e ff ff ff       	jmp    f01003d4 <cons_putc+0xcd>f0100471594,23588
f0100476:	b8 20 00 00 00       	mov    $0x20,%eaxf0100476596,23671
f010047b:	e8 87 fe ff ff       	call   f0100307 <cons_putc>f010047b597,23721
f0100480:	b8 20 00 00 00       	mov    $0x20,%eaxf0100480599,23799
f0100485:	e8 7d fe ff ff       	call   f0100307 <cons_putc>f0100485600,23849
f010048a:	b8 20 00 00 00       	mov    $0x20,%eaxf010048a602,23927
f010048f:	e8 73 fe ff ff       	call   f0100307 <cons_putc>f010048f603,23977
f0100494:	b8 20 00 00 00       	mov    $0x20,%eaxf0100494605,24055
f0100499:	e8 69 fe ff ff       	call   f0100307 <cons_putc>f0100499606,24105
f010049e:	b8 20 00 00 00       	mov    $0x20,%eaxf010049e608,24183
f01004a3:	e8 5f fe ff ff       	call   f0100307 <cons_putc>f01004a3609,24233
f01004a8:	e9 44 ff ff ff       	jmp    f01003f1 <cons_putc+0xea>f01004a8610,24293
f01004ad:	0f b7 83 08 23 00 00 	movzwl 0x2308(%ebx),%eaxf01004ad612,24411
f01004b4:	8d 50 01             	lea    0x1(%eax),%edxf01004b4613,24468
f01004b7:	66 89 93 08 23 00 00 	mov    %dx,0x2308(%ebx)f01004b7614,24522
f01004be:	0f b7 c0             	movzwl %ax,%eaxf01004be615,24578
f01004c1:	8b 93 0c 23 00 00    	mov    0x230c(%ebx),%edxf01004c1616,24626
f01004c7:	0f b7 7d e4          	movzwl -0x1c(%ebp),%edif01004c7617,24683
f01004cb:	66 89 3c 42          	mov    %di,(%edx,%eax,2)f01004cb618,24739
f01004cf:	e9 1d ff ff ff       	jmp    f01003f1 <cons_putc+0xea>f01004cf619,24796
f01004d4:	8b 83 0c 23 00 00    	mov    0x230c(%ebx),%eaxf01004d4621,24943
f01004da:	83 ec 04             	sub    $0x4,%espf01004da622,25000
f01004dd:	68 00 0f 00 00       	push   $0xf00f01004dd623,25049
f01004e2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edxf01004e2624,25095
f01004e8:	52                   	push   %edxf01004e8625,25150
f01004e9:	50                   	push   %eaxf01004e9626,25194
f01004ea:	e8 52 42 00 00       	call   f0104741 <memmove>f01004ea627,25238
f01004ef:	8b 93 0c 23 00 00    	mov    0x230c(%ebx),%edxf01004ef629,25326
f01004f5:	8d 82 00 0f 00 00    	lea    0xf00(%edx),%eaxf01004f5630,25383
f01004fb:	81 c2 a0 0f 00 00    	add    $0xfa0,%edxf01004fb631,25439
f0100501:	83 c4 10             	add    $0x10,%espf0100501632,25490
f0100504:	66 c7 00 20 07       	movw   $0x720,(%eax)f0100504633,25540
f0100509:	83 c0 02             	add    $0x2,%eaxf0100509634,25593
f010050c:	39 d0                	cmp    %edx,%eaxf010050c636,25693
f010050e:	75 f4                	jne    f0100504 <cons_putc+0x1fd>f010050e637,25742
f0100510:	66 83 ab 08 23 00 00 	subw   $0x50,0x2308(%ebx)f0100510639,25831
f0100517:	50 f0100517640,25889
f0100518:	e9 e3 fe ff ff       	jmp    f0100400 <cons_putc+0xf9>f0100518641,25903
f010051d <serial_intr>:f010051d643,25969
f010051d:	e8 e7 01 00 00       	call   f0100709 <__x86.get_pc_thunk.ax>f010051d645,25995
f0100522:	05 fe ea 07 00       	add    $0x7eafe,%eaxf0100522646,26067
f0100527:	80 b8 14 23 00 00 00 	cmpb   $0x0,0x2314(%eax)f0100527648,26140
f010052e:	75 02                	jne    f0100532 <serial_intr+0x15>f010052e649,26197
f0100530:	f3 c3                	repz ret f0100530650,26264
f0100532:	55                   	push   %ebpf0100532652,26308
f0100533:	89 e5                	mov    %esp,%ebpf0100533653,26352
f0100535:	83 ec 08             	sub    $0x8,%espf0100535654,26401
f0100538:	8d 80 4b 11 f8 ff    	lea    -0x7eeb5(%eax),%eaxf0100538656,26481
f010053e:	e8 47 fc ff ff       	call   f010018a <cons_intr>f010053e657,26540
f0100543:	c9                   	leave  f0100543659,26602
f0100544:	c3                   	ret    f0100544660,26642
f0100545 <kbd_intr>:f0100545662,26683
f0100545:	55                   	push   %ebpf0100545664,26706
f0100546:	89 e5                	mov    %esp,%ebpf0100546665,26750
f0100548:	83 ec 08             	sub    $0x8,%espf0100548666,26799
f010054b:	e8 b9 01 00 00       	call   f0100709 <__x86.get_pc_thunk.ax>f010054b667,26848
f0100550:	05 d0 ea 07 00       	add    $0x7ead0,%eaxf0100550668,26920
f0100555:	8d 80 b5 11 f8 ff    	lea    -0x7ee4b(%eax),%eaxf0100555670,27000
f010055b:	e8 2a fc ff ff       	call   f010018a <cons_intr>f010055b671,27059
f0100560:	c9                   	leave  f0100560673,27121
f0100561:	c3                   	ret    f0100561674,27161
f0100562 <cons_getc>:f0100562676,27202
f0100562:	55                   	push   %ebpf0100562678,27226
f0100563:	89 e5                	mov    %esp,%ebpf0100563679,27270
f0100565:	53                   	push   %ebxf0100565680,27319
f0100566:	83 ec 04             	sub    $0x4,%espf0100566681,27363
f0100569:	e8 f9 fb ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100569682,27412
f010056e:	81 c3 b2 ea 07 00    	add    $0x7eab2,%ebxf010056e683,27484
f0100574:	e8 a4 ff ff ff       	call   f010051d <serial_intr>f0100574685,27553
f0100579:	e8 c7 ff ff ff       	call   f0100545 <kbd_intr>f0100579687,27628
f010057e:	8b 93 00 23 00 00    	mov    0x2300(%ebx),%edxf010057e689,27718
f0100584:	b8 00 00 00 00       	mov    $0x0,%eaxf0100584691,27786
f0100589:	3b 93 04 23 00 00    	cmp    0x2304(%ebx),%edxf0100589693,27866
f010058f:	74 19                	je     f01005aa <cons_getc+0x48>f010058f694,27923
		c = cons.buf[cons.rpos++];c695,27988
f0100591:	8d 4a 01             	lea    0x1(%edx),%ecxf0100591696,28017
f0100594:	89 8b 00 23 00 00    	mov    %ecx,0x2300(%ebx)f0100594697,28071
f010059a:	0f b6 84 13 00 21 00 	movzbl 0x2100(%ebx,%edx,1),%eaxf010059a698,28128
f01005a1:	00 f01005a1699,28192
f01005a2:	81 f9 00 02 00 00    	cmp    $0x200,%ecxf01005a2701,28238
f01005a8:	74 06                	je     f01005b0 <cons_getc+0x4e>f01005a8702,28289
f01005aa:	83 c4 04             	add    $0x4,%espf01005aa704,28356
f01005ad:	5b                   	pop    %ebxf01005ad705,28405
f01005ae:	5d                   	pop    %ebpf01005ae706,28449
f01005af:	c3                   	ret    f01005af707,28493
f01005b0:	c7 83 00 23 00 00 00 	movl   $0x0,0x2300(%ebx)f01005b0709,28551
f01005b7:	00 00 00 f01005b7710,28608
f01005ba:	eb ee                	jmp    f01005aa <cons_getc+0x48>f01005ba711,28628
f01005bc <cons_init>:f01005bc713,28694
voidvoid716,28751
f01005bc:	55                   	push   %ebpf01005bc719,28774
f01005bd:	89 e5                	mov    %esp,%ebpf01005bd720,28818
f01005bf:	57                   	push   %edif01005bf721,28867
f01005c0:	56                   	push   %esif01005c0722,28911
f01005c1:	53                   	push   %ebxf01005c1723,28955
f01005c2:	83 ec 1c             	sub    $0x1c,%espf01005c2724,28999
f01005c5:	e8 9d fb ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01005c5725,29049
f01005ca:	81 c3 56 ea 07 00    	add    $0x7ea56,%ebxf01005ca726,29121
	was = *cp;was727,29174
f01005d0:	0f b7 15 00 80 0b f0 	movzwl 0xf00b8000,%edxf01005d0728,29186
f01005d7:	66 c7 05 00 80 0b f0 	movw   $0xa55a,0xf00b8000f01005d7730,29267
f01005de:	5a a5 f01005de731,29325
f01005e0:	0f b7 05 00 80 0b f0 	movzwl 0xf00b8000,%eaxf01005e0733,29364
f01005e7:	66 3d 5a a5          	cmp    $0xa55a,%axf01005e7734,29419
f01005eb:	0f 84 bc 00 00 00    	je     f01006ad <cons_init+0xf1>f01005eb735,29470
		addr_6845 = MONO_BASE;addr_6845736,29535
f01005f1:	c7 83 10 23 00 00 b4 	movl   $0x3b4,0x2310(%ebx)f01005f1737,29560
f01005f8:	03 00 00 f01005f8738,29619
		cp = (uint16_t*) (KERNBASE + MONO_BUF);cp739,29639
f01005fb:	c7 45 e4 00 00 0b f0 	movl   $0xf00b0000,-0x1c(%ebp)f01005fb740,29681
f0100602:	8b bb 10 23 00 00    	mov    0x2310(%ebx),%edif0100602742,29766
f0100608:	b8 0e 00 00 00       	mov    $0xe,%eaxf0100608743,29823
f010060d:	89 fa                	mov    %edi,%edxf010060d744,29872
f010060f:	ee                   	out    %al,(%dx)f010060f745,29921
	pos = inb(addr_6845 + 1) << 8;pos746,29970
f0100610:	8d 4f 01             	lea    0x1(%edi),%ecxf0100610747,30002
f0100613:	89 ca                	mov    %ecx,%edxf0100613749,30112
f0100615:	ec                   	in     (%dx),%alf0100615750,30161
f0100616:	0f b6 f0             	movzbl %al,%esif0100616751,30210
f0100619:	c1 e6 08             	shl    $0x8,%esif0100619752,30258
f010061c:	b8 0f 00 00 00       	mov    $0xf,%eaxf010061c754,30364
f0100621:	89 fa                	mov    %edi,%edxf0100621755,30413
f0100623:	ee                   	out    %al,(%dx)f0100623756,30462
f0100624:	89 ca                	mov    %ecx,%edxf0100624758,30567
f0100626:	ec                   	in     (%dx),%alf0100626759,30616
	crt_buf = (uint16_t*) cp;crt_buf760,30665
f0100627:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100627761,30692
f010062a:	89 bb 0c 23 00 00    	mov    %edi,0x230c(%ebx)f010062a762,30748
f0100630:	0f b6 c0             	movzbl %al,%eaxf0100630764,30833
f0100633:	09 c6                	or     %eax,%esif0100633765,30881
	crt_pos = pos;crt_pos766,30930
f0100635:	66 89 b3 08 23 00 00 	mov    %si,0x2308(%ebx)f0100635767,30946
f010063c:	b9 00 00 00 00       	mov    $0x0,%ecxf010063c769,31059
f0100641:	89 c8                	mov    %ecx,%eaxf0100641770,31108
f0100643:	ba fa 03 00 00       	mov    $0x3fa,%edxf0100643771,31157
f0100648:	ee                   	out    %al,(%dx)f0100648772,31208
f0100649:	bf fb 03 00 00       	mov    $0x3fb,%edif0100649773,31257
f010064e:	b8 80 ff ff ff       	mov    $0xffffff80,%eaxf010064e774,31308
f0100653:	89 fa                	mov    %edi,%edxf0100653775,31364
f0100655:	ee                   	out    %al,(%dx)f0100655776,31413
f0100656:	b8 0c 00 00 00       	mov    $0xc,%eaxf0100656777,31462
f010065b:	ba f8 03 00 00       	mov    $0x3f8,%edxf010065b778,31511
f0100660:	ee                   	out    %al,(%dx)f0100660779,31562
f0100661:	be f9 03 00 00       	mov    $0x3f9,%esif0100661780,31611
f0100666:	89 c8                	mov    %ecx,%eaxf0100666781,31662
f0100668:	89 f2                	mov    %esi,%edxf0100668782,31711
f010066a:	ee                   	out    %al,(%dx)f010066a783,31760
f010066b:	b8 03 00 00 00       	mov    $0x3,%eaxf010066b784,31809
f0100670:	89 fa                	mov    %edi,%edxf0100670785,31858
f0100672:	ee                   	out    %al,(%dx)f0100672786,31907
f0100673:	ba fc 03 00 00       	mov    $0x3fc,%edxf0100673787,31956
f0100678:	89 c8                	mov    %ecx,%eaxf0100678788,32007
f010067a:	ee                   	out    %al,(%dx)f010067a789,32056
f010067b:	b8 01 00 00 00       	mov    $0x1,%eaxf010067b790,32105
f0100680:	89 f2                	mov    %esi,%edxf0100680791,32154
f0100682:	ee                   	out    %al,(%dx)f0100682792,32203
f0100683:	ba fd 03 00 00       	mov    $0x3fd,%edxf0100683794,32308
f0100688:	ec                   	in     (%dx),%alf0100688795,32359
f0100689:	89 c1                	mov    %eax,%ecxf0100689796,32408
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);serial_exists797,32457
f010068b:	3c ff                	cmp    $0xff,%alf010068b798,32503
f010068d:	0f 95 83 14 23 00 00 	setne  0x2314(%ebx)f010068d799,32552
f0100694:	ba fa 03 00 00       	mov    $0x3fa,%edxf0100694800,32604
f0100699:	ec                   	in     (%dx),%alf0100699801,32655
f010069a:	ba f8 03 00 00       	mov    $0x3f8,%edxf010069a802,32704
f010069f:	ec                   	in     (%dx),%alf010069f803,32755
f01006a0:	80 f9 ff             	cmp    $0xff,%clf01006a0809,32868
f01006a3:	74 25                	je     f01006ca <cons_init+0x10e>f01006a3810,32917
f01006a5:	8d 65 f4             	lea    -0xc(%ebp),%espf01006a5813,33029
f01006a8:	5b                   	pop    %ebxf01006a8814,33084
f01006a9:	5e                   	pop    %esif01006a9815,33128
f01006aa:	5f                   	pop    %edif01006aa816,33172
f01006ab:	5d                   	pop    %ebpf01006ab817,33216
f01006ac:	c3                   	ret    f01006ac818,33260
f01006ad:	66 89 15 00 80 0b f0 	mov    %dx,0xf00b8000f01006ad820,33313
		addr_6845 = CGA_BASE;addr_6845821,33367
f01006b4:	c7 83 10 23 00 00 d4 	movl   $0x3d4,0x2310(%ebx)f01006b4822,33391
f01006bb:	03 00 00 f01006bb823,33450
	cp = (uint16_t*) (KERNBASE + CGA_BUF);cp824,33470
f01006be:	c7 45 e4 00 80 0b f0 	movl   $0xf00b8000,-0x1c(%ebp)f01006be825,33510
f01006c5:	e9 38 ff ff ff       	jmp    f0100602 <cons_init+0x46>f01006c5826,33573
f01006ca:	83 ec 0c             	sub    $0xc,%espf01006ca828,33682
f01006cd:	8d 83 79 5b f8 ff    	lea    -0x7a487(%ebx),%eaxf01006cd829,33731
f01006d3:	50                   	push   %eaxf01006d3830,33790
f01006d4:	e8 41 30 00 00       	call   f010371a <cprintf>f01006d4831,33834
f01006d9:	83 c4 10             	add    $0x10,%espf01006d9832,33892
f01006dc:	eb c7                	jmp    f01006a5 <cons_init+0xe9>f01006dc834,33944
f01006de <cputchar>:f01006de836,34010
voidvoid840,34093
f01006de:	55                   	push   %ebpf01006de843,34116
f01006df:	89 e5                	mov    %esp,%ebpf01006df844,34160
f01006e1:	83 ec 08             	sub    $0x8,%espf01006e1845,34209
f01006e4:	8b 45 08             	mov    0x8(%ebp),%eaxf01006e4847,34273
f01006e7:	e8 1b fc ff ff       	call   f0100307 <cons_putc>f01006e7848,34327
f01006ec:	c9                   	leave  f01006ec850,34389
f01006ed:	c3                   	ret    f01006ed851,34429
f01006ee <getchar>:f01006ee853,34470
intint855,34491
f01006ee:	55                   	push   %ebpf01006ee858,34511
f01006ef:	89 e5                	mov    %esp,%ebpf01006ef859,34555
f01006f1:	83 ec 08             	sub    $0x8,%espf01006f1860,34604
f01006f4:	e8 69 fe ff ff       	call   f0100562 <cons_getc>f01006f4864,34694
f01006f9:	85 c0                	test   %eax,%eaxf01006f9865,34754
f01006fb:	74 f7                	je     f01006f4 <getchar+0x6>f01006fb866,34803
f01006fd:	c9                   	leave  f01006fd870,34898
f01006fe:	c3                   	ret    f01006fe871,34938
f01006ff <iscons>:f01006ff873,34979
intint875,34999
f01006ff:	55                   	push   %ebpf01006ff878,35023
f0100700:	89 e5                	mov    %esp,%ebpf0100700879,35067
f0100702:	b8 01 00 00 00       	mov    $0x1,%eaxf0100702883,35150
f0100707:	5d                   	pop    %ebpf0100707884,35199
f0100708:	c3                   	ret    f0100708885,35243
f0100709 <__x86.get_pc_thunk.ax>:f0100709887,35284
f0100709:	8b 04 24             	mov    (%esp),%eaxf0100709888,35318
f010070c:	c3                   	ret    f010070c889,35369
f010070d <mon_help>:f010070d891,35410
intint895,35496
f010070d:	55                   	push   %ebpf010070d898,35556
f010070e:	89 e5                	mov    %esp,%ebpf010070e899,35600
f0100710:	56                   	push   %esif0100710900,35649
f0100711:	53                   	push   %ebxf0100711901,35693
f0100712:	e8 50 fa ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100712902,35737
f0100717:	81 c3 09 e9 07 00    	add    $0x7e909,%ebxf0100717903,35809
f010071d:	83 ec 04             	sub    $0x4,%espf010071d908,35975
f0100720:	8d 83 a0 5d f8 ff    	lea    -0x7a260(%ebx),%eaxf0100720909,36024
f0100726:	50                   	push   %eaxf0100726910,36083
f0100727:	8d 83 be 5d f8 ff    	lea    -0x7a242(%ebx),%eaxf0100727911,36127
f010072d:	50                   	push   %eaxf010072d912,36186
f010072e:	8d b3 c3 5d f8 ff    	lea    -0x7a23d(%ebx),%esif010072e913,36230
f0100734:	56                   	push   %esif0100734914,36289
f0100735:	e8 e0 2f 00 00       	call   f010371a <cprintf>f0100735915,36333
f010073a:	83 c4 0c             	add    $0xc,%espf010073a916,36391
f010073d:	8d 83 6c 5e f8 ff    	lea    -0x7a194(%ebx),%eaxf010073d917,36440
f0100743:	50                   	push   %eaxf0100743918,36499
f0100744:	8d 83 cc 5d f8 ff    	lea    -0x7a234(%ebx),%eaxf0100744919,36543
f010074a:	50                   	push   %eaxf010074a920,36602
f010074b:	56                   	push   %esif010074b921,36646
f010074c:	e8 c9 2f 00 00       	call   f010371a <cprintf>f010074c922,36690
f0100751:	83 c4 0c             	add    $0xc,%espf0100751923,36748
f0100754:	8d 83 94 5e f8 ff    	lea    -0x7a16c(%ebx),%eaxf0100754924,36797
f010075a:	50                   	push   %eaxf010075a925,36856
f010075b:	8d 83 d5 5d f8 ff    	lea    -0x7a22b(%ebx),%eaxf010075b926,36900
f0100761:	50                   	push   %eaxf0100761927,36959
f0100762:	56                   	push   %esif0100762928,37003
f0100763:	e8 b2 2f 00 00       	call   f010371a <cprintf>f0100763929,37047
f0100768:	b8 00 00 00 00       	mov    $0x0,%eaxf0100768932,37118
f010076d:	8d 65 f8             	lea    -0x8(%ebp),%espf010076d933,37167
f0100770:	5b                   	pop    %ebxf0100770934,37222
f0100771:	5e                   	pop    %esif0100771935,37266
f0100772:	5d                   	pop    %ebpf0100772936,37310
f0100773:	c3                   	ret    f0100773937,37354
f0100774 <mon_kerninfo>:f0100774939,37395
intint941,37421
f0100774:	55                   	push   %ebpf0100774944,37485
f0100775:	89 e5                	mov    %esp,%ebpf0100775945,37529
f0100777:	57                   	push   %edif0100777946,37578
f0100778:	56                   	push   %esif0100778947,37622
f0100779:	53                   	push   %ebxf0100779948,37666
f010077a:	83 ec 18             	sub    $0x18,%espf010077a949,37710
f010077d:	e8 e5 f9 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010077d950,37760
f0100782:	81 c3 9e e8 07 00    	add    $0x7e89e,%ebxf0100782951,37832
f0100788:	8d 83 e2 5d f8 ff    	lea    -0x7a21e(%ebx),%eaxf0100788955,37982
f010078e:	50                   	push   %eaxf010078e956,38041
f010078f:	e8 86 2f 00 00       	call   f010371a <cprintf>f010078f957,38085
f0100794:	83 c4 08             	add    $0x8,%espf0100794959,38204
f0100797:	ff b3 f8 ff ff ff    	pushl  -0x8(%ebx)f0100797960,38253
f010079d:	8d 83 08 5f f8 ff    	lea    -0x7a0f8(%ebx),%eaxf010079d961,38303
f01007a3:	50                   	push   %eaxf01007a3962,38362
f01007a4:	e8 71 2f 00 00       	call   f010371a <cprintf>f01007a4963,38406
f01007a9:	83 c4 0c             	add    $0xc,%espf01007a9965,38538
f01007ac:	c7 c7 0c 00 10 f0    	mov    $0xf010000c,%edif01007ac966,38587
f01007b2:	8d 87 00 00 00 10    	lea    0x10000000(%edi),%eaxf01007b2967,38643
f01007b8:	50                   	push   %eaxf01007b8968,38704
f01007b9:	57                   	push   %edif01007b9969,38748
f01007ba:	8d 83 30 5f f8 ff    	lea    -0x7a0d0(%ebx),%eaxf01007ba970,38792
f01007c0:	50                   	push   %eaxf01007c0971,38851
f01007c1:	e8 54 2f 00 00       	call   f010371a <cprintf>f01007c1972,38895
f01007c6:	83 c4 0c             	add    $0xc,%espf01007c6974,39027
f01007c9:	c7 c0 29 4b 10 f0    	mov    $0xf0104b29,%eaxf01007c9975,39076
f01007cf:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007cf976,39132
f01007d5:	52                   	push   %edxf01007d5977,39193
f01007d6:	50                   	push   %eaxf01007d6978,39237
f01007d7:	8d 83 54 5f f8 ff    	lea    -0x7a0ac(%ebx),%eaxf01007d7979,39281
f01007dd:	50                   	push   %eaxf01007dd980,39340
f01007de:	e8 37 2f 00 00       	call   f010371a <cprintf>f01007de981,39384
f01007e3:	83 c4 0c             	add    $0xc,%espf01007e3983,39516
f01007e6:	c7 c0 00 11 18 f0    	mov    $0xf0181100,%eaxf01007e6984,39565
f01007ec:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007ec985,39621
f01007f2:	52                   	push   %edxf01007f2986,39682
f01007f3:	50                   	push   %eaxf01007f3987,39726
f01007f4:	8d 83 78 5f f8 ff    	lea    -0x7a088(%ebx),%eaxf01007f4988,39770
f01007fa:	50                   	push   %eaxf01007fa989,39829
f01007fb:	e8 1a 2f 00 00       	call   f010371a <cprintf>f01007fb990,39873
f0100800:	83 c4 0c             	add    $0xc,%espf0100800992,40001
f0100803:	c7 c6 00 20 18 f0    	mov    $0xf0182000,%esif0100803993,40050
f0100809:	8d 86 00 00 00 10    	lea    0x10000000(%esi),%eaxf0100809994,40106
f010080f:	50                   	push   %eaxf010080f995,40167
f0100810:	56                   	push   %esif0100810996,40211
f0100811:	8d 83 9c 5f f8 ff    	lea    -0x7a064(%ebx),%eaxf0100811997,40255
f0100817:	50                   	push   %eaxf0100817998,40314
f0100818:	e8 fd 2e 00 00       	call   f010371a <cprintf>f0100818999,40358
f010081d:	83 c4 08             	add    $0x8,%espf010081d1001,40471
f0100820:	81 c6 ff 03 00 00    	add    $0x3ff,%esif01008201003,40558
f0100826:	29 fe                	sub    %edi,%esif01008261004,40609
f0100828:	c1 fe 0a             	sar    $0xa,%esif01008281006,40713
f010082b:	56                   	push   %esif010082b1007,40762
f010082c:	8d 83 c0 5f f8 ff    	lea    -0x7a040(%ebx),%eaxf010082c1008,40806
f0100832:	50                   	push   %eaxf01008321009,40865
f0100833:	e8 e2 2e 00 00       	call   f010371a <cprintf>f01008331010,40909
f0100838:	b8 00 00 00 00       	mov    $0x0,%eaxf01008381013,40980
f010083d:	8d 65 f4             	lea    -0xc(%ebp),%espf010083d1014,41029
f0100840:	5b                   	pop    %ebxf01008401015,41084
f0100841:	5e                   	pop    %esif01008411016,41128
f0100842:	5f                   	pop    %edif01008421017,41172
f0100843:	5d                   	pop    %ebpf01008431018,41216
f0100844:	c3                   	ret    f01008441019,41260
f0100845 <mon_showmappings>:f01008451021,41301
int mon_showmappings(int argc, char **argv, struct Trapframe *tf)int1026,41364
f0100845:	55                   	push   %ebpf01008451028,41432
f0100846:	89 e5                	mov    %esp,%ebpf01008461029,41476
f0100848:	57                   	push   %edif01008481030,41525
f0100849:	56                   	push   %esif01008491031,41569
f010084a:	53                   	push   %ebxf010084a1032,41613
f010084b:	83 ec 1c             	sub    $0x1c,%espf010084b1033,41657
f010084e:	e8 14 f9 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010084e1034,41707
f0100853:	81 c3 cd e7 07 00    	add    $0x7e7cd,%ebxf01008531035,41779
f0100859:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)f01008591037,41850
f010085d:	74 1f                	je     f010087e <mon_showmappings+0x39>f010085d1038,41904
f010085f:	83 ec 0c             	sub    $0xc,%espf010085f1040,42016
f0100862:	8d 83 fb 5d f8 ff    	lea    -0x7a205(%ebx),%eaxf01008621041,42065
f0100868:	50                   	push   %eaxf01008681042,42124
f0100869:	e8 ac 2e 00 00       	call   f010371a <cprintf>f01008691043,42168
f010086e:	83 c4 10             	add    $0x10,%espf010086e1045,42238
f0100871:	b8 01 00 00 00       	mov    $0x1,%eaxf01008711046,42288
f0100876:	8d 65 f4             	lea    -0xc(%ebp),%espf01008761053,42396
f0100879:	5b                   	pop    %ebxf01008791054,42451
f010087a:	5e                   	pop    %esif010087a1055,42495
f010087b:	5f                   	pop    %edif010087b1056,42539
f010087c:	5d                   	pop    %ebpf010087c1057,42583
f010087d:	c3                   	ret    f010087d1058,42627
f010087e:	83 ec 04             	sub    $0x4,%espf010087e1060,42747
f0100881:	6a 10                	push   $0x10f01008811061,42796
f0100883:	6a 00                	push   $0x0f01008831062,42841
f0100885:	8b 45 0c             	mov    0xc(%ebp),%eaxf01008851063,42885
f0100888:	ff 70 04             	pushl  0x4(%eax)f01008881064,42939
f010088b:	e8 82 3f 00 00       	call   f0104812 <strtol>f010088b1065,42988
f0100890:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf01008901066,43045
f0100895:	89 c6                	mov    %eax,%esif01008951067,43101
f0100897:	83 c4 0c             	add    $0xc,%espf01008971069,43226
f010089a:	6a 10                	push   $0x10f010089a1070,43275
f010089c:	6a 00                	push   $0x0f010089c1071,43320
f010089e:	8b 45 0c             	mov    0xc(%ebp),%eaxf010089e1072,43364
f01008a1:	ff 70 08             	pushl  0x8(%eax)f01008a11073,43418
f01008a4:	e8 69 3f 00 00       	call   f0104812 <strtol>f01008a41074,43467
f01008a9:	8d b8 ff 0f 00 00    	lea    0xfff(%eax),%edif01008a91075,43524
f01008af:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edif01008af1076,43580
f01008b5:	83 c4 0c             	add    $0xc,%espf01008b51078,43731
f01008b8:	57                   	push   %edif01008b81079,43780
f01008b9:	56                   	push   %esif01008b91080,43824
f01008ba:	8d 83 ec 5f f8 ff    	lea    -0x7a014(%ebx),%eaxf01008ba1081,43868
f01008c0:	50                   	push   %eaxf01008c01082,43927
f01008c1:	e8 54 2e 00 00       	call   f010371a <cprintf>f01008c11083,43971
f01008c6:	83 c4 10             	add    $0x10,%espf01008c61085,44058
f01008c9:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf01008c91087,44168
f01008cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01008cf1088,44224
f01008d2:	8d 83 2c 60 f8 ff    	lea    -0x79fd4(%ebx),%eaxf01008d21090,44335
f01008d8:	89 45 e0             	mov    %eax,-0x20(%ebp)f01008d81091,44394
f01008db:	eb 19                	jmp    f01008f6 <mon_showmappings+0xb1>f01008db1093,44479
f01008dd:	83 ec 08             	sub    $0x8,%espf01008dd1095,44602
f01008e0:	56                   	push   %esif01008e01096,44651
f01008e1:	8d 83 14 5e f8 ff    	lea    -0x7a1ec(%ebx),%eaxf01008e11097,44695
f01008e7:	50                   	push   %eaxf01008e71098,44754
f01008e8:	e8 2d 2e 00 00       	call   f010371a <cprintf>f01008e81099,44798
f01008ed:	83 c4 10             	add    $0x10,%espf01008ed1100,44856
f01008f0:	81 c6 00 10 00 00    	add    $0x1000,%esif01008f01102,44926
f01008f6:	39 f7                	cmp    %esi,%edif01008f61104,45007
f01008f8:	72 36                	jb     f0100930 <mon_showmappings+0xeb>f01008f81105,45056
f01008fa:	83 ec 04             	sub    $0x4,%espf01008fa1107,45188
f01008fd:	6a 00                	push   $0x0f01008fd1108,45237
f01008ff:	56                   	push   %esif01008ff1109,45281
f0100900:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf01009001110,45325
f0100903:	ff 30                	pushl  (%eax)f01009031111,45381
f0100905:	e8 7e 08 00 00       	call   f0101188 <pgdir_walk>f01009051112,45427
f010090a:	83 c4 10             	add    $0x10,%espf010090a1114,45509
f010090d:	85 c0                	test   %eax,%eaxf010090d1115,45559
f010090f:	74 cc                	je     f01008dd <mon_showmappings+0x98>f010090f1116,45608
f0100911:	8b 00                	mov    (%eax),%eaxf01009111118,45699
f0100913:	89 c2                	mov    %eax,%edxf01009131120,45805
f0100915:	81 e2 ff 0f 00 00    	and    $0xfff,%edxf01009151121,45854
f010091b:	52                   	push   %edxf010091b1122,45905
f010091c:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf010091c1124,45984
f0100921:	50                   	push   %eaxf01009211126,46095
f0100922:	56                   	push   %esif01009221127,46139
f0100923:	ff 75 e0             	pushl  -0x20(%ebp)f01009231128,46183
f0100926:	e8 ef 2d 00 00       	call   f010371a <cprintf>f01009261129,46234
f010092b:	83 c4 10             	add    $0x10,%espf010092b1130,46292
f010092e:	eb c0                	jmp    f01008f0 <mon_showmappings+0xab>f010092e1131,46342
f0100930:	b8 00 00 00 00       	mov    $0x0,%eaxf01009301133,46425
f0100935:	e9 3c ff ff ff       	jmp    f0100876 <mon_showmappings+0x31>f01009351134,46474
f010093a <mon_backtrace>:f010093a1136,46547
f010093a:	55                   	push   %ebpf010093a1138,46575
f010093b:	89 e5                	mov    %esp,%ebpf010093b1139,46619
f010093d:	b8 00 00 00 00       	mov    $0x0,%eaxf010093d1141,46670
f0100942:	5d                   	pop    %ebpf01009421142,46719
f0100943:	c3                   	ret    f01009431143,46763
f0100944 <monitor>:f01009441145,46804
voidvoid1149,46838
f0100944:	55                   	push   %ebpf01009441152,46875
f0100945:	89 e5                	mov    %esp,%ebpf01009451153,46919
f0100947:	57                   	push   %edif01009471154,46968
f0100948:	56                   	push   %esif01009481155,47012
f0100949:	53                   	push   %ebxf01009491156,47056
f010094a:	83 ec 68             	sub    $0x68,%espf010094a1157,47100
f010094d:	e8 15 f8 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010094d1158,47150
f0100952:	81 c3 ce e6 07 00    	add    $0x7e6ce,%ebxf01009521159,47222
f0100958:	8d 83 54 60 f8 ff    	lea    -0x79fac(%ebx),%eaxf01009581163,47338
f010095e:	50                   	push   %eaxf010095e1164,47397
f010095f:	e8 b6 2d 00 00       	call   f010371a <cprintf>f010095f1165,47441
f0100964:	8d 83 78 60 f8 ff    	lea    -0x79f88(%ebx),%eaxf01009641167,47550
f010096a:	89 04 24             	mov    %eax,(%esp)f010096a1168,47609
f010096d:	e8 a8 2d 00 00       	call   f010371a <cprintf>f010096d1169,47660
f0100972:	83 c4 10             	add    $0x10,%espf01009721172,47736
f0100975:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)f01009751173,47786
f0100979:	74 0e                	je     f0100989 <monitor+0x45>f01009791174,47840
f010097b:	83 ec 0c             	sub    $0xc,%espf010097b1176,47926
f010097e:	ff 75 08             	pushl  0x8(%ebp)f010097e1177,47975
f0100981:	e8 fd 2e 00 00       	call   f0103883 <print_trapframe>f01009811178,48024
f0100986:	83 c4 10             	add    $0x10,%espf01009861179,48090
f0100989:	8d bb 31 5e f8 ff    	lea    -0x7a1cf(%ebx),%edif01009891181,48183
f010098f:	eb 4a                	jmp    f01009db <monitor+0x97>f010098f1182,48242
f0100991:	83 ec 08             	sub    $0x8,%espf01009911183,48305
f0100994:	0f be c0             	movsbl %al,%eaxf01009941184,48354
f0100997:	50                   	push   %eaxf01009971185,48402
f0100998:	57                   	push   %edif01009981186,48446
f0100999:	e8 19 3d 00 00       	call   f01046b7 <strchr>f01009991187,48490
f010099e:	83 c4 10             	add    $0x10,%espf010099e1188,48547
f01009a1:	85 c0                	test   %eax,%eaxf01009a11189,48597
f01009a3:	74 08                	je     f01009ad <monitor+0x69>f01009a31190,48646
f01009a5:	c6 06 00             	movb   $0x0,(%esi)f01009a51192,48724
f01009a8:	8d 76 01             	lea    0x1(%esi),%esif01009a81193,48775
f01009ab:	eb 76                	jmp    f0100a23 <monitor+0xdf>f01009ab1194,48829
f01009ad:	80 3e 00             	cmpb   $0x0,(%esi)f01009ad1196,48909
f01009b0:	74 7c                	je     f0100a2e <monitor+0xea>f01009b01197,48960
f01009b2:	83 7d a4 0f          	cmpl   $0xf,-0x5c(%ebp)f01009b21199,49050
f01009b6:	74 0f                	je     f01009c7 <monitor+0x83>f01009b61200,49106
f01009b8:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01009b81202,49191
f01009bb:	8d 48 01             	lea    0x1(%eax),%ecxf01009bb1203,49247
f01009be:	89 4d a4             	mov    %ecx,-0x5c(%ebp)f01009be1204,49301
f01009c1:	89 74 85 a8          	mov    %esi,-0x58(%ebp,%eax,4)f01009c11205,49357
f01009c5:	eb 41                	jmp    f0100a08 <monitor+0xc4>f01009c51206,49420
f01009c7:	83 ec 08             	sub    $0x8,%espf01009c71208,49537
f01009ca:	6a 10                	push   $0x10f01009ca1209,49586
f01009cc:	8d 83 36 5e f8 ff    	lea    -0x7a1ca(%ebx),%eaxf01009cc1210,49631
f01009d2:	50                   	push   %eaxf01009d21211,49690
f01009d3:	e8 42 2d 00 00       	call   f010371a <cprintf>f01009d31212,49734
f01009d8:	83 c4 10             	add    $0x10,%espf01009d81213,49792
		buf = readline("K> ");buf1216,49856
f01009db:	8d 83 2d 5e f8 ff    	lea    -0x7a1d3(%ebx),%eaxf01009db1217,49881
f01009e1:	89 c6                	mov    %eax,%esif01009e11218,49940
f01009e3:	83 ec 0c             	sub    $0xc,%espf01009e31219,49989
f01009e6:	56                   	push   %esif01009e61220,50038
f01009e7:	e8 93 3a 00 00       	call   f010447f <readline>f01009e71221,50082
f01009ec:	83 c4 10             	add    $0x10,%espf01009ec1223,50160
f01009ef:	85 c0                	test   %eax,%eaxf01009ef1224,50210
f01009f1:	74 f0                	je     f01009e3 <monitor+0x9f>f01009f11225,50259
f01009f3:	89 c6                	mov    %eax,%esif01009f31226,50322
f01009f5:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)f01009f51228,50388
	argc = 0;argc1229,50444
f01009fc:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)f01009fc1230,50455
f0100a03:	eb 1e                	jmp    f0100a23 <monitor+0xdf>f0100a031231,50511
f0100a05:	83 c6 01             	add    $0x1,%esif0100a051233,50584
f0100a08:	0f b6 06             	movzbl (%esi),%eaxf0100a081235,50677
f0100a0b:	84 c0                	test   %al,%alf0100a0b1236,50728
f0100a0d:	74 14                	je     f0100a23 <monitor+0xdf>f0100a0d1237,50775
f0100a0f:	83 ec 08             	sub    $0x8,%espf0100a0f1238,50838
f0100a12:	0f be c0             	movsbl %al,%eaxf0100a121239,50887
f0100a15:	50                   	push   %eaxf0100a151240,50935
f0100a16:	57                   	push   %edif0100a161241,50979
f0100a17:	e8 9b 3c 00 00       	call   f01046b7 <strchr>f0100a171242,51023
f0100a1c:	83 c4 10             	add    $0x10,%espf0100a1c1243,51080
f0100a1f:	85 c0                	test   %eax,%eaxf0100a1f1244,51130
f0100a21:	74 e2                	je     f0100a05 <monitor+0xc1>f0100a211245,51179
f0100a23:	0f b6 06             	movzbl (%esi),%eaxf0100a231247,51285
f0100a26:	84 c0                	test   %al,%alf0100a261248,51336
f0100a28:	0f 85 63 ff ff ff    	jne    f0100991 <monitor+0x4d>f0100a281249,51383
f0100a2e:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf0100a2e1251,51463
f0100a31:	c7 44 85 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%eax,4)f0100a311252,51519
f0100a38:	00 f0100a381253,51582
f0100a39:	85 c0                	test   %eax,%eaxf0100a391255,51612
f0100a3b:	74 9e                	je     f01009db <monitor+0x97>f0100a3b1256,51661
f0100a3d:	8d b3 20 20 00 00    	lea    0x2020(%ebx),%esif0100a3d1257,51724
f0100a43:	b8 00 00 00 00       	mov    $0x0,%eaxf0100a431259,51827
f0100a48:	89 7d a0             	mov    %edi,-0x60(%ebp)f0100a481260,51876
f0100a4b:	89 c7                	mov    %eax,%edif0100a4b1261,51932
f0100a4d:	83 ec 08             	sub    $0x8,%espf0100a4d1263,52027
f0100a50:	ff 36                	pushl  (%esi)f0100a501264,52076
f0100a52:	ff 75 a8             	pushl  -0x58(%ebp)f0100a521265,52122
f0100a55:	e8 ff 3b 00 00       	call   f0104659 <strcmp>f0100a551266,52173
f0100a5a:	83 c4 10             	add    $0x10,%espf0100a5a1267,52230
f0100a5d:	85 c0                	test   %eax,%eaxf0100a5d1268,52280
f0100a5f:	74 28                	je     f0100a89 <monitor+0x145>f0100a5f1269,52329
f0100a61:	83 c7 01             	add    $0x1,%edif0100a611271,52439
f0100a64:	83 c6 0c             	add    $0xc,%esif0100a641272,52488
f0100a67:	83 ff 03             	cmp    $0x3,%edif0100a671273,52537
f0100a6a:	75 e1                	jne    f0100a4d <monitor+0x109>f0100a6a1274,52586
f0100a6c:	8b 7d a0             	mov    -0x60(%ebp),%edif0100a6c1275,52650
f0100a6f:	83 ec 08             	sub    $0x8,%espf0100a6f1277,52751
f0100a72:	ff 75 a8             	pushl  -0x58(%ebp)f0100a721278,52800
f0100a75:	8d 83 53 5e f8 ff    	lea    -0x7a1ad(%ebx),%eaxf0100a751279,52851
f0100a7b:	50                   	push   %eaxf0100a7b1280,52910
f0100a7c:	e8 99 2c 00 00       	call   f010371a <cprintf>f0100a7c1281,52954
f0100a81:	83 c4 10             	add    $0x10,%espf0100a811282,53012
f0100a84:	e9 52 ff ff ff       	jmp    f01009db <monitor+0x97>f0100a841283,53062
f0100a89:	89 f8                	mov    %edi,%eaxf0100a891284,53125
f0100a8b:	8b 7d a0             	mov    -0x60(%ebp),%edif0100a8b1285,53174
f0100a8e:	83 ec 04             	sub    $0x4,%espf0100a8e1287,53274
f0100a91:	8d 04 40             	lea    (%eax,%eax,2),%eaxf0100a911288,53323
f0100a94:	ff 75 08             	pushl  0x8(%ebp)f0100a941289,53381
f0100a97:	8d 55 a8             	lea    -0x58(%ebp),%edxf0100a971290,53430
f0100a9a:	52                   	push   %edxf0100a9a1291,53486
f0100a9b:	ff 75 a4             	pushl  -0x5c(%ebp)f0100a9b1292,53530
f0100a9e:	ff 94 83 28 20 00 00 	call   *0x2028(%ebx,%eax,4)f0100a9e1293,53581
f0100aa5:	83 c4 10             	add    $0x10,%espf0100aa51295,53669
f0100aa8:	85 c0                	test   %eax,%eaxf0100aa81296,53719
f0100aaa:	0f 89 2b ff ff ff    	jns    f01009db <monitor+0x97>f0100aaa1297,53768
f0100ab0:	8d 65 f4             	lea    -0xc(%ebp),%espf0100ab01301,53847
f0100ab3:	5b                   	pop    %ebxf0100ab31302,53902
f0100ab4:	5e                   	pop    %esif0100ab41303,53946
f0100ab5:	5f                   	pop    %edif0100ab51304,53990
f0100ab6:	5d                   	pop    %ebpf0100ab61305,54034
f0100ab7:	c3                   	ret    f0100ab71306,54078
f0100ab8 <nvram_read>:f0100ab81308,54119
static intstatic1312,54252
f0100ab8:	55                   	push   %ebpf0100ab81315,54283
f0100ab9:	89 e5                	mov    %esp,%ebpf0100ab91316,54327
f0100abb:	57                   	push   %edif0100abb1317,54376
f0100abc:	56                   	push   %esif0100abc1318,54420
f0100abd:	53                   	push   %ebxf0100abd1319,54464
f0100abe:	83 ec 18             	sub    $0x18,%espf0100abe1320,54508
f0100ac1:	e8 a1 f6 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0100ac11321,54558
f0100ac6:	81 c3 5a e5 07 00    	add    $0x7e55a,%ebxf0100ac61322,54630
f0100acc:	89 c7                	mov    %eax,%edif0100acc1323,54683
f0100ace:	50                   	push   %eaxf0100ace1325,54788
f0100acf:	e8 bf 2b 00 00       	call   f0103693 <mc146818_read>f0100acf1326,54832
f0100ad4:	89 c6                	mov    %eax,%esif0100ad41327,54896
f0100ad6:	83 c7 01             	add    $0x1,%edif0100ad61328,54945
f0100ad9:	89 3c 24             	mov    %edi,(%esp)f0100ad91329,54994
f0100adc:	e8 b2 2b 00 00       	call   f0103693 <mc146818_read>f0100adc1330,55045
f0100ae1:	c1 e0 08             	shl    $0x8,%eaxf0100ae11331,55109
f0100ae4:	09 f0                	or     %esi,%eaxf0100ae41332,55158
f0100ae6:	8d 65 f4             	lea    -0xc(%ebp),%espf0100ae61334,55209
f0100ae9:	5b                   	pop    %ebxf0100ae91335,55264
f0100aea:	5e                   	pop    %esif0100aea1336,55308
f0100aeb:	5f                   	pop    %edif0100aeb1337,55352
f0100aec:	5d                   	pop    %ebpf0100aec1338,55396
f0100aed:	c3                   	ret    f0100aed1339,55440
f0100aee <boot_alloc>:f0100aee1341,55481
static void *static1345,55664
f0100aee:	55                   	push   %ebpf0100aee1348,55703
f0100aef:	89 e5                	mov    %esp,%ebpf0100aef1349,55747
f0100af1:	53                   	push   %ebxf0100af11350,55796
f0100af2:	83 ec 04             	sub    $0x4,%espf0100af21351,55840
f0100af5:	e8 e9 26 00 00       	call   f01031e3 <__x86.get_pc_thunk.cx>f0100af51352,55889
f0100afa:	81 c1 26 e5 07 00    	add    $0x7e526,%ecxf0100afa1353,55961
f0100b00:	89 c2                	mov    %eax,%edxf0100b001354,56014
f0100b02:	83 b9 18 23 00 00 00 	cmpl   $0x0,0x2318(%ecx)f0100b021361,56363
f0100b09:	74 34                	je     f0100b3f <boot_alloc+0x51>f0100b091362,56420
f0100b0b:	8b 81 18 23 00 00    	mov    0x2318(%ecx),%eaxf0100b0b1369,56752
f0100b11:	8b 99 20 23 00 00    	mov    0x2320(%ecx),%ebxf0100b111370,56809
f0100b17:	c1 e3 0c             	shl    $0xc,%ebxf0100b171371,56866
f0100b1a:	81 c3 00 20 18 f0    	add    $0xf0182000,%ebxf0100b1a1372,56915
f0100b20:	29 c3                	sub    %eax,%ebxf0100b201373,56971
f0100b22:	39 d3                	cmp    %edx,%ebxf0100b221376,57048
f0100b24:	72 31                	jb     f0100b57 <boot_alloc+0x69>f0100b241377,57097
        result = nextfree;result1381,57299
f0100b26:	81 c2 ff 0f 00 00    	add    $0xfff,%edxf0100b261383,57366
f0100b2c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf0100b2c1384,57417
f0100b32:	01 c2                	add    %eax,%edxf0100b321385,57473
f0100b34:	89 91 18 23 00 00    	mov    %edx,0x2318(%ecx)f0100b341386,57522
f0100b3a:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100b3a1389,57604
f0100b3d:	c9                   	leave  f0100b3d1390,57659
f0100b3e:	c3                   	ret    f0100b3e1391,57699
		nextfree = ROUNDUP((char *) end, PGSIZE);nextfree1392,57739
f0100b3f:	c7 c0 00 20 18 f0    	mov    $0xf0182000,%eaxf0100b3f1393,57783
f0100b45:	05 ff 0f 00 00       	add    $0xfff,%eaxf0100b451394,57839
f0100b4a:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100b4a1395,57890
f0100b4f:	89 81 18 23 00 00    	mov    %eax,0x2318(%ecx)f0100b4f1396,57946
f0100b55:	eb b4                	jmp    f0100b0b <boot_alloc+0x1d>f0100b551397,58003
f0100b57:	83 ec 0c             	sub    $0xc,%espf0100b571399,58167
f0100b5a:	53                   	push   %ebxf0100b5a1400,58216
f0100b5b:	52                   	push   %edxf0100b5b1401,58260
f0100b5c:	8d 81 a0 60 f8 ff    	lea    -0x79f60(%ecx),%eaxf0100b5c1402,58304
f0100b62:	50                   	push   %eaxf0100b621403,58363
f0100b63:	6a 6e                	push   $0x6ef0100b631404,58407
f0100b65:	8d 81 21 69 f8 ff    	lea    -0x796df(%ecx),%eaxf0100b651405,58452
f0100b6b:	50                   	push   %eaxf0100b6b1406,58511
f0100b6c:	89 cb                	mov    %ecx,%ebxf0100b6c1407,58555
f0100b6e:	e8 3e f5 ff ff       	call   f01000b1 <_panic>f0100b6e1408,58604
f0100b73 <check_va2pa>:f0100b731410,58662
static physaddr_tstatic1414,58826
f0100b73:	55                   	push   %ebpf0100b731417,58886
f0100b74:	89 e5                	mov    %esp,%ebpf0100b741418,58930
f0100b76:	56                   	push   %esif0100b761419,58979
f0100b77:	53                   	push   %ebxf0100b771420,59023
f0100b78:	e8 66 26 00 00       	call   f01031e3 <__x86.get_pc_thunk.cx>f0100b781421,59067
f0100b7d:	81 c1 a3 e4 07 00    	add    $0x7e4a3,%ecxf0100b7d1422,59139
	pgdir = &pgdir[PDX(va)];pgdir1425,59204
f0100b83:	89 d3                	mov    %edx,%ebxf0100b831426,59230
f0100b85:	c1 eb 16             	shr    $0x16,%ebxf0100b851427,59279
f0100b88:	8b 04 98             	mov    (%eax,%ebx,4),%eaxf0100b881429,59353
f0100b8b:	a8 01                	test   $0x1,%alf0100b8b1430,59411
f0100b8d:	74 5a                	je     f0100be9 <check_va2pa+0x76>f0100b8d1431,59459
	p = (pte_t*) KADDR(PTE_ADDR(*pgdir));p1433,59539
f0100b8f:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100b8f1434,59578
#define KADDR(pa) _kaddr(__FILE__, __LINE__, pa)KADDR1435,59634
static inline void*static1437,59684
f0100b94:	89 c6                	mov    %eax,%esif0100b941441,59782
f0100b96:	c1 ee 0c             	shr    $0xc,%esif0100b961442,59831
f0100b99:	c7 c3 08 20 18 f0    	mov    $0xf0182008,%ebxf0100b991443,59880
f0100b9f:	3b 33                	cmp    (%ebx),%esif0100b9f1444,59936
f0100ba1:	73 2b                	jae    f0100bce <check_va2pa+0x5b>f0100ba11445,59987
f0100ba3:	c1 ea 0c             	shr    $0xc,%edxf0100ba31447,60082
f0100ba6:	81 e2 ff 03 00 00    	and    $0x3ff,%edxf0100ba61448,60131
f0100bac:	8b 84 90 00 00 00 f0 	mov    -0x10000000(%eax,%edx,4),%eaxf0100bac1449,60182
f0100bb3:	89 c2                	mov    %eax,%edxf0100bb31450,60251
f0100bb5:	83 e2 01             	and    $0x1,%edxf0100bb51451,60300
f0100bb8:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100bb81454,60392
f0100bbd:	85 d2                	test   %edx,%edxf0100bbd1455,60448
f0100bbf:	ba ff ff ff ff       	mov    $0xffffffff,%edxf0100bbf1456,60497
f0100bc4:	0f 44 c2             	cmove  %edx,%eaxf0100bc41457,60553
f0100bc7:	8d 65 f8             	lea    -0x8(%ebp),%espf0100bc71459,60604
f0100bca:	5b                   	pop    %ebxf0100bca1460,60659
f0100bcb:	5e                   	pop    %esif0100bcb1461,60703
f0100bcc:	5d                   	pop    %ebpf0100bcc1462,60747
f0100bcd:	c3                   	ret    f0100bcd1463,60791
f0100bce:	50                   	push   %eaxf0100bce1465,60895
f0100bcf:	8d 81 ec 60 f8 ff    	lea    -0x79f14(%ecx),%eaxf0100bcf1466,60939
f0100bd5:	50                   	push   %eaxf0100bd51467,60998
f0100bd6:	68 06 03 00 00       	push   $0x306f0100bd61468,61042
f0100bdb:	8d 81 21 69 f8 ff    	lea    -0x796df(%ecx),%eaxf0100bdb1469,61088
f0100be1:	50                   	push   %eaxf0100be11470,61147
f0100be2:	89 cb                	mov    %ecx,%ebxf0100be21471,61191
f0100be4:	e8 c8 f4 ff ff       	call   f01000b1 <_panic>f0100be41472,61240
f0100be9:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100be91474,61310
f0100bee:	eb d7                	jmp    f0100bc7 <check_va2pa+0x54>f0100bee1475,61366
f0100bf0 <check_page_free_list>:f0100bf01477,61434
f0100bf0:	55                   	push   %ebpf0100bf01479,61469
f0100bf1:	89 e5                	mov    %esp,%ebpf0100bf11480,61513
f0100bf3:	57                   	push   %edif0100bf31481,61562
f0100bf4:	56                   	push   %esif0100bf41482,61606
f0100bf5:	53                   	push   %ebxf0100bf51483,61650
f0100bf6:	83 ec 3c             	sub    $0x3c,%espf0100bf61484,61694
f0100bf9:	e8 ed 25 00 00       	call   f01031eb <__x86.get_pc_thunk.di>f0100bf91485,61744
f0100bfe:	81 c7 22 e4 07 00    	add    $0x7e422,%edif0100bfe1486,61816
f0100c04:	89 7d c4             	mov    %edi,-0x3c(%ebp)f0100c041487,61869
f0100c07:	84 c0                	test   %al,%alf0100c071489,61981
f0100c09:	0f 85 dd 02 00 00    	jne    f0100eec <check_page_free_list+0x2fc>f0100c091490,62028
f0100c0f:	8b 45 c4             	mov    -0x3c(%ebp),%eaxf0100c0f1492,62127
f0100c12:	83 b8 1c 23 00 00 00 	cmpl   $0x0,0x231c(%eax)f0100c121493,62183
f0100c19:	74 0c                	je     f0100c27 <check_page_free_list+0x37>f0100c191494,62240
f0100c1b:	c7 45 d4 00 04 00 00 	movl   $0x400,-0x2c(%ebp)f0100c1b1496,62372
f0100c22:	e9 2f 03 00 00       	jmp    f0100f56 <check_page_free_list+0x366>f0100c221497,62430
f0100c27:	83 ec 04             	sub    $0x4,%espf0100c271499,62555
f0100c2a:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100c2a1500,62604
f0100c2d:	8d 83 10 61 f8 ff    	lea    -0x79ef0(%ebx),%eaxf0100c2d1501,62660
f0100c33:	50                   	push   %eaxf0100c331502,62719
f0100c34:	68 42 02 00 00       	push   $0x242f0100c341503,62763
f0100c39:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100c391504,62809
f0100c3f:	50                   	push   %eaxf0100c3f1505,62868
f0100c40:	e8 6c f4 ff ff       	call   f01000b1 <_panic>f0100c401506,62912
f0100c45:	50                   	push   %eaxf0100c451507,62969
f0100c46:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100c461508,63013
f0100c49:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf0100c491509,63069
f0100c4f:	50                   	push   %eaxf0100c4f1510,63128
f0100c50:	6a 56                	push   $0x56f0100c501511,63172
f0100c52:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf0100c521512,63217
f0100c58:	50                   	push   %eaxf0100c581513,63276
f0100c59:	e8 53 f4 ff ff       	call   f01000b1 <_panic>f0100c591514,63320
f0100c5e:	8b 36                	mov    (%esi),%esif0100c5e1516,63426
f0100c60:	85 f6                	test   %esi,%esif0100c601517,63477
f0100c62:	74 40                	je     f0100ca4 <check_page_free_list+0xb4>f0100c621518,63526
void	user_mem_assert(struct Env *env, const void *va, size_t len, int perm);void1519,63602
static inline physaddr_tstatic1521,63680
f0100c64:	89 f0                	mov    %esi,%eaxf0100c641525,63769
f0100c66:	2b 07                	sub    (%edi),%eaxf0100c661526,63818
f0100c68:	c1 f8 03             	sar    $0x3,%eaxf0100c681527,63869
f0100c6b:	c1 e0 0c             	shl    $0xc,%eaxf0100c6b1528,63918
f0100c6e:	89 c2                	mov    %eax,%edxf0100c6e1530,64003
f0100c70:	c1 ea 16             	shr    $0x16,%edxf0100c701531,64052
f0100c73:	3b 55 d4             	cmp    -0x2c(%ebp),%edxf0100c731532,64102
f0100c76:	73 e6                	jae    f0100c5e <check_page_free_list+0x6e>f0100c761533,64158
f0100c78:	89 c2                	mov    %eax,%edxf0100c781535,64260
f0100c7a:	c1 ea 0c             	shr    $0xc,%edxf0100c7a1536,64309
f0100c7d:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0100c7d1537,64358
f0100c80:	3b 11                	cmp    (%ecx),%edxf0100c801538,64414
f0100c82:	73 c1                	jae    f0100c45 <check_page_free_list+0x55>f0100c821539,64465
f0100c84:	83 ec 04             	sub    $0x4,%espf0100c841541,64577
f0100c87:	68 80 00 00 00       	push   $0x80f0100c871542,64626
f0100c8c:	68 97 00 00 00       	push   $0x97f0100c8c1543,64671
f0100c91:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100c911545,64749
f0100c96:	50                   	push   %eaxf0100c961546,64805
f0100c97:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100c971547,64849
f0100c9a:	e8 55 3a 00 00       	call   f01046f4 <memset>f0100c9a1548,64905
f0100c9f:	83 c4 10             	add    $0x10,%espf0100c9f1549,64962
f0100ca2:	eb ba                	jmp    f0100c5e <check_page_free_list+0x6e>f0100ca21550,65012
	first_free_page = (char *) boot_alloc(0);first_free_page1551,65088
f0100ca4:	b8 00 00 00 00       	mov    $0x0,%eaxf0100ca41552,65131
f0100ca9:	e8 40 fe ff ff       	call   f0100aee <boot_alloc>f0100ca91553,65180
f0100cae:	89 45 c8             	mov    %eax,-0x38(%ebp)f0100cae1554,65241
f0100cb1:	8b 7d c4             	mov    -0x3c(%ebp),%edif0100cb11556,65348
f0100cb4:	8b 97 1c 23 00 00    	mov    0x231c(%edi),%edxf0100cb41557,65404
f0100cba:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0100cba1559,65484
f0100cc0:	8b 08                	mov    (%eax),%ecxf0100cc01560,65540
f0100cc2:	c7 c0 08 20 18 f0    	mov    $0xf0182008,%eaxf0100cc21562,65622
f0100cc8:	8b 00                	mov    (%eax),%eaxf0100cc81563,65678
f0100cca:	89 45 cc             	mov    %eax,-0x34(%ebp)f0100cca1564,65729
f0100ccd:	8d 1c c1             	lea    (%ecx,%eax,8),%ebxf0100ccd1565,65785
f0100cd0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)f0100cd01567,65904
f0100cd3:	bf 00 00 00 00       	mov    $0x0,%edif0100cd31569,66002
f0100cd8:	89 75 d0             	mov    %esi,-0x30(%ebp)f0100cd81570,66051
f0100cdb:	e9 08 01 00 00       	jmp    f0100de8 <check_page_free_list+0x1f8>f0100cdb1572,66158
f0100ce0:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100ce01574,66258
f0100ce3:	8d 83 3b 69 f8 ff    	lea    -0x796c5(%ebx),%eaxf0100ce31575,66314
f0100ce9:	50                   	push   %eaxf0100ce91576,66373
f0100cea:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100cea1577,66417
f0100cf0:	50                   	push   %eaxf0100cf01578,66476
f0100cf1:	68 5c 02 00 00       	push   $0x25cf0100cf11579,66520
f0100cf6:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100cf61580,66566
f0100cfc:	50                   	push   %eaxf0100cfc1581,66625
f0100cfd:	e8 af f3 ff ff       	call   f01000b1 <_panic>f0100cfd1582,66669
f0100d02:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100d021584,66757
f0100d05:	8d 83 5c 69 f8 ff    	lea    -0x796a4(%ebx),%eaxf0100d051585,66813
f0100d0b:	50                   	push   %eaxf0100d0b1586,66872
f0100d0c:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100d0c1587,66916
f0100d12:	50                   	push   %eaxf0100d121588,66975
f0100d13:	68 5d 02 00 00       	push   $0x25df0100d131589,67019
f0100d18:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100d181590,67065
f0100d1e:	50                   	push   %eaxf0100d1e1591,67124
f0100d1f:	e8 8d f3 ff ff       	call   f01000b1 <_panic>f0100d1f1592,67168
f0100d24:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100d241594,67286
f0100d27:	8d 83 34 61 f8 ff    	lea    -0x79ecc(%ebx),%eaxf0100d271595,67342
f0100d2d:	50                   	push   %eaxf0100d2d1596,67401
f0100d2e:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100d2e1597,67445
f0100d34:	50                   	push   %eaxf0100d341598,67504
f0100d35:	68 5e 02 00 00       	push   $0x25ef0100d351599,67548
f0100d3a:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100d3a1600,67594
f0100d40:	50                   	push   %eaxf0100d401601,67653
f0100d41:	e8 6b f3 ff ff       	call   f01000b1 <_panic>f0100d411602,67697
f0100d46:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100d461604,67782
f0100d49:	8d 83 70 69 f8 ff    	lea    -0x79690(%ebx),%eaxf0100d491605,67838
f0100d4f:	50                   	push   %eaxf0100d4f1606,67897
f0100d50:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100d501607,67941
f0100d56:	50                   	push   %eaxf0100d561608,68000
f0100d57:	68 61 02 00 00       	push   $0x261f0100d571609,68044
f0100d5c:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100d5c1610,68090
f0100d62:	50                   	push   %eaxf0100d621611,68149
f0100d63:	e8 49 f3 ff ff       	call   f01000b1 <_panic>f0100d631612,68193
f0100d68:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100d681614,68286
f0100d6b:	8d 83 81 69 f8 ff    	lea    -0x7967f(%ebx),%eaxf0100d6b1615,68342
f0100d71:	50                   	push   %eaxf0100d711616,68401
f0100d72:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100d721617,68445
f0100d78:	50                   	push   %eaxf0100d781618,68504
f0100d79:	68 62 02 00 00       	push   $0x262f0100d791619,68548
f0100d7e:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100d7e1620,68594
f0100d84:	50                   	push   %eaxf0100d841621,68653
f0100d85:	e8 27 f3 ff ff       	call   f01000b1 <_panic>f0100d851622,68697
f0100d8a:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100d8a1624,68800
f0100d8d:	8d 83 68 61 f8 ff    	lea    -0x79e98(%ebx),%eaxf0100d8d1625,68856
f0100d93:	50                   	push   %eaxf0100d931626,68915
f0100d94:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100d941627,68959
f0100d9a:	50                   	push   %eaxf0100d9a1628,69018
f0100d9b:	68 63 02 00 00       	push   $0x263f0100d9b1629,69062
f0100da0:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100da01630,69108
f0100da6:	50                   	push   %eaxf0100da61631,69167
f0100da7:	e8 05 f3 ff ff       	call   f01000b1 <_panic>f0100da71632,69211
f0100dac:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100dac1634,69305
f0100daf:	8d 83 9a 69 f8 ff    	lea    -0x79666(%ebx),%eaxf0100daf1635,69361
f0100db5:	50                   	push   %eaxf0100db51636,69420
f0100db6:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100db61637,69464
f0100dbc:	50                   	push   %eaxf0100dbc1638,69523
f0100dbd:	68 64 02 00 00       	push   $0x264f0100dbd1639,69567
f0100dc2:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100dc21640,69613
f0100dc8:	50                   	push   %eaxf0100dc81641,69672
f0100dc9:	e8 e3 f2 ff ff       	call   f01000b1 <_panic>f0100dc91642,69716
f0100dce:	89 c6                	mov    %eax,%esif0100dce1644,69799
f0100dd0:	c1 ee 0c             	shr    $0xc,%esif0100dd01645,69848
f0100dd3:	39 75 cc             	cmp    %esi,-0x34(%ebp)f0100dd31646,69897
f0100dd6:	76 70                	jbe    f0100e48 <check_page_free_list+0x258>f0100dd61647,69953
f0100dd8:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100dd81649,70063
f0100ddd:	39 45 c8             	cmp    %eax,-0x38(%ebp)f0100ddd1651,70199
f0100de0:	77 7f                	ja     f0100e61 <check_page_free_list+0x271>f0100de01652,70255
f0100de2:	83 45 d0 01          	addl   $0x1,-0x30(%ebp)f0100de21654,70351
f0100de6:	8b 12                	mov    (%edx),%edxf0100de61656,70458
f0100de8:	85 d2                	test   %edx,%edxf0100de81657,70509
f0100dea:	0f 84 93 00 00 00    	je     f0100e83 <check_page_free_list+0x293>f0100dea1658,70558
f0100df0:	39 d1                	cmp    %edx,%ecxf0100df01660,70658
f0100df2:	0f 87 e8 fe ff ff    	ja     f0100ce0 <check_page_free_list+0xf0>f0100df21661,70707
f0100df8:	39 d3                	cmp    %edx,%ebxf0100df81663,70814
f0100dfa:	0f 86 02 ff ff ff    	jbe    f0100d02 <check_page_free_list+0x112>f0100dfa1664,70863
f0100e00:	89 d0                	mov    %edx,%eaxf0100e001666,71001
f0100e02:	2b 45 d4             	sub    -0x2c(%ebp),%eaxf0100e021667,71050
f0100e05:	a8 07                	test   $0x7,%alf0100e051668,71106
f0100e07:	0f 85 17 ff ff ff    	jne    f0100d24 <check_page_free_list+0x134>f0100e071669,71154
f0100e0d:	c1 f8 03             	sar    $0x3,%eaxf0100e0d1671,71264
f0100e10:	c1 e0 0c             	shl    $0xc,%eaxf0100e101672,71313
f0100e13:	85 c0                	test   %eax,%eaxf0100e131674,71390
f0100e15:	0f 84 2b ff ff ff    	je     f0100d46 <check_page_free_list+0x156>f0100e151675,71439
f0100e1b:	3d 00 00 0a 00       	cmp    $0xa0000,%eaxf0100e1b1677,71552
f0100e20:	0f 84 42 ff ff ff    	je     f0100d68 <check_page_free_list+0x178>f0100e201678,71605
f0100e26:	3d 00 f0 0f 00       	cmp    $0xff000,%eaxf0100e261680,71728
f0100e2b:	0f 84 59 ff ff ff    	je     f0100d8a <check_page_free_list+0x19a>f0100e2b1681,71781
f0100e31:	3d 00 00 10 00       	cmp    $0x100000,%eaxf0100e311683,71895
f0100e36:	0f 84 70 ff ff ff    	je     f0100dac <check_page_free_list+0x1bc>f0100e361684,71949
f0100e3c:	3d ff ff 0f 00       	cmp    $0xfffff,%eaxf0100e3c1686,72106
f0100e41:	77 8b                	ja     f0100dce <check_page_free_list+0x1de>f0100e411687,72159
f0100e43:	83 c7 01             	add    $0x1,%edif0100e431689,72256
f0100e46:	eb 9e                	jmp    f0100de6 <check_page_free_list+0x1f6>f0100e461690,72305
f0100e48:	50                   	push   %eaxf0100e481692,72446
f0100e49:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100e491693,72490
f0100e4c:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf0100e4c1694,72546
f0100e52:	50                   	push   %eaxf0100e521695,72605
f0100e53:	6a 56                	push   $0x56f0100e531696,72649
f0100e55:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf0100e551697,72694
f0100e5b:	50                   	push   %eaxf0100e5b1698,72753
f0100e5c:	e8 50 f2 ff ff       	call   f01000b1 <_panic>f0100e5c1699,72797
f0100e61:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100e611701,72934
f0100e64:	8d 83 8c 61 f8 ff    	lea    -0x79e74(%ebx),%eaxf0100e641702,72990
f0100e6a:	50                   	push   %eaxf0100e6a1703,73049
f0100e6b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100e6b1704,73093
f0100e71:	50                   	push   %eaxf0100e711705,73152
f0100e72:	68 65 02 00 00       	push   $0x265f0100e721706,73196
f0100e77:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100e771707,73242
f0100e7d:	50                   	push   %eaxf0100e7d1708,73301
f0100e7e:	e8 2e f2 ff ff       	call   f01000b1 <_panic>f0100e7e1709,73345
f0100e83:	8b 75 d0             	mov    -0x30(%ebp),%esif0100e831710,73402
f0100e86:	85 ff                	test   %edi,%edif0100e861712,73486
f0100e88:	7e 1e                	jle    f0100ea8 <check_page_free_list+0x2b8>f0100e881713,73535
f0100e8a:	85 f6                	test   %esi,%esif0100e8a1715,73639
f0100e8c:	7e 3c                	jle    f0100eca <check_page_free_list+0x2da>f0100e8c1716,73688
f0100e8e:	83 ec 0c             	sub    $0xc,%espf0100e8e1718,73814
f0100e91:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100e911719,73863
f0100e94:	8d 83 d4 61 f8 ff    	lea    -0x79e2c(%ebx),%eaxf0100e941720,73919
f0100e9a:	50                   	push   %eaxf0100e9a1721,73978
f0100e9b:	e8 7a 28 00 00       	call   f010371a <cprintf>f0100e9b1722,74022
f0100ea0:	8d 65 f4             	lea    -0xc(%ebp),%espf0100ea01724,74082
f0100ea3:	5b                   	pop    %ebxf0100ea31725,74137
f0100ea4:	5e                   	pop    %esif0100ea41726,74181
f0100ea5:	5f                   	pop    %edif0100ea51727,74225
f0100ea6:	5d                   	pop    %ebpf0100ea61728,74269
f0100ea7:	c3                   	ret    f0100ea71729,74313
f0100ea8:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100ea81731,74381
f0100eab:	8d 83 b4 69 f8 ff    	lea    -0x7964c(%ebx),%eaxf0100eab1732,74437
f0100eb1:	50                   	push   %eaxf0100eb11733,74496
f0100eb2:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100eb21734,74540
f0100eb8:	50                   	push   %eaxf0100eb81735,74599
f0100eb9:	68 6d 02 00 00       	push   $0x26df0100eb91736,74643
f0100ebe:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100ebe1737,74689
f0100ec4:	50                   	push   %eaxf0100ec41738,74748
f0100ec5:	e8 e7 f1 ff ff       	call   f01000b1 <_panic>f0100ec51739,74792
f0100eca:	8b 5d c4             	mov    -0x3c(%ebp),%ebxf0100eca1741,74876
f0100ecd:	8d 83 c6 69 f8 ff    	lea    -0x7963a(%ebx),%eaxf0100ecd1742,74932
f0100ed3:	50                   	push   %eaxf0100ed31743,74991
f0100ed4:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0100ed41744,75035
f0100eda:	50                   	push   %eaxf0100eda1745,75094
f0100edb:	68 6e 02 00 00       	push   $0x26ef0100edb1746,75138
f0100ee0:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0100ee01747,75184
f0100ee6:	50                   	push   %eaxf0100ee61748,75243
f0100ee7:	e8 c5 f1 ff ff       	call   f01000b1 <_panic>f0100ee71749,75287
f0100eec:	8b 45 c4             	mov    -0x3c(%ebp),%eaxf0100eec1751,75366
f0100eef:	8b 80 1c 23 00 00    	mov    0x231c(%eax),%eaxf0100eef1752,75422
f0100ef5:	85 c0                	test   %eax,%eaxf0100ef51753,75479
f0100ef7:	0f 84 2a fd ff ff    	je     f0100c27 <check_page_free_list+0x37>f0100ef71754,75528
f0100efd:	8d 55 d8             	lea    -0x28(%ebp),%edxf0100efd1756,75648
f0100f00:	89 55 e0             	mov    %edx,-0x20(%ebp)f0100f001757,75704
f0100f03:	8d 55 dc             	lea    -0x24(%ebp),%edxf0100f031758,75760
f0100f06:	89 55 e4             	mov    %edx,-0x1c(%ebp)f0100f061759,75816
f0100f09:	8b 7d c4             	mov    -0x3c(%ebp),%edif0100f091761,75905
f0100f0c:	c7 c3 10 20 18 f0    	mov    $0xf0182010,%ebxf0100f0c1762,75961
f0100f12:	89 c2                	mov    %eax,%edxf0100f121763,76017
f0100f14:	2b 13                	sub    (%ebx),%edxf0100f141764,76066
f0100f16:	f7 c2 00 e0 7f 00    	test   $0x7fe000,%edxf0100f161766,76166
f0100f1c:	0f 95 c2             	setne  %dlf0100f1c1767,76220
f0100f1f:	0f b6 d2             	movzbl %dl,%edxf0100f1f1768,76263
f0100f22:	8b 4c 95 e0          	mov    -0x20(%ebp,%edx,4),%ecxf0100f221770,76334
f0100f26:	89 01                	mov    %eax,(%ecx)f0100f261771,76397
f0100f28:	89 44 95 e0          	mov    %eax,-0x20(%ebp,%edx,4)f0100f281773,76480
f0100f2c:	8b 00                	mov    (%eax),%eaxf0100f2c1775,76595
f0100f2e:	85 c0                	test   %eax,%eaxf0100f2e1776,76646
f0100f30:	75 e0                	jne    f0100f12 <check_page_free_list+0x322>f0100f301777,76695
f0100f32:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100f321779,76786
f0100f35:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100f351780,76842
f0100f3b:	8b 55 dc             	mov    -0x24(%ebp),%edxf0100f3b1782,76909
f0100f3e:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100f3e1783,76965
f0100f41:	89 10                	mov    %edx,(%eax)f0100f411784,77021
		page_free_list = pp1;page_free_list1785,77072
f0100f43:	8b 45 d8             	mov    -0x28(%ebp),%eaxf0100f431786,77096
f0100f46:	8b 7d c4             	mov    -0x3c(%ebp),%edif0100f461787,77152
f0100f49:	89 87 1c 23 00 00    	mov    %eax,0x231c(%edi)f0100f491788,77208
f0100f4f:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)f0100f4f1790,77321
f0100f56:	8b 45 c4             	mov    -0x3c(%ebp),%eaxf0100f561792,77426
f0100f59:	8b b0 1c 23 00 00    	mov    0x231c(%eax),%esif0100f591793,77482
f0100f5f:	c7 c7 10 20 18 f0    	mov    $0xf0182010,%edif0100f5f1794,77539
f0100f65:	c7 c0 08 20 18 f0    	mov    $0xf0182008,%eaxf0100f651796,77621
f0100f6b:	89 45 d0             	mov    %eax,-0x30(%ebp)f0100f6b1797,77677
f0100f6e:	e9 ed fc ff ff       	jmp    f0100c60 <check_page_free_list+0x70>f0100f6e1798,77733
f0100f73 <page_init>:f0100f731800,77810
f0100f73:	55                   	push   %ebpf0100f731802,77834
f0100f74:	89 e5                	mov    %esp,%ebpf0100f741803,77878
f0100f76:	57                   	push   %edif0100f761804,77927
f0100f77:	56                   	push   %esif0100f771805,77971
f0100f78:	53                   	push   %ebxf0100f781806,78015
f0100f79:	83 ec 1c             	sub    $0x1c,%espf0100f791807,78059
f0100f7c:	e8 66 22 00 00       	call   f01031e7 <__x86.get_pc_thunk.si>f0100f7c1808,78109
f0100f81:	81 c6 9f e0 07 00    	add    $0x7e09f,%esif0100f811809,78181
f0100f87:	bb 00 00 00 00       	mov    $0x0,%ebxf0100f871811,78266
f0100f8c:	c7 c7 08 20 18 f0    	mov    $0xf0182008,%edif0100f8c1812,78315
f0100f92:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0100f921814,78395
f0100f98:	89 45 e0             	mov    %eax,-0x20(%ebp)f0100f981815,78451
f0100f9b:	eb 38                	jmp    f0100fd5 <page_init+0x62>f0100f9b1817,78539
f0100f9d:	39 9e 20 23 00 00    	cmp    %ebx,0x2320(%esi)f0100f9d1819,78639
f0100fa3:	76 52                	jbe    f0100ff7 <page_init+0x84>f0100fa31820,78696
f0100fa5:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecxf0100fa51821,78761
f0100fac:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0100fac1823,78842
f0100fb2:	89 ca                	mov    %ecx,%edxf0100fb21824,78898
f0100fb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100fb41825,78947
f0100fb7:	03 10                	add    (%eax),%edxf0100fb71826,79003
f0100fb9:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f0100fb91827,79054
f0100fbf:	8b 86 1c 23 00 00    	mov    0x231c(%esi),%eaxf0100fbf1829,79146
f0100fc5:	89 02                	mov    %eax,(%edx)f0100fc51830,79203
			page_free_list = &pages[i];page_free_list1831,79254
f0100fc7:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100fc71832,79285
f0100fca:	03 08                	add    (%eax),%ecxf0100fca1833,79341
f0100fcc:	89 8e 1c 23 00 00    	mov    %ecx,0x231c(%esi)f0100fcc1834,79392
f0100fd2:	83 c3 01             	add    $0x1,%ebxf0100fd21836,79481
f0100fd5:	39 1f                	cmp    %ebx,(%edi)f0100fd51837,79530
f0100fd7:	0f 86 80 00 00 00    	jbe    f010105d <page_init+0xea>f0100fd71838,79581
f0100fdd:	85 db                	test   %ebx,%ebxf0100fdd1840,79662
f0100fdf:	75 bc                	jne    f0100f9d <page_init+0x2a>f0100fdf1841,79711
f0100fe1:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0100fe11843,79800
f0100fe7:	8b 00                	mov    (%eax),%eaxf0100fe71844,79856
f0100fe9:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100fe91845,79907
f0100fef:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100fef1847,79989
f0100ff5:	eb db                	jmp    f0100fd2 <page_init+0x5f>f0100ff51848,80040
f0100ff7:	81 fb ff 00 00 00    	cmp    $0xff,%ebxf0100ff71850,80195
f0100ffd:	77 16                	ja     f0101015 <page_init+0xa2>f0100ffd1851,80245
f0100fff:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100fff1853,80334
f0101002:	8b 00                	mov    (%eax),%eaxf01010021854,80390
f0101004:	8d 04 d8             	lea    (%eax,%ebx,8),%eaxf01010041855,80441
f0101007:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f01010071856,80499
f010100d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f010100d1858,80581
f0101013:	eb bd                	jmp    f0100fd2 <page_init+0x5f>f01010131859,80632
f0101015:	b8 00 00 00 00       	mov    $0x0,%eaxf01010151861,80787
f010101a:	e8 cf fa ff ff       	call   f0100aee <boot_alloc>f010101a1862,80836
f010101f:	05 00 00 00 10       	add    $0x10000000,%eaxf010101f1863,80897
f0101024:	c1 e8 0c             	shr    $0xc,%eaxf01010241864,80953
f0101027:	39 d8                	cmp    %ebx,%eaxf01010271865,81002
f0101029:	77 d4                	ja     f0100fff <page_init+0x8c>f01010291866,81051
f010102b:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecxf010102b1867,81116
f0101032:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01010321869,81197
f0101038:	89 ca                	mov    %ecx,%edxf01010381870,81253
f010103a:	89 45 e4             	mov    %eax,-0x1c(%ebp)f010103a1871,81302
f010103d:	03 10                	add    (%eax),%edxf010103d1872,81358
f010103f:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f010103f1873,81409
f0101045:	8b 86 1c 23 00 00    	mov    0x231c(%esi),%eaxf01010451875,81501
f010104b:	89 02                	mov    %eax,(%edx)f010104b1876,81558
			page_free_list = &pages[i];page_free_list1877,81609
f010104d:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf010104d1878,81640
f0101050:	03 08                	add    (%eax),%ecxf01010501879,81696
f0101052:	89 8e 1c 23 00 00    	mov    %ecx,0x231c(%esi)f01010521880,81747
f0101058:	e9 75 ff ff ff       	jmp    f0100fd2 <page_init+0x5f>f01010581881,81804
f010105d:	83 c4 1c             	add    $0x1c,%espf010105d1883,81871
f0101060:	5b                   	pop    %ebxf01010601884,81921
f0101061:	5e                   	pop    %esif01010611885,81965
f0101062:	5f                   	pop    %edif01010621886,82009
f0101063:	5d                   	pop    %ebpf01010631887,82053
f0101064:	c3                   	ret    f01010641888,82097
f0101065 <page_alloc>:f01010651890,82138
f0101065:	55                   	push   %ebpf01010651892,82163
f0101066:	89 e5                	mov    %esp,%ebpf01010661893,82207
f0101068:	56                   	push   %esif01010681894,82256
f0101069:	53                   	push   %ebxf01010691895,82300
f010106a:	e8 f8 f0 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010106a1896,82344
f010106f:	81 c3 b1 df 07 00    	add    $0x7dfb1,%ebxf010106f1897,82416
f0101075:	8b b3 1c 23 00 00    	mov    0x231c(%ebx),%esif01010751899,82504
f010107b:	85 f6                	test   %esi,%esif010107b1900,82561
f010107d:	74 1a                	je     f0101099 <page_alloc+0x34>f010107d1901,82610
	page_free_list = result->pp_link;page_free_list1902,82676
f010107f:	8b 06                	mov    (%esi),%eaxf010107f1903,82711
f0101081:	89 83 1c 23 00 00    	mov    %eax,0x231c(%ebx)f01010811904,82762
f0101087:	c7 06 00 00 00 00    	movl   $0x0,(%esi)f01010871906,82844
f010108d:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f010108d1908,82916
f0101093:	f6 45 08 01          	testb  $0x1,0x8(%ebp)f01010931910,83001
f0101097:	75 09                	jne    f01010a2 <page_alloc+0x3d>f01010971911,83055
f0101099:	89 f0                	mov    %esi,%eaxf01010991913,83123
f010109b:	8d 65 f8             	lea    -0x8(%ebp),%espf010109b1914,83172
f010109e:	5b                   	pop    %ebxf010109e1915,83227
f010109f:	5e                   	pop    %esif010109f1916,83271
f01010a0:	5d                   	pop    %ebpf01010a01917,83315
f01010a1:	c3                   	ret    f01010a11918,83359
f01010a2:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01010a21920,83432
f01010a8:	89 f2                	mov    %esi,%edxf01010a81921,83488
f01010aa:	2b 10                	sub    (%eax),%edxf01010aa1922,83537
f01010ac:	89 d0                	mov    %edx,%eaxf01010ac1923,83588
f01010ae:	c1 f8 03             	sar    $0x3,%eaxf01010ae1924,83637
f01010b1:	c1 e0 0c             	shl    $0xc,%eaxf01010b11925,83686
f01010b4:	89 c1                	mov    %eax,%ecxf01010b41927,83761
f01010b6:	c1 e9 0c             	shr    $0xc,%ecxf01010b61928,83810
f01010b9:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf01010b91929,83859
f01010bf:	3b 0a                	cmp    (%edx),%ecxf01010bf1930,83915
f01010c1:	73 1a                	jae    f01010dd <page_alloc+0x78>f01010c11931,83966
f01010c3:	83 ec 04             	sub    $0x4,%espf01010c31933,84071
f01010c6:	68 00 10 00 00       	push   $0x1000f01010c61934,84120
f01010cb:	6a 00                	push   $0x0f01010cb1935,84167
f01010cd:	2d 00 00 00 10       	sub    $0x10000000,%eaxf01010cd1937,84244
f01010d2:	50                   	push   %eaxf01010d21938,84300
f01010d3:	e8 1c 36 00 00       	call   f01046f4 <memset>f01010d31939,84344
f01010d8:	83 c4 10             	add    $0x10,%espf01010d81940,84401
f01010db:	eb bc                	jmp    f0101099 <page_alloc+0x34>f01010db1941,84451
f01010dd:	50                   	push   %eaxf01010dd1943,84581
f01010de:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf01010de1944,84625
f01010e4:	50                   	push   %eaxf01010e41945,84684
f01010e5:	6a 56                	push   $0x56f01010e51946,84728
f01010e7:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf01010e71947,84773
f01010ed:	50                   	push   %eaxf01010ed1948,84832
f01010ee:	e8 be ef ff ff       	call   f01000b1 <_panic>f01010ee1949,84876
f01010f3 <page_free>:f01010f31951,84934
f01010f3:	55                   	push   %ebpf01010f31953,84958
f01010f4:	89 e5                	mov    %esp,%ebpf01010f41954,85002
f01010f6:	53                   	push   %ebxf01010f61955,85051
f01010f7:	83 ec 04             	sub    $0x4,%espf01010f71956,85095
f01010fa:	e8 68 f0 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01010fa1957,85144
f01010ff:	81 c3 21 df 07 00    	add    $0x7df21,%ebxf01010ff1958,85216
f0101105:	8b 45 08             	mov    0x8(%ebp),%eaxf01011051959,85269
f0101108:	0f b7 48 04          	movzwl 0x4(%eax),%ecxf01011081961,85339
f010110c:	66 85 c9             	test   %cx,%cxf010110c1962,85393
f010110f:	75 19                	jne    f010112a <page_free+0x37>f010110f1963,85440
f0101111:	8b 08                	mov    (%eax),%ecxf01011111965,85522
f0101113:	85 c9                	test   %ecx,%ecxf01011131966,85573
f0101115:	75 2f                	jne    f0101146 <page_free+0x53>f01011151967,85622
f0101117:	8b 8b 1c 23 00 00    	mov    0x231c(%ebx),%ecxf01011171969,85718
f010111d:	89 08                	mov    %ecx,(%eax)f010111d1970,85775
	page_free_list = pp;page_free_list1971,85826
f010111f:	89 83 1c 23 00 00    	mov    %eax,0x231c(%ebx)f010111f1972,85848
f0101125:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01011251974,85907
f0101128:	c9                   	leave  f01011281975,85962
f0101129:	c3                   	ret    f01011291976,86002
f010112a:	0f b7 c9             	movzwl %cx,%ecxf010112a1978,86109
f010112d:	51                   	push   %ecxf010112d1979,86157
f010112e:	8d 83 f8 61 f8 ff    	lea    -0x79e08(%ebx),%eaxf010112e1980,86201
f0101134:	50                   	push   %eaxf01011341981,86260
f0101135:	68 52 01 00 00       	push   $0x152f01011351982,86304
f010113a:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010113a1983,86350
f0101140:	50                   	push   %eaxf01011401984,86409
f0101141:	e8 6b ef ff ff       	call   f01000b1 <_panic>f01011411985,86453
f0101146:	51                   	push   %ecxf01011461987,86574
f0101147:	8d 83 24 62 f8 ff    	lea    -0x79ddc(%ebx),%eaxf01011471988,86618
f010114d:	50                   	push   %eaxf010114d1989,86677
f010114e:	68 54 01 00 00       	push   $0x154f010114e1990,86721
f0101153:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01011531991,86767
f0101159:	50                   	push   %eaxf01011591992,86826
f010115a:	e8 52 ef ff ff       	call   f01000b1 <_panic>f010115a1993,86870
f010115f <page_decref>:f010115f1995,86928
f010115f:	55                   	push   %ebpf010115f1997,86954
f0101160:	89 e5                	mov    %esp,%ebpf01011601998,86998
f0101162:	83 ec 08             	sub    $0x8,%espf01011621999,87047
f0101165:	8b 55 08             	mov    0x8(%ebp),%edxf01011652000,87096
f0101168:	0f b7 42 04          	movzwl 0x4(%edx),%eaxf01011682002,87174
f010116c:	83 e8 01             	sub    $0x1,%eaxf010116c2003,87228
f010116f:	66 89 42 04          	mov    %ax,0x4(%edx)f010116f2004,87277
f0101173:	66 85 c0             	test   %ax,%axf01011732005,87330
f0101176:	74 02                	je     f010117a <page_decref+0x1b>f01011762006,87377
f0101178:	c9                   	leave  f01011782008,87446
f0101179:	c3                   	ret    f01011792009,87486
f010117a:	83 ec 0c             	sub    $0xc,%espf010117a2011,87543
f010117d:	52                   	push   %edxf010117d2012,87592
f010117e:	e8 70 ff ff ff       	call   f01010f3 <page_free>f010117e2013,87636
f0101183:	83 c4 10             	add    $0x10,%espf01011832014,87696
f0101186:	eb f0                	jmp    f0101178 <page_decref+0x19>f01011862016,87748
f0101188 <pgdir_walk>:f01011882018,87816
f0101188:	55                   	push   %ebpf01011882020,87841
f0101189:	89 e5                	mov    %esp,%ebpf01011892021,87885
f010118b:	57                   	push   %edif010118b2022,87934
f010118c:	56                   	push   %esif010118c2023,87978
f010118d:	53                   	push   %ebxf010118d2024,88022
f010118e:	83 ec 0c             	sub    $0xc,%espf010118e2025,88066
f0101191:	e8 d1 ef ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01011912026,88115
f0101196:	81 c3 8a de 07 00    	add    $0x7de8a,%ebxf01011962027,88187
f010119c:	8b 7d 0c             	mov    0xc(%ebp),%edif010119c2028,88240
	pde = pgdir+PDX(va);pde2029,88294
f010119f:	89 fe                	mov    %edi,%esif010119f2030,88316
f01011a1:	c1 ee 16             	shr    $0x16,%esif01011a12031,88365
f01011a4:	c1 e6 02             	shl    $0x2,%esif01011a42032,88415
f01011a7:	03 75 08             	add    0x8(%ebp),%esif01011a72033,88464
f01011aa:	f6 06 01             	testb  $0x1,(%esi)f01011aa2035,88541
f01011ad:	75 30                	jne    f01011df <pgdir_walk+0x57>f01011ad2036,88592
f01011af:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)f01011af2038,88685
f01011b3:	74 71                	je     f0101226 <pgdir_walk+0x9e>f01011b32039,88740
		pp = page_alloc(ALLOC_ZERO);pp2040,88806
f01011b5:	83 ec 0c             	sub    $0xc,%espf01011b52041,88837
f01011b8:	6a 01                	push   $0x1f01011b82042,88886
f01011ba:	e8 a6 fe ff ff       	call   f0101065 <page_alloc>f01011ba2043,88930
f01011bf:	83 c4 10             	add    $0x10,%espf01011bf2045,89014
f01011c2:	85 c0                	test   %eax,%eaxf01011c22046,89064
f01011c4:	74 67                	je     f010122d <pgdir_walk+0xa5>f01011c42047,89113
f01011c6:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f01011c62049,89197
f01011cc:	c7 c2 10 20 18 f0    	mov    $0xf0182010,%edxf01011cc2051,89284
f01011d2:	2b 02                	sub    (%edx),%eaxf01011d22052,89340
f01011d4:	c1 f8 03             	sar    $0x3,%eaxf01011d42053,89391
f01011d7:	c1 e0 0c             	shl    $0xc,%eaxf01011d72054,89440
f01011da:	83 c8 07             	or     $0x7,%eaxf01011da2056,89535
f01011dd:	89 06                	mov    %eax,(%esi)f01011dd2057,89584
f01011df:	8b 06                	mov    (%esi),%eaxf01011df2059,89688
f01011e1:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf01011e12060,89739
f01011e6:	89 c1                	mov    %eax,%ecxf01011e62062,89821
f01011e8:	c1 e9 0c             	shr    $0xc,%ecxf01011e82063,89870
f01011eb:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf01011eb2064,89919
f01011f1:	3b 0a                	cmp    (%edx),%ecxf01011f12065,89975
f01011f3:	73 18                	jae    f010120d <pgdir_walk+0x85>f01011f32066,90026
f01011f5:	c1 ef 0a             	shr    $0xa,%edif01011f52067,90092
f01011f8:	81 e7 fc 0f 00 00    	and    $0xffc,%edif01011f82068,90141
f01011fe:	8d 84 38 00 00 00 f0 	lea    -0x10000000(%eax,%edi,1),%eaxf01011fe2069,90192
f0101205:	8d 65 f4             	lea    -0xc(%ebp),%espf01012052071,90263
f0101208:	5b                   	pop    %ebxf01012082072,90318
f0101209:	5e                   	pop    %esif01012092073,90362
f010120a:	5f                   	pop    %edif010120a2074,90406
f010120b:	5d                   	pop    %ebpf010120b2075,90450
f010120c:	c3                   	ret    f010120c2076,90494
f010120d:	50                   	push   %eaxf010120d2078,90598
f010120e:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf010120e2079,90642
f0101214:	50                   	push   %eaxf01012142080,90701
f0101215:	68 8b 01 00 00       	push   $0x18bf01012152081,90745
f010121a:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010121a2082,90791
f0101220:	50                   	push   %eaxf01012202083,90850
f0101221:	e8 8b ee ff ff       	call   f01000b1 <_panic>f01012212084,90894
f0101226:	b8 00 00 00 00       	mov    $0x0,%eaxf01012262086,90978
f010122b:	eb d8                	jmp    f0101205 <pgdir_walk+0x7d>f010122b2087,91027
f010122d:	b8 00 00 00 00       	mov    $0x0,%eaxf010122d2089,91116
f0101232:	eb d1                	jmp    f0101205 <pgdir_walk+0x7d>f01012322090,91165
f0101234 <boot_map_region>:f01012342092,91232
f0101234:	55                   	push   %ebpf01012342094,91262
f0101235:	89 e5                	mov    %esp,%ebpf01012352095,91306
f0101237:	57                   	push   %edif01012372096,91355
f0101238:	56                   	push   %esif01012382097,91399
f0101239:	53                   	push   %ebxf01012392098,91443
f010123a:	83 ec 2c             	sub    $0x2c,%espf010123a2099,91487
f010123d:	e8 a9 1f 00 00       	call   f01031eb <__x86.get_pc_thunk.di>f010123d2100,91537
f0101242:	81 c7 de dd 07 00    	add    $0x7ddde,%edif01012422101,91609
f0101248:	89 7d d4             	mov    %edi,-0x2c(%ebp)f01012482102,91662
f010124b:	89 45 dc             	mov    %eax,-0x24(%ebp)f010124b2103,91718
f010124e:	c1 e9 0c             	shr    $0xc,%ecxf010124e2105,91814
f0101251:	89 4d e4             	mov    %ecx,-0x1c(%ebp)f01012512106,91863
f0101254:	89 d3                	mov    %edx,%ebxf01012542107,91919
f0101256:	bf 00 00 00 00       	mov    $0x0,%edif01012562108,91968
f010125b:	8b 45 08             	mov    0x8(%ebp),%eaxf010125b2109,92017
f010125e:	29 d0                	sub    %edx,%eaxf010125e2110,92071
f0101260:	89 45 e0             	mov    %eax,-0x20(%ebp)f01012602111,92120
f0101263:	8b 45 0c             	mov    0xc(%ebp),%eaxf01012632113,92204
f0101266:	83 c8 01             	or     $0x1,%eaxf01012662114,92258
f0101269:	89 45 d8             	mov    %eax,-0x28(%ebp)f01012692115,92307
f010126c:	8b 45 e0             	mov    -0x20(%ebp),%eaxf010126c2116,92363
f010126f:	8d 34 18             	lea    (%eax,%ebx,1),%esif010126f2117,92419
f0101272:	3b 7d e4             	cmp    -0x1c(%ebp),%edif01012722119,92517
f0101275:	74 41                	je     f01012b8 <boot_map_region+0x84>f01012752120,92573
		pte = pgdir_walk(pgdir, (void *) va, 1);pte2121,92644
f0101277:	83 ec 04             	sub    $0x4,%espf01012772122,92687
f010127a:	6a 01                	push   $0x1f010127a2123,92736
f010127c:	53                   	push   %ebxf010127c2124,92780
f010127d:	ff 75 dc             	pushl  -0x24(%ebp)f010127d2125,92824
f0101280:	e8 03 ff ff ff       	call   f0101188 <pgdir_walk>f01012802126,92875
f0101285:	83 c4 10             	add    $0x10,%espf01012852128,92955
f0101288:	85 c0                	test   %eax,%eaxf01012882129,93005
f010128a:	74 10                	je     f010129c <boot_map_region+0x68>f010128a2130,93054
f010128c:	0b 75 d8             	or     -0x28(%ebp),%esif010128c2132,93153
f010128f:	89 30                	mov    %esi,(%eax)f010128f2133,93209
f0101291:	81 c3 00 10 00 00    	add    $0x1000,%ebxf01012912135,93274
f0101297:	83 c7 01             	add    $0x1,%edif01012972137,93366
f010129a:	eb d0                	jmp    f010126c <boot_map_region+0x38>f010129a2138,93415
f010129c:	53                   	push   %ebxf010129c2140,93560
f010129d:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010129d2141,93604
f01012a0:	8d 83 4c 62 f8 ff    	lea    -0x79db4(%ebx),%eaxf01012a02142,93660
f01012a6:	50                   	push   %eaxf01012a62143,93719
f01012a7:	68 a0 01 00 00       	push   $0x1a0f01012a72144,93763
f01012ac:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01012ac2145,93809
f01012b2:	50                   	push   %eaxf01012b22146,93868
f01012b3:	e8 f9 ed ff ff       	call   f01000b1 <_panic>f01012b32147,93912
f01012b8:	8d 65 f4             	lea    -0xc(%ebp),%espf01012b82149,93971
f01012bb:	5b                   	pop    %ebxf01012bb2150,94026
f01012bc:	5e                   	pop    %esif01012bc2151,94070
f01012bd:	5f                   	pop    %edif01012bd2152,94114
f01012be:	5d                   	pop    %ebpf01012be2153,94158
f01012bf:	c3                   	ret    f01012bf2154,94202
f01012c0 <page_lookup>:f01012c02156,94243
f01012c0:	55                   	push   %ebpf01012c02158,94269
f01012c1:	89 e5                	mov    %esp,%ebpf01012c12159,94313
f01012c3:	56                   	push   %esif01012c32160,94362
f01012c4:	53                   	push   %ebxf01012c42161,94406
f01012c5:	e8 9d ee ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01012c52162,94450
f01012ca:	81 c3 56 dd 07 00    	add    $0x7dd56,%ebxf01012ca2163,94522
f01012d0:	8b 75 10             	mov    0x10(%ebp),%esif01012d02164,94575
f01012d3:	83 ec 04             	sub    $0x4,%espf01012d32166,94670
f01012d6:	6a 00                	push   $0x0f01012d62167,94719
f01012d8:	ff 75 0c             	pushl  0xc(%ebp)f01012d82168,94763
f01012db:	ff 75 08             	pushl  0x8(%ebp)f01012db2169,94812
f01012de:	e8 a5 fe ff ff       	call   f0101188 <pgdir_walk>f01012de2170,94861
f01012e3:	83 c4 10             	add    $0x10,%espf01012e32172,94956
f01012e6:	85 f6                	test   %esi,%esif01012e62173,95006
f01012e8:	74 02                	je     f01012ec <page_lookup+0x2c>f01012e82174,95055
f01012ea:	89 06                	mov    %eax,(%esi)f01012ea2175,95122
f01012ec:	85 c0                	test   %eax,%eaxf01012ec2177,95225
f01012ee:	74 3d                	je     f010132d <page_lookup+0x6d>f01012ee2178,95274
f01012f0:	8b 00                	mov    (%eax),%eaxf01012f02179,95341
f01012f2:	a8 01                	test   $0x1,%alf01012f22180,95392
f01012f4:	74 3e                	je     f0101334 <page_lookup+0x74>f01012f42181,95440
static inline struct PageInfo*static2184,95510
f01012f6:	c1 e8 0c             	shr    $0xc,%eaxf01012f62188,95592
f01012f9:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf01012f92189,95641
f01012ff:	3b 02                	cmp    (%edx),%eaxf01012ff2190,95697
f0101301:	73 12                	jae    f0101315 <page_lookup+0x55>f01013012191,95748
f0101303:	c7 c2 10 20 18 f0    	mov    $0xf0182010,%edxf01013032194,95885
f0101309:	8b 12                	mov    (%edx),%edxf01013092195,95941
f010130b:	8d 04 c2             	lea    (%edx,%eax,8),%eaxf010130b2196,95992
f010130e:	8d 65 f8             	lea    -0x8(%ebp),%espf010130e2198,96052
f0101311:	5b                   	pop    %ebxf01013112199,96107
f0101312:	5e                   	pop    %esif01013122200,96151
f0101313:	5d                   	pop    %ebpf01013132201,96195
f0101314:	c3                   	ret    f01013142202,96239
f0101315:	83 ec 04             	sub    $0x4,%espf01013152204,96322
f0101318:	8d 83 84 62 f8 ff    	lea    -0x79d7c(%ebx),%eaxf01013182205,96371
f010131e:	50                   	push   %eaxf010131e2206,96430
f010131f:	6a 4f                	push   $0x4ff010131f2207,96474
f0101321:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf01013212208,96519
f0101327:	50                   	push   %eaxf01013272209,96578
f0101328:	e8 84 ed ff ff       	call   f01000b1 <_panic>f01013282210,96622
f010132d:	b8 00 00 00 00       	mov    $0x0,%eaxf010132d2212,96731
f0101332:	eb da                	jmp    f010130e <page_lookup+0x4e>f01013322213,96780
f0101334:	b8 00 00 00 00       	mov    $0x0,%eaxf01013342214,96847
f0101339:	eb d3                	jmp    f010130e <page_lookup+0x4e>f01013392215,96896
f010133b <page_remove>:f010133b2217,96964
f010133b:	55                   	push   %ebpf010133b2219,96990
f010133c:	89 e5                	mov    %esp,%ebpf010133c2220,97034
f010133e:	57                   	push   %edif010133e2221,97083
f010133f:	56                   	push   %esif010133f2222,97127
f0101340:	53                   	push   %ebxf01013402223,97171
f0101341:	83 ec 10             	sub    $0x10,%espf01013412224,97215
f0101344:	8b 7d 08             	mov    0x8(%ebp),%edif01013442225,97265
f0101347:	8b 75 0c             	mov    0xc(%ebp),%esif01013472226,97319
f010134a:	6a 00                	push   $0x0f010134a2228,97426
f010134c:	56                   	push   %esif010134c2229,97470
f010134d:	57                   	push   %edif010134d2230,97514
f010134e:	e8 6d ff ff ff       	call   f01012c0 <page_lookup>f010134e2231,97558
f0101353:	83 c4 10             	add    $0x10,%espf01013532233,97645
f0101356:	85 c0                	test   %eax,%eaxf01013562234,97695
f0101358:	74 27                	je     f0101381 <page_remove+0x46>f01013582235,97744
f010135a:	89 c3                	mov    %eax,%ebxf010135a2236,97811
f010135c:	83 ec 0c             	sub    $0xc,%espf010135c2238,97878
f010135f:	50                   	push   %eaxf010135f2239,97927
f0101360:	e8 fa fd ff ff       	call   f010115f <page_decref>f01013602240,97971
f0101365:	83 c4 0c             	add    $0xc,%espf01013652242,98065
f0101368:	6a 00                	push   $0x0f01013682243,98114
f010136a:	56                   	push   %esif010136a2244,98158
f010136b:	57                   	push   %edif010136b2245,98202
f010136c:	e8 17 fe ff ff       	call   f0101188 <pgdir_walk>f010136c2246,98246
f0101371:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f01013712247,98307
f0101377:	83 c4 10             	add    $0x10,%espf01013772249,98407
f010137a:	66 83 7b 04 00       	cmpw   $0x0,0x4(%ebx)f010137a2250,98457
f010137f:	74 08                	je     f0101389 <page_remove+0x4e>f010137f2251,98511
f0101381:	8d 65 f4             	lea    -0xc(%ebp),%espf01013812253,98580
f0101384:	5b                   	pop    %ebxf01013842254,98635
f0101385:	5e                   	pop    %esif01013852255,98679
f0101386:	5f                   	pop    %edif01013862256,98723
f0101387:	5d                   	pop    %ebpf01013872257,98767
f0101388:	c3                   	ret    f01013882258,98811
static inline voidstatic2261,98854
f0101389:	0f 01 3e             	invlpg (%esi)f01013892265,98950
f010138c:	eb f3                	jmp    f0101381 <page_remove+0x46>f010138c2266,98996
f010138e <page_insert>:f010138e2268,99064
f010138e:	55                   	push   %ebpf010138e2270,99090
f010138f:	89 e5                	mov    %esp,%ebpf010138f2271,99134
f0101391:	57                   	push   %edif01013912272,99183
f0101392:	56                   	push   %esif01013922273,99227
f0101393:	53                   	push   %ebxf01013932274,99271
f0101394:	83 ec 10             	sub    $0x10,%espf01013942275,99315
f0101397:	e8 4f 1e 00 00       	call   f01031eb <__x86.get_pc_thunk.di>f01013972276,99365
f010139c:	81 c7 84 dc 07 00    	add    $0x7dc84,%edif010139c2277,99437
f01013a2:	8b 75 0c             	mov    0xc(%ebp),%esif01013a22278,99490
f01013a5:	6a 01                	push   $0x1f01013a52280,99584
f01013a7:	ff 75 10             	pushl  0x10(%ebp)f01013a72281,99628
f01013aa:	ff 75 08             	pushl  0x8(%ebp)f01013aa2282,99678
f01013ad:	e8 d6 fd ff ff       	call   f0101188 <pgdir_walk>f01013ad2283,99727
f01013b2:	83 c4 10             	add    $0x10,%espf01013b22285,99817
f01013b5:	85 c0                	test   %eax,%eaxf01013b52286,99867
f01013b7:	74 3f                	je     f01013f8 <page_insert+0x6a>f01013b72287,99916
f01013b9:	89 c3                	mov    %eax,%ebxf01013b92288,99983
f01013bb:	66 83 46 04 01       	addw   $0x1,0x4(%esi)f01013bb2290,100047
f01013c0:	83 ec 08             	sub    $0x8,%espf01013c02292,100126
f01013c3:	ff 75 10             	pushl  0x10(%ebp)f01013c32293,100175
f01013c6:	ff 75 08             	pushl  0x8(%ebp)f01013c62294,100225
f01013c9:	e8 6d ff ff ff       	call   f010133b <page_remove>f01013c92295,100274
f01013ce:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01013ce2297,100369
f01013d4:	2b 30                	sub    (%eax),%esif01013d42298,100425
f01013d6:	89 f0                	mov    %esi,%eaxf01013d62299,100476
f01013d8:	c1 f8 03             	sar    $0x3,%eaxf01013d82300,100525
f01013db:	c1 e0 0c             	shl    $0xc,%eaxf01013db2301,100574
f01013de:	8b 55 14             	mov    0x14(%ebp),%edxf01013de2303,100659
f01013e1:	83 ca 01             	or     $0x1,%edxf01013e12304,100714
f01013e4:	09 d0                	or     %edx,%eaxf01013e42305,100763
f01013e6:	89 03                	mov    %eax,(%ebx)f01013e62306,100812
f01013e8:	83 c4 10             	add    $0x10,%espf01013e82308,100874
f01013eb:	b8 00 00 00 00       	mov    $0x0,%eaxf01013eb2309,100924
f01013f0:	8d 65 f4             	lea    -0xc(%ebp),%espf01013f02311,100975
f01013f3:	5b                   	pop    %ebxf01013f32312,101030
f01013f4:	5e                   	pop    %esif01013f42313,101074
f01013f5:	5f                   	pop    %edif01013f52314,101118
f01013f6:	5d                   	pop    %ebpf01013f62315,101162
f01013f7:	c3                   	ret    f01013f72316,101206
f01013f8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eaxf01013f82318,101275
f01013fd:	eb f1                	jmp    f01013f0 <page_insert+0x62>f01013fd2319,101331
f01013ff <mem_init>:f01013ff2321,101399
f01013ff:	55                   	push   %ebpf01013ff2323,101422
f0101400:	89 e5                	mov    %esp,%ebpf01014002324,101466
f0101402:	57                   	push   %edif01014022325,101515
f0101403:	56                   	push   %esif01014032326,101559
f0101404:	53                   	push   %ebxf01014042327,101603
f0101405:	83 ec 3c             	sub    $0x3c,%espf01014052328,101647
f0101408:	e8 fc f2 ff ff       	call   f0100709 <__x86.get_pc_thunk.ax>f01014082329,101697
f010140d:	05 13 dc 07 00       	add    $0x7dc13,%eaxf010140d2330,101769
f0101412:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01014122331,101822
	basemem = nvram_read(NVRAM_BASELO);basemem2332,101878
f0101415:	b8 15 00 00 00       	mov    $0x15,%eaxf01014152333,101915
f010141a:	e8 99 f6 ff ff       	call   f0100ab8 <nvram_read>f010141a2334,101965
f010141f:	89 c3                	mov    %eax,%ebxf010141f2335,102026
	extmem = nvram_read(NVRAM_EXTLO);extmem2336,102075
f0101421:	b8 17 00 00 00       	mov    $0x17,%eaxf01014212337,102110
f0101426:	e8 8d f6 ff ff       	call   f0100ab8 <nvram_read>f01014262338,102160
f010142b:	89 c6                	mov    %eax,%esif010142b2339,102221
	ext16mem = nvram_read(NVRAM_EXT16LO) * 64;ext16mem2340,102270
f010142d:	b8 34 00 00 00       	mov    $0x34,%eaxf010142d2341,102314
f0101432:	e8 81 f6 ff ff       	call   f0100ab8 <nvram_read>f01014322342,102364
f0101437:	c1 e0 06             	shl    $0x6,%eaxf01014372343,102425
f010143a:	85 c0                	test   %eax,%eaxf010143a2345,102489
f010143c:	0f 85 de 00 00 00    	jne    f0101520 <mem_init+0x121>f010143c2346,102538
		totalmem = 1 * 1024 + extmem;totalmem2347,102603
f0101442:	8d 86 00 04 00 00    	lea    0x400(%esi),%eaxf01014422348,102635
f0101448:	85 f6                	test   %esi,%esif01014482349,102691
f010144a:	0f 44 c3             	cmove  %ebx,%eaxf010144a2350,102740
	npages = totalmem / (PGSIZE / 1024);npages2351,102789
f010144d:	89 c1                	mov    %eax,%ecxf010144d2352,102827
f010144f:	c1 e9 02             	shr    $0x2,%ecxf010144f2353,102876
f0101452:	8b 7d d4             	mov    -0x2c(%ebp),%edif01014522354,102925
f0101455:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf01014552355,102981
f010145b:	89 0a                	mov    %ecx,(%edx)f010145b2356,103037
	npages_basemem = basemem / (PGSIZE / 1024);npages_basemem2357,103088
f010145d:	89 da                	mov    %ebx,%edxf010145d2358,103133
f010145f:	c1 ea 02             	shr    $0x2,%edxf010145f2359,103182
f0101462:	89 97 20 23 00 00    	mov    %edx,0x2320(%edi)f01014622360,103231
f0101468:	89 c2                	mov    %eax,%edxf01014682362,103361
f010146a:	29 da                	sub    %ebx,%edxf010146a2363,103410
f010146c:	52                   	push   %edxf010146c2364,103459
f010146d:	53                   	push   %ebxf010146d2365,103503
f010146e:	50                   	push   %eaxf010146e2366,103547
f010146f:	8d 87 a4 62 f8 ff    	lea    -0x79d5c(%edi),%eaxf010146f2367,103591
f0101475:	50                   	push   %eaxf01014752368,103650
f0101476:	89 fb                	mov    %edi,%ebxf01014762369,103694
f0101478:	e8 9d 22 00 00       	call   f010371a <cprintf>f01014782370,103743
	kern_pgdir = (pde_t *) boot_alloc(PGSIZE);kern_pgdir2371,103801
f010147d:	b8 00 10 00 00       	mov    $0x1000,%eaxf010147d2372,103845
f0101482:	e8 67 f6 ff ff       	call   f0100aee <boot_alloc>f01014822373,103897
f0101487:	c7 c6 0c 20 18 f0    	mov    $0xf018200c,%esif01014872374,103958
f010148d:	89 06                	mov    %eax,(%esi)f010148d2375,104014
f010148f:	83 c4 08             	add    $0x8,%espf010148f2377,104107
f0101492:	50                   	push   %eaxf01014922378,104156
f0101493:	8d 87 d7 69 f8 ff    	lea    -0x79629(%edi),%eaxf01014932379,104200
f0101499:	50                   	push   %eaxf01014992380,104259
f010149a:	e8 7b 22 00 00       	call   f010371a <cprintf>f010149a2381,104303
f010149f:	83 c4 0c             	add    $0xc,%espf010149f2383,104393
f01014a2:	68 00 10 00 00       	push   $0x1000f01014a22384,104442
f01014a7:	6a 00                	push   $0x0f01014a72385,104489
f01014a9:	ff 36                	pushl  (%esi)f01014a92386,104533
f01014ab:	e8 44 32 00 00       	call   f01046f4 <memset>f01014ab2387,104579
f01014b0:	8b 06                	mov    (%esi),%eaxf01014b02389,104696
f01014b2:	83 c4 10             	add    $0x10,%espf01014b22391,104778
f01014b5:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01014b52392,104828
f01014ba:	76 6e                	jbe    f010152a <mem_init+0x12b>f01014ba2393,104884
f01014bc:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01014bc2395,104985
f01014c2:	83 ca 05             	or     $0x5,%edxf01014c22396,105046
f01014c5:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)f01014c52397,105095
	pages = (struct PageInfo *) boot_alloc(sizeof(struct PageInfo) * npages);pages2398,105151
f01014cb:	8b 7d d4             	mov    -0x2c(%ebp),%edif01014cb2399,105226
f01014ce:	c7 c3 08 20 18 f0    	mov    $0xf0182008,%ebxf01014ce2400,105282
f01014d4:	8b 03                	mov    (%ebx),%eaxf01014d42401,105338
f01014d6:	c1 e0 03             	shl    $0x3,%eaxf01014d62402,105389
f01014d9:	e8 10 f6 ff ff       	call   f0100aee <boot_alloc>f01014d92403,105438
f01014de:	c7 c6 10 20 18 f0    	mov    $0xf0182010,%esif01014de2404,105499
f01014e4:	89 06                	mov    %eax,(%esi)f01014e42405,105555
f01014e6:	83 ec 04             	sub    $0x4,%espf01014e62407,105659
f01014e9:	8b 13                	mov    (%ebx),%edxf01014e92408,105708
f01014eb:	c1 e2 03             	shl    $0x3,%edxf01014eb2409,105759
f01014ee:	52                   	push   %edxf01014ee2410,105808
f01014ef:	6a 00                	push   $0x0f01014ef2411,105852
f01014f1:	50                   	push   %eaxf01014f12412,105896
f01014f2:	89 fb                	mov    %edi,%ebxf01014f22413,105940
f01014f4:	e8 fb 31 00 00       	call   f01046f4 <memset>f01014f42414,105989
f01014f9:	e8 75 fa ff ff       	call   f0100f73 <page_init>f01014f92416,106060
f01014fe:	b8 01 00 00 00       	mov    $0x1,%eaxf01014fe2418,106146
f0101503:	e8 e8 f6 ff ff       	call   f0100bf0 <check_page_free_list>f01015032419,106195
f0101508:	83 c4 10             	add    $0x10,%espf01015082421,106279
f010150b:	83 3e 00             	cmpl   $0x0,(%esi)f010150b2422,106329
f010150e:	74 36                	je     f0101546 <mem_init+0x147>f010150e2423,106380
f0101510:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf01015102425,106505
f0101513:	8b 80 1c 23 00 00    	mov    0x231c(%eax),%eaxf01015132426,106561
f0101519:	be 00 00 00 00       	mov    $0x0,%esif01015192427,106618
f010151e:	eb 49                	jmp    f0101569 <mem_init+0x16a>f010151e2428,106667
		totalmem = 16 * 1024 + ext16mem;totalmem2429,106732
f0101520:	05 00 40 00 00       	add    $0x4000,%eaxf01015202430,106767
f0101525:	e9 23 ff ff ff       	jmp    f010144d <mem_init+0x4e>f01015252431,106819
f010152a:	50                   	push   %eaxf010152a2433,106949
f010152b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010152b2434,106993
f010152e:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf010152e2435,107049
f0101534:	50                   	push   %eaxf01015342436,107108
f0101535:	68 94 00 00 00       	push   $0x94f01015352437,107152
f010153a:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010153a2438,107197
f0101540:	50                   	push   %eaxf01015402439,107256
f0101541:	e8 6b eb ff ff       	call   f01000b1 <_panic>f01015412440,107300
f0101546:	83 ec 04             	sub    $0x4,%espf01015462442,107396
f0101549:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01015492443,107445
f010154c:	8d 83 e7 69 f8 ff    	lea    -0x79619(%ebx),%eaxf010154c2444,107501
f0101552:	50                   	push   %eaxf01015522445,107560
f0101553:	68 81 02 00 00       	push   $0x281f01015532446,107604
f0101558:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01015582447,107650
f010155e:	50                   	push   %eaxf010155e2448,107709
f010155f:	e8 4d eb ff ff       	call   f01000b1 <_panic>f010155f2449,107753
f0101564:	83 c6 01             	add    $0x1,%esif01015642451,107821
f0101567:	8b 00                	mov    (%eax),%eaxf01015672453,107930
f0101569:	85 c0                	test   %eax,%eaxf01015692454,107981
f010156b:	75 f7                	jne    f0101564 <mem_init+0x165>f010156b2455,108030
f010156d:	83 ec 0c             	sub    $0xc,%espf010156d2457,108127
f0101570:	6a 00                	push   $0x0f01015702458,108176
f0101572:	e8 ee fa ff ff       	call   f0101065 <page_alloc>f01015722459,108220
f0101577:	89 c3                	mov    %eax,%ebxf01015772460,108281
f0101579:	83 c4 10             	add    $0x10,%espf01015792461,108330
f010157c:	85 c0                	test   %eax,%eaxf010157c2462,108380
f010157e:	0f 84 3b 02 00 00    	je     f01017bf <mem_init+0x3c0>f010157e2463,108429
f0101584:	83 ec 0c             	sub    $0xc,%espf01015842465,108526
f0101587:	6a 00                	push   $0x0f01015872466,108575
f0101589:	e8 d7 fa ff ff       	call   f0101065 <page_alloc>f01015892467,108619
f010158e:	89 c7                	mov    %eax,%edif010158e2468,108680
f0101590:	83 c4 10             	add    $0x10,%espf01015902469,108729
f0101593:	85 c0                	test   %eax,%eaxf01015932470,108779
f0101595:	0f 84 46 02 00 00    	je     f01017e1 <mem_init+0x3e2>f01015952471,108828
f010159b:	83 ec 0c             	sub    $0xc,%espf010159b2473,108925
f010159e:	6a 00                	push   $0x0f010159e2474,108974
f01015a0:	e8 c0 fa ff ff       	call   f0101065 <page_alloc>f01015a02475,109018
f01015a5:	89 45 d0             	mov    %eax,-0x30(%ebp)f01015a52476,109079
f01015a8:	83 c4 10             	add    $0x10,%espf01015a82477,109135
f01015ab:	85 c0                	test   %eax,%eaxf01015ab2478,109185
f01015ad:	0f 84 50 02 00 00    	je     f0101803 <mem_init+0x404>f01015ad2479,109234
f01015b3:	39 fb                	cmp    %edi,%ebxf01015b32481,109327
f01015b5:	0f 84 6a 02 00 00    	je     f0101825 <mem_init+0x426>f01015b52482,109376
f01015bb:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01015bb2484,109483
f01015be:	39 c7                	cmp    %eax,%edif01015be2485,109539
f01015c0:	0f 84 81 02 00 00    	je     f0101847 <mem_init+0x448>f01015c02486,109588
f01015c6:	39 c3                	cmp    %eax,%ebxf01015c62487,109653
f01015c8:	0f 84 79 02 00 00    	je     f0101847 <mem_init+0x448>f01015c82488,109702
f01015ce:	8b 55 d4             	mov    -0x2c(%ebp),%edxf01015ce2490,109800
f01015d1:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01015d12491,109856
f01015d7:	8b 08                	mov    (%eax),%ecxf01015d72492,109912
f01015d9:	c7 c0 08 20 18 f0    	mov    $0xf0182008,%eaxf01015d92494,110002
f01015df:	8b 10                	mov    (%eax),%edxf01015df2495,110058
f01015e1:	c1 e2 0c             	shl    $0xc,%edxf01015e12496,110109
f01015e4:	89 d8                	mov    %ebx,%eaxf01015e42497,110158
f01015e6:	29 c8                	sub    %ecx,%eaxf01015e62498,110207
f01015e8:	c1 f8 03             	sar    $0x3,%eaxf01015e82499,110256
f01015eb:	c1 e0 0c             	shl    $0xc,%eaxf01015eb2500,110305
f01015ee:	39 d0                	cmp    %edx,%eaxf01015ee2501,110354
f01015f0:	0f 83 73 02 00 00    	jae    f0101869 <mem_init+0x46a>f01015f02502,110403
f01015f6:	89 f8                	mov    %edi,%eaxf01015f62503,110468
f01015f8:	29 c8                	sub    %ecx,%eaxf01015f82504,110517
f01015fa:	c1 f8 03             	sar    $0x3,%eaxf01015fa2505,110566
f01015fd:	c1 e0 0c             	shl    $0xc,%eaxf01015fd2506,110615
f0101600:	39 c2                	cmp    %eax,%edxf01016002508,110703
f0101602:	0f 86 83 02 00 00    	jbe    f010188b <mem_init+0x48c>f01016022509,110752
f0101608:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01016082510,110817
f010160b:	29 c8                	sub    %ecx,%eaxf010160b2511,110873
f010160d:	c1 f8 03             	sar    $0x3,%eaxf010160d2512,110922
f0101610:	c1 e0 0c             	shl    $0xc,%eaxf01016102513,110971
f0101613:	39 c2                	cmp    %eax,%edxf01016132515,111059
f0101615:	0f 86 92 02 00 00    	jbe    f01018ad <mem_init+0x4ae>f01016152516,111108
	fl = page_free_list;fl2517,111173
f010161b:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf010161b2518,111195
f010161e:	8b 88 1c 23 00 00    	mov    0x231c(%eax),%ecxf010161e2519,111251
f0101624:	89 4d c8             	mov    %ecx,-0x38(%ebp)f01016242520,111308
	page_free_list = 0;page_free_list2521,111364
f0101627:	c7 80 1c 23 00 00 00 	movl   $0x0,0x231c(%eax)f01016272522,111385
f010162e:	00 00 00 f010162e2523,111442
f0101631:	83 ec 0c             	sub    $0xc,%espf01016312525,111487
f0101634:	6a 00                	push   $0x0f01016342526,111536
f0101636:	e8 2a fa ff ff       	call   f0101065 <page_alloc>f01016362527,111580
f010163b:	83 c4 10             	add    $0x10,%espf010163b2528,111641
f010163e:	85 c0                	test   %eax,%eaxf010163e2529,111691
f0101640:	0f 85 89 02 00 00    	jne    f01018cf <mem_init+0x4d0>f01016402530,111740
f0101646:	83 ec 0c             	sub    $0xc,%espf01016462532,111822
f0101649:	53                   	push   %ebxf01016492533,111871
f010164a:	e8 a4 fa ff ff       	call   f01010f3 <page_free>f010164a2534,111915
f010164f:	89 3c 24             	mov    %edi,(%esp)f010164f2536,111992
f0101652:	e8 9c fa ff ff       	call   f01010f3 <page_free>f01016522537,112043
f0101657:	83 c4 04             	add    $0x4,%espf01016572539,112120
f010165a:	ff 75 d0             	pushl  -0x30(%ebp)f010165a2540,112169
f010165d:	e8 91 fa ff ff       	call   f01010f3 <page_free>f010165d2541,112220
f0101662:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f01016622543,112312
f0101669:	e8 f7 f9 ff ff       	call   f0101065 <page_alloc>f01016692544,112363
f010166e:	89 c7                	mov    %eax,%edif010166e2545,112424
f0101670:	83 c4 10             	add    $0x10,%espf01016702546,112473
f0101673:	85 c0                	test   %eax,%eaxf01016732547,112523
f0101675:	0f 84 76 02 00 00    	je     f01018f1 <mem_init+0x4f2>f01016752548,112572
f010167b:	83 ec 0c             	sub    $0xc,%espf010167b2550,112669
f010167e:	6a 00                	push   $0x0f010167e2551,112718
f0101680:	e8 e0 f9 ff ff       	call   f0101065 <page_alloc>f01016802552,112762
f0101685:	89 45 d0             	mov    %eax,-0x30(%ebp)f01016852553,112823
f0101688:	83 c4 10             	add    $0x10,%espf01016882554,112879
f010168b:	85 c0                	test   %eax,%eaxf010168b2555,112929
f010168d:	0f 84 80 02 00 00    	je     f0101913 <mem_init+0x514>f010168d2556,112978
f0101693:	83 ec 0c             	sub    $0xc,%espf01016932558,113075
f0101696:	6a 00                	push   $0x0f01016962559,113124
f0101698:	e8 c8 f9 ff ff       	call   f0101065 <page_alloc>f01016982560,113168
f010169d:	89 45 cc             	mov    %eax,-0x34(%ebp)f010169d2561,113229
f01016a0:	83 c4 10             	add    $0x10,%espf01016a02562,113285
f01016a3:	85 c0                	test   %eax,%eaxf01016a32563,113335
f01016a5:	0f 84 8a 02 00 00    	je     f0101935 <mem_init+0x536>f01016a52564,113384
f01016ab:	3b 7d d0             	cmp    -0x30(%ebp),%edif01016ab2566,113477
f01016ae:	0f 84 a3 02 00 00    	je     f0101957 <mem_init+0x558>f01016ae2567,113533
f01016b4:	8b 45 cc             	mov    -0x34(%ebp),%eaxf01016b42569,113640
f01016b7:	39 45 d0             	cmp    %eax,-0x30(%ebp)f01016b72570,113696
f01016ba:	0f 84 b9 02 00 00    	je     f0101979 <mem_init+0x57a>f01016ba2571,113752
f01016c0:	39 c7                	cmp    %eax,%edif01016c02572,113817
f01016c2:	0f 84 b1 02 00 00    	je     f0101979 <mem_init+0x57a>f01016c22573,113866
f01016c8:	83 ec 0c             	sub    $0xc,%espf01016c82575,113956
f01016cb:	6a 00                	push   $0x0f01016cb2576,114005
f01016cd:	e8 93 f9 ff ff       	call   f0101065 <page_alloc>f01016cd2577,114049
f01016d2:	83 c4 10             	add    $0x10,%espf01016d22578,114110
f01016d5:	85 c0                	test   %eax,%eaxf01016d52579,114160
f01016d7:	0f 85 be 02 00 00    	jne    f010199b <mem_init+0x59c>f01016d72580,114209
f01016dd:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01016dd2581,114274
f01016e0:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01016e02582,114330
f01016e6:	89 f9                	mov    %edi,%ecxf01016e62583,114386
f01016e8:	2b 08                	sub    (%eax),%ecxf01016e82584,114435
f01016ea:	89 c8                	mov    %ecx,%eaxf01016ea2585,114486
f01016ec:	c1 f8 03             	sar    $0x3,%eaxf01016ec2586,114535
f01016ef:	c1 e0 0c             	shl    $0xc,%eaxf01016ef2587,114584
f01016f2:	89 c1                	mov    %eax,%ecxf01016f22589,114659
f01016f4:	c1 e9 0c             	shr    $0xc,%ecxf01016f42590,114708
f01016f7:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf01016f72591,114757
f01016fd:	3b 0a                	cmp    (%edx),%ecxf01016fd2592,114813
f01016ff:	0f 83 b8 02 00 00    	jae    f01019bd <mem_init+0x5be>f01016ff2593,114864
f0101705:	83 ec 04             	sub    $0x4,%espf01017052595,114964
f0101708:	68 00 10 00 00       	push   $0x1000f01017082596,115013
f010170d:	6a 01                	push   $0x1f010170d2597,115060
f010170f:	2d 00 00 00 10       	sub    $0x10000000,%eaxf010170f2599,115137
f0101714:	50                   	push   %eaxf01017142600,115193
f0101715:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01017152601,115237
f0101718:	e8 d7 2f 00 00       	call   f01046f4 <memset>f01017182602,115293
f010171d:	89 3c 24             	mov    %edi,(%esp)f010171d2604,115367
f0101720:	e8 ce f9 ff ff       	call   f01010f3 <page_free>f01017202605,115418
f0101725:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)f01017252607,115518
f010172c:	e8 34 f9 ff ff       	call   f0101065 <page_alloc>f010172c2608,115569
f0101731:	83 c4 10             	add    $0x10,%espf01017312609,115630
f0101734:	85 c0                	test   %eax,%eaxf01017342610,115680
f0101736:	0f 84 97 02 00 00    	je     f01019d3 <mem_init+0x5d4>f01017362611,115729
f010173c:	39 c7                	cmp    %eax,%edif010173c2613,115820
f010173e:	0f 85 b1 02 00 00    	jne    f01019f5 <mem_init+0x5f6>f010173e2614,115869
f0101744:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01017442616,115967
f0101747:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01017472617,116023
f010174d:	89 fa                	mov    %edi,%edxf010174d2618,116079
f010174f:	2b 10                	sub    (%eax),%edxf010174f2619,116128
f0101751:	c1 fa 03             	sar    $0x3,%edxf01017512620,116179
f0101754:	c1 e2 0c             	shl    $0xc,%edxf01017542621,116228
f0101757:	89 d1                	mov    %edx,%ecxf01017572623,116303
f0101759:	c1 e9 0c             	shr    $0xc,%ecxf01017592624,116352
f010175c:	c7 c0 08 20 18 f0    	mov    $0xf0182008,%eaxf010175c2625,116401
f0101762:	3b 08                	cmp    (%eax),%ecxf01017622626,116457
f0101764:	0f 83 ad 02 00 00    	jae    f0101a17 <mem_init+0x618>f01017642627,116508
f010176a:	8d 82 00 00 00 f0    	lea    -0x10000000(%edx),%eaxf010176a2629,116606
f0101770:	81 ea 00 f0 ff 0f    	sub    $0xffff000,%edxf01017702630,116668
f0101776:	80 38 00             	cmpb   $0x0,(%eax)f01017762632,116744
f0101779:	0f 85 ae 02 00 00    	jne    f0101a2d <mem_init+0x62e>f01017792633,116795
f010177f:	83 c0 01             	add    $0x1,%eaxf010177f2634,116860
f0101782:	39 d0                	cmp    %edx,%eaxf01017822636,116939
f0101784:	75 f0                	jne    f0101776 <mem_init+0x377>f01017842637,116988
	page_free_list = fl;page_free_list2638,117053
f0101786:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01017862639,117075
f0101789:	8b 4d c8             	mov    -0x38(%ebp),%ecxf01017892640,117131
f010178c:	89 8b 1c 23 00 00    	mov    %ecx,0x231c(%ebx)f010178c2641,117187
f0101792:	83 ec 0c             	sub    $0xc,%espf01017922643,117261
f0101795:	57                   	push   %edif01017952644,117310
f0101796:	e8 58 f9 ff ff       	call   f01010f3 <page_free>f01017962645,117354
f010179b:	83 c4 04             	add    $0x4,%espf010179b2647,117431
f010179e:	ff 75 d0             	pushl  -0x30(%ebp)f010179e2648,117480
f01017a1:	e8 4d f9 ff ff       	call   f01010f3 <page_free>f01017a12649,117531
f01017a6:	83 c4 04             	add    $0x4,%espf01017a62651,117608
f01017a9:	ff 75 cc             	pushl  -0x34(%ebp)f01017a92652,117657
f01017ac:	e8 42 f9 ff ff       	call   f01010f3 <page_free>f01017ac2653,117708
f01017b1:	8b 83 1c 23 00 00    	mov    0x231c(%ebx),%eaxf01017b12655,117817
f01017b7:	83 c4 10             	add    $0x10,%espf01017b72656,117874
f01017ba:	e9 95 02 00 00       	jmp    f0101a54 <mem_init+0x655>f01017ba2657,117924
f01017bf:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01017bf2659,118021
f01017c2:	8d 83 02 6a f8 ff    	lea    -0x795fe(%ebx),%eaxf01017c22660,118077
f01017c8:	50                   	push   %eaxf01017c82661,118136
f01017c9:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01017c92662,118180
f01017cf:	50                   	push   %eaxf01017cf2663,118239
f01017d0:	68 89 02 00 00       	push   $0x289f01017d02664,118283
f01017d5:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01017d52665,118329
f01017db:	50                   	push   %eaxf01017db2666,118388
f01017dc:	e8 d0 e8 ff ff       	call   f01000b1 <_panic>f01017dc2667,118432
f01017e1:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01017e12669,118521
f01017e4:	8d 83 18 6a f8 ff    	lea    -0x795e8(%ebx),%eaxf01017e42670,118577
f01017ea:	50                   	push   %eaxf01017ea2671,118636
f01017eb:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01017eb2672,118680
f01017f1:	50                   	push   %eaxf01017f12673,118739
f01017f2:	68 8a 02 00 00       	push   $0x28af01017f22674,118783
f01017f7:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01017f72675,118829
f01017fd:	50                   	push   %eaxf01017fd2676,118888
f01017fe:	e8 ae e8 ff ff       	call   f01000b1 <_panic>f01017fe2677,118932
f0101803:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01018032679,119021
f0101806:	8d 83 2e 6a f8 ff    	lea    -0x795d2(%ebx),%eaxf01018062680,119077
f010180c:	50                   	push   %eaxf010180c2681,119136
f010180d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010180d2682,119180
f0101813:	50                   	push   %eaxf01018132683,119239
f0101814:	68 8b 02 00 00       	push   $0x28bf01018142684,119283
f0101819:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01018192685,119329
f010181f:	50                   	push   %eaxf010181f2686,119388
f0101820:	e8 8c e8 ff ff       	call   f01000b1 <_panic>f01018202687,119432
f0101825:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01018252689,119517
f0101828:	8d 83 44 6a f8 ff    	lea    -0x795bc(%ebx),%eaxf01018282690,119573
f010182e:	50                   	push   %eaxf010182e2691,119632
f010182f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010182f2692,119676
f0101835:	50                   	push   %eaxf01018352693,119735
f0101836:	68 8e 02 00 00       	push   $0x28ef01018362694,119779
f010183b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010183b2695,119825
f0101841:	50                   	push   %eaxf01018412696,119884
f0101842:	e8 6a e8 ff ff       	call   f01000b1 <_panic>f01018422697,119928
f0101847:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01018472699,120027
f010184a:	8d 83 04 63 f8 ff    	lea    -0x79cfc(%ebx),%eaxf010184a2700,120083
f0101850:	50                   	push   %eaxf01018502701,120142
f0101851:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01018512702,120186
f0101857:	50                   	push   %eaxf01018572703,120245
f0101858:	68 8f 02 00 00       	push   $0x28ff01018582704,120289
f010185d:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010185d2705,120335
f0101863:	50                   	push   %eaxf01018632706,120394
f0101864:	e8 48 e8 ff ff       	call   f01000b1 <_panic>f01018642707,120438
f0101869:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01018692709,120534
f010186c:	8d 83 56 6a f8 ff    	lea    -0x795aa(%ebx),%eaxf010186c2710,120590
f0101872:	50                   	push   %eaxf01018722711,120649
f0101873:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01018732712,120693
f0101879:	50                   	push   %eaxf01018792713,120752
f010187a:	68 90 02 00 00       	push   $0x290f010187a2714,120796
f010187f:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010187f2715,120842
f0101885:	50                   	push   %eaxf01018852716,120901
f0101886:	e8 26 e8 ff ff       	call   f01000b1 <_panic>f01018862717,120945
f010188b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010188b2719,121041
f010188e:	8d 83 73 6a f8 ff    	lea    -0x7958d(%ebx),%eaxf010188e2720,121097
f0101894:	50                   	push   %eaxf01018942721,121156
f0101895:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01018952722,121200
f010189b:	50                   	push   %eaxf010189b2723,121259
f010189c:	68 91 02 00 00       	push   $0x291f010189c2724,121303
f01018a1:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01018a12725,121349
f01018a7:	50                   	push   %eaxf01018a72726,121408
f01018a8:	e8 04 e8 ff ff       	call   f01000b1 <_panic>f01018a82727,121452
f01018ad:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01018ad2729,121548
f01018b0:	8d 83 90 6a f8 ff    	lea    -0x79570(%ebx),%eaxf01018b02730,121604
f01018b6:	50                   	push   %eaxf01018b62731,121663
f01018b7:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01018b72732,121707
f01018bd:	50                   	push   %eaxf01018bd2733,121766
f01018be:	68 92 02 00 00       	push   $0x292f01018be2734,121810
f01018c3:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01018c32735,121856
f01018c9:	50                   	push   %eaxf01018c92736,121915
f01018ca:	e8 e2 e7 ff ff       	call   f01000b1 <_panic>f01018ca2737,121959
f01018cf:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01018cf2739,122041
f01018d2:	8d 83 ad 6a f8 ff    	lea    -0x79553(%ebx),%eaxf01018d22740,122097
f01018d8:	50                   	push   %eaxf01018d82741,122156
f01018d9:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01018d92742,122200
f01018df:	50                   	push   %eaxf01018df2743,122259
f01018e0:	68 99 02 00 00       	push   $0x299f01018e02744,122303
f01018e5:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01018e52745,122349
f01018eb:	50                   	push   %eaxf01018eb2746,122408
f01018ec:	e8 c0 e7 ff ff       	call   f01000b1 <_panic>f01018ec2747,122452
f01018f1:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01018f12749,122541
f01018f4:	8d 83 02 6a f8 ff    	lea    -0x795fe(%ebx),%eaxf01018f42750,122597
f01018fa:	50                   	push   %eaxf01018fa2751,122656
f01018fb:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01018fb2752,122700
f0101901:	50                   	push   %eaxf01019012753,122759
f0101902:	68 a0 02 00 00       	push   $0x2a0f01019022754,122803
f0101907:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01019072755,122849
f010190d:	50                   	push   %eaxf010190d2756,122908
f010190e:	e8 9e e7 ff ff       	call   f01000b1 <_panic>f010190e2757,122952
f0101913:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019132759,123041
f0101916:	8d 83 18 6a f8 ff    	lea    -0x795e8(%ebx),%eaxf01019162760,123097
f010191c:	50                   	push   %eaxf010191c2761,123156
f010191d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010191d2762,123200
f0101923:	50                   	push   %eaxf01019232763,123259
f0101924:	68 a1 02 00 00       	push   $0x2a1f01019242764,123303
f0101929:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01019292765,123349
f010192f:	50                   	push   %eaxf010192f2766,123408
f0101930:	e8 7c e7 ff ff       	call   f01000b1 <_panic>f01019302767,123452
f0101935:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019352769,123541
f0101938:	8d 83 2e 6a f8 ff    	lea    -0x795d2(%ebx),%eaxf01019382770,123597
f010193e:	50                   	push   %eaxf010193e2771,123656
f010193f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010193f2772,123700
f0101945:	50                   	push   %eaxf01019452773,123759
f0101946:	68 a2 02 00 00       	push   $0x2a2f01019462774,123803
f010194b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010194b2775,123849
f0101951:	50                   	push   %eaxf01019512776,123908
f0101952:	e8 5a e7 ff ff       	call   f01000b1 <_panic>f01019522777,123952
f0101957:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019572779,124037
f010195a:	8d 83 44 6a f8 ff    	lea    -0x795bc(%ebx),%eaxf010195a2780,124093
f0101960:	50                   	push   %eaxf01019602781,124152
f0101961:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01019612782,124196
f0101967:	50                   	push   %eaxf01019672783,124255
f0101968:	68 a4 02 00 00       	push   $0x2a4f01019682784,124299
f010196d:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010196d2785,124345
f0101973:	50                   	push   %eaxf01019732786,124404
f0101974:	e8 38 e7 ff ff       	call   f01000b1 <_panic>f01019742787,124448
f0101979:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019792789,124547
f010197c:	8d 83 04 63 f8 ff    	lea    -0x79cfc(%ebx),%eaxf010197c2790,124603
f0101982:	50                   	push   %eaxf01019822791,124662
f0101983:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01019832792,124706
f0101989:	50                   	push   %eaxf01019892793,124765
f010198a:	68 a5 02 00 00       	push   $0x2a5f010198a2794,124809
f010198f:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010198f2795,124855
f0101995:	50                   	push   %eaxf01019952796,124914
f0101996:	e8 16 e7 ff ff       	call   f01000b1 <_panic>f01019962797,124958
f010199b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010199b2799,125040
f010199e:	8d 83 ad 6a f8 ff    	lea    -0x79553(%ebx),%eaxf010199e2800,125096
f01019a4:	50                   	push   %eaxf01019a42801,125155
f01019a5:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01019a52802,125199
f01019ab:	50                   	push   %eaxf01019ab2803,125258
f01019ac:	68 a6 02 00 00       	push   $0x2a6f01019ac2804,125302
f01019b1:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01019b12805,125348
f01019b7:	50                   	push   %eaxf01019b72806,125407
f01019b8:	e8 f4 e6 ff ff       	call   f01000b1 <_panic>f01019b82807,125451
f01019bd:	50                   	push   %eaxf01019bd2809,125572
f01019be:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf01019be2810,125616
f01019c4:	50                   	push   %eaxf01019c42811,125675
f01019c5:	6a 56                	push   $0x56f01019c52812,125719
f01019c7:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf01019c72813,125764
f01019cd:	50                   	push   %eaxf01019cd2814,125823
f01019ce:	e8 de e6 ff ff       	call   f01000b1 <_panic>f01019ce2815,125867
f01019d3:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019d32817,125964
f01019d6:	8d 83 bc 6a f8 ff    	lea    -0x79544(%ebx),%eaxf01019d62818,126020
f01019dc:	50                   	push   %eaxf01019dc2819,126079
f01019dd:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01019dd2820,126123
f01019e3:	50                   	push   %eaxf01019e32821,126182
f01019e4:	68 ab 02 00 00       	push   $0x2abf01019e42822,126226
f01019e9:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01019e92823,126272
f01019ef:	50                   	push   %eaxf01019ef2824,126331
f01019f0:	e8 bc e6 ff ff       	call   f01000b1 <_panic>f01019f02825,126375
f01019f5:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019f52827,126458
f01019f8:	8d 83 da 6a f8 ff    	lea    -0x79526(%ebx),%eaxf01019f82828,126514
f01019fe:	50                   	push   %eaxf01019fe2829,126573
f01019ff:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01019ff2830,126617
f0101a05:	50                   	push   %eaxf0101a052831,126676
f0101a06:	68 ac 02 00 00       	push   $0x2acf0101a062832,126720
f0101a0b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0101a0b2833,126766
f0101a11:	50                   	push   %eaxf0101a112834,126825
f0101a12:	e8 9a e6 ff ff       	call   f01000b1 <_panic>f0101a122835,126869
f0101a17:	52                   	push   %edxf0101a172836,126926
f0101a18:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf0101a182837,126970
f0101a1e:	50                   	push   %eaxf0101a1e2838,127029
f0101a1f:	6a 56                	push   $0x56f0101a1f2839,127073
f0101a21:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf0101a212840,127118
f0101a27:	50                   	push   %eaxf0101a272841,127177
f0101a28:	e8 84 e6 ff ff       	call   f01000b1 <_panic>f0101a282842,127221
f0101a2d:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101a2d2844,127299
f0101a30:	8d 83 ea 6a f8 ff    	lea    -0x79516(%ebx),%eaxf0101a302845,127355
f0101a36:	50                   	push   %eaxf0101a362846,127414
f0101a37:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0101a372847,127458
f0101a3d:	50                   	push   %eaxf0101a3d2848,127517
f0101a3e:	68 af 02 00 00       	push   $0x2aff0101a3e2849,127561
f0101a43:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0101a432850,127607
f0101a49:	50                   	push   %eaxf0101a492851,127666
f0101a4a:	e8 62 e6 ff ff       	call   f01000b1 <_panic>f0101a4a2852,127710
f0101a4f:	83 ee 01             	sub    $0x1,%esif0101a4f2854,127778
f0101a52:	8b 00                	mov    (%eax),%eaxf0101a522856,127876
f0101a54:	85 c0                	test   %eax,%eaxf0101a542857,127927
f0101a56:	75 f7                	jne    f0101a4f <mem_init+0x650>f0101a562858,127976
f0101a58:	85 f6                	test   %esi,%esif0101a582860,128062
f0101a5a:	0f 85 8d 08 00 00    	jne    f01022ed <mem_init+0xeee>f0101a5a2861,128111
f0101a60:	83 ec 0c             	sub    $0xc,%espf0101a602863,128221
f0101a63:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101a632864,128270
f0101a66:	8d 83 24 63 f8 ff    	lea    -0x79cdc(%ebx),%eaxf0101a662865,128326
f0101a6c:	50                   	push   %eaxf0101a6c2866,128385
f0101a6d:	e8 a8 1c 00 00       	call   f010371a <cprintf>f0101a6d2867,128429
	pp0 = pp1 = pp2 = 0;pp02872,128568
f0101a72:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f0101a722874,128622
f0101a79:	e8 e7 f5 ff ff       	call   f0101065 <page_alloc>f0101a792875,128673
f0101a7e:	89 c6                	mov    %eax,%esif0101a7e2876,128734
f0101a80:	83 c4 10             	add    $0x10,%espf0101a802877,128783
f0101a83:	85 c0                	test   %eax,%eaxf0101a832878,128833
f0101a85:	0f 84 84 08 00 00    	je     f010230f <mem_init+0xf10>f0101a852879,128882
f0101a8b:	83 ec 0c             	sub    $0xc,%espf0101a8b2881,128979
f0101a8e:	6a 00                	push   $0x0f0101a8e2882,129028
f0101a90:	e8 d0 f5 ff ff       	call   f0101065 <page_alloc>f0101a902883,129072
f0101a95:	89 c7                	mov    %eax,%edif0101a952884,129133
f0101a97:	83 c4 10             	add    $0x10,%espf0101a972885,129182
f0101a9a:	85 c0                	test   %eax,%eaxf0101a9a2886,129232
f0101a9c:	0f 84 8f 08 00 00    	je     f0102331 <mem_init+0xf32>f0101a9c2887,129281
f0101aa2:	83 ec 0c             	sub    $0xc,%espf0101aa22889,129378
f0101aa5:	6a 00                	push   $0x0f0101aa52890,129427
f0101aa7:	e8 b9 f5 ff ff       	call   f0101065 <page_alloc>f0101aa72891,129471
f0101aac:	89 45 d0             	mov    %eax,-0x30(%ebp)f0101aac2892,129532
f0101aaf:	83 c4 10             	add    $0x10,%espf0101aaf2893,129588
f0101ab2:	85 c0                	test   %eax,%eaxf0101ab22894,129638
f0101ab4:	0f 84 99 08 00 00    	je     f0102353 <mem_init+0xf54>f0101ab42895,129687
f0101aba:	39 fe                	cmp    %edi,%esif0101aba2899,129795
f0101abc:	0f 84 b3 08 00 00    	je     f0102375 <mem_init+0xf76>f0101abc2900,129844
f0101ac2:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101ac22902,129951
f0101ac5:	39 c6                	cmp    %eax,%esif0101ac52903,130007
f0101ac7:	0f 84 ca 08 00 00    	je     f0102397 <mem_init+0xf98>f0101ac72904,130056
f0101acd:	39 c7                	cmp    %eax,%edif0101acd2905,130121
f0101acf:	0f 84 c2 08 00 00    	je     f0102397 <mem_init+0xf98>f0101acf2906,130170
	fl = page_free_list;fl2909,130285
f0101ad5:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101ad52910,130307
f0101ad8:	8b 88 1c 23 00 00    	mov    0x231c(%eax),%ecxf0101ad82911,130363
f0101ade:	89 4d c8             	mov    %ecx,-0x38(%ebp)f0101ade2912,130420
	page_free_list = 0;page_free_list2913,130476
f0101ae1:	c7 80 1c 23 00 00 00 	movl   $0x0,0x231c(%eax)f0101ae12914,130497
f0101ae8:	00 00 00 f0101ae82915,130554
f0101aeb:	83 ec 0c             	sub    $0xc,%espf0101aeb2919,130629
f0101aee:	6a 00                	push   $0x0f0101aee2920,130678
f0101af0:	e8 70 f5 ff ff       	call   f0101065 <page_alloc>f0101af02921,130722
f0101af5:	83 c4 10             	add    $0x10,%espf0101af52922,130783
f0101af8:	85 c0                	test   %eax,%eaxf0101af82923,130833
f0101afa:	0f 85 b9 08 00 00    	jne    f01023b9 <mem_init+0xfba>f0101afa2924,130882
f0101b00:	83 ec 04             	sub    $0x4,%espf0101b002928,131055
f0101b03:	8d 45 e4             	lea    -0x1c(%ebp),%eaxf0101b032929,131104
f0101b06:	50                   	push   %eaxf0101b062930,131160
f0101b07:	6a 00                	push   $0x0f0101b072931,131204
f0101b09:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101b092932,131248
f0101b0c:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101b0c2933,131304
f0101b12:	ff 30                	pushl  (%eax)f0101b122934,131360
f0101b14:	e8 a7 f7 ff ff       	call   f01012c0 <page_lookup>f0101b142935,131406
f0101b19:	83 c4 10             	add    $0x10,%espf0101b192936,131468
f0101b1c:	85 c0                	test   %eax,%eaxf0101b1c2937,131518
f0101b1e:	0f 85 b7 08 00 00    	jne    f01023db <mem_init+0xfdc>f0101b1e2938,131567
f0101b24:	6a 02                	push   $0x2f0101b242942,131751
f0101b26:	6a 00                	push   $0x0f0101b262943,131795
f0101b28:	57                   	push   %edif0101b282944,131839
f0101b29:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101b292945,131883
f0101b2c:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101b2c2946,131939
f0101b32:	ff 30                	pushl  (%eax)f0101b322947,131995
f0101b34:	e8 55 f8 ff ff       	call   f010138e <page_insert>f0101b342948,132041
f0101b39:	83 c4 10             	add    $0x10,%espf0101b392949,132103
f0101b3c:	85 c0                	test   %eax,%eaxf0101b3c2950,132153
f0101b3e:	0f 89 b9 08 00 00    	jns    f01023fd <mem_init+0xffe>f0101b3e2951,132202
f0101b44:	83 ec 0c             	sub    $0xc,%espf0101b442955,132347
f0101b47:	56                   	push   %esif0101b472956,132396
f0101b48:	e8 a6 f5 ff ff       	call   f01010f3 <page_free>f0101b482957,132440
f0101b4d:	6a 02                	push   $0x2f0101b4d2959,132556
f0101b4f:	6a 00                	push   $0x0f0101b4f2960,132600
f0101b51:	57                   	push   %edif0101b512961,132644
f0101b52:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101b522962,132688
f0101b55:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101b552963,132744
f0101b5b:	ff 30                	pushl  (%eax)f0101b5b2964,132800
f0101b5d:	e8 2c f8 ff ff       	call   f010138e <page_insert>f0101b5d2965,132846
f0101b62:	83 c4 20             	add    $0x20,%espf0101b622966,132908
f0101b65:	85 c0                	test   %eax,%eaxf0101b652967,132958
f0101b67:	0f 85 b2 08 00 00    	jne    f010241f <mem_init+0x1020>f0101b672968,133007
f0101b6d:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101b6d2970,133123
f0101b70:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101b702971,133179
f0101b76:	8b 18                	mov    (%eax),%ebxf0101b762972,133235
f0101b78:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0101b782974,133319
f0101b7e:	8b 08                	mov    (%eax),%ecxf0101b7e2975,133375
f0101b80:	89 4d cc             	mov    %ecx,-0x34(%ebp)f0101b802976,133426
f0101b83:	8b 13                	mov    (%ebx),%edxf0101b832977,133482
f0101b85:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf0101b852978,133533
f0101b8b:	89 f0                	mov    %esi,%eaxf0101b8b2979,133589
f0101b8d:	29 c8                	sub    %ecx,%eaxf0101b8d2980,133638
f0101b8f:	c1 f8 03             	sar    $0x3,%eaxf0101b8f2981,133687
f0101b92:	c1 e0 0c             	shl    $0xc,%eaxf0101b922982,133736
f0101b95:	39 c2                	cmp    %eax,%edxf0101b952983,133785
f0101b97:	0f 85 a4 08 00 00    	jne    f0102441 <mem_init+0x1042>f0101b972984,133834
f0101b9d:	ba 00 00 00 00       	mov    $0x0,%edxf0101b9d2986,133955
f0101ba2:	89 d8                	mov    %ebx,%eaxf0101ba22987,134004
f0101ba4:	e8 ca ef ff ff       	call   f0100b73 <check_va2pa>f0101ba42988,134053
f0101ba9:	89 fa                	mov    %edi,%edxf0101ba92989,134115
f0101bab:	2b 55 cc             	sub    -0x34(%ebp),%edxf0101bab2990,134164
f0101bae:	c1 fa 03             	sar    $0x3,%edxf0101bae2991,134220
f0101bb1:	c1 e2 0c             	shl    $0xc,%edxf0101bb12992,134269
f0101bb4:	39 d0                	cmp    %edx,%eaxf0101bb42993,134318
f0101bb6:	0f 85 a7 08 00 00    	jne    f0102463 <mem_init+0x1064>f0101bb62994,134367
f0101bbc:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)f0101bbc2996,134460
f0101bc1:	0f 85 be 08 00 00    	jne    f0102485 <mem_init+0x1086>f0101bc12997,134514
f0101bc7:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)f0101bc72999,134607
f0101bcc:	0f 85 d5 08 00 00    	jne    f01024a7 <mem_init+0x10a8>f0101bcc3000,134661
f0101bd2:	6a 02                	push   $0x2f0101bd23004,134883
f0101bd4:	68 00 10 00 00       	push   $0x1000f0101bd43005,134927
f0101bd9:	ff 75 d0             	pushl  -0x30(%ebp)f0101bd93006,134974
f0101bdc:	53                   	push   %ebxf0101bdc3007,135025
f0101bdd:	e8 ac f7 ff ff       	call   f010138e <page_insert>f0101bdd3008,135069
f0101be2:	83 c4 10             	add    $0x10,%espf0101be23009,135131
f0101be5:	85 c0                	test   %eax,%eaxf0101be53010,135181
f0101be7:	0f 85 dc 08 00 00    	jne    f01024c9 <mem_init+0x10ca>f0101be73011,135230
f0101bed:	ba 00 10 00 00       	mov    $0x1000,%edxf0101bed3013,135354
f0101bf2:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101bf23014,135406
f0101bf5:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101bf53015,135462
f0101bfb:	8b 00                	mov    (%eax),%eaxf0101bfb3016,135518
f0101bfd:	e8 71 ef ff ff       	call   f0100b73 <check_va2pa>f0101bfd3017,135569
f0101c02:	c7 c2 10 20 18 f0    	mov    $0xf0182010,%edxf0101c023018,135631
f0101c08:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0101c083019,135687
f0101c0b:	2b 0a                	sub    (%edx),%ecxf0101c0b3020,135743
f0101c0d:	89 ca                	mov    %ecx,%edxf0101c0d3021,135794
f0101c0f:	c1 fa 03             	sar    $0x3,%edxf0101c0f3022,135843
f0101c12:	c1 e2 0c             	shl    $0xc,%edxf0101c123023,135892
f0101c15:	39 d0                	cmp    %edx,%eaxf0101c153024,135941
f0101c17:	0f 85 ce 08 00 00    	jne    f01024eb <mem_init+0x10ec>f0101c173025,135990
f0101c1d:	83 ec 0c             	sub    $0xc,%espf0101c1d3029,136111
f0101c20:	6a 00                	push   $0x0f0101c203030,136160
f0101c22:	e8 3e f4 ff ff       	call   f0101065 <page_alloc>f0101c223031,136204
f0101c27:	83 c4 10             	add    $0x10,%espf0101c273032,136265
f0101c2a:	85 c0                	test   %eax,%eaxf0101c2a3033,136315
f0101c2c:	0f 85 db 08 00 00    	jne    f010250d <mem_init+0x110e>f0101c2c3034,136364
f0101c32:	6a 02                	push   $0x2f0101c323038,136565
f0101c34:	68 00 10 00 00       	push   $0x1000f0101c343039,136609
f0101c39:	ff 75 d0             	pushl  -0x30(%ebp)f0101c393040,136656
f0101c3c:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101c3c3041,136707
f0101c3f:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101c3f3042,136763
f0101c45:	ff 30                	pushl  (%eax)f0101c453043,136819
f0101c47:	e8 42 f7 ff ff       	call   f010138e <page_insert>f0101c473044,136865
f0101c4c:	83 c4 10             	add    $0x10,%espf0101c4c3045,136927
f0101c4f:	85 c0                	test   %eax,%eaxf0101c4f3046,136977
f0101c51:	0f 85 d8 08 00 00    	jne    f010252f <mem_init+0x1130>f0101c513047,137026
f0101c57:	ba 00 10 00 00       	mov    $0x1000,%edxf0101c573049,137150
f0101c5c:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101c5c3050,137202
f0101c5f:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101c5f3051,137258
f0101c65:	8b 00                	mov    (%eax),%eaxf0101c653052,137314
f0101c67:	e8 07 ef ff ff       	call   f0100b73 <check_va2pa>f0101c673053,137365
f0101c6c:	c7 c2 10 20 18 f0    	mov    $0xf0182010,%edxf0101c6c3054,137427
f0101c72:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0101c723055,137483
f0101c75:	2b 0a                	sub    (%edx),%ecxf0101c753056,137539
f0101c77:	89 ca                	mov    %ecx,%edxf0101c773057,137590
f0101c79:	c1 fa 03             	sar    $0x3,%edxf0101c793058,137639
f0101c7c:	c1 e2 0c             	shl    $0xc,%edxf0101c7c3059,137688
f0101c7f:	39 d0                	cmp    %edx,%eaxf0101c7f3060,137737
f0101c81:	0f 85 ca 08 00 00    	jne    f0102551 <mem_init+0x1152>f0101c813061,137786
f0101c87:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101c873063,137879
f0101c8a:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)f0101c8a3064,137935
f0101c8f:	0f 85 de 08 00 00    	jne    f0102573 <mem_init+0x1174>f0101c8f3065,137989
f0101c95:	83 ec 0c             	sub    $0xc,%espf0101c953070,138187
f0101c98:	6a 00                	push   $0x0f0101c983071,138236
f0101c9a:	e8 c6 f3 ff ff       	call   f0101065 <page_alloc>f0101c9a3072,138280
f0101c9f:	83 c4 10             	add    $0x10,%espf0101c9f3073,138341
f0101ca2:	85 c0                	test   %eax,%eaxf0101ca23074,138391
f0101ca4:	0f 85 eb 08 00 00    	jne    f0102595 <mem_init+0x1196>f0101ca43075,138440
	ptep = (pte_t *) KADDR(PTE_ADDR(kern_pgdir[PDX(PGSIZE)]));ptep3078,138562
f0101caa:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101caa3079,138622
f0101cad:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101cad3080,138678
f0101cb3:	8b 10                	mov    (%eax),%edxf0101cb33081,138734
f0101cb5:	8b 02                	mov    (%edx),%eaxf0101cb53082,138785
f0101cb7:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0101cb73083,138836
f0101cbc:	89 c3                	mov    %eax,%ebxf0101cbc3085,138918
f0101cbe:	c1 eb 0c             	shr    $0xc,%ebxf0101cbe3086,138967
f0101cc1:	c7 c1 08 20 18 f0    	mov    $0xf0182008,%ecxf0101cc13087,139016
f0101cc7:	3b 19                	cmp    (%ecx),%ebxf0101cc73088,139072
f0101cc9:	0f 83 e8 08 00 00    	jae    f01025b7 <mem_init+0x11b8>f0101cc93089,139123
f0101ccf:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0101ccf3091,139222
f0101cd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0101cd43092,139278
f0101cd7:	83 ec 04             	sub    $0x4,%espf0101cd73094,139405
f0101cda:	6a 00                	push   $0x0f0101cda3095,139454
f0101cdc:	68 00 10 00 00       	push   $0x1000f0101cdc3096,139498
f0101ce1:	52                   	push   %edxf0101ce13097,139545
f0101ce2:	e8 a1 f4 ff ff       	call   f0101188 <pgdir_walk>f0101ce23098,139589
f0101ce7:	8b 4d e4             	mov    -0x1c(%ebp),%ecxf0101ce73099,139650
f0101cea:	8d 51 04             	lea    0x4(%ecx),%edxf0101cea3100,139706
f0101ced:	83 c4 10             	add    $0x10,%espf0101ced3101,139760
f0101cf0:	39 d0                	cmp    %edx,%eaxf0101cf03102,139810
f0101cf2:	0f 85 db 08 00 00    	jne    f01025d3 <mem_init+0x11d4>f0101cf23103,139859
f0101cf8:	6a 06                	push   $0x6f0101cf83107,140045
f0101cfa:	68 00 10 00 00       	push   $0x1000f0101cfa3108,140089
f0101cff:	ff 75 d0             	pushl  -0x30(%ebp)f0101cff3109,140136
f0101d02:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101d023110,140187
f0101d05:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101d053111,140243
f0101d0b:	ff 30                	pushl  (%eax)f0101d0b3112,140299
f0101d0d:	e8 7c f6 ff ff       	call   f010138e <page_insert>f0101d0d3113,140345
f0101d12:	83 c4 10             	add    $0x10,%espf0101d123114,140407
f0101d15:	85 c0                	test   %eax,%eaxf0101d153115,140457
f0101d17:	0f 85 d8 08 00 00    	jne    f01025f5 <mem_init+0x11f6>f0101d173116,140506
f0101d1d:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101d1d3118,140630
f0101d20:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101d203119,140686
f0101d26:	8b 18                	mov    (%eax),%ebxf0101d263120,140742
f0101d28:	ba 00 10 00 00       	mov    $0x1000,%edxf0101d283121,140793
f0101d2d:	89 d8                	mov    %ebx,%eaxf0101d2d3122,140845
f0101d2f:	e8 3f ee ff ff       	call   f0100b73 <check_va2pa>f0101d2f3123,140894
f0101d34:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101d343125,140989
f0101d37:	c7 c2 10 20 18 f0    	mov    $0xf0182010,%edxf0101d373126,141045
f0101d3d:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0101d3d3127,141101
f0101d40:	2b 0a                	sub    (%edx),%ecxf0101d403128,141157
f0101d42:	89 ca                	mov    %ecx,%edxf0101d423129,141208
f0101d44:	c1 fa 03             	sar    $0x3,%edxf0101d443130,141257
f0101d47:	c1 e2 0c             	shl    $0xc,%edxf0101d473131,141306
f0101d4a:	39 d0                	cmp    %edx,%eaxf0101d4a3132,141355
f0101d4c:	0f 85 c5 08 00 00    	jne    f0102617 <mem_init+0x1218>f0101d4c3133,141404
f0101d52:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101d523135,141497
f0101d55:	66 83 78 04 01       	cmpw   $0x1,0x4(%eax)f0101d553136,141553
f0101d5a:	0f 85 d9 08 00 00    	jne    f0102639 <mem_init+0x123a>f0101d5a3137,141607
f0101d60:	83 ec 04             	sub    $0x4,%espf0101d603139,141734
f0101d63:	6a 00                	push   $0x0f0101d633140,141783
f0101d65:	68 00 10 00 00       	push   $0x1000f0101d653141,141827
f0101d6a:	53                   	push   %ebxf0101d6a3142,141874
f0101d6b:	e8 18 f4 ff ff       	call   f0101188 <pgdir_walk>f0101d6b3143,141918
f0101d70:	83 c4 10             	add    $0x10,%espf0101d703144,141979
f0101d73:	f6 00 04             	testb  $0x4,(%eax)f0101d733145,142029
f0101d76:	0f 84 df 08 00 00    	je     f010265b <mem_init+0x125c>f0101d763146,142080
f0101d7c:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101d7c3148,142178
f0101d7f:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101d7f3149,142234
f0101d85:	8b 00                	mov    (%eax),%eaxf0101d853150,142290
f0101d87:	f6 00 04             	testb  $0x4,(%eax)f0101d873151,142341
f0101d8a:	0f 84 ed 08 00 00    	je     f010267d <mem_init+0x127e>f0101d8a3152,142392
f0101d90:	6a 02                	push   $0x2f0101d903156,142577
f0101d92:	68 00 10 00 00       	push   $0x1000f0101d923157,142621
f0101d97:	ff 75 d0             	pushl  -0x30(%ebp)f0101d973158,142668
f0101d9a:	50                   	push   %eaxf0101d9a3159,142719
f0101d9b:	e8 ee f5 ff ff       	call   f010138e <page_insert>f0101d9b3160,142763
f0101da0:	83 c4 10             	add    $0x10,%espf0101da03161,142825
f0101da3:	85 c0                	test   %eax,%eaxf0101da33162,142875
f0101da5:	0f 85 f4 08 00 00    	jne    f010269f <mem_init+0x12a0>f0101da53163,142924
f0101dab:	83 ec 04             	sub    $0x4,%espf0101dab3165,143051
f0101dae:	6a 00                	push   $0x0f0101dae3166,143100
f0101db0:	68 00 10 00 00       	push   $0x1000f0101db03167,143144
f0101db5:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101db53168,143191
f0101db8:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101db83169,143247
f0101dbe:	ff 30                	pushl  (%eax)f0101dbe3170,143303
f0101dc0:	e8 c3 f3 ff ff       	call   f0101188 <pgdir_walk>f0101dc03171,143349
f0101dc5:	83 c4 10             	add    $0x10,%espf0101dc53172,143410
f0101dc8:	f6 00 02             	testb  $0x2,(%eax)f0101dc83173,143460
f0101dcb:	0f 84 f0 08 00 00    	je     f01026c1 <mem_init+0x12c2>f0101dcb3174,143511
f0101dd1:	83 ec 04             	sub    $0x4,%espf0101dd13176,143641
f0101dd4:	6a 00                	push   $0x0f0101dd43177,143690
f0101dd6:	68 00 10 00 00       	push   $0x1000f0101dd63178,143734
f0101ddb:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101ddb3179,143781
f0101dde:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101dde3180,143837
f0101de4:	ff 30                	pushl  (%eax)f0101de43181,143893
f0101de6:	e8 9d f3 ff ff       	call   f0101188 <pgdir_walk>f0101de63182,143939
f0101deb:	83 c4 10             	add    $0x10,%espf0101deb3183,144000
f0101dee:	f6 00 04             	testb  $0x4,(%eax)f0101dee3184,144050
f0101df1:	0f 85 ec 08 00 00    	jne    f01026e3 <mem_init+0x12e4>f0101df13185,144101
f0101df7:	6a 02                	push   $0x2f0101df73189,144312
f0101df9:	68 00 00 40 00       	push   $0x400000f0101df93190,144356
f0101dfe:	56                   	push   %esif0101dfe3191,144405
f0101dff:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101dff3192,144449
f0101e02:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101e023193,144505
f0101e08:	ff 30                	pushl  (%eax)f0101e083194,144561
f0101e0a:	e8 7f f5 ff ff       	call   f010138e <page_insert>f0101e0a3195,144607
f0101e0f:	83 c4 10             	add    $0x10,%espf0101e0f3196,144669
f0101e12:	85 c0                	test   %eax,%eaxf0101e123197,144719
f0101e14:	0f 89 eb 08 00 00    	jns    f0102705 <mem_init+0x1306>f0101e143198,144768
f0101e1a:	6a 02                	push   $0x2f0101e1a3202,144943
f0101e1c:	68 00 10 00 00       	push   $0x1000f0101e1c3203,144987
f0101e21:	57                   	push   %edif0101e213204,145034
f0101e22:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101e223205,145078
f0101e25:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101e253206,145134
f0101e2b:	ff 30                	pushl  (%eax)f0101e2b3207,145190
f0101e2d:	e8 5c f5 ff ff       	call   f010138e <page_insert>f0101e2d3208,145236
f0101e32:	83 c4 10             	add    $0x10,%espf0101e323209,145298
f0101e35:	85 c0                	test   %eax,%eaxf0101e353210,145348
f0101e37:	0f 85 ea 08 00 00    	jne    f0102727 <mem_init+0x1328>f0101e373211,145397
f0101e3d:	83 ec 04             	sub    $0x4,%espf0101e3d3213,145527
f0101e40:	6a 00                	push   $0x0f0101e403214,145576
f0101e42:	68 00 10 00 00       	push   $0x1000f0101e423215,145620
f0101e47:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101e473216,145667
f0101e4a:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101e4a3217,145723
f0101e50:	ff 30                	pushl  (%eax)f0101e503218,145779
f0101e52:	e8 31 f3 ff ff       	call   f0101188 <pgdir_walk>f0101e523219,145825
f0101e57:	83 c4 10             	add    $0x10,%espf0101e573220,145886
f0101e5a:	f6 00 04             	testb  $0x4,(%eax)f0101e5a3221,145936
f0101e5d:	0f 85 e6 08 00 00    	jne    f0102749 <mem_init+0x134a>f0101e5d3222,145987
f0101e63:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101e633226,146166
f0101e66:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0101e663227,146222
f0101e6c:	8b 18                	mov    (%eax),%ebxf0101e6c3228,146278
f0101e6e:	ba 00 00 00 00       	mov    $0x0,%edxf0101e6e3229,146329
f0101e73:	89 d8                	mov    %ebx,%eaxf0101e733230,146378
f0101e75:	e8 f9 ec ff ff       	call   f0100b73 <check_va2pa>f0101e753231,146427
f0101e7a:	89 c2                	mov    %eax,%edxf0101e7a3232,146489
f0101e7c:	89 45 cc             	mov    %eax,-0x34(%ebp)f0101e7c3233,146538
f0101e7f:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101e7f3234,146594
f0101e82:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0101e823235,146650
f0101e88:	89 f9                	mov    %edi,%ecxf0101e883236,146706
f0101e8a:	2b 08                	sub    (%eax),%ecxf0101e8a3237,146755
f0101e8c:	89 c8                	mov    %ecx,%eaxf0101e8c3238,146806
f0101e8e:	c1 f8 03             	sar    $0x3,%eaxf0101e8e3239,146855
f0101e91:	c1 e0 0c             	shl    $0xc,%eaxf0101e913240,146904
f0101e94:	39 c2                	cmp    %eax,%edxf0101e943241,146953
f0101e96:	0f 85 cf 08 00 00    	jne    f010276b <mem_init+0x136c>f0101e963242,147002
f0101e9c:	ba 00 10 00 00       	mov    $0x1000,%edxf0101e9c3244,147126
f0101ea1:	89 d8                	mov    %ebx,%eaxf0101ea13245,147178
f0101ea3:	e8 cb ec ff ff       	call   f0100b73 <check_va2pa>f0101ea33246,147227
f0101ea8:	39 45 cc             	cmp    %eax,-0x34(%ebp)f0101ea83247,147289
f0101eab:	0f 85 dc 08 00 00    	jne    f010278d <mem_init+0x138e>f0101eab3248,147345
f0101eb1:	66 83 7f 04 02       	cmpw   $0x2,0x4(%edi)f0101eb13251,147481
f0101eb6:	0f 85 f3 08 00 00    	jne    f01027af <mem_init+0x13b0>f0101eb63252,147535
f0101ebc:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101ebc3254,147628
f0101ebf:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)f0101ebf3255,147684
f0101ec4:	0f 85 07 09 00 00    	jne    f01027d1 <mem_init+0x13d2>f0101ec43256,147738
f0101eca:	83 ec 0c             	sub    $0xc,%espf0101eca3260,147890
f0101ecd:	6a 00                	push   $0x0f0101ecd3261,147939
f0101ecf:	e8 91 f1 ff ff       	call   f0101065 <page_alloc>f0101ecf3262,147983
f0101ed4:	83 c4 10             	add    $0x10,%espf0101ed43263,148044
f0101ed7:	39 45 d0             	cmp    %eax,-0x30(%ebp)f0101ed73264,148094
f0101eda:	0f 85 13 09 00 00    	jne    f01027f3 <mem_init+0x13f4>f0101eda3265,148150
f0101ee0:	85 c0                	test   %eax,%eaxf0101ee03266,148216
f0101ee2:	0f 84 0b 09 00 00    	je     f01027f3 <mem_init+0x13f4>f0101ee23267,148265
f0101ee8:	83 ec 08             	sub    $0x8,%espf0101ee83271,148412
f0101eeb:	6a 00                	push   $0x0f0101eeb3272,148461
f0101eed:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101eed3273,148505
f0101ef0:	c7 c3 0c 20 18 f0    	mov    $0xf018200c,%ebxf0101ef03274,148561
f0101ef6:	ff 33                	pushl  (%ebx)f0101ef63275,148617
f0101ef8:	e8 3e f4 ff ff       	call   f010133b <page_remove>f0101ef83276,148663
f0101efd:	8b 1b                	mov    (%ebx),%ebxf0101efd3278,148770
f0101eff:	ba 00 00 00 00       	mov    $0x0,%edxf0101eff3279,148821
f0101f04:	89 d8                	mov    %ebx,%eaxf0101f043280,148870
f0101f06:	e8 68 ec ff ff       	call   f0100b73 <check_va2pa>f0101f063281,148919
f0101f0b:	83 c4 10             	add    $0x10,%espf0101f0b3282,148981
f0101f0e:	83 f8 ff             	cmp    $0xffffffff,%eaxf0101f0e3283,149031
f0101f11:	0f 85 fe 08 00 00    	jne    f0102815 <mem_init+0x1416>f0101f113284,149087
f0101f17:	ba 00 10 00 00       	mov    $0x1000,%edxf0101f173286,149211
f0101f1c:	89 d8                	mov    %ebx,%eaxf0101f1c3287,149263
f0101f1e:	e8 50 ec ff ff       	call   f0100b73 <check_va2pa>f0101f1e3288,149312
f0101f23:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101f233289,149374
f0101f26:	c7 c2 10 20 18 f0    	mov    $0xf0182010,%edxf0101f263290,149430
f0101f2c:	89 f9                	mov    %edi,%ecxf0101f2c3291,149486
f0101f2e:	2b 0a                	sub    (%edx),%ecxf0101f2e3292,149535
f0101f30:	89 ca                	mov    %ecx,%edxf0101f303293,149586
f0101f32:	c1 fa 03             	sar    $0x3,%edxf0101f323294,149635
f0101f35:	c1 e2 0c             	shl    $0xc,%edxf0101f353295,149684
f0101f38:	39 d0                	cmp    %edx,%eaxf0101f383296,149733
f0101f3a:	0f 85 f7 08 00 00    	jne    f0102837 <mem_init+0x1438>f0101f3a3297,149782
f0101f40:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)f0101f403299,149875
f0101f45:	0f 85 0e 09 00 00    	jne    f0102859 <mem_init+0x145a>f0101f453300,149929
f0101f4b:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101f4b3302,150022
f0101f4e:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)f0101f4e3303,150078
f0101f53:	0f 85 22 09 00 00    	jne    f010287b <mem_init+0x147c>f0101f533304,150132
f0101f59:	6a 00                	push   $0x0f0101f593308,150298
f0101f5b:	68 00 10 00 00       	push   $0x1000f0101f5b3309,150342
f0101f60:	57                   	push   %edif0101f603310,150389
f0101f61:	53                   	push   %ebxf0101f613311,150433
f0101f62:	e8 27 f4 ff ff       	call   f010138e <page_insert>f0101f623312,150477
f0101f67:	83 c4 10             	add    $0x10,%espf0101f673313,150539
f0101f6a:	85 c0                	test   %eax,%eaxf0101f6a3314,150589
f0101f6c:	0f 85 2b 09 00 00    	jne    f010289d <mem_init+0x149e>f0101f6c3315,150638
f0101f72:	66 83 7f 04 00       	cmpw   $0x0,0x4(%edi)f0101f723317,150726
f0101f77:	0f 84 42 09 00 00    	je     f01028bf <mem_init+0x14c0>f0101f773318,150780
f0101f7d:	83 3f 00             	cmpl   $0x0,(%edi)f0101f7d3320,150877
f0101f80:	0f 85 5b 09 00 00    	jne    f01028e1 <mem_init+0x14e2>f0101f803321,150928
f0101f86:	83 ec 08             	sub    $0x8,%espf0101f863325,151080
f0101f89:	68 00 10 00 00       	push   $0x1000f0101f893326,151129
f0101f8e:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101f8e3327,151176
f0101f91:	c7 c3 0c 20 18 f0    	mov    $0xf018200c,%ebxf0101f913328,151232
f0101f97:	ff 33                	pushl  (%ebx)f0101f973329,151288
f0101f99:	e8 9d f3 ff ff       	call   f010133b <page_remove>f0101f993330,151334
f0101f9e:	8b 1b                	mov    (%ebx),%ebxf0101f9e3332,151441
f0101fa0:	ba 00 00 00 00       	mov    $0x0,%edxf0101fa03333,151492
f0101fa5:	89 d8                	mov    %ebx,%eaxf0101fa53334,151541
f0101fa7:	e8 c7 eb ff ff       	call   f0100b73 <check_va2pa>f0101fa73335,151590
f0101fac:	83 c4 10             	add    $0x10,%espf0101fac3336,151652
f0101faf:	83 f8 ff             	cmp    $0xffffffff,%eaxf0101faf3337,151702
f0101fb2:	0f 85 4b 09 00 00    	jne    f0102903 <mem_init+0x1504>f0101fb23338,151758
f0101fb8:	ba 00 10 00 00       	mov    $0x1000,%edxf0101fb83340,151872
f0101fbd:	89 d8                	mov    %ebx,%eaxf0101fbd3341,151924
f0101fbf:	e8 af eb ff ff       	call   f0100b73 <check_va2pa>f0101fbf3342,151973
f0101fc4:	83 f8 ff             	cmp    $0xffffffff,%eaxf0101fc43343,152035
f0101fc7:	0f 85 58 09 00 00    	jne    f0102925 <mem_init+0x1526>f0101fc73344,152091
f0101fcd:	66 83 7f 04 00       	cmpw   $0x0,0x4(%edi)f0101fcd3346,152184
f0101fd2:	0f 85 6f 09 00 00    	jne    f0102947 <mem_init+0x1548>f0101fd23347,152238
f0101fd8:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101fd83349,152331
f0101fdb:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)f0101fdb3350,152387
f0101fe0:	0f 85 83 09 00 00    	jne    f0102969 <mem_init+0x156a>f0101fe03351,152441
f0101fe6:	83 ec 0c             	sub    $0xc,%espf0101fe63355,152595
f0101fe9:	6a 00                	push   $0x0f0101fe93356,152644
f0101feb:	e8 75 f0 ff ff       	call   f0101065 <page_alloc>f0101feb3357,152688
f0101ff0:	83 c4 10             	add    $0x10,%espf0101ff03358,152749
f0101ff3:	85 c0                	test   %eax,%eaxf0101ff33359,152799
f0101ff5:	0f 84 90 09 00 00    	je     f010298b <mem_init+0x158c>f0101ff53360,152848
f0101ffb:	39 c7                	cmp    %eax,%edif0101ffb3361,152914
f0101ffd:	0f 85 88 09 00 00    	jne    f010298b <mem_init+0x158c>f0101ffd3362,152963
f0102003:	83 ec 0c             	sub    $0xc,%espf01020033366,153084
f0102006:	6a 00                	push   $0x0f01020063367,153133
f0102008:	e8 58 f0 ff ff       	call   f0101065 <page_alloc>f01020083368,153177
f010200d:	83 c4 10             	add    $0x10,%espf010200d3369,153238
f0102010:	85 c0                	test   %eax,%eaxf01020103370,153288
f0102012:	0f 85 95 09 00 00    	jne    f01029ad <mem_init+0x15ae>f01020123371,153337
f0102018:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01020183375,153481
f010201b:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf010201b3376,153537
f0102021:	8b 08                	mov    (%eax),%ecxf01020213377,153593
f0102023:	8b 11                	mov    (%ecx),%edxf01020233378,153644
f0102025:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf01020253379,153695
f010202b:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf010202b3380,153751
f0102031:	89 f3                	mov    %esi,%ebxf01020313381,153807
f0102033:	2b 18                	sub    (%eax),%ebxf01020333382,153856
f0102035:	89 d8                	mov    %ebx,%eaxf01020353383,153907
f0102037:	c1 f8 03             	sar    $0x3,%eaxf01020373384,153956
f010203a:	c1 e0 0c             	shl    $0xc,%eaxf010203a3385,154005
f010203d:	39 c2                	cmp    %eax,%edxf010203d3386,154054
f010203f:	0f 85 8a 09 00 00    	jne    f01029cf <mem_init+0x15d0>f010203f3387,154103
f0102045:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)f01020453389,154189
f010204b:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)f010204b3391,154267
f0102050:	0f 85 9b 09 00 00    	jne    f01029f1 <mem_init+0x15f2>f01020503392,154321
f0102056:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f01020563394,154405
f010205c:	83 ec 0c             	sub    $0xc,%espf010205c3398,154520
f010205f:	56                   	push   %esif010205f3399,154569
f0102060:	e8 8e f0 ff ff       	call   f01010f3 <page_free>f01020603400,154613
	va = (void*)(PGSIZE * NPDENTRIES + PGSIZE);va3401,154673
	ptep = pgdir_walk(kern_pgdir, va, 1);ptep3402,154718
f0102065:	83 c4 0c             	add    $0xc,%espf01020653403,154757
f0102068:	6a 01                	push   $0x1f01020683404,154806
f010206a:	68 00 10 40 00       	push   $0x401000f010206a3405,154850
f010206f:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf010206f3406,154899
f0102072:	c7 c3 0c 20 18 f0    	mov    $0xf018200c,%ebxf01020723407,154955
f0102078:	ff 33                	pushl  (%ebx)f01020783408,155011
f010207a:	e8 09 f1 ff ff       	call   f0101188 <pgdir_walk>f010207a3409,155057
f010207f:	89 45 cc             	mov    %eax,-0x34(%ebp)f010207f3410,155118
f0102082:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01020823411,155174
	ptep1 = (pte_t *) KADDR(PTE_ADDR(kern_pgdir[PDX(va)]));ptep13412,155230
f0102085:	8b 1b                	mov    (%ebx),%ebxf01020853413,155287
f0102087:	8b 53 04             	mov    0x4(%ebx),%edxf01020873414,155338
f010208a:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf010208a3415,155392
f0102090:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf01020903417,155474
f0102093:	c7 c1 08 20 18 f0    	mov    $0xf0182008,%ecxf01020933418,155530
f0102099:	8b 09                	mov    (%ecx),%ecxf01020993419,155586
f010209b:	89 d0                	mov    %edx,%eaxf010209b3420,155637
f010209d:	c1 e8 0c             	shr    $0xc,%eaxf010209d3421,155686
f01020a0:	83 c4 10             	add    $0x10,%espf01020a03422,155735
f01020a3:	39 c8                	cmp    %ecx,%eaxf01020a33423,155785
f01020a5:	0f 83 68 09 00 00    	jae    f0102a13 <mem_init+0x1614>f01020a53424,155834
f01020ab:	81 ea fc ff ff 0f    	sub    $0xffffffc,%edxf01020ab3426,155934
f01020b1:	39 55 cc             	cmp    %edx,-0x34(%ebp)f01020b13427,155989
f01020b4:	0f 85 75 09 00 00    	jne    f0102a2f <mem_init+0x1630>f01020b43428,156045
f01020ba:	c7 43 04 00 00 00 00 	movl   $0x0,0x4(%ebx)f01020ba3430,156137
f01020c1:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f01020c13432,156209
f01020c7:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf01020c73434,156296
f01020ca:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01020ca3435,156352
f01020d0:	89 f3                	mov    %esi,%ebxf01020d03436,156408
f01020d2:	2b 18                	sub    (%eax),%ebxf01020d23437,156457
f01020d4:	89 d8                	mov    %ebx,%eaxf01020d43438,156508
f01020d6:	c1 f8 03             	sar    $0x3,%eaxf01020d63439,156557
f01020d9:	c1 e0 0c             	shl    $0xc,%eaxf01020d93440,156606
f01020dc:	89 c2                	mov    %eax,%edxf01020dc3442,156681
f01020de:	c1 ea 0c             	shr    $0xc,%edxf01020de3443,156730
f01020e1:	39 d1                	cmp    %edx,%ecxf01020e13444,156779
f01020e3:	0f 86 68 09 00 00    	jbe    f0102a51 <mem_init+0x1652>f01020e33445,156828
f01020e9:	83 ec 04             	sub    $0x4,%espf01020e93449,156976
f01020ec:	68 00 10 00 00       	push   $0x1000f01020ec3450,157025
f01020f1:	68 ff 00 00 00       	push   $0xfff01020f13451,157072
f01020f6:	2d 00 00 00 10       	sub    $0x10000000,%eaxf01020f63453,157150
f01020fb:	50                   	push   %eaxf01020fb3454,157206
f01020fc:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01020fc3455,157250
f01020ff:	e8 f0 25 00 00       	call   f01046f4 <memset>f01020ff3456,157306
f0102104:	89 34 24             	mov    %esi,(%esp)f01021043458,157380
f0102107:	e8 e7 ef ff ff       	call   f01010f3 <page_free>f01021073459,157431
f010210c:	83 c4 0c             	add    $0xc,%espf010210c3461,157524
f010210f:	6a 01                	push   $0x1f010210f3462,157573
f0102111:	6a 00                	push   $0x0f01021113463,157617
f0102113:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01021133464,157661
f0102116:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf01021163465,157717
f010211c:	ff 30                	pushl  (%eax)f010211c3466,157773
f010211e:	e8 65 f0 ff ff       	call   f0101188 <pgdir_walk>f010211e3467,157819
f0102123:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01021233469,157913
f0102129:	89 f2                	mov    %esi,%edxf01021293470,157969
f010212b:	2b 10                	sub    (%eax),%edxf010212b3471,158018
f010212d:	c1 fa 03             	sar    $0x3,%edxf010212d3472,158069
f0102130:	c1 e2 0c             	shl    $0xc,%edxf01021303473,158118
f0102133:	89 d1                	mov    %edx,%ecxf01021333475,158193
f0102135:	c1 e9 0c             	shr    $0xc,%ecxf01021353476,158242
f0102138:	83 c4 10             	add    $0x10,%espf01021383477,158291
f010213b:	c7 c0 08 20 18 f0    	mov    $0xf0182008,%eaxf010213b3478,158341
f0102141:	3b 08                	cmp    (%eax),%ecxf01021413479,158397
f0102143:	0f 83 21 09 00 00    	jae    f0102a6a <mem_init+0x166b>f01021433480,158448
f0102149:	8d 82 00 00 00 f0    	lea    -0x10000000(%edx),%eaxf01021493482,158547
	ptep = (pte_t *) page2kva(pp0);ptep3483,158609
f010214f:	89 45 e4             	mov    %eax,-0x1c(%ebp)f010214f3484,158642
f0102152:	81 ea 00 f0 ff 0f    	sub    $0xffff000,%edxf01021523485,158698
f0102158:	f6 00 01             	testb  $0x1,(%eax)f01021583488,158816
f010215b:	0f 85 22 09 00 00    	jne    f0102a83 <mem_init+0x1684>f010215b3489,158867
f0102161:	83 c0 04             	add    $0x4,%eaxf01021613490,158933
f0102164:	39 d0                	cmp    %edx,%eaxf01021643492,159011
f0102166:	75 f0                	jne    f0102158 <mem_init+0xd59>f01021663493,159060
f0102168:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01021683495,159145
f010216b:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf010216b3496,159201
f0102171:	8b 00                	mov    (%eax),%eaxf01021713497,159257
f0102173:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f01021733498,159308
f0102179:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f01021793500,159377
	page_free_list = fl;page_free_list3503,159456
f010217f:	8b 45 c8             	mov    -0x38(%ebp),%eaxf010217f3504,159478
f0102182:	89 83 1c 23 00 00    	mov    %eax,0x231c(%ebx)f01021823505,159534
f0102188:	83 ec 0c             	sub    $0xc,%espf01021883509,159636
f010218b:	56                   	push   %esif010218b3510,159685
f010218c:	e8 62 ef ff ff       	call   f01010f3 <page_free>f010218c3511,159729
f0102191:	89 3c 24             	mov    %edi,(%esp)f01021913513,159806
f0102194:	e8 5a ef ff ff       	call   f01010f3 <page_free>f01021943514,159857
f0102199:	83 c4 04             	add    $0x4,%espf01021993516,159934
f010219c:	ff 75 d0             	pushl  -0x30(%ebp)f010219c3517,159983
f010219f:	e8 4f ef ff ff       	call   f01010f3 <page_free>f010219f3518,160034
f01021a4:	8d 83 cb 6b f8 ff    	lea    -0x79435(%ebx),%eaxf01021a43521,160134
f01021aa:	89 04 24             	mov    %eax,(%esp)f01021aa3522,160193
f01021ad:	e8 68 15 00 00       	call   f010371a <cprintf>f01021ad3523,160244
f01021b2:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01021b23525,160369
f01021b8:	8b 00                	mov    (%eax),%eaxf01021b83526,160425
f01021ba:	83 c4 10             	add    $0x10,%espf01021ba3528,160507
f01021bd:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01021bd3529,160557
f01021c2:	0f 86 dd 08 00 00    	jbe    f0102aa5 <mem_init+0x16a6>f01021c23530,160613
f01021c8:	83 ec 08             	sub    $0x8,%espf01021c83531,160679
f01021cb:	6a 04                	push   $0x4f01021cb3532,160728
f01021cd:	05 00 00 00 10       	add    $0x10000000,%eaxf01021cd3534,160808
f01021d2:	50                   	push   %eaxf01021d23535,160864
f01021d3:	b9 00 00 40 00       	mov    $0x400000,%ecxf01021d33536,160908
f01021d8:	ba 00 00 00 ef       	mov    $0xef000000,%edxf01021d83537,160962
f01021dd:	8b 75 d4             	mov    -0x2c(%ebp),%esif01021dd3538,161018
f01021e0:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf01021e03539,161074
f01021e6:	8b 00                	mov    (%eax),%eaxf01021e63540,161130
f01021e8:	e8 47 f0 ff ff       	call   f0101234 <boot_map_region>f01021e83541,161181
f01021ed:	c7 c0 48 13 18 f0    	mov    $0xf0181348,%eaxf01021ed3543,161312
f01021f3:	8b 00                	mov    (%eax),%eaxf01021f33544,161368
f01021f5:	83 c4 10             	add    $0x10,%espf01021f53546,161450
f01021f8:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01021f83547,161500
f01021fd:	0f 86 be 08 00 00    	jbe    f0102ac1 <mem_init+0x16c2>f01021fd3548,161556
f0102203:	83 ec 08             	sub    $0x8,%espf01022033549,161622
f0102206:	6a 04                	push   $0x4f01022063550,161671
f0102208:	05 00 00 00 10       	add    $0x10000000,%eaxf01022083552,161751
f010220d:	50                   	push   %eaxf010220d3553,161807
f010220e:	b9 00 00 40 00       	mov    $0x400000,%ecxf010220e3554,161851
f0102213:	ba 00 00 c0 ee       	mov    $0xeec00000,%edxf01022133555,161905
f0102218:	8b 7d d4             	mov    -0x2c(%ebp),%edif01022183556,161961
f010221b:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf010221b3557,162017
f0102221:	8b 00                	mov    (%eax),%eaxf01022213558,162073
f0102223:	e8 0c f0 ff ff       	call   f0101234 <boot_map_region>f01022233559,162124
f0102228:	c7 c0 00 10 11 f0    	mov    $0xf0111000,%eaxf01022283561,162221
f010222e:	89 45 c8             	mov    %eax,-0x38(%ebp)f010222e3562,162277
f0102231:	83 c4 10             	add    $0x10,%espf01022313563,162333
f0102234:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01022343564,162383
f0102239:	0f 86 9e 08 00 00    	jbe    f0102add <mem_init+0x16de>f01022393565,162439
f010223f:	8b 7d d4             	mov    -0x2c(%ebp),%edif010223f3567,162592
f0102242:	c7 c3 0c 20 18 f0    	mov    $0xf018200c,%ebxf01022423568,162648
f0102248:	83 ec 08             	sub    $0x8,%espf01022483569,162704
f010224b:	6a 02                	push   $0x2f010224b3570,162753
f010224d:	8b 45 c8             	mov    -0x38(%ebp),%eaxf010224d3572,162833
f0102250:	05 00 00 00 10       	add    $0x10000000,%eaxf01022503573,162889
f0102255:	50                   	push   %eaxf01022553574,162945
f0102256:	b9 00 80 00 00       	mov    $0x8000,%ecxf01022563575,162989
f010225b:	ba 00 80 ff ef       	mov    $0xefff8000,%edxf010225b3576,163041
f0102260:	8b 03                	mov    (%ebx),%eaxf01022603577,163097
f0102262:	e8 cd ef ff ff       	call   f0101234 <boot_map_region>f01022623578,163148
f0102267:	83 c4 08             	add    $0x8,%espf01022673580,163287
f010226a:	6a 02                	push   $0x2f010226a3581,163336
f010226c:	6a 00                	push   $0x0f010226c3582,163380
f010226e:	b9 ff ff ff 0f       	mov    $0xfffffff,%ecxf010226e3583,163424
f0102273:	ba 00 00 00 f0       	mov    $0xf0000000,%edxf01022733584,163479
f0102278:	8b 03                	mov    (%ebx),%eaxf01022783585,163535
f010227a:	e8 b5 ef ff ff       	call   f0101234 <boot_map_region>f010227a3586,163586
	pgdir = kern_pgdir;pgdir3587,163652
f010227f:	8b 33                	mov    (%ebx),%esif010227f3588,163673
	n = ROUNDUP(npages*sizeof(struct PageInfo), PGSIZE);n3589,163724
f0102281:	c7 c0 08 20 18 f0    	mov    $0xf0182008,%eaxf01022813590,163778
f0102287:	8b 00                	mov    (%eax),%eaxf01022873591,163834
f0102289:	89 45 c4             	mov    %eax,-0x3c(%ebp)f01022893592,163885
f010228c:	8d 04 c5 ff 0f 00 00 	lea    0xfff(,%eax,8),%eaxf010228c3593,163941
f0102293:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf01022933594,164000
f0102298:	89 45 d0             	mov    %eax,-0x30(%ebp)f01022983595,164056
f010229b:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf010229b3597,164174
f01022a1:	8b 00                	mov    (%eax),%eaxf01022a13598,164230
f01022a3:	89 45 c0             	mov    %eax,-0x40(%ebp)f01022a33599,164281
f01022a6:	89 45 cc             	mov    %eax,-0x34(%ebp)f01022a63601,164368
f01022a9:	8d b8 00 00 00 10    	lea    0x10000000(%eax),%edif01022a93603,164460
f01022af:	83 c4 10             	add    $0x10,%espf01022af3604,164521
f01022b2:	bb 00 00 00 00       	mov    $0x0,%ebxf01022b23606,164604
f01022b7:	39 5d d0             	cmp    %ebx,-0x30(%ebp)f01022b73607,164653
f01022ba:	0f 86 7e 08 00 00    	jbe    f0102b3e <mem_init+0x173f>f01022ba3608,164709
f01022c0:	8d 93 00 00 00 ef    	lea    -0x11000000(%ebx),%edxf01022c03610,164837
f01022c6:	89 f0                	mov    %esi,%eaxf01022c63611,164899
f01022c8:	e8 a6 e8 ff ff       	call   f0100b73 <check_va2pa>f01022c83612,164948
f01022cd:	81 7d cc ff ff ff ef 	cmpl   $0xefffffff,-0x34(%ebp)f01022cd3614,165041
f01022d4:	0f 86 24 08 00 00    	jbe    f0102afe <mem_init+0x16ff>f01022d43615,165104
f01022da:	8d 14 3b             	lea    (%ebx,%edi,1),%edxf01022da3616,165170
f01022dd:	39 d0                	cmp    %edx,%eaxf01022dd3617,165228
f01022df:	0f 85 37 08 00 00    	jne    f0102b1c <mem_init+0x171d>f01022df3618,165277
f01022e5:	81 c3 00 10 00 00    	add    $0x1000,%ebxf01022e53620,165376
f01022eb:	eb ca                	jmp    f01022b7 <mem_init+0xeb8>f01022eb3621,165428
f01022ed:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01022ed3623,165514
f01022f0:	8d 83 f4 6a f8 ff    	lea    -0x7950c(%ebx),%eaxf01022f03624,165570
f01022f6:	50                   	push   %eaxf01022f63625,165629
f01022f7:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01022f73626,165673
f01022fd:	50                   	push   %eaxf01022fd3627,165732
f01022fe:	68 bc 02 00 00       	push   $0x2bcf01022fe3628,165776
f0102303:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01023033629,165822
f0102309:	50                   	push   %eaxf01023093630,165881
f010230a:	e8 a2 dd ff ff       	call   f01000b1 <_panic>f010230a3631,165925
f010230f:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010230f3633,166014
f0102312:	8d 83 02 6a f8 ff    	lea    -0x795fe(%ebx),%eaxf01023123634,166070
f0102318:	50                   	push   %eaxf01023183635,166129
f0102319:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01023193636,166173
f010231f:	50                   	push   %eaxf010231f3637,166232
f0102320:	68 1a 03 00 00       	push   $0x31af01023203638,166276
f0102325:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01023253639,166322
f010232b:	50                   	push   %eaxf010232b3640,166381
f010232c:	e8 80 dd ff ff       	call   f01000b1 <_panic>f010232c3641,166425
f0102331:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01023313643,166514
f0102334:	8d 83 18 6a f8 ff    	lea    -0x795e8(%ebx),%eaxf01023343644,166570
f010233a:	50                   	push   %eaxf010233a3645,166629
f010233b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010233b3646,166673
f0102341:	50                   	push   %eaxf01023413647,166732
f0102342:	68 1b 03 00 00       	push   $0x31bf01023423648,166776
f0102347:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01023473649,166822
f010234d:	50                   	push   %eaxf010234d3650,166881
f010234e:	e8 5e dd ff ff       	call   f01000b1 <_panic>f010234e3651,166925
f0102353:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01023533653,167014
f0102356:	8d 83 2e 6a f8 ff    	lea    -0x795d2(%ebx),%eaxf01023563654,167070
f010235c:	50                   	push   %eaxf010235c3655,167129
f010235d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010235d3656,167173
f0102363:	50                   	push   %eaxf01023633657,167232
f0102364:	68 1c 03 00 00       	push   $0x31cf01023643658,167276
f0102369:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01023693659,167322
f010236f:	50                   	push   %eaxf010236f3660,167381
f0102370:	e8 3c dd ff ff       	call   f01000b1 <_panic>f01023703661,167425
f0102375:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01023753663,167510
f0102378:	8d 83 44 6a f8 ff    	lea    -0x795bc(%ebx),%eaxf01023783664,167566
f010237e:	50                   	push   %eaxf010237e3665,167625
f010237f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010237f3666,167669
f0102385:	50                   	push   %eaxf01023853667,167728
f0102386:	68 1f 03 00 00       	push   $0x31ff01023863668,167772
f010238b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010238b3669,167818
f0102391:	50                   	push   %eaxf01023913670,167877
f0102392:	e8 1a dd ff ff       	call   f01000b1 <_panic>f01023923671,167921
f0102397:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01023973673,168020
f010239a:	8d 83 04 63 f8 ff    	lea    -0x79cfc(%ebx),%eaxf010239a3674,168076
f01023a0:	50                   	push   %eaxf01023a03675,168135
f01023a1:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01023a13676,168179
f01023a7:	50                   	push   %eaxf01023a73677,168238
f01023a8:	68 20 03 00 00       	push   $0x320f01023a83678,168282
f01023ad:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01023ad3679,168328
f01023b3:	50                   	push   %eaxf01023b33680,168387
f01023b4:	e8 f8 dc ff ff       	call   f01000b1 <_panic>f01023b43681,168431
f01023b9:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01023b93683,168513
f01023bc:	8d 83 ad 6a f8 ff    	lea    -0x79553(%ebx),%eaxf01023bc3684,168569
f01023c2:	50                   	push   %eaxf01023c23685,168628
f01023c3:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01023c33686,168672
f01023c9:	50                   	push   %eaxf01023c93687,168731
f01023ca:	68 27 03 00 00       	push   $0x327f01023ca3688,168775
f01023cf:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01023cf3689,168821
f01023d5:	50                   	push   %eaxf01023d53690,168880
f01023d6:	e8 d6 dc ff ff       	call   f01000b1 <_panic>f01023d63691,168924
f01023db:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01023db3693,169044
f01023de:	8d 83 44 63 f8 ff    	lea    -0x79cbc(%ebx),%eaxf01023de3694,169100
f01023e4:	50                   	push   %eaxf01023e43695,169159
f01023e5:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01023e53696,169203
f01023eb:	50                   	push   %eaxf01023eb3697,169262
f01023ec:	68 2a 03 00 00       	push   $0x32af01023ec3698,169306
f01023f1:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01023f13699,169352
f01023f7:	50                   	push   %eaxf01023f73700,169411
f01023f8:	e8 b4 dc ff ff       	call   f01000b1 <_panic>f01023f83701,169455
f01023fd:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01023fd3703,169567
f0102400:	8d 83 7c 63 f8 ff    	lea    -0x79c84(%ebx),%eaxf01024003704,169623
f0102406:	50                   	push   %eaxf01024063705,169682
f0102407:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01024073706,169726
f010240d:	50                   	push   %eaxf010240d3707,169785
f010240e:	68 2d 03 00 00       	push   $0x32df010240e3708,169829
f0102413:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01024133709,169875
f0102419:	50                   	push   %eaxf01024193710,169934
f010241a:	e8 92 dc ff ff       	call   f01000b1 <_panic>f010241a3711,169978
f010241f:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010241f3713,170091
f0102422:	8d 83 ac 63 f8 ff    	lea    -0x79c54(%ebx),%eaxf01024223714,170147
f0102428:	50                   	push   %eaxf01024283715,170206
f0102429:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01024293716,170250
f010242f:	50                   	push   %eaxf010242f3717,170309
f0102430:	68 31 03 00 00       	push   $0x331f01024303718,170353
f0102435:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01024353719,170399
f010243b:	50                   	push   %eaxf010243b3720,170458
f010243c:	e8 70 dc ff ff       	call   f01000b1 <_panic>f010243c3721,170502
f0102441:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01024413723,170609
f0102444:	8d 83 dc 63 f8 ff    	lea    -0x79c24(%ebx),%eaxf01024443724,170665
f010244a:	50                   	push   %eaxf010244a3725,170724
f010244b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010244b3726,170768
f0102451:	50                   	push   %eaxf01024513727,170827
f0102452:	68 32 03 00 00       	push   $0x332f01024523728,170871
f0102457:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01024573729,170917
f010245d:	50                   	push   %eaxf010245d3730,170976
f010245e:	e8 4e dc ff ff       	call   f01000b1 <_panic>f010245e3731,171020
f0102463:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01024633733,171132
f0102466:	8d 83 04 64 f8 ff    	lea    -0x79bfc(%ebx),%eaxf01024663734,171188
f010246c:	50                   	push   %eaxf010246c3735,171247
f010246d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010246d3736,171291
f0102473:	50                   	push   %eaxf01024733737,171350
f0102474:	68 33 03 00 00       	push   $0x333f01024743738,171394
f0102479:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01024793739,171440
f010247f:	50                   	push   %eaxf010247f3740,171499
f0102480:	e8 2c dc ff ff       	call   f01000b1 <_panic>f01024803741,171543
f0102485:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01024853743,171627
f0102488:	8d 83 ff 6a f8 ff    	lea    -0x79501(%ebx),%eaxf01024883744,171683
f010248e:	50                   	push   %eaxf010248e3745,171742
f010248f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010248f3746,171786
f0102495:	50                   	push   %eaxf01024953747,171845
f0102496:	68 34 03 00 00       	push   $0x334f01024963748,171889
f010249b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010249b3749,171935
f01024a1:	50                   	push   %eaxf01024a13750,171994
f01024a2:	e8 0a dc ff ff       	call   f01000b1 <_panic>f01024a23751,172038
f01024a7:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01024a73753,172122
f01024aa:	8d 83 10 6b f8 ff    	lea    -0x794f0(%ebx),%eaxf01024aa3754,172178
f01024b0:	50                   	push   %eaxf01024b03755,172237
f01024b1:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01024b13756,172281
f01024b7:	50                   	push   %eaxf01024b73757,172340
f01024b8:	68 35 03 00 00       	push   $0x335f01024b83758,172384
f01024bd:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01024bd3759,172430
f01024c3:	50                   	push   %eaxf01024c33760,172489
f01024c4:	e8 e8 db ff ff       	call   f01000b1 <_panic>f01024c43761,172533
f01024c9:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01024c93763,172657
f01024cc:	8d 83 34 64 f8 ff    	lea    -0x79bcc(%ebx),%eaxf01024cc3764,172713
f01024d2:	50                   	push   %eaxf01024d23765,172772
f01024d3:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01024d33766,172816
f01024d9:	50                   	push   %eaxf01024d93767,172875
f01024da:	68 38 03 00 00       	push   $0x338f01024da3768,172919
f01024df:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01024df3769,172965
f01024e5:	50                   	push   %eaxf01024e53770,173024
f01024e6:	e8 c6 db ff ff       	call   f01000b1 <_panic>f01024e63771,173068
f01024eb:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01024eb3773,173183
f01024ee:	8d 83 70 64 f8 ff    	lea    -0x79b90(%ebx),%eaxf01024ee3774,173239
f01024f4:	50                   	push   %eaxf01024f43775,173298
f01024f5:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01024f53776,173342
f01024fb:	50                   	push   %eaxf01024fb3777,173401
f01024fc:	68 39 03 00 00       	push   $0x339f01024fc3778,173445
f0102501:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025013779,173491
f0102507:	50                   	push   %eaxf01025073780,173550
f0102508:	e8 a4 db ff ff       	call   f01000b1 <_panic>f01025083781,173594
f010250d:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010250d3783,173676
f0102510:	8d 83 ad 6a f8 ff    	lea    -0x79553(%ebx),%eaxf01025103784,173732
f0102516:	50                   	push   %eaxf01025163785,173791
f0102517:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01025173786,173835
f010251d:	50                   	push   %eaxf010251d3787,173894
f010251e:	68 3c 03 00 00       	push   $0x33cf010251e3788,173938
f0102523:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025233789,173984
f0102529:	50                   	push   %eaxf01025293790,174043
f010252a:	e8 82 db ff ff       	call   f01000b1 <_panic>f010252a3791,174087
f010252f:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010252f3793,174211
f0102532:	8d 83 34 64 f8 ff    	lea    -0x79bcc(%ebx),%eaxf01025323794,174267
f0102538:	50                   	push   %eaxf01025383795,174326
f0102539:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01025393796,174370
f010253f:	50                   	push   %eaxf010253f3797,174429
f0102540:	68 3f 03 00 00       	push   $0x33ff01025403798,174473
f0102545:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025453799,174519
f010254b:	50                   	push   %eaxf010254b3800,174578
f010254c:	e8 60 db ff ff       	call   f01000b1 <_panic>f010254c3801,174622
f0102551:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01025513803,174737
f0102554:	8d 83 70 64 f8 ff    	lea    -0x79b90(%ebx),%eaxf01025543804,174793
f010255a:	50                   	push   %eaxf010255a3805,174852
f010255b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010255b3806,174896
f0102561:	50                   	push   %eaxf01025613807,174955
f0102562:	68 40 03 00 00       	push   $0x340f01025623808,174999
f0102567:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025673809,175045
f010256d:	50                   	push   %eaxf010256d3810,175104
f010256e:	e8 3e db ff ff       	call   f01000b1 <_panic>f010256e3811,175148
f0102573:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01025733813,175232
f0102576:	8d 83 21 6b f8 ff    	lea    -0x794df(%ebx),%eaxf01025763814,175288
f010257c:	50                   	push   %eaxf010257c3815,175347
f010257d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010257d3816,175391
f0102583:	50                   	push   %eaxf01025833817,175450
f0102584:	68 41 03 00 00       	push   $0x341f01025843818,175494
f0102589:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025893819,175540
f010258f:	50                   	push   %eaxf010258f3820,175599
f0102590:	e8 1c db ff ff       	call   f01000b1 <_panic>f01025903821,175643
f0102595:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01025953823,175725
f0102598:	8d 83 ad 6a f8 ff    	lea    -0x79553(%ebx),%eaxf01025983824,175781
f010259e:	50                   	push   %eaxf010259e3825,175840
f010259f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010259f3826,175884
f01025a5:	50                   	push   %eaxf01025a53827,175943
f01025a6:	68 45 03 00 00       	push   $0x345f01025a63828,175987
f01025ab:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025ab3829,176033
f01025b1:	50                   	push   %eaxf01025b13830,176092
f01025b2:	e8 fa da ff ff       	call   f01000b1 <_panic>f01025b23831,176136
f01025b7:	50                   	push   %eaxf01025b73833,176257
f01025b8:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01025b83834,176301
f01025bb:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf01025bb3835,176357
f01025c1:	50                   	push   %eaxf01025c13836,176416
f01025c2:	68 48 03 00 00       	push   $0x348f01025c23837,176460
f01025c7:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025c73838,176506
f01025cd:	50                   	push   %eaxf01025cd3839,176565
f01025ce:	e8 de da ff ff       	call   f01000b1 <_panic>f01025ce3840,176609
f01025d3:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01025d33842,176737
f01025d6:	8d 83 a0 64 f8 ff    	lea    -0x79b60(%ebx),%eaxf01025d63843,176793
f01025dc:	50                   	push   %eaxf01025dc3844,176852
f01025dd:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01025dd3845,176896
f01025e3:	50                   	push   %eaxf01025e33846,176955
f01025e4:	68 49 03 00 00       	push   $0x349f01025e43847,176999
f01025e9:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01025e93848,177045
f01025ef:	50                   	push   %eaxf01025ef3849,177104
f01025f0:	e8 bc da ff ff       	call   f01000b1 <_panic>f01025f03850,177148
f01025f5:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01025f53852,177278
f01025f8:	8d 83 e0 64 f8 ff    	lea    -0x79b20(%ebx),%eaxf01025f83853,177334
f01025fe:	50                   	push   %eaxf01025fe3854,177393
f01025ff:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01025ff3855,177437
f0102605:	50                   	push   %eaxf01026053856,177496
f0102606:	68 4c 03 00 00       	push   $0x34cf01026063857,177540
f010260b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010260b3858,177586
f0102611:	50                   	push   %eaxf01026113859,177645
f0102612:	e8 9a da ff ff       	call   f01000b1 <_panic>f01026123860,177689
f0102617:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01026173862,177804
f010261a:	8d 83 70 64 f8 ff    	lea    -0x79b90(%ebx),%eaxf010261a3863,177860
f0102620:	50                   	push   %eaxf01026203864,177919
f0102621:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01026213865,177963
f0102627:	50                   	push   %eaxf01026273866,178022
f0102628:	68 4d 03 00 00       	push   $0x34df01026283867,178066
f010262d:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010262d3868,178112
f0102633:	50                   	push   %eaxf01026333869,178171
f0102634:	e8 78 da ff ff       	call   f01000b1 <_panic>f01026343870,178215
f0102639:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01026393872,178299
f010263c:	8d 83 21 6b f8 ff    	lea    -0x794df(%ebx),%eaxf010263c3873,178355
f0102642:	50                   	push   %eaxf01026423874,178414
f0102643:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01026433875,178458
f0102649:	50                   	push   %eaxf01026493876,178517
f010264a:	68 4e 03 00 00       	push   $0x34ef010264a3877,178561
f010264f:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010264f3878,178607
f0102655:	50                   	push   %eaxf01026553879,178666
f0102656:	e8 56 da ff ff       	call   f01000b1 <_panic>f01026563880,178710
f010265b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010265b3882,178828
f010265e:	8d 83 20 65 f8 ff    	lea    -0x79ae0(%ebx),%eaxf010265e3883,178884
f0102664:	50                   	push   %eaxf01026643884,178943
f0102665:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01026653885,178987
f010266b:	50                   	push   %eaxf010266b3886,179046
f010266c:	68 4f 03 00 00       	push   $0x34ff010266c3887,179090
f0102671:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01026713888,179136
f0102677:	50                   	push   %eaxf01026773889,179195
f0102678:	e8 34 da ff ff       	call   f01000b1 <_panic>f01026783890,179239
f010267d:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010267d3892,179328
f0102680:	8d 83 32 6b f8 ff    	lea    -0x794ce(%ebx),%eaxf01026803893,179384
f0102686:	50                   	push   %eaxf01026863894,179443
f0102687:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01026873895,179487
f010268d:	50                   	push   %eaxf010268d3896,179546
f010268e:	68 50 03 00 00       	push   $0x350f010268e3897,179590
f0102693:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01026933898,179636
f0102699:	50                   	push   %eaxf01026993899,179695
f010269a:	e8 12 da ff ff       	call   f01000b1 <_panic>f010269a3900,179739
f010269f:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010269f3902,179863
f01026a2:	8d 83 34 64 f8 ff    	lea    -0x79bcc(%ebx),%eaxf01026a23903,179919
f01026a8:	50                   	push   %eaxf01026a83904,179978
f01026a9:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01026a93905,180022
f01026af:	50                   	push   %eaxf01026af3906,180081
f01026b0:	68 53 03 00 00       	push   $0x353f01026b03907,180125
f01026b5:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01026b53908,180171
f01026bb:	50                   	push   %eaxf01026bb3909,180230
f01026bc:	e8 f0 d9 ff ff       	call   f01000b1 <_panic>f01026bc3910,180274
f01026c1:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01026c13912,180392
f01026c4:	8d 83 54 65 f8 ff    	lea    -0x79aac(%ebx),%eaxf01026c43913,180448
f01026ca:	50                   	push   %eaxf01026ca3914,180507
f01026cb:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01026cb3915,180551
f01026d1:	50                   	push   %eaxf01026d13916,180610
f01026d2:	68 54 03 00 00       	push   $0x354f01026d23917,180654
f01026d7:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01026d73918,180700
f01026dd:	50                   	push   %eaxf01026dd3919,180759
f01026de:	e8 ce d9 ff ff       	call   f01000b1 <_panic>f01026de3920,180803
f01026e3:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01026e33922,180924
f01026e6:	8d 83 88 65 f8 ff    	lea    -0x79a78(%ebx),%eaxf01026e63923,180980
f01026ec:	50                   	push   %eaxf01026ec3924,181039
f01026ed:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01026ed3925,181083
f01026f3:	50                   	push   %eaxf01026f33926,181142
f01026f4:	68 55 03 00 00       	push   $0x355f01026f43927,181186
f01026f9:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01026f93928,181232
f01026ff:	50                   	push   %eaxf01026ff3929,181291
f0102700:	e8 ac d9 ff ff       	call   f01000b1 <_panic>f01027003930,181335
f0102705:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01027053932,181458
f0102708:	8d 83 c0 65 f8 ff    	lea    -0x79a40(%ebx),%eaxf01027083933,181514
f010270e:	50                   	push   %eaxf010270e3934,181573
f010270f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010270f3935,181617
f0102715:	50                   	push   %eaxf01027153936,181676
f0102716:	68 58 03 00 00       	push   $0x358f01027163937,181720
f010271b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010271b3938,181766
f0102721:	50                   	push   %eaxf01027213939,181825
f0102722:	e8 8a d9 ff ff       	call   f01000b1 <_panic>f01027223940,181869
f0102727:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01027273942,181993
f010272a:	8d 83 f8 65 f8 ff    	lea    -0x79a08(%ebx),%eaxf010272a3943,182049
f0102730:	50                   	push   %eaxf01027303944,182108
f0102731:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01027313945,182152
f0102737:	50                   	push   %eaxf01027373946,182211
f0102738:	68 5b 03 00 00       	push   $0x35bf01027383947,182255
f010273d:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010273d3948,182301
f0102743:	50                   	push   %eaxf01027433949,182360
f0102744:	e8 68 d9 ff ff       	call   f01000b1 <_panic>f01027443950,182404
f0102749:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01027493952,182525
f010274c:	8d 83 88 65 f8 ff    	lea    -0x79a78(%ebx),%eaxf010274c3953,182581
f0102752:	50                   	push   %eaxf01027523954,182640
f0102753:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01027533955,182684
f0102759:	50                   	push   %eaxf01027593956,182743
f010275a:	68 5c 03 00 00       	push   $0x35cf010275a3957,182787
f010275f:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010275f3958,182833
f0102765:	50                   	push   %eaxf01027653959,182892
f0102766:	e8 46 d9 ff ff       	call   f01000b1 <_panic>f01027663960,182936
f010276b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010276b3962,183046
f010276e:	8d 83 34 66 f8 ff    	lea    -0x799cc(%ebx),%eaxf010276e3963,183102
f0102774:	50                   	push   %eaxf01027743964,183161
f0102775:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01027753965,183205
f010277b:	50                   	push   %eaxf010277b3966,183264
f010277c:	68 5f 03 00 00       	push   $0x35ff010277c3967,183308
f0102781:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01027813968,183354
f0102787:	50                   	push   %eaxf01027873969,183413
f0102788:	e8 24 d9 ff ff       	call   f01000b1 <_panic>f01027883970,183457
f010278d:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010278d3972,183572
f0102790:	8d 83 60 66 f8 ff    	lea    -0x799a0(%ebx),%eaxf01027903973,183628
f0102796:	50                   	push   %eaxf01027963974,183687
f0102797:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01027973975,183731
f010279d:	50                   	push   %eaxf010279d3976,183790
f010279e:	68 60 03 00 00       	push   $0x360f010279e3977,183834
f01027a3:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01027a33978,183880
f01027a9:	50                   	push   %eaxf01027a93979,183939
f01027aa:	e8 02 d9 ff ff       	call   f01000b1 <_panic>f01027aa3980,183983
f01027af:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01027af3982,184067
f01027b2:	8d 83 48 6b f8 ff    	lea    -0x794b8(%ebx),%eaxf01027b23983,184123
f01027b8:	50                   	push   %eaxf01027b83984,184182
f01027b9:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01027b93985,184226
f01027bf:	50                   	push   %eaxf01027bf3986,184285
f01027c0:	68 62 03 00 00       	push   $0x362f01027c03987,184329
f01027c5:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01027c53988,184375
f01027cb:	50                   	push   %eaxf01027cb3989,184434
f01027cc:	e8 e0 d8 ff ff       	call   f01000b1 <_panic>f01027cc3990,184478
f01027d1:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01027d13992,184562
f01027d4:	8d 83 59 6b f8 ff    	lea    -0x794a7(%ebx),%eaxf01027d43993,184618
f01027da:	50                   	push   %eaxf01027da3994,184677
f01027db:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01027db3995,184721
f01027e1:	50                   	push   %eaxf01027e13996,184780
f01027e2:	68 63 03 00 00       	push   $0x363f01027e23997,184824
f01027e7:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01027e73998,184870
f01027ed:	50                   	push   %eaxf01027ed3999,184929
f01027ee:	e8 be d8 ff ff       	call   f01000b1 <_panic>f01027ee4000,184973
f01027f3:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01027f34002,185074
f01027f6:	8d 83 90 66 f8 ff    	lea    -0x79970(%ebx),%eaxf01027f64003,185130
f01027fc:	50                   	push   %eaxf01027fc4004,185189
f01027fd:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01027fd4005,185233
f0102803:	50                   	push   %eaxf01028034006,185292
f0102804:	68 66 03 00 00       	push   $0x366f01028044007,185336
f0102809:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01028094008,185382
f010280f:	50                   	push   %eaxf010280f4009,185441
f0102810:	e8 9c d8 ff ff       	call   f01000b1 <_panic>f01028104010,185485
f0102815:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01028154012,185587
f0102818:	8d 83 b4 66 f8 ff    	lea    -0x7994c(%ebx),%eaxf01028184013,185643
f010281e:	50                   	push   %eaxf010281e4014,185702
f010281f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010281f4015,185746
f0102825:	50                   	push   %eaxf01028254016,185805
f0102826:	68 6a 03 00 00       	push   $0x36af01028264017,185849
f010282b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010282b4018,185895
f0102831:	50                   	push   %eaxf01028314019,185954
f0102832:	e8 7a d8 ff ff       	call   f01000b1 <_panic>f01028324020,185998
f0102837:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01028374022,186113
f010283a:	8d 83 60 66 f8 ff    	lea    -0x799a0(%ebx),%eaxf010283a4023,186169
f0102840:	50                   	push   %eaxf01028404024,186228
f0102841:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01028414025,186272
f0102847:	50                   	push   %eaxf01028474026,186331
f0102848:	68 6b 03 00 00       	push   $0x36bf01028484027,186375
f010284d:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010284d4028,186421
f0102853:	50                   	push   %eaxf01028534029,186480
f0102854:	e8 58 d8 ff ff       	call   f01000b1 <_panic>f01028544030,186524
f0102859:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01028594032,186608
f010285c:	8d 83 ff 6a f8 ff    	lea    -0x79501(%ebx),%eaxf010285c4033,186664
f0102862:	50                   	push   %eaxf01028624034,186723
f0102863:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01028634035,186767
f0102869:	50                   	push   %eaxf01028694036,186826
f010286a:	68 6c 03 00 00       	push   $0x36cf010286a4037,186870
f010286f:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010286f4038,186916
f0102875:	50                   	push   %eaxf01028754039,186975
f0102876:	e8 36 d8 ff ff       	call   f01000b1 <_panic>f01028764040,187019
f010287b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010287b4042,187103
f010287e:	8d 83 59 6b f8 ff    	lea    -0x794a7(%ebx),%eaxf010287e4043,187159
f0102884:	50                   	push   %eaxf01028844044,187218
f0102885:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01028854045,187262
f010288b:	50                   	push   %eaxf010288b4046,187321
f010288c:	68 6d 03 00 00       	push   $0x36df010288c4047,187365
f0102891:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01028914048,187411
f0102897:	50                   	push   %eaxf01028974049,187470
f0102898:	e8 14 d8 ff ff       	call   f01000b1 <_panic>f01028984050,187514
f010289d:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010289d4052,187634
f01028a0:	8d 83 d8 66 f8 ff    	lea    -0x79928(%ebx),%eaxf01028a04053,187690
f01028a6:	50                   	push   %eaxf01028a64054,187749
f01028a7:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01028a74055,187793
f01028ad:	50                   	push   %eaxf01028ad4056,187852
f01028ae:	68 70 03 00 00       	push   $0x370f01028ae4057,187896
f01028b3:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01028b34058,187942
f01028b9:	50                   	push   %eaxf01028b94059,188001
f01028ba:	e8 f2 d7 ff ff       	call   f01000b1 <_panic>f01028ba4060,188045
f01028bf:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01028bf4062,188124
f01028c2:	8d 83 6a 6b f8 ff    	lea    -0x79496(%ebx),%eaxf01028c24063,188180
f01028c8:	50                   	push   %eaxf01028c84064,188239
f01028c9:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01028c94065,188283
f01028cf:	50                   	push   %eaxf01028cf4066,188342
f01028d0:	68 71 03 00 00       	push   $0x371f01028d04067,188386
f01028d5:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01028d54068,188432
f01028db:	50                   	push   %eaxf01028db4069,188491
f01028dc:	e8 d0 d7 ff ff       	call   f01000b1 <_panic>f01028dc4070,188535
f01028e1:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01028e14072,188623
f01028e4:	8d 83 76 6b f8 ff    	lea    -0x7948a(%ebx),%eaxf01028e44073,188679
f01028ea:	50                   	push   %eaxf01028ea4074,188738
f01028eb:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01028eb4075,188782
f01028f1:	50                   	push   %eaxf01028f14076,188841
f01028f2:	68 72 03 00 00       	push   $0x372f01028f24077,188885
f01028f7:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01028f74078,188931
f01028fd:	50                   	push   %eaxf01028fd4079,188990
f01028fe:	e8 ae d7 ff ff       	call   f01000b1 <_panic>f01028fe4080,189034
f0102903:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01029034082,189136
f0102906:	8d 83 b4 66 f8 ff    	lea    -0x7994c(%ebx),%eaxf01029064083,189192
f010290c:	50                   	push   %eaxf010290c4084,189251
f010290d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010290d4085,189295
f0102913:	50                   	push   %eaxf01029134086,189354
f0102914:	68 76 03 00 00       	push   $0x376f01029144087,189398
f0102919:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01029194088,189444
f010291f:	50                   	push   %eaxf010291f4089,189503
f0102920:	e8 8c d7 ff ff       	call   f01000b1 <_panic>f01029204090,189547
f0102925:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01029254092,189652
f0102928:	8d 83 10 67 f8 ff    	lea    -0x798f0(%ebx),%eaxf01029284093,189708
f010292e:	50                   	push   %eaxf010292e4094,189767
f010292f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010292f4095,189811
f0102935:	50                   	push   %eaxf01029354096,189870
f0102936:	68 77 03 00 00       	push   $0x377f01029364097,189914
f010293b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010293b4098,189960
f0102941:	50                   	push   %eaxf01029414099,190019
f0102942:	e8 6a d7 ff ff       	call   f01000b1 <_panic>f01029424100,190063
f0102947:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01029474102,190147
f010294a:	8d 83 8b 6b f8 ff    	lea    -0x79475(%ebx),%eaxf010294a4103,190203
f0102950:	50                   	push   %eaxf01029504104,190262
f0102951:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01029514105,190306
f0102957:	50                   	push   %eaxf01029574106,190365
f0102958:	68 78 03 00 00       	push   $0x378f01029584107,190409
f010295d:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010295d4108,190455
f0102963:	50                   	push   %eaxf01029634109,190514
f0102964:	e8 48 d7 ff ff       	call   f01000b1 <_panic>f01029644110,190558
f0102969:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01029694112,190642
f010296c:	8d 83 59 6b f8 ff    	lea    -0x794a7(%ebx),%eaxf010296c4113,190698
f0102972:	50                   	push   %eaxf01029724114,190757
f0102973:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01029734115,190801
f0102979:	50                   	push   %eaxf01029794116,190860
f010297a:	68 79 03 00 00       	push   $0x379f010297a4117,190904
f010297f:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010297f4118,190950
f0102985:	50                   	push   %eaxf01029854119,191009
f0102986:	e8 26 d7 ff ff       	call   f01000b1 <_panic>f01029864120,191053
f010298b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf010298b4122,191154
f010298e:	8d 83 38 67 f8 ff    	lea    -0x798c8(%ebx),%eaxf010298e4123,191210
f0102994:	50                   	push   %eaxf01029944124,191269
f0102995:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01029954125,191313
f010299b:	50                   	push   %eaxf010299b4126,191372
f010299c:	68 7c 03 00 00       	push   $0x37cf010299c4127,191416
f01029a1:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01029a14128,191462
f01029a7:	50                   	push   %eaxf01029a74129,191521
f01029a8:	e8 04 d7 ff ff       	call   f01000b1 <_panic>f01029a84130,191565
f01029ad:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01029ad4132,191647
f01029b0:	8d 83 ad 6a f8 ff    	lea    -0x79553(%ebx),%eaxf01029b04133,191703
f01029b6:	50                   	push   %eaxf01029b64134,191762
f01029b7:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01029b74135,191806
f01029bd:	50                   	push   %eaxf01029bd4136,191865
f01029be:	68 7f 03 00 00       	push   $0x37ff01029be4137,191909
f01029c3:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01029c34138,191955
f01029c9:	50                   	push   %eaxf01029c94139,192014
f01029ca:	e8 e2 d6 ff ff       	call   f01000b1 <_panic>f01029ca4140,192058
f01029cf:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01029cf4142,192165
f01029d2:	8d 83 dc 63 f8 ff    	lea    -0x79c24(%ebx),%eaxf01029d24143,192221
f01029d8:	50                   	push   %eaxf01029d84144,192280
f01029d9:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01029d94145,192324
f01029df:	50                   	push   %eaxf01029df4146,192383
f01029e0:	68 82 03 00 00       	push   $0x382f01029e04147,192427
f01029e5:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01029e54148,192473
f01029eb:	50                   	push   %eaxf01029eb4149,192532
f01029ec:	e8 c0 d6 ff ff       	call   f01000b1 <_panic>f01029ec4150,192576
f01029f1:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01029f14152,192660
f01029f4:	8d 83 10 6b f8 ff    	lea    -0x794f0(%ebx),%eaxf01029f44153,192716
f01029fa:	50                   	push   %eaxf01029fa4154,192775
f01029fb:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01029fb4155,192819
f0102a01:	50                   	push   %eaxf0102a014156,192878
f0102a02:	68 84 03 00 00       	push   $0x384f0102a024157,192922
f0102a07:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102a074158,192968
f0102a0d:	50                   	push   %eaxf0102a0d4159,193027
f0102a0e:	e8 9e d6 ff ff       	call   f01000b1 <_panic>f0102a0e4160,193071
f0102a13:	52                   	push   %edxf0102a134161,193128
f0102a14:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102a144162,193172
f0102a17:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf0102a174163,193228
f0102a1d:	50                   	push   %eaxf0102a1d4164,193287
f0102a1e:	68 8b 03 00 00       	push   $0x38bf0102a1e4165,193331
f0102a23:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102a234166,193377
f0102a29:	50                   	push   %eaxf0102a294167,193436
f0102a2a:	e8 82 d6 ff ff       	call   f01000b1 <_panic>f0102a2a4168,193480
f0102a2f:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102a2f4170,193571
f0102a32:	8d 83 9c 6b f8 ff    	lea    -0x79464(%ebx),%eaxf0102a324171,193627
f0102a38:	50                   	push   %eaxf0102a384172,193686
f0102a39:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102a394173,193730
f0102a3f:	50                   	push   %eaxf0102a3f4174,193789
f0102a40:	68 8c 03 00 00       	push   $0x38cf0102a404175,193833
f0102a45:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102a454176,193879
f0102a4b:	50                   	push   %eaxf0102a4b4177,193938
f0102a4c:	e8 60 d6 ff ff       	call   f01000b1 <_panic>f0102a4c4178,193982
f0102a51:	50                   	push   %eaxf0102a514179,194039
f0102a52:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102a524180,194083
f0102a55:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf0102a554181,194139
f0102a5b:	50                   	push   %eaxf0102a5b4182,194198
f0102a5c:	6a 56                	push   $0x56f0102a5c4183,194242
f0102a5e:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf0102a5e4184,194287
f0102a64:	50                   	push   %eaxf0102a644185,194346
f0102a65:	e8 47 d6 ff ff       	call   f01000b1 <_panic>f0102a654186,194390
f0102a6a:	52                   	push   %edxf0102a6a4187,194447
f0102a6b:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102a6b4188,194491
f0102a6e:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf0102a6e4189,194547
f0102a74:	50                   	push   %eaxf0102a744190,194606
f0102a75:	6a 56                	push   $0x56f0102a754191,194650
f0102a77:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf0102a774192,194695
f0102a7d:	50                   	push   %eaxf0102a7d4193,194754
f0102a7e:	e8 2e d6 ff ff       	call   f01000b1 <_panic>f0102a7e4194,194798
f0102a83:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102a834196,194889
f0102a86:	8d 83 b4 6b f8 ff    	lea    -0x7944c(%ebx),%eaxf0102a864197,194945
f0102a8c:	50                   	push   %eaxf0102a8c4198,195004
f0102a8d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102a8d4199,195048
f0102a93:	50                   	push   %eaxf0102a934200,195107
f0102a94:	68 96 03 00 00       	push   $0x396f0102a944201,195151
f0102a99:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102a994202,195197
f0102a9f:	50                   	push   %eaxf0102a9f4203,195256
f0102aa0:	e8 0c d6 ff ff       	call   f01000b1 <_panic>f0102aa04204,195300
f0102aa5:	50                   	push   %eaxf0102aa54206,195423
f0102aa6:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102aa64207,195467
f0102aa9:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf0102aa94208,195523
f0102aaf:	50                   	push   %eaxf0102aaf4209,195582
f0102ab0:	68 ba 00 00 00       	push   $0xbaf0102ab04210,195626
f0102ab5:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102ab54211,195671
f0102abb:	50                   	push   %eaxf0102abb4212,195730
f0102abc:	e8 f0 d5 ff ff       	call   f01000b1 <_panic>f0102abc4213,195774
f0102ac1:	50                   	push   %eaxf0102ac14214,195831
f0102ac2:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102ac24215,195875
f0102ac5:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf0102ac54216,195931
f0102acb:	50                   	push   %eaxf0102acb4217,195990
f0102acc:	68 c3 00 00 00       	push   $0xc3f0102acc4218,196034
f0102ad1:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102ad14219,196079
f0102ad7:	50                   	push   %eaxf0102ad74220,196138
f0102ad8:	e8 d4 d5 ff ff       	call   f01000b1 <_panic>f0102ad84221,196182
f0102add:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102add4222,196239
f0102ae0:	ff b3 fc ff ff ff    	pushl  -0x4(%ebx)f0102ae04223,196295
f0102ae6:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf0102ae64224,196345
f0102aec:	50                   	push   %eaxf0102aec4225,196404
f0102aed:	68 d0 00 00 00       	push   $0xd0f0102aed4226,196448
f0102af2:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102af24227,196493
f0102af8:	50                   	push   %eaxf0102af84228,196552
f0102af9:	e8 b3 d5 ff ff       	call   f01000b1 <_panic>f0102af94229,196596
f0102afe:	ff 75 c0             	pushl  -0x40(%ebp)f0102afe4230,196653
f0102b01:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102b014231,196704
f0102b04:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf0102b044232,196760
f0102b0a:	50                   	push   %eaxf0102b0a4233,196819
f0102b0b:	68 d4 02 00 00       	push   $0x2d4f0102b0b4234,196863
f0102b10:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102b104235,196909
f0102b16:	50                   	push   %eaxf0102b164236,196968
f0102b17:	e8 95 d5 ff ff       	call   f01000b1 <_panic>f0102b174237,197012
f0102b1c:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102b1c4239,197131
f0102b1f:	8d 83 5c 67 f8 ff    	lea    -0x798a4(%ebx),%eaxf0102b1f4240,197187
f0102b25:	50                   	push   %eaxf0102b254241,197246
f0102b26:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102b264242,197290
f0102b2c:	50                   	push   %eaxf0102b2c4243,197349
f0102b2d:	68 d4 02 00 00       	push   $0x2d4f0102b2d4244,197393
f0102b32:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102b324245,197439
f0102b38:	50                   	push   %eaxf0102b384246,197498
f0102b39:	e8 73 d5 ff ff       	call   f01000b1 <_panic>f0102b394247,197542
f0102b3e:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0102b3e4249,197659
f0102b41:	c7 c0 48 13 18 f0    	mov    $0xf0181348,%eaxf0102b414250,197715
f0102b47:	8b 00                	mov    (%eax),%eaxf0102b474251,197771
f0102b49:	89 45 cc             	mov    %eax,-0x34(%ebp)f0102b494252,197822
f0102b4c:	89 45 d0             	mov    %eax,-0x30(%ebp)f0102b4c4254,197909
f0102b4f:	bf 00 00 c0 ee       	mov    $0xeec00000,%edif0102b4f4255,197965
f0102b54:	8d 98 00 00 40 21    	lea    0x21400000(%eax),%ebxf0102b544256,198021
f0102b5a:	89 fa                	mov    %edi,%edxf0102b5a4257,198082
f0102b5c:	89 f0                	mov    %esi,%eaxf0102b5c4258,198131
f0102b5e:	e8 10 e0 ff ff       	call   f0100b73 <check_va2pa>f0102b5e4259,198180
f0102b63:	81 7d d0 ff ff ff ef 	cmpl   $0xefffffff,-0x30(%ebp)f0102b634260,198242
f0102b6a:	76 22                	jbe    f0102b8e <mem_init+0x178f>f0102b6a4261,198305
f0102b6c:	8d 14 3b             	lea    (%ebx,%edi,1),%edxf0102b6c4262,198371
f0102b6f:	39 d0                	cmp    %edx,%eaxf0102b6f4263,198429
f0102b71:	75 39                	jne    f0102bac <mem_init+0x17ad>f0102b714264,198478
f0102b73:	81 c7 00 10 00 00    	add    $0x1000,%edif0102b734265,198544
f0102b79:	81 ff 00 80 c1 ee    	cmp    $0xeec18000,%edif0102b794267,198629
f0102b7f:	75 d9                	jne    f0102b5a <mem_init+0x175b>f0102b7f4268,198685
f0102b81:	8b 7d c4             	mov    -0x3c(%ebp),%edif0102b814270,198798
f0102b84:	c1 e7 0c             	shl    $0xc,%edif0102b844271,198854
f0102b87:	bb 00 00 00 00       	mov    $0x0,%ebxf0102b874272,198903
f0102b8c:	eb 57                	jmp    f0102be5 <mem_init+0x17e6>f0102b8c4273,198952
f0102b8e:	ff 75 cc             	pushl  -0x34(%ebp)f0102b8e4275,199084
f0102b91:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102b914276,199135
f0102b94:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf0102b944277,199191
f0102b9a:	50                   	push   %eaxf0102b9a4278,199250
f0102b9b:	68 d9 02 00 00       	push   $0x2d9f0102b9b4279,199294
f0102ba0:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102ba04280,199340
f0102ba6:	50                   	push   %eaxf0102ba64281,199399
f0102ba7:	e8 05 d5 ff ff       	call   f01000b1 <_panic>f0102ba74282,199443
f0102bac:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102bac4284,199560
f0102baf:	8d 83 90 67 f8 ff    	lea    -0x79870(%ebx),%eaxf0102baf4285,199616
f0102bb5:	50                   	push   %eaxf0102bb54286,199675
f0102bb6:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102bb64287,199719
f0102bbc:	50                   	push   %eaxf0102bbc4288,199778
f0102bbd:	68 d9 02 00 00       	push   $0x2d9f0102bbd4289,199822
f0102bc2:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102bc24290,199868
f0102bc8:	50                   	push   %eaxf0102bc84291,199927
f0102bc9:	e8 e3 d4 ff ff       	call   f01000b1 <_panic>f0102bc94292,199971
f0102bce:	8d 93 00 00 00 f0    	lea    -0x10000000(%ebx),%edxf0102bce4294,200077
f0102bd4:	89 f0                	mov    %esi,%eaxf0102bd44295,200139
f0102bd6:	e8 98 df ff ff       	call   f0100b73 <check_va2pa>f0102bd64296,200188
f0102bdb:	39 c3                	cmp    %eax,%ebxf0102bdb4297,200250
f0102bdd:	75 51                	jne    f0102c30 <mem_init+0x1831>f0102bdd4298,200299
f0102bdf:	81 c3 00 10 00 00    	add    $0x1000,%ebxf0102bdf4300,200412
f0102be5:	39 fb                	cmp    %edi,%ebxf0102be54301,200464
f0102be7:	72 e5                	jb     f0102bce <mem_init+0x17cf>f0102be74302,200513
f0102be9:	bb 00 80 ff ef       	mov    $0xefff8000,%ebxf0102be94303,200579
f0102bee:	8b 7d c8             	mov    -0x38(%ebp),%edif0102bee4305,200715
f0102bf1:	81 c7 00 80 00 20    	add    $0x20008000,%edif0102bf14306,200771
f0102bf7:	89 da                	mov    %ebx,%edxf0102bf74307,200827
f0102bf9:	89 f0                	mov    %esi,%eaxf0102bf94308,200876
f0102bfb:	e8 73 df ff ff       	call   f0100b73 <check_va2pa>f0102bfb4309,200925
f0102c00:	8d 14 1f             	lea    (%edi,%ebx,1),%edxf0102c004310,200987
f0102c03:	39 c2                	cmp    %eax,%edxf0102c034311,201045
f0102c05:	75 4b                	jne    f0102c52 <mem_init+0x1853>f0102c054312,201094
f0102c07:	81 c3 00 10 00 00    	add    $0x1000,%ebxf0102c074313,201160
f0102c0d:	81 fb 00 00 00 f0    	cmp    $0xf0000000,%ebxf0102c0d4315,201252
f0102c13:	75 e2                	jne    f0102bf7 <mem_init+0x17f8>f0102c134316,201308
f0102c15:	ba 00 00 c0 ef       	mov    $0xefc00000,%edxf0102c154318,201429
f0102c1a:	89 f0                	mov    %esi,%eaxf0102c1a4319,201485
f0102c1c:	e8 52 df ff ff       	call   f0100b73 <check_va2pa>f0102c1c4320,201534
f0102c21:	83 f8 ff             	cmp    $0xffffffff,%eaxf0102c214321,201596
f0102c24:	75 4e                	jne    f0102c74 <mem_init+0x1875>f0102c244322,201652
f0102c26:	b8 00 00 00 00       	mov    $0x0,%eaxf0102c264324,201754
f0102c2b:	e9 8f 00 00 00       	jmp    f0102cbf <mem_init+0x18c0>f0102c2b4325,201803
f0102c30:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102c304327,201918
f0102c33:	8d 83 c4 67 f8 ff    	lea    -0x7983c(%ebx),%eaxf0102c334328,201974
f0102c39:	50                   	push   %eaxf0102c394329,202033
f0102c3a:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102c3a4330,202077
f0102c40:	50                   	push   %eaxf0102c404331,202136
f0102c41:	68 dd 02 00 00       	push   $0x2ddf0102c414332,202180
f0102c46:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102c464333,202226
f0102c4c:	50                   	push   %eaxf0102c4c4334,202285
f0102c4d:	e8 5f d4 ff ff       	call   f01000b1 <_panic>f0102c4d4335,202329
f0102c52:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102c524337,202466
f0102c55:	8d 83 ec 67 f8 ff    	lea    -0x79814(%ebx),%eaxf0102c554338,202522
f0102c5b:	50                   	push   %eaxf0102c5b4339,202581
f0102c5c:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102c5c4340,202625
f0102c62:	50                   	push   %eaxf0102c624341,202684
f0102c63:	68 e1 02 00 00       	push   $0x2e1f0102c634342,202728
f0102c68:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102c684343,202774
f0102c6e:	50                   	push   %eaxf0102c6e4344,202833
f0102c6f:	e8 3d d4 ff ff       	call   f01000b1 <_panic>f0102c6f4345,202877
f0102c74:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102c744347,202989
f0102c77:	8d 83 34 68 f8 ff    	lea    -0x797cc(%ebx),%eaxf0102c774348,203045
f0102c7d:	50                   	push   %eaxf0102c7d4349,203104
f0102c7e:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102c7e4350,203148
f0102c84:	50                   	push   %eaxf0102c844351,203207
f0102c85:	68 e2 02 00 00       	push   $0x2e2f0102c854352,203251
f0102c8a:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102c8a4353,203297
f0102c90:	50                   	push   %eaxf0102c904354,203356
f0102c91:	e8 1b d4 ff ff       	call   f01000b1 <_panic>f0102c914355,203400
f0102c96:	f6 04 86 01          	testb  $0x1,(%esi,%eax,4)f0102c964357,203486
f0102c9a:	74 52                	je     f0102cee <mem_init+0x18ef>f0102c9a4358,203544
f0102c9c:	83 c0 01             	add    $0x1,%eaxf0102c9c4360,203646
f0102c9f:	3d ff 03 00 00       	cmp    $0x3ff,%eaxf0102c9f4361,203695
f0102ca4:	0f 87 bb 00 00 00    	ja     f0102d65 <mem_init+0x1966>f0102ca44362,203746
f0102caa:	3d bb 03 00 00       	cmp    $0x3bb,%eaxf0102caa4364,203827
f0102caf:	72 0e                	jb     f0102cbf <mem_init+0x18c0>f0102caf4365,203878
f0102cb1:	3d bd 03 00 00       	cmp    $0x3bd,%eaxf0102cb14366,203944
f0102cb6:	76 de                	jbe    f0102c96 <mem_init+0x1897>f0102cb64367,203995
f0102cb8:	3d bf 03 00 00       	cmp    $0x3bf,%eaxf0102cb84368,204061
f0102cbd:	74 d7                	je     f0102c96 <mem_init+0x1897>f0102cbd4369,204112
f0102cbf:	3d bf 03 00 00       	cmp    $0x3bf,%eaxf0102cbf4371,204207
f0102cc4:	77 4a                	ja     f0102d10 <mem_init+0x1911>f0102cc44372,204258
f0102cc6:	83 3c 86 00          	cmpl   $0x0,(%esi,%eax,4)f0102cc64374,204351
f0102cca:	74 d0                	je     f0102c9c <mem_init+0x189d>f0102cca4375,204409
f0102ccc:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102ccc4376,204475
f0102ccf:	8d 83 06 6c f8 ff    	lea    -0x793fa(%ebx),%eaxf0102ccf4377,204531
f0102cd5:	50                   	push   %eaxf0102cd54378,204590
f0102cd6:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102cd64379,204634
f0102cdc:	50                   	push   %eaxf0102cdc4380,204693
f0102cdd:	68 f2 02 00 00       	push   $0x2f2f0102cdd4381,204737
f0102ce2:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102ce24382,204783
f0102ce8:	50                   	push   %eaxf0102ce84383,204842
f0102ce9:	e8 c3 d3 ff ff       	call   f01000b1 <_panic>f0102ce94384,204886
f0102cee:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102cee4386,204972
f0102cf1:	8d 83 e4 6b f8 ff    	lea    -0x7941c(%ebx),%eaxf0102cf14387,205028
f0102cf7:	50                   	push   %eaxf0102cf74388,205087
f0102cf8:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102cf84389,205131
f0102cfe:	50                   	push   %eaxf0102cfe4390,205190
f0102cff:	68 eb 02 00 00       	push   $0x2ebf0102cff4391,205234
f0102d04:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102d044392,205280
f0102d0a:	50                   	push   %eaxf0102d0a4393,205339
f0102d0b:	e8 a1 d3 ff ff       	call   f01000b1 <_panic>f0102d0b4394,205383
f0102d10:	8b 14 86             	mov    (%esi,%eax,4),%edxf0102d104396,205470
f0102d13:	f6 c2 01             	test   $0x1,%dlf0102d134397,205528
f0102d16:	74 2b                	je     f0102d43 <mem_init+0x1944>f0102d164398,205576
f0102d18:	f6 c2 02             	test   $0x2,%dlf0102d184400,205672
f0102d1b:	0f 85 7b ff ff ff    	jne    f0102c9c <mem_init+0x189d>f0102d1b4401,205720
f0102d21:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102d214402,205786
f0102d24:	8d 83 f5 6b f8 ff    	lea    -0x7940b(%ebx),%eaxf0102d244403,205842
f0102d2a:	50                   	push   %eaxf0102d2a4404,205901
f0102d2b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102d2b4405,205945
f0102d31:	50                   	push   %eaxf0102d314406,206004
f0102d32:	68 f0 02 00 00       	push   $0x2f0f0102d324407,206048
f0102d37:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102d374408,206094
f0102d3d:	50                   	push   %eaxf0102d3d4409,206153
f0102d3e:	e8 6e d3 ff ff       	call   f01000b1 <_panic>f0102d3e4410,206197
f0102d43:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102d434412,206284
f0102d46:	8d 83 e4 6b f8 ff    	lea    -0x7941c(%ebx),%eaxf0102d464413,206340
f0102d4c:	50                   	push   %eaxf0102d4c4414,206399
f0102d4d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102d4d4415,206443
f0102d53:	50                   	push   %eaxf0102d534416,206502
f0102d54:	68 ef 02 00 00       	push   $0x2eff0102d544417,206546
f0102d59:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102d594418,206592
f0102d5f:	50                   	push   %eaxf0102d5f4419,206651
f0102d60:	e8 4c d3 ff ff       	call   f01000b1 <_panic>f0102d604420,206695
f0102d65:	83 ec 0c             	sub    $0xc,%espf0102d654422,206797
f0102d68:	8b 75 d4             	mov    -0x2c(%ebp),%esif0102d684423,206846
f0102d6b:	8d 86 64 68 f8 ff    	lea    -0x7979c(%esi),%eaxf0102d6b4424,206902
f0102d71:	50                   	push   %eaxf0102d714425,206961
f0102d72:	89 f3                	mov    %esi,%ebxf0102d724426,207005
f0102d74:	e8 a1 09 00 00       	call   f010371a <cprintf>f0102d744427,207054
f0102d79:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0102d794429,207138
f0102d7f:	8b 00                	mov    (%eax),%eaxf0102d7f4430,207194
f0102d81:	83 c4 10             	add    $0x10,%espf0102d814432,207276
f0102d84:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf0102d844433,207326
f0102d89:	0f 86 44 02 00 00    	jbe    f0102fd3 <mem_init+0x1bd4>f0102d894434,207382
f0102d8f:	05 00 00 00 10       	add    $0x10000000,%eaxf0102d8f4436,207484
static inline voidstatic4439,207543
f0102d94:	0f 22 d8             	mov    %eax,%cr3f0102d944443,207629
f0102d97:	b8 00 00 00 00       	mov    $0x0,%eaxf0102d974445,207704
f0102d9c:	e8 4f de ff ff       	call   f0100bf0 <check_page_free_list>f0102d9c4446,207753
f0102da1:	0f 20 c0             	mov    %cr0,%eaxf0102da14448,207869
f0102da4:	83 e0 f3             	and    $0xfffffff3,%eaxf0102da44450,207944
f0102da7:	0d 23 00 05 80       	or     $0x80050023,%eaxf0102da74451,208000
f0102dac:	0f 22 c0             	mov    %eax,%cr0f0102dac4453,208102
	pp1 = pp2 = 0;pp14458,208228
f0102daf:	83 ec 0c             	sub    $0xc,%espf0102daf4460,208276
f0102db2:	6a 00                	push   $0x0f0102db24461,208325
f0102db4:	e8 ac e2 ff ff       	call   f0101065 <page_alloc>f0102db44462,208369
f0102db9:	89 c6                	mov    %eax,%esif0102db94463,208430
f0102dbb:	83 c4 10             	add    $0x10,%espf0102dbb4464,208479
f0102dbe:	85 c0                	test   %eax,%eaxf0102dbe4465,208529
f0102dc0:	0f 84 29 02 00 00    	je     f0102fef <mem_init+0x1bf0>f0102dc04466,208578
f0102dc6:	83 ec 0c             	sub    $0xc,%espf0102dc64468,208676
f0102dc9:	6a 00                	push   $0x0f0102dc94469,208725
f0102dcb:	e8 95 e2 ff ff       	call   f0101065 <page_alloc>f0102dcb4470,208769
f0102dd0:	89 45 d0             	mov    %eax,-0x30(%ebp)f0102dd04471,208830
f0102dd3:	83 c4 10             	add    $0x10,%espf0102dd34472,208886
f0102dd6:	85 c0                	test   %eax,%eaxf0102dd64473,208936
f0102dd8:	0f 84 33 02 00 00    	je     f0103011 <mem_init+0x1c12>f0102dd84474,208985
f0102dde:	83 ec 0c             	sub    $0xc,%espf0102dde4476,209083
f0102de1:	6a 00                	push   $0x0f0102de14477,209132
f0102de3:	e8 7d e2 ff ff       	call   f0101065 <page_alloc>f0102de34478,209176
f0102de8:	89 c7                	mov    %eax,%edif0102de84479,209237
f0102dea:	83 c4 10             	add    $0x10,%espf0102dea4480,209286
f0102ded:	85 c0                	test   %eax,%eaxf0102ded4481,209336
f0102def:	0f 84 3e 02 00 00    	je     f0103033 <mem_init+0x1c34>f0102def4482,209385
f0102df5:	83 ec 0c             	sub    $0xc,%espf0102df54484,209468
f0102df8:	56                   	push   %esif0102df84485,209517
f0102df9:	e8 f5 e2 ff ff       	call   f01010f3 <page_free>f0102df94486,209561
f0102dfe:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102dfe4488,209654
f0102e01:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0102e014489,209710
f0102e07:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0102e074490,209766
f0102e0a:	2b 08                	sub    (%eax),%ecxf0102e0a4491,209822
f0102e0c:	89 c8                	mov    %ecx,%eaxf0102e0c4492,209873
f0102e0e:	c1 f8 03             	sar    $0x3,%eaxf0102e0e4493,209922
f0102e11:	c1 e0 0c             	shl    $0xc,%eaxf0102e114494,209971
f0102e14:	89 c1                	mov    %eax,%ecxf0102e144496,210046
f0102e16:	c1 e9 0c             	shr    $0xc,%ecxf0102e164497,210095
f0102e19:	83 c4 10             	add    $0x10,%espf0102e194498,210144
f0102e1c:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf0102e1c4499,210194
f0102e22:	3b 0a                	cmp    (%edx),%ecxf0102e224500,210250
f0102e24:	0f 83 2b 02 00 00    	jae    f0103055 <mem_init+0x1c56>f0102e244501,210301
f0102e2a:	83 ec 04             	sub    $0x4,%espf0102e2a4503,210402
f0102e2d:	68 00 10 00 00       	push   $0x1000f0102e2d4504,210451
f0102e32:	6a 01                	push   $0x1f0102e324505,210498
f0102e34:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0102e344507,210575
f0102e39:	50                   	push   %eaxf0102e394508,210631
f0102e3a:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102e3a4509,210675
f0102e3d:	e8 b2 18 00 00       	call   f01046f4 <memset>f0102e3d4510,210731
f0102e42:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102e424512,210821
f0102e45:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0102e454513,210877
f0102e4b:	89 f9                	mov    %edi,%ecxf0102e4b4514,210933
f0102e4d:	2b 08                	sub    (%eax),%ecxf0102e4d4515,210982
f0102e4f:	89 c8                	mov    %ecx,%eaxf0102e4f4516,211033
f0102e51:	c1 f8 03             	sar    $0x3,%eaxf0102e514517,211082
f0102e54:	c1 e0 0c             	shl    $0xc,%eaxf0102e544518,211131
f0102e57:	89 c1                	mov    %eax,%ecxf0102e574520,211206
f0102e59:	c1 e9 0c             	shr    $0xc,%ecxf0102e594521,211255
f0102e5c:	83 c4 10             	add    $0x10,%espf0102e5c4522,211304
f0102e5f:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf0102e5f4523,211354
f0102e65:	3b 0a                	cmp    (%edx),%ecxf0102e654524,211410
f0102e67:	0f 83 fe 01 00 00    	jae    f010306b <mem_init+0x1c6c>f0102e674525,211461
f0102e6d:	83 ec 04             	sub    $0x4,%espf0102e6d4527,211562
f0102e70:	68 00 10 00 00       	push   $0x1000f0102e704528,211611
f0102e75:	6a 02                	push   $0x2f0102e754529,211658
f0102e77:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0102e774531,211735
f0102e7c:	50                   	push   %eaxf0102e7c4532,211791
f0102e7d:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102e7d4533,211835
f0102e80:	e8 6f 18 00 00       	call   f01046f4 <memset>f0102e804534,211891
f0102e85:	6a 02                	push   $0x2f0102e854536,212002
f0102e87:	68 00 10 00 00       	push   $0x1000f0102e874537,212046
f0102e8c:	8b 5d d0             	mov    -0x30(%ebp),%ebxf0102e8c4538,212093
f0102e8f:	53                   	push   %ebxf0102e8f4539,212149
f0102e90:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0102e904540,212193
f0102e93:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0102e934541,212249
f0102e99:	ff 30                	pushl  (%eax)f0102e994542,212305
f0102e9b:	e8 ee e4 ff ff       	call   f010138e <page_insert>f0102e9b4543,212351
f0102ea0:	83 c4 20             	add    $0x20,%espf0102ea04545,212440
f0102ea3:	66 83 7b 04 01       	cmpw   $0x1,0x4(%ebx)f0102ea34546,212490
f0102ea8:	0f 85 d3 01 00 00    	jne    f0103081 <mem_init+0x1c82>f0102ea84547,212544
f0102eae:	81 3d 00 10 00 00 01 	cmpl   $0x1010101,0x1000f0102eae4549,212655
f0102eb5:	01 01 01 f0102eb54550,212712
f0102eb8:	0f 85 e5 01 00 00    	jne    f01030a3 <mem_init+0x1ca4>f0102eb84551,212732
f0102ebe:	6a 02                	push   $0x2f0102ebe4553,212852
f0102ec0:	68 00 10 00 00       	push   $0x1000f0102ec04554,212896
f0102ec5:	57                   	push   %edif0102ec54555,212943
f0102ec6:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0102ec64556,212987
f0102ec9:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0102ec94557,213043
f0102ecf:	ff 30                	pushl  (%eax)f0102ecf4558,213099
f0102ed1:	e8 b8 e4 ff ff       	call   f010138e <page_insert>f0102ed14559,213145
f0102ed6:	83 c4 10             	add    $0x10,%espf0102ed64561,213252
f0102ed9:	81 3d 00 10 00 00 02 	cmpl   $0x2020202,0x1000f0102ed94562,213302
f0102ee0:	02 02 02 f0102ee04563,213359
f0102ee3:	0f 85 dc 01 00 00    	jne    f01030c5 <mem_init+0x1cc6>f0102ee34564,213379
f0102ee9:	66 83 7f 04 01       	cmpw   $0x1,0x4(%edi)f0102ee94566,213472
f0102eee:	0f 85 f3 01 00 00    	jne    f01030e7 <mem_init+0x1ce8>f0102eee4567,213526
f0102ef4:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0102ef44569,213619
f0102ef7:	66 83 78 04 00       	cmpw   $0x0,0x4(%eax)f0102ef74570,213675
f0102efc:	0f 85 07 02 00 00    	jne    f0103109 <mem_init+0x1d0a>f0102efc4571,213729
f0102f02:	c7 05 00 10 00 00 03 	movl   $0x3030303,0x1000f0102f024573,213831
f0102f09:	03 03 03 f0102f094574,213888
f0102f0c:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102f0c4576,213941
f0102f0f:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0102f0f4577,213997
f0102f15:	89 f9                	mov    %edi,%ecxf0102f154578,214053
f0102f17:	2b 08                	sub    (%eax),%ecxf0102f174579,214102
f0102f19:	89 c8                	mov    %ecx,%eaxf0102f194580,214153
f0102f1b:	c1 f8 03             	sar    $0x3,%eaxf0102f1b4581,214202
f0102f1e:	c1 e0 0c             	shl    $0xc,%eaxf0102f1e4582,214251
f0102f21:	89 c1                	mov    %eax,%ecxf0102f214584,214326
f0102f23:	c1 e9 0c             	shr    $0xc,%ecxf0102f234585,214375
f0102f26:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf0102f264586,214424
f0102f2c:	3b 0a                	cmp    (%edx),%ecxf0102f2c4587,214480
f0102f2e:	0f 83 f7 01 00 00    	jae    f010312b <mem_init+0x1d2c>f0102f2e4588,214531
f0102f34:	81 b8 00 00 00 f0 03 	cmpl   $0x3030303,-0x10000000(%eax)f0102f344590,214649
f0102f3b:	03 03 03 f0102f3b4591,214717
f0102f3e:	0f 85 fd 01 00 00    	jne    f0103141 <mem_init+0x1d42>f0102f3e4592,214737
f0102f44:	83 ec 08             	sub    $0x8,%espf0102f444594,214845
f0102f47:	68 00 10 00 00       	push   $0x1000f0102f474595,214894
f0102f4c:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0102f4c4596,214941
f0102f4f:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0102f4f4597,214997
f0102f55:	ff 30                	pushl  (%eax)f0102f554598,215053
f0102f57:	e8 df e3 ff ff       	call   f010133b <page_remove>f0102f574599,215099
f0102f5c:	83 c4 10             	add    $0x10,%espf0102f5c4601,215188
f0102f5f:	66 83 7f 04 00       	cmpw   $0x0,0x4(%edi)f0102f5f4602,215238
f0102f64:	0f 85 f9 01 00 00    	jne    f0103163 <mem_init+0x1d64>f0102f644603,215292
f0102f6a:	8b 7d d4             	mov    -0x2c(%ebp),%edif0102f6a4607,215436
f0102f6d:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf0102f6d4608,215492
f0102f73:	8b 08                	mov    (%eax),%ecxf0102f734609,215548
f0102f75:	8b 11                	mov    (%ecx),%edxf0102f754610,215599
f0102f77:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf0102f774611,215650
f0102f7d:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf0102f7d4613,215739
f0102f83:	89 f7                	mov    %esi,%edif0102f834614,215795
f0102f85:	2b 38                	sub    (%eax),%edif0102f854615,215844
f0102f87:	89 f8                	mov    %edi,%eaxf0102f874616,215895
f0102f89:	c1 f8 03             	sar    $0x3,%eaxf0102f894617,215944
f0102f8c:	c1 e0 0c             	shl    $0xc,%eaxf0102f8c4618,215993
f0102f8f:	39 c2                	cmp    %eax,%edxf0102f8f4619,216042
f0102f91:	0f 85 ee 01 00 00    	jne    f0103185 <mem_init+0x1d86>f0102f914620,216091
f0102f97:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)f0102f974622,216177
f0102f9d:	66 83 7e 04 01       	cmpw   $0x1,0x4(%esi)f0102f9d4624,216255
f0102fa2:	0f 85 ff 01 00 00    	jne    f01031a7 <mem_init+0x1da8>f0102fa24625,216309
f0102fa8:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f0102fa84627,216393
f0102fae:	83 ec 0c             	sub    $0xc,%espf0102fae4631,216492
f0102fb1:	56                   	push   %esif0102fb14632,216541
f0102fb2:	e8 3c e1 ff ff       	call   f01010f3 <page_free>f0102fb24633,216585
f0102fb7:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102fb74636,216701
f0102fba:	8d 83 f8 68 f8 ff    	lea    -0x79708(%ebx),%eaxf0102fba4637,216757
f0102fc0:	89 04 24             	mov    %eax,(%esp)f0102fc04638,216816
f0102fc3:	e8 52 07 00 00       	call   f010371a <cprintf>f0102fc34639,216867
f0102fc8:	83 c4 10             	add    $0x10,%espf0102fc84641,216927
f0102fcb:	8d 65 f4             	lea    -0xc(%ebp),%espf0102fcb4642,216977
f0102fce:	5b                   	pop    %ebxf0102fce4643,217032
f0102fcf:	5e                   	pop    %esif0102fcf4644,217076
f0102fd0:	5f                   	pop    %edif0102fd04645,217120
f0102fd1:	5d                   	pop    %ebpf0102fd14646,217164
f0102fd2:	c3                   	ret    f0102fd24647,217208
f0102fd3:	50                   	push   %eaxf0102fd34649,217314
f0102fd4:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102fd44650,217358
f0102fd7:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf0102fd74651,217414
f0102fdd:	50                   	push   %eaxf0102fdd4652,217473
f0102fde:	68 e7 00 00 00       	push   $0xe7f0102fde4653,217517
f0102fe3:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf0102fe34654,217562
f0102fe9:	50                   	push   %eaxf0102fe94655,217621
f0102fea:	e8 c2 d0 ff ff       	call   f01000b1 <_panic>f0102fea4656,217665
f0102fef:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0102fef4658,217754
f0102ff2:	8d 83 02 6a f8 ff    	lea    -0x795fe(%ebx),%eaxf0102ff24659,217810
f0102ff8:	50                   	push   %eaxf0102ff84660,217869
f0102ff9:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0102ff94661,217913
f0102fff:	50                   	push   %eaxf0102fff4662,217972
f0103000:	68 b1 03 00 00       	push   $0x3b1f01030004663,218016
f0103005:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01030054664,218062
f010300b:	50                   	push   %eaxf010300b4665,218121
f010300c:	e8 a0 d0 ff ff       	call   f01000b1 <_panic>f010300c4666,218165
f0103011:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01030114668,218254
f0103014:	8d 83 18 6a f8 ff    	lea    -0x795e8(%ebx),%eaxf01030144669,218310
f010301a:	50                   	push   %eaxf010301a4670,218369
f010301b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010301b4671,218413
f0103021:	50                   	push   %eaxf01030214672,218472
f0103022:	68 b2 03 00 00       	push   $0x3b2f01030224673,218516
f0103027:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01030274674,218562
f010302d:	50                   	push   %eaxf010302d4675,218621
f010302e:	e8 7e d0 ff ff       	call   f01000b1 <_panic>f010302e4676,218665
f0103033:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01030334678,218754
f0103036:	8d 83 2e 6a f8 ff    	lea    -0x795d2(%ebx),%eaxf01030364679,218810
f010303c:	50                   	push   %eaxf010303c4680,218869
f010303d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010303d4681,218913
f0103043:	50                   	push   %eaxf01030434682,218972
f0103044:	68 b3 03 00 00       	push   $0x3b3f01030444683,219016
f0103049:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01030494684,219062
f010304f:	50                   	push   %eaxf010304f4685,219121
f0103050:	e8 5c d0 ff ff       	call   f01000b1 <_panic>f01030504686,219165
f0103055:	50                   	push   %eaxf01030554688,219286
f0103056:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf01030564689,219330
f010305c:	50                   	push   %eaxf010305c4690,219389
f010305d:	6a 56                	push   $0x56f010305d4691,219433
f010305f:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf010305f4692,219478
f0103065:	50                   	push   %eaxf01030654693,219537
f0103066:	e8 46 d0 ff ff       	call   f01000b1 <_panic>f01030664694,219581
f010306b:	50                   	push   %eaxf010306b4695,219638
f010306c:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf010306c4696,219682
f0103072:	50                   	push   %eaxf01030724697,219741
f0103073:	6a 56                	push   $0x56f01030734698,219785
f0103075:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf01030754699,219830
f010307b:	50                   	push   %eaxf010307b4700,219889
f010307c:	e8 30 d0 ff ff       	call   f01000b1 <_panic>f010307c4701,219933
f0103081:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01030814703,220017
f0103084:	8d 83 ff 6a f8 ff    	lea    -0x79501(%ebx),%eaxf01030844704,220073
f010308a:	50                   	push   %eaxf010308a4705,220132
f010308b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010308b4706,220176
f0103091:	50                   	push   %eaxf01030914707,220235
f0103092:	68 b8 03 00 00       	push   $0x3b8f01030924708,220279
f0103097:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01030974709,220325
f010309d:	50                   	push   %eaxf010309d4710,220384
f010309e:	e8 0e d0 ff ff       	call   f01000b1 <_panic>f010309e4711,220428
f01030a3:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01030a34713,220530
f01030a6:	8d 83 84 68 f8 ff    	lea    -0x7977c(%ebx),%eaxf01030a64714,220586
f01030ac:	50                   	push   %eaxf01030ac4715,220645
f01030ad:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01030ad4716,220689
f01030b3:	50                   	push   %eaxf01030b34717,220748
f01030b4:	68 b9 03 00 00       	push   $0x3b9f01030b44718,220792
f01030b9:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01030b94719,220838
f01030bf:	50                   	push   %eaxf01030bf4720,220897
f01030c0:	e8 ec cf ff ff       	call   f01000b1 <_panic>f01030c04721,220941
f01030c5:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01030c54723,221043
f01030c8:	8d 83 a8 68 f8 ff    	lea    -0x79758(%ebx),%eaxf01030c84724,221099
f01030ce:	50                   	push   %eaxf01030ce4725,221158
f01030cf:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01030cf4726,221202
f01030d5:	50                   	push   %eaxf01030d54727,221261
f01030d6:	68 bb 03 00 00       	push   $0x3bbf01030d64728,221305
f01030db:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01030db4729,221351
f01030e1:	50                   	push   %eaxf01030e14730,221410
f01030e2:	e8 ca cf ff ff       	call   f01000b1 <_panic>f01030e24731,221454
f01030e7:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01030e74733,221538
f01030ea:	8d 83 21 6b f8 ff    	lea    -0x794df(%ebx),%eaxf01030ea4734,221594
f01030f0:	50                   	push   %eaxf01030f04735,221653
f01030f1:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01030f14736,221697
f01030f7:	50                   	push   %eaxf01030f74737,221756
f01030f8:	68 bc 03 00 00       	push   $0x3bcf01030f84738,221800
f01030fd:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01030fd4739,221846
f0103103:	50                   	push   %eaxf01031034740,221905
f0103104:	e8 a8 cf ff ff       	call   f01000b1 <_panic>f01031044741,221949
f0103109:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01031094743,222033
f010310c:	8d 83 8b 6b f8 ff    	lea    -0x79475(%ebx),%eaxf010310c4744,222089
f0103112:	50                   	push   %eaxf01031124745,222148
f0103113:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01031134746,222192
f0103119:	50                   	push   %eaxf01031194747,222251
f010311a:	68 bd 03 00 00       	push   $0x3bdf010311a4748,222295
f010311f:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010311f4749,222341
f0103125:	50                   	push   %eaxf01031254750,222400
f0103126:	e8 86 cf ff ff       	call   f01000b1 <_panic>f01031264751,222444
f010312b:	50                   	push   %eaxf010312b4752,222501
f010312c:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf010312c4753,222545
f0103132:	50                   	push   %eaxf01031324754,222604
f0103133:	6a 56                	push   $0x56f01031334755,222648
f0103135:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf01031354756,222693
f010313b:	50                   	push   %eaxf010313b4757,222752
f010313c:	e8 70 cf ff ff       	call   f01000b1 <_panic>f010313c4758,222796
f0103141:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01031414760,222905
f0103144:	8d 83 cc 68 f8 ff    	lea    -0x79734(%ebx),%eaxf01031444761,222961
f010314a:	50                   	push   %eaxf010314a4762,223020
f010314b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010314b4763,223064
f0103151:	50                   	push   %eaxf01031514764,223123
f0103152:	68 bf 03 00 00       	push   $0x3bff01031524765,223167
f0103157:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01031574766,223213
f010315d:	50                   	push   %eaxf010315d4767,223272
f010315e:	e8 4e cf ff ff       	call   f01000b1 <_panic>f010315e4768,223316
f0103163:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01031634770,223400
f0103166:	8d 83 59 6b f8 ff    	lea    -0x794a7(%ebx),%eaxf01031664771,223456
f010316c:	50                   	push   %eaxf010316c4772,223515
f010316d:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010316d4773,223559
f0103173:	50                   	push   %eaxf01031734774,223618
f0103174:	68 c1 03 00 00       	push   $0x3c1f01031744775,223662
f0103179:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01031794776,223708
f010317f:	50                   	push   %eaxf010317f4777,223767
f0103180:	e8 2c cf ff ff       	call   f01000b1 <_panic>f01031804778,223811
f0103185:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01031854780,223918
f0103188:	8d 83 dc 63 f8 ff    	lea    -0x79c24(%ebx),%eaxf01031884781,223974
f010318e:	50                   	push   %eaxf010318e4782,224033
f010318f:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf010318f4783,224077
f0103195:	50                   	push   %eaxf01031954784,224136
f0103196:	68 c4 03 00 00       	push   $0x3c4f01031964785,224180
f010319b:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf010319b4786,224226
f01031a1:	50                   	push   %eaxf01031a14787,224285
f01031a2:	e8 0a cf ff ff       	call   f01000b1 <_panic>f01031a24788,224329
f01031a7:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01031a74790,224413
f01031aa:	8d 83 10 6b f8 ff    	lea    -0x794f0(%ebx),%eaxf01031aa4791,224469
f01031b0:	50                   	push   %eaxf01031b04792,224528
f01031b1:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf01031b14793,224572
f01031b7:	50                   	push   %eaxf01031b74794,224631
f01031b8:	68 c6 03 00 00       	push   $0x3c6f01031b84795,224675
f01031bd:	8d 83 21 69 f8 ff    	lea    -0x796df(%ebx),%eaxf01031bd4796,224721
f01031c3:	50                   	push   %eaxf01031c34797,224780
f01031c4:	e8 e8 ce ff ff       	call   f01000b1 <_panic>f01031c44798,224824
f01031c9 <tlb_invalidate>:f01031c94800,224882
f01031c9:	55                   	push   %ebpf01031c94802,224911
f01031ca:	89 e5                	mov    %esp,%ebpf01031ca4803,224955
f01031cc:	8b 45 0c             	mov    0xc(%ebp),%eaxf01031cc4805,225060
f01031cf:	0f 01 38             	invlpg (%eax)f01031cf4806,225114
f01031d2:	5d                   	pop    %ebpf01031d24808,225162
f01031d3:	c3                   	ret    f01031d34809,225206
f01031d4 <user_mem_check>:f01031d44811,225247
f01031d4:	55                   	push   %ebpf01031d44813,225276
f01031d5:	89 e5                	mov    %esp,%ebpf01031d54814,225320
f01031d7:	b8 00 00 00 00       	mov    $0x0,%eaxf01031d74816,225371
f01031dc:	5d                   	pop    %ebpf01031dc4817,225420
f01031dd:	c3                   	ret    f01031dd4818,225464
f01031de <user_mem_assert>:f01031de4820,225505
f01031de:	55                   	push   %ebpf01031de4822,225535
f01031df:	89 e5                	mov    %esp,%ebpf01031df4823,225579
f01031e1:	5d                   	pop    %ebpf01031e14825,225630
f01031e2:	c3                   	ret    f01031e24826,225674
f01031e3 <__x86.get_pc_thunk.cx>:f01031e34828,225715
f01031e3:	8b 0c 24             	mov    (%esp),%ecxf01031e34829,225749
f01031e6:	c3                   	ret    f01031e64830,225800
f01031e7 <__x86.get_pc_thunk.si>:f01031e74832,225841
f01031e7:	8b 34 24             	mov    (%esp),%esif01031e74833,225875
f01031ea:	c3                   	ret    f01031ea4834,225926
f01031eb <__x86.get_pc_thunk.di>:f01031eb4836,225967
f01031eb:	8b 3c 24             	mov    (%esp),%edif01031eb4837,226001
f01031ee:	c3                   	ret    f01031ee4838,226052
f01031ef <envid2env>:f01031ef4840,226093
intint4844,226211
f01031ef:	55                   	push   %ebpf01031ef4847,226282
f01031f0:	89 e5                	mov    %esp,%ebpf01031f04848,226326
f01031f2:	53                   	push   %ebxf01031f24849,226375
f01031f3:	e8 eb ff ff ff       	call   f01031e3 <__x86.get_pc_thunk.cx>f01031f34850,226419
f01031f8:	81 c1 28 be 07 00    	add    $0x7be28,%ecxf01031f84851,226491
f01031fe:	8b 55 08             	mov    0x8(%ebp),%edxf01031fe4852,226544
f0103201:	8b 5d 10             	mov    0x10(%ebp),%ebxf01032014853,226598
f0103204:	85 d2                	test   %edx,%edxf01032044858,226743
f0103206:	74 41                	je     f0103249 <envid2env+0x5a>f01032064859,226792
	e = &envs[ENVX(envid)];e4865,227117
f0103208:	89 d0                	mov    %edx,%eaxf01032084866,227142
f010320a:	25 ff 03 00 00       	and    $0x3ff,%eaxf010320a4867,227191
f010320f:	8d 04 40             	lea    (%eax,%eax,2),%eaxf010320f4868,227242
f0103212:	c1 e0 05             	shl    $0x5,%eaxf01032124869,227300
f0103215:	03 81 28 23 00 00    	add    0x2328(%ecx),%eaxf01032154870,227349
f010321b:	83 78 54 00          	cmpl   $0x0,0x54(%eax)f010321b4872,227462
f010321f:	74 3a                	je     f010325b <envid2env+0x6c>f010321f4873,227517
f0103221:	39 50 48             	cmp    %edx,0x48(%eax)f01032214874,227582
f0103224:	75 35                	jne    f010325b <envid2env+0x6c>f01032244875,227637
f0103226:	84 db                	test   %bl,%blf01032264882,228031
f0103228:	74 12                	je     f010323c <envid2env+0x4d>f01032284883,228078
f010322a:	8b 91 24 23 00 00    	mov    0x2324(%ecx),%edxf010322a4884,228143
f0103230:	39 c2                	cmp    %eax,%edxf01032304885,228200
f0103232:	74 08                	je     f010323c <envid2env+0x4d>f01032324886,228249
f0103234:	8b 5a 48             	mov    0x48(%edx),%ebxf01032344887,228314
f0103237:	39 58 4c             	cmp    %ebx,0x4c(%eax)f01032374888,228369
f010323a:	75 2f                	jne    f010326b <envid2env+0x7c>f010323a4889,228424
f010323c:	8b 5d 0c             	mov    0xc(%ebp),%ebxf010323c4895,228549
f010323f:	89 03                	mov    %eax,(%ebx)f010323f4896,228603
f0103241:	b8 00 00 00 00       	mov    $0x0,%eaxf01032414898,228665
f0103246:	5b                   	pop    %ebxf01032464900,228716
f0103247:	5d                   	pop    %ebpf01032474901,228760
f0103248:	c3                   	ret    f01032484902,228804
f0103249:	8b 81 24 23 00 00    	mov    0x2324(%ecx),%eaxf01032494904,228867
f010324f:	8b 4d 0c             	mov    0xc(%ebp),%ecxf010324f4905,228924
f0103252:	89 01                	mov    %eax,(%ecx)f01032524906,228978
f0103254:	b8 00 00 00 00       	mov    $0x0,%eaxf01032544908,229041
f0103259:	eb eb                	jmp    f0103246 <envid2env+0x57>f01032594909,229090
f010325b:	8b 45 0c             	mov    0xc(%ebp),%eaxf010325b4911,229173
f010325e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f010325e4912,229227
f0103264:	b8 fe ff ff ff       	mov    $0xfffffffe,%eaxf01032644914,229299
f0103269:	eb db                	jmp    f0103246 <envid2env+0x57>f01032694915,229355
f010326b:	8b 45 0c             	mov    0xc(%ebp),%eaxf010326b4917,229438
f010326e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f010326e4918,229492
f0103274:	b8 fe ff ff ff       	mov    $0xfffffffe,%eaxf01032744920,229564
f0103279:	eb cb                	jmp    f0103246 <envid2env+0x57>f01032794921,229620
f010327b <env_init_percpu>:f010327b4923,229686
voidvoid4927,229754
f010327b:	55                   	push   %ebpf010327b4930,229783
f010327c:	89 e5                	mov    %esp,%ebpf010327c4931,229827
f010327e:	e8 86 d4 ff ff       	call   f0100709 <__x86.get_pc_thunk.ax>f010327e4932,229876
f0103283:	05 9d bd 07 00       	add    $0x7bd9d,%eaxf01032834933,229948
f0103288:	8d 80 e0 1f 00 00    	lea    0x1fe0(%eax),%eaxf01032884935,230041
f010328e:	0f 01 10             	lgdtl  (%eax)f010328e4936,230098
f0103291:	b8 23 00 00 00       	mov    $0x23,%eaxf01032914941,230299
f0103296:	8e e8                	mov    %eax,%gsf01032964942,230349
f0103298:	8e e0                	mov    %eax,%fsf01032984944,230448
f010329a:	b8 10 00 00 00       	mov    $0x10,%eaxf010329a4948,230656
f010329f:	8e c0                	mov    %eax,%esf010329f4949,230706
f01032a1:	8e d8                	mov    %eax,%dsf01032a14951,230803
f01032a3:	8e d0                	mov    %eax,%ssf01032a34953,230900
f01032a5:	ea ac 32 10 f0 08 00 	ljmp   $0x8,$0xf01032acf01032a54956,231043
f01032ac:	b8 00 00 00 00       	mov    $0x0,%eaxf01032ac4958,231139
f01032b1:	0f 00 d0             	lldt   %axf01032b14959,231188
f01032b4:	5d                   	pop    %ebpf01032b44964,231332
f01032b5:	c3                   	ret    f01032b54965,231376
f01032b6 <env_init>:f01032b64967,231417
f01032b6:	55                   	push   %ebpf01032b64969,231440
f01032b7:	89 e5                	mov    %esp,%ebpf01032b74970,231484
f01032b9:	e8 bd ff ff ff       	call   f010327b <env_init_percpu>f01032b94972,231553
f01032be:	5d                   	pop    %ebpf01032be4974,231621
f01032bf:	c3                   	ret    f01032bf4975,231665
f01032c0 <env_alloc>:f01032c04977,231706
intint4981,231822
f01032c0:	55                   	push   %ebpf01032c04984,231884
f01032c1:	89 e5                	mov    %esp,%ebpf01032c14985,231928
f01032c3:	56                   	push   %esif01032c34986,231977
f01032c4:	53                   	push   %ebxf01032c44987,232021
f01032c5:	e8 9d ce ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01032c54988,232065
f01032ca:	81 c3 56 bd 07 00    	add    $0x7bd56,%ebxf01032ca4989,232137
f01032d0:	8b b3 2c 23 00 00    	mov    0x232c(%ebx),%esif01032d04995,232263
f01032d6:	85 f6                	test   %esi,%esif01032d64996,232320
f01032d8:	0f 84 03 01 00 00    	je     f01033e1 <env_alloc+0x121>f01032d84997,232369
f01032de:	83 ec 0c             	sub    $0xc,%espf01032de4999,232471
f01032e1:	6a 01                	push   $0x1f01032e15000,232520
f01032e3:	e8 7d dd ff ff       	call   f0101065 <page_alloc>f01032e35001,232564
f01032e8:	83 c4 10             	add    $0x10,%espf01032e85002,232625
f01032eb:	85 c0                	test   %eax,%eaxf01032eb5003,232675
f01032ed:	0f 84 f5 00 00 00    	je     f01033e8 <env_alloc+0x128>f01032ed5004,232724
f01032f3:	8b 46 5c             	mov    0x5c(%esi),%eaxf01032f35006,232854
f01032f6:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf01032f65008,232940
f01032fb:	0f 86 c7 00 00 00    	jbe    f01033c8 <env_alloc+0x108>f01032fb5009,232996
f0103301:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01033015011,233098
f0103307:	83 ca 05             	or     $0x5,%edxf01033075012,233159
f010330a:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)f010330a5013,233208
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);generation5019,233419
f0103310:	8b 46 48             	mov    0x48(%esi),%eaxf01033105020,233481
f0103313:	05 00 10 00 00       	add    $0x1000,%eaxf01033135021,233536
f0103318:	25 00 fc ff ff       	and    $0xfffffc00,%eaxf01033185023,233645
		generation = 1 << ENVGENSHIFT;generation5024,233701
f010331d:	ba 00 10 00 00       	mov    $0x1000,%edxf010331d5025,233734
f0103322:	0f 4e c2             	cmovle %edx,%eaxf01033225026,233786
f0103325:	89 f2                	mov    %esi,%edxf01033255028,233873
f0103327:	2b 93 28 23 00 00    	sub    0x2328(%ebx),%edxf01033275029,233922
f010332d:	c1 fa 05             	sar    $0x5,%edxf010332d5030,233979
f0103330:	69 d2 ab aa aa aa    	imul   $0xaaaaaaab,%edx,%edxf01033305031,234028
f0103336:	09 d0                	or     %edx,%eaxf01033365032,234089
f0103338:	89 46 48             	mov    %eax,0x48(%esi)f01033385033,234138
f010333b:	8b 45 0c             	mov    0xc(%ebp),%eaxf010333b5037,234261
f010333e:	89 46 4c             	mov    %eax,0x4c(%esi)f010333e5038,234315
f0103341:	c7 46 50 00 00 00 00 	movl   $0x0,0x50(%esi)f01033415040,234400
f0103348:	c7 46 54 02 00 00 00 	movl   $0x2,0x54(%esi)f01033485042,234486
f010334f:	c7 46 58 00 00 00 00 	movl   $0x0,0x58(%esi)f010334f5044,234559
f0103356:	83 ec 04             	sub    $0x4,%espf01033565051,234839
f0103359:	6a 44                	push   $0x44f01033595052,234888
f010335b:	6a 00                	push   $0x0f010335b5053,234933
f010335d:	56                   	push   %esif010335d5054,234977
f010335e:	e8 91 13 00 00       	call   f01046f4 <memset>f010335e5055,235021
f0103363:	66 c7 46 24 23 00    	movw   $0x23,0x24(%esi)f01033635062,235397
f0103369:	66 c7 46 20 23 00    	movw   $0x23,0x20(%esi)f01033695064,235483
f010336f:	66 c7 46 40 23 00    	movw   $0x23,0x40(%esi)f010336f5066,235569
f0103375:	c7 46 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%esi)f01033755068,235656
f010337c:	66 c7 46 34 1b 00    	movw   $0x1b,0x34(%esi)f010337c5070,235748
	env_free_list = e->env_link;env_free_list5074,235872
f0103382:	8b 46 44             	mov    0x44(%esi),%eaxf01033825075,235902
f0103385:	89 83 2c 23 00 00    	mov    %eax,0x232c(%ebx)f01033855076,235957
f010338b:	8b 45 08             	mov    0x8(%ebp),%eaxf010338b5078,236034
f010338e:	89 30                	mov    %esi,(%eax)f010338e5079,236088
f0103390:	8b 4e 48             	mov    0x48(%esi),%ecxf01033905082,236215
f0103393:	8b 83 24 23 00 00    	mov    0x2324(%ebx),%eaxf01033935083,236270
f0103399:	83 c4 10             	add    $0x10,%espf01033995084,236327
f010339c:	ba 00 00 00 00       	mov    $0x0,%edxf010339c5085,236377
f01033a1:	85 c0                	test   %eax,%eaxf01033a15086,236426
f01033a3:	74 03                	je     f01033a8 <env_alloc+0xe8>f01033a35087,236475
f01033a5:	8b 50 48             	mov    0x48(%eax),%edxf01033a55088,236540
f01033a8:	83 ec 04             	sub    $0x4,%espf01033a85089,236595
f01033ab:	51                   	push   %ecxf01033ab5090,236644
f01033ac:	52                   	push   %edxf01033ac5091,236688
f01033ad:	8d 83 55 6c f8 ff    	lea    -0x793ab(%ebx),%eaxf01033ad5092,236732
f01033b3:	50                   	push   %eaxf01033b35093,236791
f01033b4:	e8 61 03 00 00       	call   f010371a <cprintf>f01033b45094,236835
f01033b9:	83 c4 10             	add    $0x10,%espf01033b95096,236904
f01033bc:	b8 00 00 00 00       	mov    $0x0,%eaxf01033bc5097,236954
f01033c1:	8d 65 f8             	lea    -0x8(%ebp),%espf01033c15099,237005
f01033c4:	5b                   	pop    %ebxf01033c45100,237060
f01033c5:	5e                   	pop    %esif01033c55101,237104
f01033c6:	5d                   	pop    %ebpf01033c65102,237148
f01033c7:	c3                   	ret    f01033c75103,237192
f01033c8:	50                   	push   %eaxf01033c85105,237298
f01033c9:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf01033c95106,237342
f01033cf:	50                   	push   %eaxf01033cf5107,237401
f01033d0:	68 b9 00 00 00       	push   $0xb9f01033d05108,237445
f01033d5:	8d 83 4a 6c f8 ff    	lea    -0x793b6(%ebx),%eaxf01033d55109,237490
f01033db:	50                   	push   %eaxf01033db5110,237549
f01033dc:	e8 d0 cc ff ff       	call   f01000b1 <_panic>f01033dc5111,237593
f01033e1:	b8 fb ff ff ff       	mov    $0xfffffffb,%eaxf01033e15113,237675
f01033e6:	eb d9                	jmp    f01033c1 <env_alloc+0x101>f01033e65114,237731
f01033e8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eaxf01033e85116,237817
f01033ed:	eb d2                	jmp    f01033c1 <env_alloc+0x101>f01033ed5117,237873
f01033ef <env_create>:f01033ef5119,237940
voidvoid5123,238057
f01033ef:	55                   	push   %ebpf01033ef5126,238111
f01033f0:	89 e5                	mov    %esp,%ebpf01033f05127,238155
f01033f2:	5d                   	pop    %ebpf01033f25130,238233
f01033f3:	c3                   	ret    f01033f35131,238277
f01033f4 <env_free>:f01033f45133,238318
voidvoid5137,238384
f01033f4:	55                   	push   %ebpf01033f45140,238415
f01033f5:	89 e5                	mov    %esp,%ebpf01033f55141,238459
f01033f7:	57                   	push   %edif01033f75142,238508
f01033f8:	56                   	push   %esif01033f85143,238552
f01033f9:	53                   	push   %ebxf01033f95144,238596
f01033fa:	83 ec 2c             	sub    $0x2c,%espf01033fa5145,238640
f01033fd:	e8 65 cd ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01033fd5146,238690
f0103402:	81 c3 1e bc 07 00    	add    $0x7bc1e,%ebxf01034025147,238762
f0103408:	8b 93 24 23 00 00    	mov    0x2324(%ebx),%edxf01034085154,238989
f010340e:	3b 55 08             	cmp    0x8(%ebp),%edxf010340e5155,239046
f0103411:	75 17                	jne    f010342a <env_free+0x36>f01034115156,239100
f0103413:	c7 c0 0c 20 18 f0    	mov    $0xf018200c,%eaxf01034135158,239191
f0103419:	8b 00                	mov    (%eax),%eaxf01034195159,239247
f010341b:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf010341b5161,239329
f0103420:	76 46                	jbe    f0103468 <env_free+0x74>f01034205162,239385
f0103422:	05 00 00 00 10       	add    $0x10000000,%eaxf01034225164,239485
f0103427:	0f 22 d8             	mov    %eax,%cr3f01034275166,239587
f010342a:	8b 45 08             	mov    0x8(%ebp),%eaxf010342a5170,239748
f010342d:	8b 48 48             	mov    0x48(%eax),%ecxf010342d5171,239802
f0103430:	b8 00 00 00 00       	mov    $0x0,%eaxf01034305172,239857
f0103435:	85 d2                	test   %edx,%edxf01034355173,239906
f0103437:	74 03                	je     f010343c <env_free+0x48>f01034375174,239955
f0103439:	8b 42 48             	mov    0x48(%edx),%eaxf01034395175,240019
f010343c:	83 ec 04             	sub    $0x4,%espf010343c5176,240074
f010343f:	51                   	push   %ecxf010343f5177,240123
f0103440:	50                   	push   %eaxf01034405178,240167
f0103441:	8d 83 6a 6c f8 ff    	lea    -0x79396(%ebx),%eaxf01034415179,240211
f0103447:	50                   	push   %eaxf01034475180,240270
f0103448:	e8 cd 02 00 00       	call   f010371a <cprintf>f01034485181,240314
f010344d:	83 c4 10             	add    $0x10,%espf010344d5182,240372
f0103450:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)f01034505183,240422
f0103457:	c7 c0 08 20 18 f0    	mov    $0xf0182008,%eaxf01034575185,240504
f010345d:	89 45 d4             	mov    %eax,-0x2c(%ebp)f010345d5186,240560
f0103460:	89 45 d0             	mov    %eax,-0x30(%ebp)f01034605188,240642
f0103463:	e9 9f 00 00 00       	jmp    f0103507 <env_free+0x113>f01034635189,240698
f0103468:	50                   	push   %eaxf01034685191,240829
f0103469:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf01034695192,240873
f010346f:	50                   	push   %eaxf010346f5193,240932
f0103470:	68 68 01 00 00       	push   $0x168f01034705194,240976
f0103475:	8d 83 4a 6c f8 ff    	lea    -0x793b6(%ebx),%eaxf01034755195,241022
f010347b:	50                   	push   %eaxf010347b5196,241081
f010347c:	e8 30 cc ff ff       	call   f01000b1 <_panic>f010347c5197,241125
f0103481:	50                   	push   %eaxf01034815199,241246
f0103482:	8d 83 ec 60 f8 ff    	lea    -0x79f14(%ebx),%eaxf01034825200,241290
f0103488:	50                   	push   %eaxf01034885201,241349
f0103489:	68 77 01 00 00       	push   $0x177f01034895202,241393
f010348e:	8d 83 4a 6c f8 ff    	lea    -0x793b6(%ebx),%eaxf010348e5203,241439
f0103494:	50                   	push   %eaxf01034945204,241498
f0103495:	e8 17 cc ff ff       	call   f01000b1 <_panic>f01034955205,241542
f010349a:	83 c6 04             	add    $0x4,%esif010349a5206,241599
		pa = PTE_ADDR(e->env_pgdir[pdeno]);pa5208,241690
		pt = (pte_t*) KADDR(pa);pt5209,241728
f010349d:	39 fe                	cmp    %edi,%esif010349d5213,241842
f010349f:	74 24                	je     f01034c5 <env_free+0xd1>f010349f5214,241891
f01034a1:	f6 06 01             	testb  $0x1,(%esi)f01034a15216,241981
f01034a4:	74 f4                	je     f010349a <env_free+0xa6>f01034a45217,242032
f01034a6:	83 ec 08             	sub    $0x8,%espf01034a65219,242152
f01034a9:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01034a95220,242201
f01034ac:	01 f0                	add    %esi,%eaxf01034ac5221,242257
f01034ae:	c1 e0 0a             	shl    $0xa,%eaxf01034ae5222,242306
f01034b1:	0b 45 e4             	or     -0x1c(%ebp),%eaxf01034b15223,242355
f01034b4:	50                   	push   %eaxf01034b45224,242411
f01034b5:	8b 45 08             	mov    0x8(%ebp),%eaxf01034b55225,242455
f01034b8:	ff 70 5c             	pushl  0x5c(%eax)f01034b85226,242509
f01034bb:	e8 7b de ff ff       	call   f010133b <page_remove>f01034bb5227,242559
f01034c0:	83 c4 10             	add    $0x10,%espf01034c05228,242621
f01034c3:	eb d5                	jmp    f010349a <env_free+0xa6>f01034c35229,242671
f01034c5:	8b 45 08             	mov    0x8(%ebp),%eaxf01034c55234,242799
f01034c8:	8b 40 5c             	mov    0x5c(%eax),%eaxf01034c85235,242853
f01034cb:	8b 55 dc             	mov    -0x24(%ebp),%edxf01034cb5236,242908
f01034ce:	c7 04 10 00 00 00 00 	movl   $0x0,(%eax,%edx,1)f01034ce5237,242964
f01034d5:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01034d55239,243048
f01034d8:	8b 55 d8             	mov    -0x28(%ebp),%edxf01034d85240,243104
f01034db:	3b 10                	cmp    (%eax),%edxf01034db5241,243160
f01034dd:	73 6f                	jae    f010354e <env_free+0x15a>f01034dd5242,243211
f01034df:	83 ec 0c             	sub    $0xc,%espf01034df5244,243304
f01034e2:	c7 c0 10 20 18 f0    	mov    $0xf0182010,%eaxf01034e25246,243380
f01034e8:	8b 00                	mov    (%eax),%eaxf01034e85247,243436
f01034ea:	8b 55 d8             	mov    -0x28(%ebp),%edxf01034ea5248,243487
f01034ed:	8d 04 d0             	lea    (%eax,%edx,8),%eaxf01034ed5249,243543
f01034f0:	50                   	push   %eaxf01034f05250,243601
f01034f1:	e8 69 dc ff ff       	call   f010115f <page_decref>f01034f15251,243645
f01034f6:	83 c4 10             	add    $0x10,%espf01034f65252,243707
f01034f9:	83 45 dc 04          	addl   $0x4,-0x24(%ebp)f01034f95253,243757
f01034fd:	8b 45 dc             	mov    -0x24(%ebp),%eaxf01034fd5254,243813
f0103500:	3d ec 0e 00 00       	cmp    $0xeec,%eaxf01035005256,243916
f0103505:	74 5f                	je     f0103566 <env_free+0x172>f01035055257,243967
f0103507:	8b 45 08             	mov    0x8(%ebp),%eaxf01035075259,244070
f010350a:	8b 40 5c             	mov    0x5c(%eax),%eaxf010350a5260,244124
f010350d:	8b 55 dc             	mov    -0x24(%ebp),%edxf010350d5261,244179
f0103510:	8b 04 10             	mov    (%eax,%edx,1),%eaxf01035105262,244235
f0103513:	a8 01                	test   $0x1,%alf01035135263,244293
f0103515:	74 e2                	je     f01034f9 <env_free+0x105>f01035155264,244341
		pa = PTE_ADDR(e->env_pgdir[pdeno]);pa5265,244406
f0103517:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf01035175266,244444
f010351c:	89 c2                	mov    %eax,%edxf010351c5268,244526
f010351e:	c1 ea 0c             	shr    $0xc,%edxf010351e5269,244575
f0103521:	89 55 d8             	mov    %edx,-0x28(%ebp)f01035215270,244624
f0103524:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf01035245271,244680
f0103527:	39 11                	cmp    %edx,(%ecx)f01035275272,244736
f0103529:	0f 86 52 ff ff ff    	jbe    f0103481 <env_free+0x8d>f01035295273,244787
f010352f:	8d b0 00 00 00 f0    	lea    -0x10000000(%eax),%esif010352f5275,244884
f0103535:	8b 55 dc             	mov    -0x24(%ebp),%edxf01035355277,245002
f0103538:	c1 e2 14             	shl    $0x14,%edxf01035385278,245058
f010353b:	89 55 e4             	mov    %edx,-0x1c(%ebp)f010353b5279,245108
f010353e:	8d b8 00 10 00 f0    	lea    -0xffff000(%eax),%edif010353e5280,245164
f0103544:	f7 d8                	neg    %eaxf01035445281,245225
f0103546:	89 45 e0             	mov    %eax,-0x20(%ebp)f01035465282,245269
f0103549:	e9 53 ff ff ff       	jmp    f01034a1 <env_free+0xad>f01035495283,245325
f010354e:	83 ec 04             	sub    $0x4,%espf010354e5285,245432
f0103551:	8d 83 84 62 f8 ff    	lea    -0x79d7c(%ebx),%eaxf01035515286,245481
f0103557:	50                   	push   %eaxf01035575287,245540
f0103558:	6a 4f                	push   $0x4ff01035585288,245584
f010355a:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf010355a5289,245629
f0103560:	50                   	push   %eaxf01035605290,245688
f0103561:	e8 4b cb ff ff       	call   f01000b1 <_panic>f01035615291,245732
	pa = PADDR(e->env_pgdir);pa5295,245821
f0103566:	8b 45 08             	mov    0x8(%ebp),%eaxf01035665296,245848
f0103569:	8b 40 5c             	mov    0x5c(%eax),%eaxf01035695297,245902
f010356c:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf010356c5299,245988
f0103571:	76 57                	jbe    f01035ca <env_free+0x1d6>f01035715300,246044
f0103573:	8b 55 08             	mov    0x8(%ebp),%edxf01035735302,246128
f0103576:	c7 42 5c 00 00 00 00 	movl   $0x0,0x5c(%edx)f01035765303,246182
f010357d:	05 00 00 00 10       	add    $0x10000000,%eaxf010357d5305,246273
f0103582:	c1 e8 0c             	shr    $0xc,%eaxf01035825307,246355
f0103585:	c7 c2 08 20 18 f0    	mov    $0xf0182008,%edxf01035855308,246404
f010358b:	3b 02                	cmp    (%edx),%eaxf010358b5309,246460
f010358d:	73 54                	jae    f01035e3 <env_free+0x1ef>f010358d5310,246511
f010358f:	83 ec 0c             	sub    $0xc,%espf010358f5312,246603
f0103592:	c7 c2 10 20 18 f0    	mov    $0xf0182010,%edxf01035925314,246679
f0103598:	8b 12                	mov    (%edx),%edxf01035985315,246735
f010359a:	8d 04 c2             	lea    (%edx,%eax,8),%eaxf010359a5316,246786
f010359d:	50                   	push   %eaxf010359d5317,246844
f010359e:	e8 bc db ff ff       	call   f010115f <page_decref>f010359e5318,246888
f01035a3:	8b 45 08             	mov    0x8(%ebp),%eaxf01035a35322,247022
f01035a6:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)f01035a65323,247076
f01035ad:	8b 83 2c 23 00 00    	mov    0x232c(%ebx),%eaxf01035ad5325,247161
f01035b3:	8b 55 08             	mov    0x8(%ebp),%edxf01035b35326,247218
f01035b6:	89 42 44             	mov    %eax,0x44(%edx)f01035b65327,247272
	env_free_list = e;env_free_list5328,247327
f01035b9:	89 93 2c 23 00 00    	mov    %edx,0x232c(%ebx)f01035b95329,247347
f01035bf:	83 c4 10             	add    $0x10,%espf01035bf5331,247406
f01035c2:	8d 65 f4             	lea    -0xc(%ebp),%espf01035c25332,247456
f01035c5:	5b                   	pop    %ebxf01035c55333,247511
f01035c6:	5e                   	pop    %esif01035c65334,247555
f01035c7:	5f                   	pop    %edif01035c75335,247599
f01035c8:	5d                   	pop    %ebpf01035c85336,247643
f01035c9:	c3                   	ret    f01035c95337,247687
f01035ca:	50                   	push   %eaxf01035ca5339,247793
f01035cb:	8d 83 e0 62 f8 ff    	lea    -0x79d20(%ebx),%eaxf01035cb5340,247837
f01035d1:	50                   	push   %eaxf01035d15341,247896
f01035d2:	68 85 01 00 00       	push   $0x185f01035d25342,247940
f01035d7:	8d 83 4a 6c f8 ff    	lea    -0x793b6(%ebx),%eaxf01035d75343,247986
f01035dd:	50                   	push   %eaxf01035dd5344,248045
f01035de:	e8 ce ca ff ff       	call   f01000b1 <_panic>f01035de5345,248089
f01035e3:	83 ec 04             	sub    $0x4,%espf01035e35347,248189
f01035e6:	8d 83 84 62 f8 ff    	lea    -0x79d7c(%ebx),%eaxf01035e65348,248238
f01035ec:	50                   	push   %eaxf01035ec5349,248297
f01035ed:	6a 4f                	push   $0x4ff01035ed5350,248341
f01035ef:	8d 83 2d 69 f8 ff    	lea    -0x796d3(%ebx),%eaxf01035ef5351,248386
f01035f5:	50                   	push   %eaxf01035f55352,248445
f01035f6:	e8 b6 ca ff ff       	call   f01000b1 <_panic>f01035f65353,248489
f01035fb <env_destroy>:f01035fb5355,248547
voidvoid5359,248601
f01035fb:	55                   	push   %ebpf01035fb5362,248635
f01035fc:	89 e5                	mov    %esp,%ebpf01035fc5363,248679
f01035fe:	53                   	push   %ebxf01035fe5364,248728
f01035ff:	83 ec 10             	sub    $0x10,%espf01035ff5365,248772
f0103602:	e8 60 cb ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01036025366,248822
f0103607:	81 c3 19 ba 07 00    	add    $0x7ba19,%ebxf01036075367,248894
f010360d:	ff 75 08             	pushl  0x8(%ebp)f010360d5369,248961
f0103610:	e8 df fd ff ff       	call   f01033f4 <env_free>f01036105370,249010
f0103615:	8d 83 14 6c f8 ff    	lea    -0x793ec(%ebx),%eaxf01036155373,249138
f010361b:	89 04 24             	mov    %eax,(%esp)f010361b5374,249197
f010361e:	e8 f7 00 00 00       	call   f010371a <cprintf>f010361e5375,249248
f0103623:	83 c4 10             	add    $0x10,%espf01036235376,249306
f0103626:	83 ec 0c             	sub    $0xc,%espf01036265379,249384
f0103629:	6a 00                	push   $0x0f01036295380,249433
f010362b:	e8 14 d3 ff ff       	call   f0100944 <monitor>f010362b5381,249477
f0103630:	83 c4 10             	add    $0x10,%espf01036305382,249535
f0103633:	eb f1                	jmp    f0103626 <env_destroy+0x2b>f01036335383,249585
f0103635 <env_pop_tf>:f01036355385,249653
voidvoid5389,249716
f0103635:	55                   	push   %ebpf01036355392,249756
f0103636:	89 e5                	mov    %esp,%ebpf01036365393,249800
f0103638:	53                   	push   %ebxf01036385394,249849
f0103639:	83 ec 08             	sub    $0x8,%espf01036395395,249893
f010363c:	e8 26 cb ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010363c5396,249942
f0103641:	81 c3 df b9 07 00    	add    $0x7b9df,%ebxf01036415397,250014
f0103647:	8b 65 08             	mov    0x8(%ebp),%espf01036475399,250082
f010364a:	61                   	popa   f010364a5400,250136
f010364b:	07                   	pop    %esf010364b5401,250176
f010364c:	1f                   	pop    %dsf010364c5402,250219
f010364d:	83 c4 08             	add    $0x8,%espf010364d5403,250262
f0103650:	cf                   	iret   f01036505404,250311
f0103651:	8d 83 80 6c f8 ff    	lea    -0x79380(%ebx),%eaxf01036515411,250549
f0103657:	50                   	push   %eaxf01036575412,250608
f0103658:	68 ae 01 00 00       	push   $0x1aef01036585413,250652
f010365d:	8d 83 4a 6c f8 ff    	lea    -0x793b6(%ebx),%eaxf010365d5414,250698
f0103663:	50                   	push   %eaxf01036635415,250757
f0103664:	e8 48 ca ff ff       	call   f01000b1 <_panic>f01036645416,250801
f0103669 <env_run>:f01036695418,250859
voidvoid5422,250919
f0103669:	55                   	push   %ebpf01036695425,250949
f010366a:	89 e5                	mov    %esp,%ebpf010366a5426,250993
f010366c:	53                   	push   %ebxf010366c5427,251042
f010366d:	83 ec 08             	sub    $0x8,%espf010366d5428,251086
f0103670:	e8 f2 ca ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01036705429,251135
f0103675:	81 c3 ab b9 07 00    	add    $0x7b9ab,%ebxf01036755430,251207
f010367b:	8d 83 8c 6c f8 ff    	lea    -0x79374(%ebx),%eaxf010367b5437,251415
f0103681:	50                   	push   %eaxf01036815438,251474
f0103682:	68 cd 01 00 00       	push   $0x1cdf01036825439,251518
f0103687:	8d 83 4a 6c f8 ff    	lea    -0x793b6(%ebx),%eaxf01036875440,251564
f010368d:	50                   	push   %eaxf010368d5441,251623
f010368e:	e8 1e ca ff ff       	call   f01000b1 <_panic>f010368e5442,251667
f0103693 <mc146818_read>:f01036935444,251725
unsignedunsigned5448,251778
f0103693:	55                   	push   %ebpf01036935451,251817
f0103694:	89 e5                	mov    %esp,%ebpf01036945452,251861
f0103696:	8b 45 08             	mov    0x8(%ebp),%eaxf01036965454,251967
f0103699:	ba 70 00 00 00       	mov    $0x70,%edxf01036995455,252021
f010369e:	ee                   	out    %al,(%dx)f010369e5456,252071
f010369f:	ba 71 00 00 00       	mov    $0x71,%edxf010369f5458,252176
f01036a4:	ec                   	in     (%dx),%alf01036a45459,252226
f01036a5:	0f b6 c0             	movzbl %al,%eaxf01036a55462,252318
f01036a8:	5d                   	pop    %ebpf01036a85464,252368
f01036a9:	c3                   	ret    f01036a95465,252412
f01036aa <mc146818_write>:f01036aa5467,252453
voidvoid5469,252481
f01036aa:	55                   	push   %ebpf01036aa5472,252533
f01036ab:	89 e5                	mov    %esp,%ebpf01036ab5473,252577
f01036ad:	8b 45 08             	mov    0x8(%ebp),%eaxf01036ad5475,252683
f01036b0:	ba 70 00 00 00       	mov    $0x70,%edxf01036b05476,252737
f01036b5:	ee                   	out    %al,(%dx)f01036b55477,252787
f01036b6:	8b 45 0c             	mov    0xc(%ebp),%eaxf01036b65478,252836
f01036b9:	ba 71 00 00 00       	mov    $0x71,%edxf01036b95479,252890
f01036be:	ee                   	out    %al,(%dx)f01036be5480,252940
f01036bf:	5d                   	pop    %ebpf01036bf5484,253035
f01036c0:	c3                   	ret    f01036c05485,253079
f01036c1 <putch>:f01036c15487,253120
static voidstatic5491,253164
f01036c1:	55                   	push   %ebpf01036c15494,253202
f01036c2:	89 e5                	mov    %esp,%ebpf01036c25495,253246
f01036c4:	53                   	push   %ebxf01036c45496,253295
f01036c5:	83 ec 10             	sub    $0x10,%espf01036c55497,253339
f01036c8:	e8 9a ca ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01036c85498,253389
f01036cd:	81 c3 53 b9 07 00    	add    $0x7b953,%ebxf01036cd5499,253461
f01036d3:	ff 75 08             	pushl  0x8(%ebp)f01036d35501,253529
f01036d6:	e8 03 d0 ff ff       	call   f01006de <cputchar>f01036d65502,253578
f01036db:	83 c4 10             	add    $0x10,%espf01036db5505,253648
f01036de:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01036de5506,253698
f01036e1:	c9                   	leave  f01036e15507,253753
f01036e2:	c3                   	ret    f01036e25508,253793
f01036e3 <vcprintf>:f01036e35510,253834
intint5512,253856
f01036e3:	55                   	push   %ebpf01036e35515,253900
f01036e4:	89 e5                	mov    %esp,%ebpf01036e45516,253944
f01036e6:	53                   	push   %ebxf01036e65517,253993
f01036e7:	83 ec 14             	sub    $0x14,%espf01036e75518,254037
f01036ea:	e8 78 ca ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01036ea5519,254087
f01036ef:	81 c3 31 b9 07 00    	add    $0x7b931,%ebxf01036ef5520,254159
f01036f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f01036f55522,254226
f01036fc:	ff 75 0c             	pushl  0xc(%ebp)f01036fc5525,254323
f01036ff:	ff 75 08             	pushl  0x8(%ebp)f01036ff5526,254372
f0103702:	8d 45 f4             	lea    -0xc(%ebp),%eaxf01037025527,254421
f0103705:	50                   	push   %eaxf01037055528,254476
f0103706:	8d 83 a1 46 f8 ff    	lea    -0x7b95f(%ebx),%eaxf01037065529,254520
f010370c:	50                   	push   %eaxf010370c5530,254579
f010370d:	e8 96 08 00 00       	call   f0103fa8 <vprintfmt>f010370d5531,254623
f0103712:	8b 45 f4             	mov    -0xc(%ebp),%eaxf01037125534,254698
f0103715:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01037155535,254753
f0103718:	c9                   	leave  f01037185536,254808
f0103719:	c3                   	ret    f01037195537,254848
f010371a <cprintf>:f010371a5539,254889
intint5541,254910
f010371a:	55                   	push   %ebpf010371a5544,254946
f010371b:	89 e5                	mov    %esp,%ebpf010371b5545,254990
f010371d:	83 ec 10             	sub    $0x10,%espf010371d5546,255039
f0103720:	8d 45 0c             	lea    0xc(%ebp),%eaxf01037205551,255133
	cnt = vcprintf(fmt, ap);cnt5552,255187
f0103723:	50                   	push   %eaxf01037235553,255213
f0103724:	ff 75 08             	pushl  0x8(%ebp)f01037245554,255257
f0103727:	e8 b7 ff ff ff       	call   f01036e3 <vcprintf>f01037275555,255306
f010372c:	c9                   	leave  f010372c5560,255394
f010372d:	c3                   	ret    f010372d5561,255434
f010372e <trap_init_percpu>:f010372e5563,255475
voidvoid5567,255554
f010372e:	55                   	push   %ebpf010372e5570,255584
f010372f:	89 e5                	mov    %esp,%ebpf010372f5571,255628
f0103731:	57                   	push   %edif01037315572,255677
f0103732:	56                   	push   %esif01037325573,255721
f0103733:	53                   	push   %ebxf01037335574,255765
f0103734:	83 ec 04             	sub    $0x4,%espf01037345575,255809
f0103737:	e8 2b ca ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01037375576,255858
f010373c:	81 c3 e4 b8 07 00    	add    $0x7b8e4,%ebxf010373c5577,255930
f0103742:	c7 83 64 2b 00 00 00 	movl   $0xf0000000,0x2b64(%ebx)f01037425581,256087
f0103749:	00 00 f0 f01037495582,256151
f010374c:	66 c7 83 68 2b 00 00 	movw   $0x10,0x2b68(%ebx)f010374c5584,256191
f0103753:	10 00 f01037535585,256249
f0103755:	66 c7 83 c6 2b 00 00 	movw   $0x68,0x2bc6(%ebx)f01037555587,256306
f010375c:	68 00 f010375c5588,256364
f010375e:	c7 c0 00 a3 11 f0    	mov    $0xf011a300,%eaxf010375e5592,256477
f0103764:	66 c7 40 28 67 00    	movw   $0x67,0x28(%eax)f01037645593,256533
f010376a:	8d b3 60 2b 00 00    	lea    0x2b60(%ebx),%esif010376a5594,256589
f0103770:	66 89 70 2a          	mov    %si,0x2a(%eax)f01037705595,256646
f0103774:	89 f2                	mov    %esi,%edxf01037745596,256700
f0103776:	c1 ea 10             	shr    $0x10,%edxf01037765597,256749
f0103779:	88 50 2c             	mov    %dl,0x2c(%eax)f01037795598,256799
f010377c:	0f b6 50 2d          	movzbl 0x2d(%eax),%edxf010377c5599,256853
f0103780:	83 e2 f0             	and    $0xfffffff0,%edxf01037805600,256908
f0103783:	83 ca 09             	or     $0x9,%edxf01037835601,256964
f0103786:	83 e2 9f             	and    $0xffffff9f,%edxf01037865602,257013
f0103789:	83 ca 80             	or     $0xffffff80,%edxf01037895603,257069
f010378c:	88 55 f3             	mov    %dl,-0xd(%ebp)f010378c5604,257125
f010378f:	88 50 2d             	mov    %dl,0x2d(%eax)f010378f5605,257179
f0103792:	0f b6 48 2e          	movzbl 0x2e(%eax),%ecxf01037925606,257233
f0103796:	83 e1 c0             	and    $0xffffffc0,%ecxf01037965607,257288
f0103799:	83 c9 40             	or     $0x40,%ecxf01037995608,257344
f010379c:	83 e1 7f             	and    $0x7f,%ecxf010379c5609,257394
f010379f:	88 48 2e             	mov    %cl,0x2e(%eax)f010379f5610,257444
f01037a2:	c1 ee 18             	shr    $0x18,%esif01037a25611,257498
f01037a5:	89 f1                	mov    %esi,%ecxf01037a55612,257548
f01037a7:	88 48 2f             	mov    %cl,0x2f(%eax)f01037a75613,257597
f01037aa:	0f b6 55 f3          	movzbl -0xd(%ebp),%edxf01037aa5616,257719
f01037ae:	83 e2 ef             	and    $0xffffffef,%edxf01037ae5617,257774
f01037b1:	88 50 2d             	mov    %dl,0x2d(%eax)f01037b15618,257830
f01037b4:	b8 28 00 00 00       	mov    $0x28,%eaxf01037b45620,257923
f01037b9:	0f 00 d8             	ltr    %axf01037b95621,257973
f01037bc:	8d 83 e8 1f 00 00    	lea    0x1fe8(%ebx),%eaxf01037bc5623,258056
f01037c2:	0f 01 18             	lidtl  (%eax)f01037c25624,258113
f01037c5:	83 c4 04             	add    $0x4,%espf01037c55631,258262
f01037c8:	5b                   	pop    %ebxf01037c85632,258311
f01037c9:	5e                   	pop    %esif01037c95633,258355
f01037ca:	5f                   	pop    %edif01037ca5634,258399
f01037cb:	5d                   	pop    %ebpf01037cb5635,258443
f01037cc:	c3                   	ret    f01037cc5636,258487
f01037cd <trap_init>:f01037cd5638,258528
f01037cd:	55                   	push   %ebpf01037cd5640,258552
f01037ce:	89 e5                	mov    %esp,%ebpf01037ce5641,258596
f01037d0:	e8 59 ff ff ff       	call   f010372e <trap_init_percpu>f01037d05643,258666
f01037d5:	5d                   	pop    %ebpf01037d55645,258735
f01037d6:	c3                   	ret    f01037d65646,258779
f01037d7 <print_regs>:f01037d75648,258820
voidvoid5652,258849
f01037d7:	55                   	push   %ebpf01037d75655,258890
f01037d8:	89 e5                	mov    %esp,%ebpf01037d85656,258934
f01037da:	56                   	push   %esif01037da5657,258983
f01037db:	53                   	push   %ebxf01037db5658,259027
f01037dc:	e8 86 c9 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01037dc5659,259071
f01037e1:	81 c3 3f b8 07 00    	add    $0x7b83f,%ebxf01037e15660,259143
f01037e7:	8b 75 08             	mov    0x8(%ebp),%esif01037e75661,259196
f01037ea:	83 ec 08             	sub    $0x8,%espf01037ea5663,259294
f01037ed:	ff 36                	pushl  (%esi)f01037ed5664,259343
f01037ef:	8d 83 a8 6c f8 ff    	lea    -0x79358(%ebx),%eaxf01037ef5665,259389
f01037f5:	50                   	push   %eaxf01037f55666,259448
f01037f6:	e8 1f ff ff ff       	call   f010371a <cprintf>f01037f65667,259492
f01037fb:	83 c4 08             	add    $0x8,%espf01037fb5669,259594
f01037fe:	ff 76 04             	pushl  0x4(%esi)f01037fe5670,259643
f0103801:	8d 83 b7 6c f8 ff    	lea    -0x79349(%ebx),%eaxf01038015671,259692
f0103807:	50                   	push   %eaxf01038075672,259751
f0103808:	e8 0d ff ff ff       	call   f010371a <cprintf>f01038085673,259795
f010380d:	83 c4 08             	add    $0x8,%espf010380d5675,259897
f0103810:	ff 76 08             	pushl  0x8(%esi)f01038105676,259946
f0103813:	8d 83 c6 6c f8 ff    	lea    -0x7933a(%ebx),%eaxf01038135677,259995
f0103819:	50                   	push   %eaxf01038195678,260054
f010381a:	e8 fb fe ff ff       	call   f010371a <cprintf>f010381a5679,260098
f010381f:	83 c4 08             	add    $0x8,%espf010381f5681,260201
f0103822:	ff 76 0c             	pushl  0xc(%esi)f01038225682,260250
f0103825:	8d 83 d5 6c f8 ff    	lea    -0x7932b(%ebx),%eaxf01038255683,260299
f010382b:	50                   	push   %eaxf010382b5684,260358
f010382c:	e8 e9 fe ff ff       	call   f010371a <cprintf>f010382c5685,260402
f0103831:	83 c4 08             	add    $0x8,%espf01038315687,260504
f0103834:	ff 76 10             	pushl  0x10(%esi)f01038345688,260553
f0103837:	8d 83 e4 6c f8 ff    	lea    -0x7931c(%ebx),%eaxf01038375689,260603
f010383d:	50                   	push   %eaxf010383d5690,260662
f010383e:	e8 d7 fe ff ff       	call   f010371a <cprintf>f010383e5691,260706
f0103843:	83 c4 08             	add    $0x8,%espf01038435693,260808
f0103846:	ff 76 14             	pushl  0x14(%esi)f01038465694,260857
f0103849:	8d 83 f3 6c f8 ff    	lea    -0x7930d(%ebx),%eaxf01038495695,260907
f010384f:	50                   	push   %eaxf010384f5696,260966
f0103850:	e8 c5 fe ff ff       	call   f010371a <cprintf>f01038505697,261010
f0103855:	83 c4 08             	add    $0x8,%espf01038555699,261112
f0103858:	ff 76 18             	pushl  0x18(%esi)f01038585700,261161
f010385b:	8d 83 02 6d f8 ff    	lea    -0x792fe(%ebx),%eaxf010385b5701,261211
f0103861:	50                   	push   %eaxf01038615702,261270
f0103862:	e8 b3 fe ff ff       	call   f010371a <cprintf>f01038625703,261314
f0103867:	83 c4 08             	add    $0x8,%espf01038675705,261416
f010386a:	ff 76 1c             	pushl  0x1c(%esi)f010386a5706,261465
f010386d:	8d 83 11 6d f8 ff    	lea    -0x792ef(%ebx),%eaxf010386d5707,261515
f0103873:	50                   	push   %eaxf01038735708,261574
f0103874:	e8 a1 fe ff ff       	call   f010371a <cprintf>f01038745709,261618
f0103879:	83 c4 10             	add    $0x10,%espf01038795711,261678
f010387c:	8d 65 f8             	lea    -0x8(%ebp),%espf010387c5712,261728
f010387f:	5b                   	pop    %ebxf010387f5713,261783
f0103880:	5e                   	pop    %esif01038805714,261827
f0103881:	5d                   	pop    %ebpf01038815715,261871
f0103882:	c3                   	ret    f01038825716,261915
f0103883 <print_trapframe>:f01038835718,261956
f0103883:	55                   	push   %ebpf01038835720,261986
f0103884:	89 e5                	mov    %esp,%ebpf01038845721,262030
f0103886:	57                   	push   %edif01038865722,262079
f0103887:	56                   	push   %esif01038875723,262123
f0103888:	53                   	push   %ebxf01038885724,262167
f0103889:	83 ec 14             	sub    $0x14,%espf01038895725,262211
f010388c:	e8 d6 c8 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010388c5726,262261
f0103891:	81 c3 8f b7 07 00    	add    $0x7b78f,%ebxf01038915727,262333
f0103897:	8b 75 08             	mov    0x8(%ebp),%esif01038975728,262386
f010389a:	56                   	push   %esif010389a5730,262476
f010389b:	8d 83 47 6e f8 ff    	lea    -0x791b9(%ebx),%eaxf010389b5731,262520
f01038a1:	50                   	push   %eaxf01038a15732,262579
f01038a2:	e8 73 fe ff ff       	call   f010371a <cprintf>f01038a25733,262623
f01038a7:	89 34 24             	mov    %esi,(%esp)f01038a75735,262708
f01038aa:	e8 28 ff ff ff       	call   f01037d7 <print_regs>f01038aa5736,262759
f01038af:	83 c4 08             	add    $0x8,%espf01038af5738,262864
f01038b2:	0f b7 46 20          	movzwl 0x20(%esi),%eaxf01038b25739,262913
f01038b6:	50                   	push   %eaxf01038b65740,262968
f01038b7:	8d 83 62 6d f8 ff    	lea    -0x7929e(%ebx),%eaxf01038b75741,263012
f01038bd:	50                   	push   %eaxf01038bd5742,263071
f01038be:	e8 57 fe ff ff       	call   f010371a <cprintf>f01038be5743,263115
f01038c3:	83 c4 08             	add    $0x8,%espf01038c35745,263217
f01038c6:	0f b7 46 24          	movzwl 0x24(%esi),%eaxf01038c65746,263266
f01038ca:	50                   	push   %eaxf01038ca5747,263321
f01038cb:	8d 83 75 6d f8 ff    	lea    -0x7928b(%ebx),%eaxf01038cb5748,263365
f01038d1:	50                   	push   %eaxf01038d15749,263424
f01038d2:	e8 43 fe ff ff       	call   f010371a <cprintf>f01038d25750,263468
f01038d7:	8b 56 28             	mov    0x28(%esi),%edxf01038d75752,263598
f01038da:	83 c4 10             	add    $0x10,%espf01038da5754,263689
f01038dd:	83 fa 13             	cmp    $0x13,%edxf01038dd5755,263739
f01038e0:	0f 86 e9 00 00 00    	jbe    f01039cf <print_trapframe+0x14c>f01038e05756,263789
f01038e6:	83 fa 30             	cmp    $0x30,%edxf01038e65758,263887
f01038e9:	8d 83 20 6d f8 ff    	lea    -0x792e0(%ebx),%eaxf01038e95759,263937
f01038ef:	8d 8b 2c 6d f8 ff    	lea    -0x792d4(%ebx),%ecxf01038ef5760,263996
f01038f5:	0f 45 c1             	cmovne %ecx,%eaxf01038f55761,264055
f01038f8:	83 ec 04             	sub    $0x4,%espf01038f85763,264176
f01038fb:	50                   	push   %eaxf01038fb5764,264225
f01038fc:	52                   	push   %edxf01038fc5765,264269
f01038fd:	8d 83 88 6d f8 ff    	lea    -0x79278(%ebx),%eaxf01038fd5766,264313
f0103903:	50                   	push   %eaxf01039035767,264372
f0103904:	e8 11 fe ff ff       	call   f010371a <cprintf>f01039045768,264416
f0103909:	83 c4 10             	add    $0x10,%espf01039095770,264522
f010390c:	39 b3 40 2b 00 00    	cmp    %esi,0x2b40(%ebx)f010390c5771,264572
f0103912:	0f 84 c3 00 00 00    	je     f01039db <print_trapframe+0x158>f01039125772,264629
f0103918:	83 ec 08             	sub    $0x8,%espf01039185774,264740
f010391b:	ff 76 2c             	pushl  0x2c(%esi)f010391b5775,264789
f010391e:	8d 83 a9 6d f8 ff    	lea    -0x79257(%ebx),%eaxf010391e5776,264839
f0103924:	50                   	push   %eaxf01039245777,264898
f0103925:	e8 f0 fd ff ff       	call   f010371a <cprintf>f01039255778,264942
f010392a:	83 c4 10             	add    $0x10,%espf010392a5780,265031
f010392d:	83 7e 28 0e          	cmpl   $0xe,0x28(%esi)f010392d5781,265081
f0103931:	0f 85 c9 00 00 00    	jne    f0103a00 <print_trapframe+0x17d>f01039315782,265136
f0103937:	8b 46 2c             	mov    0x2c(%esi),%eaxf01039375784,265259
f010393a:	89 c2                	mov    %eax,%edxf010393a5786,265343
f010393c:	83 e2 01             	and    $0x1,%edxf010393c5787,265392
f010393f:	8d 8b 3b 6d f8 ff    	lea    -0x792c5(%ebx),%ecxf010393f5788,265441
f0103945:	8d 93 46 6d f8 ff    	lea    -0x792ba(%ebx),%edxf01039455789,265500
f010394b:	0f 44 ca             	cmove  %edx,%ecxf010394b5790,265559
f010394e:	89 c2                	mov    %eax,%edxf010394e5791,265608
f0103950:	83 e2 02             	and    $0x2,%edxf01039505792,265657
f0103953:	8d 93 52 6d f8 ff    	lea    -0x792ae(%ebx),%edxf01039535793,265706
f0103959:	8d bb 58 6d f8 ff    	lea    -0x792a8(%ebx),%edif01039595794,265765
f010395f:	0f 44 d7             	cmove  %edi,%edxf010395f5795,265824
f0103962:	83 e0 04             	and    $0x4,%eaxf01039625796,265873
f0103965:	8d 83 5d 6d f8 ff    	lea    -0x792a3(%ebx),%eaxf01039655797,265922
f010396b:	8d bb 72 6e f8 ff    	lea    -0x7918e(%ebx),%edif010396b5798,265981
f0103971:	0f 44 c7             	cmove  %edi,%eaxf01039715799,266040
f0103974:	51                   	push   %ecxf01039745800,266089
f0103975:	52                   	push   %edxf01039755801,266133
f0103976:	50                   	push   %eaxf01039765802,266177
f0103977:	8d 83 b7 6d f8 ff    	lea    -0x79249(%ebx),%eaxf01039775803,266221
f010397d:	50                   	push   %eaxf010397d5804,266280
f010397e:	e8 97 fd ff ff       	call   f010371a <cprintf>f010397e5805,266324
f0103983:	83 c4 10             	add    $0x10,%espf01039835806,266382
f0103986:	83 ec 08             	sub    $0x8,%espf01039865808,266473
f0103989:	ff 76 30             	pushl  0x30(%esi)f01039895809,266522
f010398c:	8d 83 c6 6d f8 ff    	lea    -0x7923a(%ebx),%eaxf010398c5810,266572
f0103992:	50                   	push   %eaxf01039925811,266631
f0103993:	e8 82 fd ff ff       	call   f010371a <cprintf>f01039935812,266675
f0103998:	83 c4 08             	add    $0x8,%espf01039985814,266777
f010399b:	0f b7 46 34          	movzwl 0x34(%esi),%eaxf010399b5815,266826
f010399f:	50                   	push   %eaxf010399f5816,266881
f01039a0:	8d 83 d5 6d f8 ff    	lea    -0x7922b(%ebx),%eaxf01039a05817,266925
f01039a6:	50                   	push   %eaxf01039a65818,266984
f01039a7:	e8 6e fd ff ff       	call   f010371a <cprintf>f01039a75819,267028
f01039ac:	83 c4 08             	add    $0x8,%espf01039ac5821,267130
f01039af:	ff 76 38             	pushl  0x38(%esi)f01039af5822,267179
f01039b2:	8d 83 e8 6d f8 ff    	lea    -0x79218(%ebx),%eaxf01039b25823,267229
f01039b8:	50                   	push   %eaxf01039b85824,267288
f01039b9:	e8 5c fd ff ff       	call   f010371a <cprintf>f01039b95825,267332
f01039be:	83 c4 10             	add    $0x10,%espf01039be5827,267419
f01039c1:	f6 46 34 03          	testb  $0x3,0x34(%esi)f01039c15828,267469
f01039c5:	75 50                	jne    f0103a17 <print_trapframe+0x194>f01039c55829,267524
f01039c7:	8d 65 f4             	lea    -0xc(%ebp),%espf01039c75831,267598
f01039ca:	5b                   	pop    %ebxf01039ca5832,267653
f01039cb:	5e                   	pop    %esif01039cb5833,267697
f01039cc:	5f                   	pop    %edif01039cc5834,267741
f01039cd:	5d                   	pop    %ebpf01039cd5835,267785
f01039ce:	c3                   	ret    f01039ce5836,267829
f01039cf:	8b 84 93 60 20 00 00 	mov    0x2060(%ebx,%edx,4),%eaxf01039cf5838,267896
f01039d6:	e9 1d ff ff ff       	jmp    f01038f8 <print_trapframe+0x75>f01039d65839,267960
f01039db:	83 7e 28 0e          	cmpl   $0xe,0x28(%esi)f01039db5841,268079
f01039df:	0f 85 33 ff ff ff    	jne    f0103918 <print_trapframe+0x95>f01039df5842,268134
f01039e5:	0f 20 d0             	mov    %cr2,%eaxf01039e55844,268250
f01039e8:	83 ec 08             	sub    $0x8,%espf01039e85846,268337
f01039eb:	50                   	push   %eaxf01039eb5847,268386
f01039ec:	8d 83 9a 6d f8 ff    	lea    -0x79266(%ebx),%eaxf01039ec5848,268430
f01039f2:	50                   	push   %eaxf01039f25849,268489
f01039f3:	e8 22 fd ff ff       	call   f010371a <cprintf>f01039f35850,268533
f01039f8:	83 c4 10             	add    $0x10,%espf01039f85851,268591
f01039fb:	e9 18 ff ff ff       	jmp    f0103918 <print_trapframe+0x95>f01039fb5852,268641
f0103a00:	83 ec 0c             	sub    $0xc,%espf0103a005854,268729
f0103a03:	8d 83 e2 6b f8 ff    	lea    -0x7941e(%ebx),%eaxf0103a035855,268778
f0103a09:	50                   	push   %eaxf0103a095856,268837
f0103a0a:	e8 0b fd ff ff       	call   f010371a <cprintf>f0103a0a5857,268881
f0103a0f:	83 c4 10             	add    $0x10,%espf0103a0f5858,268939
f0103a12:	e9 6f ff ff ff       	jmp    f0103986 <print_trapframe+0x103>f0103a125859,268989
f0103a17:	83 ec 08             	sub    $0x8,%espf0103a175861,269103
f0103a1a:	ff 76 3c             	pushl  0x3c(%esi)f0103a1a5862,269152
f0103a1d:	8d 83 f7 6d f8 ff    	lea    -0x79209(%ebx),%eaxf0103a1d5863,269202
f0103a23:	50                   	push   %eaxf0103a235864,269261
f0103a24:	e8 f1 fc ff ff       	call   f010371a <cprintf>f0103a245865,269305
f0103a29:	83 c4 08             	add    $0x8,%espf0103a295867,269408
f0103a2c:	0f b7 46 40          	movzwl 0x40(%esi),%eaxf0103a2c5868,269457
f0103a30:	50                   	push   %eaxf0103a305869,269512
f0103a31:	8d 83 06 6e f8 ff    	lea    -0x791fa(%ebx),%eaxf0103a315870,269556
f0103a37:	50                   	push   %eaxf0103a375871,269615
f0103a38:	e8 dd fc ff ff       	call   f010371a <cprintf>f0103a385872,269659
f0103a3d:	83 c4 10             	add    $0x10,%espf0103a3d5873,269717
f0103a40:	eb 85                	jmp    f01039c7 <print_trapframe+0x144>f0103a405875,269769
f0103a42 <trap>:f0103a425877,269842
voidvoid5881,269865
f0103a42:	55                   	push   %ebpf0103a425884,269899
f0103a43:	89 e5                	mov    %esp,%ebpf0103a435885,269943
f0103a45:	57                   	push   %edif0103a455886,269992
f0103a46:	56                   	push   %esif0103a465887,270036
f0103a47:	53                   	push   %ebxf0103a475888,270080
f0103a48:	83 ec 0c             	sub    $0xc,%espf0103a485889,270124
f0103a4b:	e8 17 c7 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0103a4b5890,270173
f0103a50:	81 c3 d0 b5 07 00    	add    $0x7b5d0,%ebxf0103a505891,270245
f0103a56:	8b 75 08             	mov    0x8(%ebp),%esif0103a565892,270298
f0103a59:	fc                   	cld    f0103a595896,270471
static inline uint32_tstatic5898,270512
f0103a5a:	9c                   	pushf  f0103a5a5903,270623
f0103a5b:	58                   	pop    %eaxf0103a5b5904,270663
f0103a5c:	f6 c4 02             	test   $0x2,%ahf0103a5c5910,270889
f0103a5f:	74 1f                	je     f0103a80 <trap+0x3e>f0103a5f5911,270937
f0103a61:	8d 83 19 6e f8 ff    	lea    -0x791e7(%ebx),%eaxf0103a615912,270997
f0103a67:	50                   	push   %eaxf0103a675913,271056
f0103a68:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0103a685914,271100
f0103a6e:	50                   	push   %eaxf0103a6e5915,271159
f0103a6f:	68 a8 00 00 00       	push   $0xa8f0103a6f5916,271203
f0103a74:	8d 83 32 6e f8 ff    	lea    -0x791ce(%ebx),%eaxf0103a745917,271248
f0103a7a:	50                   	push   %eaxf0103a7a5918,271307
f0103a7b:	e8 31 c6 ff ff       	call   f01000b1 <_panic>f0103a7b5919,271351
f0103a80:	83 ec 08             	sub    $0x8,%espf0103a805922,271454
f0103a83:	56                   	push   %esif0103a835923,271503
f0103a84:	8d 83 3e 6e f8 ff    	lea    -0x791c2(%ebx),%eaxf0103a845924,271547
f0103a8a:	50                   	push   %eaxf0103a8a5925,271606
f0103a8b:	e8 8a fc ff ff       	call   f010371a <cprintf>f0103a8b5926,271650
f0103a90:	0f b7 46 34          	movzwl 0x34(%esi),%eaxf0103a905929,271738
f0103a94:	83 e0 03             	and    $0x3,%eaxf0103a945930,271793
f0103a97:	83 c4 10             	add    $0x10,%espf0103a975931,271842
f0103a9a:	66 83 f8 03          	cmp    $0x3,%axf0103a9a5932,271892
f0103a9e:	75 1d                	jne    f0103abd <trap+0x7b>f0103a9e5933,271940
f0103aa0:	c7 c0 44 13 18 f0    	mov    $0xf0181344,%eaxf0103aa05936,272047
f0103aa6:	8b 00                	mov    (%eax),%eaxf0103aa65937,272103
f0103aa8:	85 c0                	test   %eax,%eaxf0103aa85938,272154
f0103aaa:	74 68                	je     f0103b14 <trap+0xd2>f0103aaa5939,272203
f0103aac:	b9 11 00 00 00       	mov    $0x11,%ecxf0103aac5945,272440
f0103ab1:	89 c7                	mov    %eax,%edif0103ab15946,272490
f0103ab3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f0103ab35947,272539
		tf = &curenv->env_tf;tf5949,272667
f0103ab5:	c7 c0 44 13 18 f0    	mov    $0xf0181344,%eaxf0103ab55950,272691
f0103abb:	8b 30                	mov    (%eax),%esif0103abb5951,272747
	last_tf = tf;last_tf5956,272910
f0103abd:	89 b3 40 2b 00 00    	mov    %esi,0x2b40(%ebx)f0103abd5957,272925
f0103ac3:	83 ec 0c             	sub    $0xc,%espf0103ac35959,273004
f0103ac6:	56                   	push   %esif0103ac65960,273053
f0103ac7:	e8 b7 fd ff ff       	call   f0103883 <print_trapframe>f0103ac75961,273097
f0103acc:	83 c4 10             	add    $0x10,%espf0103acc5963,273188
f0103acf:	66 83 7e 34 08       	cmpw   $0x8,0x34(%esi)f0103acf5964,273238
f0103ad4:	74 5d                	je     f0103b33 <trap+0xf1>f0103ad45965,273293
f0103ad6:	83 ec 0c             	sub    $0xc,%espf0103ad65967,273376
f0103ad9:	c7 c6 44 13 18 f0    	mov    $0xf0181344,%esif0103ad95968,273425
f0103adf:	ff 36                	pushl  (%esi)f0103adf5969,273481
f0103ae1:	e8 15 fb ff ff       	call   f01035fb <env_destroy>f0103ae15970,273527
f0103ae6:	8b 06                	mov    (%esi),%eaxf0103ae65977,273778
f0103ae8:	83 c4 10             	add    $0x10,%espf0103ae85978,273829
f0103aeb:	85 c0                	test   %eax,%eaxf0103aeb5979,273879
f0103aed:	74 06                	je     f0103af5 <trap+0xb3>f0103aed5980,273928
f0103aef:	83 78 54 03          	cmpl   $0x3,0x54(%eax)f0103aef5981,273988
f0103af3:	74 59                	je     f0103b4e <trap+0x10c>f0103af35982,274043
f0103af5:	8d 83 bc 6f f8 ff    	lea    -0x79044(%ebx),%eaxf0103af55983,274104
f0103afb:	50                   	push   %eaxf0103afb5984,274163
f0103afc:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0103afc5985,274207
f0103b02:	50                   	push   %eaxf0103b025986,274266
f0103b03:	68 c0 00 00 00       	push   $0xc0f0103b035987,274310
f0103b08:	8d 83 32 6e f8 ff    	lea    -0x791ce(%ebx),%eaxf0103b085988,274355
f0103b0e:	50                   	push   %eaxf0103b0e5989,274414
f0103b0f:	e8 9d c5 ff ff       	call   f01000b1 <_panic>f0103b0f5990,274458
f0103b14:	8d 83 59 6e f8 ff    	lea    -0x791a7(%ebx),%eaxf0103b145992,274533
f0103b1a:	50                   	push   %eaxf0103b1a5993,274592
f0103b1b:	8d 83 47 69 f8 ff    	lea    -0x796b9(%ebx),%eaxf0103b1b5994,274636
f0103b21:	50                   	push   %eaxf0103b215995,274695
f0103b22:	68 ae 00 00 00       	push   $0xaef0103b225996,274739
f0103b27:	8d 83 32 6e f8 ff    	lea    -0x791ce(%ebx),%eaxf0103b275997,274784
f0103b2d:	50                   	push   %eaxf0103b2d5998,274843
f0103b2e:	e8 7e c5 ff ff       	call   f01000b1 <_panic>f0103b2e5999,274887
f0103b33:	83 ec 04             	sub    $0x4,%espf0103b336001,274981
f0103b36:	8d 83 60 6e f8 ff    	lea    -0x791a0(%ebx),%eaxf0103b366002,275030
f0103b3c:	50                   	push   %eaxf0103b3c6003,275089
f0103b3d:	68 97 00 00 00       	push   $0x97f0103b3d6004,275133
f0103b42:	8d 83 32 6e f8 ff    	lea    -0x791ce(%ebx),%eaxf0103b426005,275178
f0103b48:	50                   	push   %eaxf0103b486006,275237
f0103b49:	e8 63 c5 ff ff       	call   f01000b1 <_panic>f0103b496007,275281
f0103b4e:	83 ec 0c             	sub    $0xc,%espf0103b4e6009,275356
f0103b51:	50                   	push   %eaxf0103b516010,275405
f0103b52:	e8 12 fb ff ff       	call   f0103669 <env_run>f0103b526011,275449
f0103b57 <page_fault_handler>:f0103b576013,275508
voidvoid6017,275543
f0103b57:	55                   	push   %ebpf0103b576020,275591
f0103b58:	89 e5                	mov    %esp,%ebpf0103b586021,275635
f0103b5a:	57                   	push   %edif0103b5a6022,275684
f0103b5b:	56                   	push   %esif0103b5b6023,275728
f0103b5c:	53                   	push   %ebxf0103b5c6024,275772
f0103b5d:	83 ec 0c             	sub    $0xc,%espf0103b5d6025,275816
f0103b60:	e8 02 c6 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0103b606026,275865
f0103b65:	81 c3 bb b4 07 00    	add    $0x7b4bb,%ebxf0103b656027,275937
f0103b6b:	8b 7d 08             	mov    0x8(%ebp),%edif0103b6b6028,275990
f0103b6e:	0f 20 d0             	mov    %cr2,%eaxf0103b6e6030,276089
f0103b71:	ff 77 30             	pushl  0x30(%edi)f0103b716037,276350
f0103b74:	50                   	push   %eaxf0103b746038,276400
f0103b75:	c7 c6 44 13 18 f0    	mov    $0xf0181344,%esif0103b756039,276444
f0103b7b:	8b 06                	mov    (%esi),%eaxf0103b7b6040,276500
f0103b7d:	ff 70 48             	pushl  0x48(%eax)f0103b7d6041,276551
f0103b80:	8d 83 e8 6f f8 ff    	lea    -0x79018(%ebx),%eaxf0103b806042,276601
f0103b86:	50                   	push   %eaxf0103b866043,276660
f0103b87:	e8 8e fb ff ff       	call   f010371a <cprintf>f0103b876044,276704
f0103b8c:	89 3c 24             	mov    %edi,(%esp)f0103b8c6047,276825
f0103b8f:	e8 ef fc ff ff       	call   f0103883 <print_trapframe>f0103b8f6048,276876
f0103b94:	83 c4 04             	add    $0x4,%espf0103b946050,276964
f0103b97:	ff 36                	pushl  (%esi)f0103b976051,277013
f0103b99:	e8 5d fa ff ff       	call   f01035fb <env_destroy>f0103b996052,277059
f0103b9e:	83 c4 10             	add    $0x10,%espf0103b9e6054,277123
f0103ba1:	8d 65 f4             	lea    -0xc(%ebp),%espf0103ba16055,277173
f0103ba4:	5b                   	pop    %ebxf0103ba46056,277228
f0103ba5:	5e                   	pop    %esif0103ba56057,277272
f0103ba6:	5f                   	pop    %edif0103ba66058,277316
f0103ba7:	5d                   	pop    %ebpf0103ba76059,277360
f0103ba8:	c3                   	ret    f0103ba86060,277404
f0103ba9 <syscall>:f0103ba96062,277445
f0103ba9:	55                   	push   %ebpf0103ba96063,277465
f0103baa:	89 e5                	mov    %esp,%ebpf0103baa6064,277509
f0103bac:	53                   	push   %ebxf0103bac6065,277558
f0103bad:	83 ec 08             	sub    $0x8,%espf0103bad6066,277602
f0103bb0:	e8 b2 c5 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0103bb06067,277651
f0103bb5:	81 c3 6b b4 07 00    	add    $0x7b46b,%ebxf0103bb56068,277723
f0103bbb:	8d 83 0c 70 f8 ff    	lea    -0x78ff4(%ebx),%eaxf0103bbb6069,277776
f0103bc1:	50                   	push   %eaxf0103bc16070,277835
f0103bc2:	6a 49                	push   $0x49f0103bc26071,277879
f0103bc4:	8d 83 24 70 f8 ff    	lea    -0x78fdc(%ebx),%eaxf0103bc46072,277924
f0103bca:	50                   	push   %eaxf0103bca6073,277983
f0103bcb:	e8 e1 c4 ff ff       	call   f01000b1 <_panic>f0103bcb6074,278027
f0103bd0 <stab_binsearch>:f0103bd06076,278085
static voidstatic6079,278161
f0103bd0:	55                   	push   %ebpf0103bd06083,278287
f0103bd1:	89 e5                	mov    %esp,%ebpf0103bd16084,278331
f0103bd3:	57                   	push   %edif0103bd36085,278380
f0103bd4:	56                   	push   %esif0103bd46086,278424
f0103bd5:	53                   	push   %ebxf0103bd56087,278468
f0103bd6:	83 ec 14             	sub    $0x14,%espf0103bd66088,278512
f0103bd9:	89 45 ec             	mov    %eax,-0x14(%ebp)f0103bd96089,278562
f0103bdc:	89 55 e4             	mov    %edx,-0x1c(%ebp)f0103bdc6090,278618
f0103bdf:	89 4d e0             	mov    %ecx,-0x20(%ebp)f0103bdf6091,278674
f0103be2:	8b 7d 08             	mov    0x8(%ebp),%edif0103be26092,278730
f0103be5:	8b 32                	mov    (%edx),%esif0103be56094,278843
f0103be7:	8b 01                	mov    (%ecx),%eaxf0103be76095,278894
f0103be9:	89 45 f0             	mov    %eax,-0x10(%ebp)f0103be96096,278945
f0103bec:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)f0103bec6097,279001
f0103bf3:	eb 2f                	jmp    f0103c24 <stab_binsearch+0x54>f0103bf36100,279076
f0103bf5:	83 e8 01             	sub    $0x1,%eaxf0103bf56106,279285
f0103bf8:	39 c6                	cmp    %eax,%esif0103bf86108,279378
f0103bfa:	7f 49                	jg     f0103c45 <stab_binsearch+0x75>f0103bfa6109,279427
f0103bfc:	0f b6 0a             	movzbl (%edx),%ecxf0103bfc6110,279497
f0103bff:	83 ea 0c             	sub    $0xc,%edxf0103bff6111,279548
f0103c02:	39 f9                	cmp    %edi,%ecxf0103c026112,279597
f0103c04:	75 ef                	jne    f0103bf5 <stab_binsearch+0x25>f0103c046113,279646
		any_matches = 1;any_matches6118,279760
f0103c06:	8d 14 40             	lea    (%eax,%eax,2),%edxf0103c066120,279812
f0103c09:	8b 4d ec             	mov    -0x14(%ebp),%ecxf0103c096121,279870
f0103c0c:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edxf0103c0c6122,279926
f0103c10:	3b 55 0c             	cmp    0xc(%ebp),%edxf0103c106123,279987
f0103c13:	73 35                	jae    f0103c4a <stab_binsearch+0x7a>f0103c136124,280041
f0103c15:	8b 75 e4             	mov    -0x1c(%ebp),%esif0103c156126,280132
f0103c18:	89 06                	mov    %eax,(%esi)f0103c186127,280188
			l = true_m + 1;l6128,280239
f0103c1a:	8d 73 01             	lea    0x1(%ebx),%esif0103c1a6129,280258
		any_matches = 1;any_matches6130,280312
f0103c1d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f0103c1d6131,280331
f0103c24:	3b 75 f0             	cmp    -0x10(%ebp),%esif0103c246133,280405
f0103c27:	7f 4e                	jg     f0103c77 <stab_binsearch+0xa7>f0103c276134,280461
f0103c29:	8b 45 f0             	mov    -0x10(%ebp),%eaxf0103c296136,280571
f0103c2c:	01 f0                	add    %esi,%eaxf0103c2c6137,280627
f0103c2e:	89 c3                	mov    %eax,%ebxf0103c2e6138,280676
f0103c30:	c1 eb 1f             	shr    $0x1f,%ebxf0103c306139,280725
f0103c33:	01 c3                	add    %eax,%ebxf0103c336140,280775
f0103c35:	d1 fb                	sar    %ebxf0103c356141,280824
f0103c37:	8d 04 5b             	lea    (%ebx,%ebx,2),%eaxf0103c376142,280868
f0103c3a:	8b 4d ec             	mov    -0x14(%ebp),%ecxf0103c3a6143,280926
f0103c3d:	8d 54 81 04          	lea    0x4(%ecx,%eax,4),%edxf0103c3d6144,280982
f0103c41:	89 d8                	mov    %ebx,%eaxf0103c416145,281043
f0103c43:	eb b3                	jmp    f0103bf8 <stab_binsearch+0x28>f0103c436147,281136
			l = true_m + 1;l6148,281206
f0103c45:	8d 73 01             	lea    0x1(%ebx),%esif0103c456149,281225
f0103c48:	eb da                	jmp    f0103c24 <stab_binsearch+0x54>f0103c486151,281292
f0103c4a:	3b 55 0c             	cmp    0xc(%ebp),%edxf0103c4a6153,281402
f0103c4d:	76 14                	jbe    f0103c63 <stab_binsearch+0x93>f0103c4d6154,281456
f0103c4f:	83 e8 01             	sub    $0x1,%eaxf0103c4f6156,281552
f0103c52:	89 45 f0             	mov    %eax,-0x10(%ebp)f0103c526157,281601
f0103c55:	8b 5d e0             	mov    -0x20(%ebp),%ebxf0103c556158,281657
f0103c58:	89 03                	mov    %eax,(%ebx)f0103c586159,281713
		any_matches = 1;any_matches6160,281764
f0103c5a:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f0103c5a6161,281783
f0103c61:	eb c1                	jmp    f0103c24 <stab_binsearch+0x54>f0103c616162,281839
			r = m - 1;r6163,281909
f0103c63:	8b 75 e4             	mov    -0x1c(%ebp),%esif0103c636168,282031
f0103c66:	89 06                	mov    %eax,(%esi)f0103c666169,282087
			l = m;l6170,282138
f0103c68:	83 45 0c 01          	addl   $0x1,0xc(%ebp)f0103c686172,282159
f0103c6c:	89 c6                	mov    %eax,%esif0103c6c6173,282213
		any_matches = 1;any_matches6174,282262
f0103c6e:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f0103c6e6175,282281
f0103c75:	eb ad                	jmp    f0103c24 <stab_binsearch+0x54>f0103c756176,282337
f0103c77:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)f0103c776181,282434
f0103c7b:	74 16                	je     f0103c93 <stab_binsearch+0xc3>f0103c7b6182,282490
f0103c7d:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0103c7d6187,282675
f0103c80:	8b 00                	mov    (%eax),%eaxf0103c806188,282731
f0103c82:	8b 75 e4             	mov    -0x1c(%ebp),%esif0103c826190,282834
f0103c85:	8b 0e                	mov    (%esi),%ecxf0103c856191,282890
f0103c87:	8d 14 40             	lea    (%eax,%eax,2),%edxf0103c876192,282941
f0103c8a:	8b 75 ec             	mov    -0x14(%ebp),%esif0103c8a6193,282999
f0103c8d:	8d 54 96 04          	lea    0x4(%esi,%edx,4),%edxf0103c8d6194,283055
f0103c91:	eb 12                	jmp    f0103ca5 <stab_binsearch+0xd5>f0103c916196,283142
f0103c93:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0103c936198,283248
f0103c96:	8b 00                	mov    (%eax),%eaxf0103c966199,283304
f0103c98:	83 e8 01             	sub    $0x1,%eaxf0103c986200,283355
f0103c9b:	8b 7d e0             	mov    -0x20(%ebp),%edif0103c9b6201,283404
f0103c9e:	89 07                	mov    %eax,(%edi)f0103c9e6202,283460
f0103ca0:	eb 16                	jmp    f0103cb8 <stab_binsearch+0xe8>f0103ca06203,283511
f0103ca2:	83 e8 01             	sub    $0x1,%eaxf0103ca26205,283593
f0103ca5:	39 c1                	cmp    %eax,%ecxf0103ca56207,283668
f0103ca7:	7d 0a                	jge    f0103cb3 <stab_binsearch+0xe3>f0103ca76208,283717
f0103ca9:	0f b6 1a             	movzbl (%edx),%ebxf0103ca96210,283839
f0103cac:	83 ea 0c             	sub    $0xc,%edxf0103cac6211,283890
f0103caf:	39 fb                	cmp    %edi,%ebxf0103caf6212,283939
f0103cb1:	75 ef                	jne    f0103ca2 <stab_binsearch+0xd2>f0103cb16213,283988
f0103cb3:	8b 7d e4             	mov    -0x1c(%ebp),%edif0103cb36216,284099
f0103cb6:	89 07                	mov    %eax,(%edi)f0103cb66217,284155
f0103cb8:	83 c4 14             	add    $0x14,%espf0103cb86220,284211
f0103cbb:	5b                   	pop    %ebxf0103cbb6221,284261
f0103cbc:	5e                   	pop    %esif0103cbc6222,284305
f0103cbd:	5f                   	pop    %edif0103cbd6223,284349
f0103cbe:	5d                   	pop    %ebpf0103cbe6224,284393
f0103cbf:	c3                   	ret    f0103cbf6225,284437
f0103cc0 <debuginfo_eip>:f0103cc06227,284478
intint6231,284608
f0103cc0:	55                   	push   %ebpf0103cc06234,284671
f0103cc1:	89 e5                	mov    %esp,%ebpf0103cc16235,284715
f0103cc3:	57                   	push   %edif0103cc36236,284764
f0103cc4:	56                   	push   %esif0103cc46237,284808
f0103cc5:	53                   	push   %ebxf0103cc56238,284852
f0103cc6:	83 ec 2c             	sub    $0x2c,%espf0103cc66239,284896
f0103cc9:	e8 99 c4 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0103cc96240,284946
f0103cce:	81 c3 52 b3 07 00    	add    $0x7b352,%ebxf0103cce6241,285018
f0103cd4:	8b 7d 0c             	mov    0xc(%ebp),%edif0103cd46242,285071
	const struct Stab *stabs, *stab_end;const6243,285125
f0103cd7:	8d 83 33 70 f8 ff    	lea    -0x78fcd(%ebx),%eaxf0103cd76249,285297
f0103cdd:	89 07                	mov    %eax,(%edi)f0103cdd6250,285356
f0103cdf:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)f0103cdf6252,285428
f0103ce6:	89 47 08             	mov    %eax,0x8(%edi)f0103ce66254,285516
f0103ce9:	c7 47 0c 09 00 00 00 	movl   $0x9,0xc(%edi)f0103ce96256,285597
f0103cf0:	8b 45 08             	mov    0x8(%ebp),%eaxf0103cf06258,285678
f0103cf3:	89 47 10             	mov    %eax,0x10(%edi)f0103cf36259,285732
f0103cf6:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)f0103cf66261,285811
f0103cfd:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eaxf0103cfd6265,285923
f0103d02:	77 21                	ja     f0103d25 <debuginfo_eip+0x65>f0103d026266,285979
		stabs = usd->stabs;stabs6272,286172
f0103d04:	a1 00 00 20 00       	mov    0x200000,%eaxf0103d046273,286194
f0103d09:	89 45 d4             	mov    %eax,-0x2c(%ebp)f0103d096274,286247
		stab_end = usd->stab_end;stab_end6275,286303
f0103d0c:	a1 04 00 20 00       	mov    0x200004,%eaxf0103d0c6276,286331
		stabstr = usd->stabstr;stabstr6277,286384
f0103d11:	8b 35 08 00 20 00    	mov    0x200008,%esif0103d116278,286410
f0103d17:	89 75 cc             	mov    %esi,-0x34(%ebp)f0103d176279,286463
		stabstr_end = usd->stabstr_end;stabstr_end6280,286519
f0103d1a:	8b 35 0c 00 20 00    	mov    0x20000c,%esif0103d1a6281,286553
f0103d20:	89 75 d0             	mov    %esi,-0x30(%ebp)f0103d206282,286606
f0103d23:	eb 21                	jmp    f0103d46 <debuginfo_eip+0x86>f0103d236283,286662
		stabstr_end = __STABSTR_END__;stabstr_end6284,286731
f0103d25:	c7 c0 d3 0b 11 f0    	mov    $0xf0110bd3,%eaxf0103d256285,286764
f0103d2b:	89 45 d0             	mov    %eax,-0x30(%ebp)f0103d2b6286,286820
		stabstr = __STABSTR_BEGIN__;stabstr6287,286876
f0103d2e:	c7 c0 01 e2 10 f0    	mov    $0xf010e201,%eaxf0103d2e6288,286907
f0103d34:	89 45 cc             	mov    %eax,-0x34(%ebp)f0103d346289,286963
		stab_end = __STAB_END__;stab_end6290,287019
f0103d37:	c7 c0 00 e2 10 f0    	mov    $0xf010e200,%eaxf0103d376291,287046
		stabs = __STAB_BEGIN__;stabs6292,287102
f0103d3d:	c7 c6 50 62 10 f0    	mov    $0xf0106250,%esif0103d3d6293,287128
f0103d43:	89 75 d4             	mov    %esi,-0x2c(%ebp)f0103d436294,287184
f0103d46:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0103d466301,287417
f0103d49:	39 4d cc             	cmp    %ecx,-0x34(%ebp)f0103d496302,287473
f0103d4c:	0f 83 30 01 00 00    	jae    f0103e82 <debuginfo_eip+0x1c2>f0103d4c6303,287529
f0103d52:	80 79 ff 00          	cmpb   $0x0,-0x1(%ecx)f0103d526304,287599
f0103d56:	0f 85 2d 01 00 00    	jne    f0103e89 <debuginfo_eip+0x1c9>f0103d566305,287654
	lfile = 0;lfile6311,287955
f0103d5c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)f0103d5c6312,287967
	rfile = (stab_end - stabs) - 1;rfile6313,288023
f0103d63:	8b 75 d4             	mov    -0x2c(%ebp),%esif0103d636314,288056
f0103d66:	29 f0                	sub    %esi,%eaxf0103d666315,288112
f0103d68:	c1 f8 02             	sar    $0x2,%eaxf0103d686316,288161
f0103d6b:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eaxf0103d6b6317,288210
f0103d71:	83 e8 01             	sub    $0x1,%eaxf0103d716318,288271
f0103d74:	89 45 e0             	mov    %eax,-0x20(%ebp)f0103d746319,288320
f0103d77:	8d 4d e0             	lea    -0x20(%ebp),%ecxf0103d776321,288428
f0103d7a:	8d 55 e4             	lea    -0x1c(%ebp),%edxf0103d7a6322,288484
f0103d7d:	ff 75 08             	pushl  0x8(%ebp)f0103d7d6323,288540
f0103d80:	6a 64                	push   $0x64f0103d806324,288589
f0103d82:	89 f0                	mov    %esi,%eaxf0103d826325,288634
f0103d84:	e8 47 fe ff ff       	call   f0103bd0 <stab_binsearch>f0103d846326,288683
f0103d89:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0103d896328,288765
f0103d8c:	83 c4 08             	add    $0x8,%espf0103d8c6329,288821
f0103d8f:	85 c0                	test   %eax,%eaxf0103d8f6330,288870
f0103d91:	0f 84 f9 00 00 00    	je     f0103e90 <debuginfo_eip+0x1d0>f0103d916331,288919
	lfun = lfile;lfun6336,289080
f0103d97:	89 45 dc             	mov    %eax,-0x24(%ebp)f0103d976337,289095
	rfun = rfile;rfun6338,289151
f0103d9a:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0103d9a6339,289166
f0103d9d:	89 45 d8             	mov    %eax,-0x28(%ebp)f0103d9d6340,289222
f0103da0:	8d 4d d8             	lea    -0x28(%ebp),%ecxf0103da06342,289329
f0103da3:	8d 55 dc             	lea    -0x24(%ebp),%edxf0103da36343,289385
f0103da6:	ff 75 08             	pushl  0x8(%ebp)f0103da66344,289441
f0103da9:	6a 24                	push   $0x24f0103da96345,289490
f0103dab:	89 75 d4             	mov    %esi,-0x2c(%ebp)f0103dab6346,289535
f0103dae:	89 f0                	mov    %esi,%eaxf0103dae6347,289591
f0103db0:	e8 1b fe ff ff       	call   f0103bd0 <stab_binsearch>f0103db06348,289640
f0103db5:	8b 75 dc             	mov    -0x24(%ebp),%esif0103db56351,289727
f0103db8:	83 c4 08             	add    $0x8,%espf0103db86352,289783
f0103dbb:	3b 75 d8             	cmp    -0x28(%ebp),%esif0103dbb6353,289832
f0103dbe:	7f 46                	jg     f0103e06 <debuginfo_eip+0x146>f0103dbe6354,289888
f0103dc0:	8d 04 76             	lea    (%esi,%esi,2),%eaxf0103dc06358,290110
f0103dc3:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0103dc36359,290168
f0103dc6:	8d 14 81             	lea    (%ecx,%eax,4),%edxf0103dc66360,290224
f0103dc9:	8b 02                	mov    (%edx),%eaxf0103dc96361,290282
f0103dcb:	8b 4d d0             	mov    -0x30(%ebp),%ecxf0103dcb6362,290333
f0103dce:	2b 4d cc             	sub    -0x34(%ebp),%ecxf0103dce6363,290389
f0103dd1:	39 c8                	cmp    %ecx,%eaxf0103dd16364,290445
f0103dd3:	73 06                	jae    f0103ddb <debuginfo_eip+0x11b>f0103dd36365,290494
f0103dd5:	03 45 cc             	add    -0x34(%ebp),%eaxf0103dd56367,290617
f0103dd8:	89 47 08             	mov    %eax,0x8(%edi)f0103dd86368,290673
f0103ddb:	8b 42 08             	mov    0x8(%edx),%eaxf0103ddb6370,290770
f0103dde:	89 47 10             	mov    %eax,0x10(%edi)f0103dde6371,290824
		lline = lfile;lline6373,290907
		rline = rfile;rline6374,290924
f0103de1:	83 ec 08             	sub    $0x8,%espf0103de16378,291055
f0103de4:	6a 3a                	push   $0x3af0103de46379,291104
f0103de6:	ff 77 08             	pushl  0x8(%edi)f0103de66380,291149
f0103de9:	e8 ea 08 00 00       	call   f01046d8 <strfind>f0103de96381,291198
f0103dee:	2b 47 08             	sub    0x8(%edi),%eaxf0103dee6382,291256
f0103df1:	89 47 0c             	mov    %eax,0xc(%edi)f0103df16383,291310
f0103df4:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf0103df46390,291634
f0103df7:	8d 04 76             	lea    (%esi,%esi,2),%eaxf0103df76391,291690
f0103dfa:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0103dfa6392,291748
f0103dfd:	8d 44 81 04          	lea    0x4(%ecx,%eax,4),%eaxf0103dfd6393,291804
f0103e01:	83 c4 10             	add    $0x10,%espf0103e016394,291865
f0103e04:	eb 11                	jmp    f0103e17 <debuginfo_eip+0x157>f0103e046395,291915
f0103e06:	8b 45 08             	mov    0x8(%ebp),%eaxf0103e066397,292013
f0103e09:	89 47 10             	mov    %eax,0x10(%edi)f0103e096398,292067
		lline = lfile;lline6399,292122
f0103e0c:	8b 75 e4             	mov    -0x1c(%ebp),%esif0103e0c6400,292139
f0103e0f:	eb d0                	jmp    f0103de1 <debuginfo_eip+0x121>f0103e0f6401,292195
f0103e11:	83 ee 01             	sub    $0x1,%esif0103e116405,292383
f0103e14:	83 e8 0c             	sub    $0xc,%eaxf0103e146406,292432
f0103e17:	39 f3                	cmp    %esi,%ebxf0103e176408,292504
f0103e19:	7f 2e                	jg     f0103e49 <debuginfo_eip+0x189>f0103e196409,292553
f0103e1b:	0f b6 10             	movzbl (%eax),%edxf0103e1b6411,292663
f0103e1e:	80 fa 84             	cmp    $0x84,%dlf0103e1e6412,292714
f0103e21:	74 0b                	je     f0103e2e <debuginfo_eip+0x16e>f0103e216413,292763
f0103e23:	80 fa 64             	cmp    $0x64,%dlf0103e236415,292900
f0103e26:	75 e9                	jne    f0103e11 <debuginfo_eip+0x151>f0103e266416,292949
f0103e28:	83 78 04 00          	cmpl   $0x0,0x4(%eax)f0103e286417,293019
f0103e2c:	74 e3                	je     f0103e11 <debuginfo_eip+0x151>f0103e2c6418,293073
f0103e2e:	8d 04 76             	lea    (%esi,%esi,2),%eaxf0103e2e6420,293211
f0103e31:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0103e316421,293269
f0103e34:	8b 14 83             	mov    (%ebx,%eax,4),%edxf0103e346422,293325
f0103e37:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0103e376423,293383
f0103e3a:	8b 5d cc             	mov    -0x34(%ebp),%ebxf0103e3a6424,293439
f0103e3d:	29 d8                	sub    %ebx,%eaxf0103e3d6425,293495
f0103e3f:	39 c2                	cmp    %eax,%edxf0103e3f6426,293544
f0103e41:	73 06                	jae    f0103e49 <debuginfo_eip+0x189>f0103e416427,293593
f0103e43:	89 d8                	mov    %ebx,%eaxf0103e436429,293713
f0103e45:	01 d0                	add    %edx,%eaxf0103e456430,293762
f0103e47:	89 07                	mov    %eax,(%edi)f0103e476431,293811
f0103e49:	8b 5d dc             	mov    -0x24(%ebp),%ebxf0103e496437,293998
f0103e4c:	8b 4d d8             	mov    -0x28(%ebp),%ecxf0103e4c6438,294054
f0103e4f:	b8 00 00 00 00       	mov    $0x0,%eaxf0103e4f6445,294241
f0103e54:	39 cb                	cmp    %ecx,%ebxf0103e546447,294308
f0103e56:	7d 44                	jge    f0103e9c <debuginfo_eip+0x1dc>f0103e566448,294357
f0103e58:	8d 53 01             	lea    0x1(%ebx),%edxf0103e586450,294452
f0103e5b:	8d 04 5b             	lea    (%ebx,%ebx,2),%eaxf0103e5b6451,294506
f0103e5e:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0103e5e6452,294564
f0103e61:	8d 44 83 10          	lea    0x10(%ebx,%eax,4),%eaxf0103e616453,294620
f0103e65:	eb 07                	jmp    f0103e6e <debuginfo_eip+0x1ae>f0103e656454,294682
f0103e67:	83 47 14 01          	addl   $0x1,0x14(%edi)f0103e676456,294776
f0103e6b:	83 c2 01             	add    $0x1,%edxf0103e6b6458,294847
f0103e6e:	39 d1                	cmp    %edx,%ecxf0103e6e6460,294921
f0103e70:	74 25                	je     f0103e97 <debuginfo_eip+0x1d7>f0103e706461,294970
f0103e72:	83 c0 0c             	add    $0xc,%eaxf0103e726462,295040
f0103e75:	80 78 f4 a0          	cmpb   $0xa0,-0xc(%eax)f0103e756464,295143
f0103e79:	74 ec                	je     f0103e67 <debuginfo_eip+0x1a7>f0103e796465,295199
f0103e7b:	b8 00 00 00 00       	mov    $0x0,%eaxf0103e7b6467,295280
f0103e80:	eb 1a                	jmp    f0103e9c <debuginfo_eip+0x1dc>f0103e806468,295329
f0103e82:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0103e826470,295412
f0103e87:	eb 13                	jmp    f0103e9c <debuginfo_eip+0x1dc>f0103e876471,295468
f0103e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0103e896472,295538
f0103e8e:	eb 0c                	jmp    f0103e9c <debuginfo_eip+0x1dc>f0103e8e6473,295594
f0103e90:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0103e906475,295677
f0103e95:	eb 05                	jmp    f0103e9c <debuginfo_eip+0x1dc>f0103e956476,295733
f0103e97:	b8 00 00 00 00       	mov    $0x0,%eaxf0103e976478,295814
f0103e9c:	8d 65 f4             	lea    -0xc(%ebp),%espf0103e9c6480,295865
f0103e9f:	5b                   	pop    %ebxf0103e9f6481,295920
f0103ea0:	5e                   	pop    %esif0103ea06482,295964
f0103ea1:	5f                   	pop    %edif0103ea16483,296008
f0103ea2:	5d                   	pop    %ebpf0103ea26484,296052
f0103ea3:	c3                   	ret    f0103ea36485,296096
f0103ea4 <printnum>:f0103ea46487,296137
static voidstatic6490,296227
f0103ea4:	55                   	push   %ebpf0103ea46494,296353
f0103ea5:	89 e5                	mov    %esp,%ebpf0103ea56495,296397
f0103ea7:	57                   	push   %edif0103ea76496,296446
f0103ea8:	56                   	push   %esif0103ea86497,296490
f0103ea9:	53                   	push   %ebxf0103ea96498,296534
f0103eaa:	83 ec 2c             	sub    $0x2c,%espf0103eaa6499,296578
f0103ead:	e8 31 f3 ff ff       	call   f01031e3 <__x86.get_pc_thunk.cx>f0103ead6500,296628
f0103eb2:	81 c1 6e b1 07 00    	add    $0x7b16e,%ecxf0103eb26501,296700
f0103eb8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)f0103eb86502,296753
f0103ebb:	89 c7                	mov    %eax,%edif0103ebb6503,296809
f0103ebd:	89 d6                	mov    %edx,%esif0103ebd6504,296858
f0103ebf:	8b 45 08             	mov    0x8(%ebp),%eaxf0103ebf6505,296907
f0103ec2:	8b 55 0c             	mov    0xc(%ebp),%edxf0103ec26506,296961
f0103ec5:	89 45 d0             	mov    %eax,-0x30(%ebp)f0103ec56507,297015
f0103ec8:	89 55 d4             	mov    %edx,-0x2c(%ebp)f0103ec86508,297071
f0103ecb:	8b 4d 10             	mov    0x10(%ebp),%ecxf0103ecb6511,297215
f0103ece:	bb 00 00 00 00       	mov    $0x0,%ebxf0103ece6512,297270
f0103ed3:	89 4d d8             	mov    %ecx,-0x28(%ebp)f0103ed36513,297319
f0103ed6:	89 5d dc             	mov    %ebx,-0x24(%ebp)f0103ed66514,297375
f0103ed9:	39 d3                	cmp    %edx,%ebxf0103ed96515,297431
f0103edb:	72 09                	jb     f0103ee6 <printnum+0x42>f0103edb6516,297480
f0103edd:	39 45 10             	cmp    %eax,0x10(%ebp)f0103edd6517,297544
f0103ee0:	0f 87 83 00 00 00    	ja     f0103f69 <printnum+0xc5>f0103ee06518,297599
f0103ee6:	83 ec 0c             	sub    $0xc,%espf0103ee66520,297725
f0103ee9:	ff 75 18             	pushl  0x18(%ebp)f0103ee96521,297774
f0103eec:	8b 45 14             	mov    0x14(%ebp),%eaxf0103eec6522,297824
f0103eef:	8d 58 ff             	lea    -0x1(%eax),%ebxf0103eef6523,297879
f0103ef2:	53                   	push   %ebxf0103ef26524,297934
f0103ef3:	ff 75 10             	pushl  0x10(%ebp)f0103ef36525,297978
f0103ef6:	83 ec 08             	sub    $0x8,%espf0103ef66526,298028
f0103ef9:	ff 75 dc             	pushl  -0x24(%ebp)f0103ef96527,298077
f0103efc:	ff 75 d8             	pushl  -0x28(%ebp)f0103efc6528,298128
f0103eff:	ff 75 d4             	pushl  -0x2c(%ebp)f0103eff6529,298179
f0103f02:	ff 75 d0             	pushl  -0x30(%ebp)f0103f026530,298230
f0103f05:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf0103f056531,298281
f0103f08:	e8 e3 09 00 00       	call   f01048f0 <__udivdi3>f0103f086532,298337
f0103f0d:	83 c4 18             	add    $0x18,%espf0103f0d6533,298397
f0103f10:	52                   	push   %edxf0103f106534,298447
f0103f11:	50                   	push   %eaxf0103f116535,298491
f0103f12:	89 f2                	mov    %esi,%edxf0103f126536,298535
f0103f14:	89 f8                	mov    %edi,%eaxf0103f146537,298584
f0103f16:	e8 89 ff ff ff       	call   f0103ea4 <printnum>f0103f166538,298633
f0103f1b:	83 c4 20             	add    $0x20,%espf0103f1b6539,298692
f0103f1e:	eb 13                	jmp    f0103f33 <printnum+0x8f>f0103f1e6540,298742
f0103f20:	83 ec 08             	sub    $0x8,%espf0103f206545,298918
f0103f23:	56                   	push   %esif0103f236546,298967
f0103f24:	ff 75 18             	pushl  0x18(%ebp)f0103f246547,299011
f0103f27:	ff d7                	call   *%edif0103f276548,299061
f0103f29:	83 c4 10             	add    $0x10,%espf0103f296549,299106
f0103f2c:	83 eb 01             	sub    $0x1,%ebxf0103f2c6551,299178
f0103f2f:	85 db                	test   %ebx,%ebxf0103f2f6552,299227
f0103f31:	7f ed                	jg     f0103f20 <printnum+0x7c>f0103f316553,299276
f0103f33:	83 ec 08             	sub    $0x8,%espf0103f336558,299442
f0103f36:	56                   	push   %esif0103f366559,299491
f0103f37:	83 ec 04             	sub    $0x4,%espf0103f376560,299535
f0103f3a:	ff 75 dc             	pushl  -0x24(%ebp)f0103f3a6561,299584
f0103f3d:	ff 75 d8             	pushl  -0x28(%ebp)f0103f3d6562,299635
f0103f40:	ff 75 d4             	pushl  -0x2c(%ebp)f0103f406563,299686
f0103f43:	ff 75 d0             	pushl  -0x30(%ebp)f0103f436564,299737
f0103f46:	8b 75 e4             	mov    -0x1c(%ebp),%esif0103f466565,299788
f0103f49:	89 f3                	mov    %esi,%ebxf0103f496566,299844
f0103f4b:	e8 c0 0a 00 00       	call   f0104a10 <__umoddi3>f0103f4b6567,299893
f0103f50:	83 c4 14             	add    $0x14,%espf0103f506568,299953
f0103f53:	0f be 84 06 3d 70 f8 	movsbl -0x78fc3(%esi,%eax,1),%eaxf0103f536569,300003
f0103f5a:	ff f0103f5a6570,300069
f0103f5b:	50                   	push   %eaxf0103f5b6571,300083
f0103f5c:	ff d7                	call   *%edif0103f5c6572,300127
f0103f5e:	83 c4 10             	add    $0x10,%espf0103f5e6574,300174
f0103f61:	8d 65 f4             	lea    -0xc(%ebp),%espf0103f616575,300224
f0103f64:	5b                   	pop    %ebxf0103f646576,300279
f0103f65:	5e                   	pop    %esif0103f656577,300323
f0103f66:	5f                   	pop    %edif0103f666578,300367
f0103f67:	5d                   	pop    %ebpf0103f676579,300411
f0103f68:	c3                   	ret    f0103f686580,300455
f0103f69:	8b 5d 14             	mov    0x14(%ebp),%ebxf0103f696581,300495
f0103f6c:	eb be                	jmp    f0103f2c <printnum+0x88>f0103f6c6582,300550
f0103f6e <sprintputch>:f0103f6e6584,300615
static voidstatic6588,300653
f0103f6e:	55                   	push   %ebpf0103f6e6591,300708
f0103f6f:	89 e5                	mov    %esp,%ebpf0103f6f6592,300752
f0103f71:	8b 45 0c             	mov    0xc(%ebp),%eaxf0103f716593,300801
f0103f74:	83 40 08 01          	addl   $0x1,0x8(%eax)f0103f746595,300866
f0103f78:	8b 10                	mov    (%eax),%edxf0103f786597,300943
f0103f7a:	3b 50 04             	cmp    0x4(%eax),%edxf0103f7a6598,300994
f0103f7d:	73 0a                	jae    f0103f89 <sprintputch+0x1b>f0103f7d6599,301048
f0103f7f:	8d 4a 01             	lea    0x1(%edx),%ecxf0103f7f6601,301133
f0103f82:	89 08                	mov    %ecx,(%eax)f0103f826602,301187
f0103f84:	8b 45 08             	mov    0x8(%ebp),%eaxf0103f846603,301238
f0103f87:	88 02                	mov    %al,(%edx)f0103f876604,301292
f0103f89:	5d                   	pop    %ebpf0103f896606,301344
f0103f8a:	c3                   	ret    f0103f8a6607,301388
f0103f8b <printfmt>:f0103f8b6609,301429
f0103f8b:	55                   	push   %ebpf0103f8b6611,301452
f0103f8c:	89 e5                	mov    %esp,%ebpf0103f8c6612,301496
f0103f8e:	83 ec 08             	sub    $0x8,%espf0103f8e6613,301545
f0103f91:	8d 45 14             	lea    0x14(%ebp),%eaxf0103f916615,301614
f0103f94:	50                   	push   %eaxf0103f946617,301705
f0103f95:	ff 75 10             	pushl  0x10(%ebp)f0103f956618,301749
f0103f98:	ff 75 0c             	pushl  0xc(%ebp)f0103f986619,301799
f0103f9b:	ff 75 08             	pushl  0x8(%ebp)f0103f9b6620,301848
f0103f9e:	e8 05 00 00 00       	call   f0103fa8 <vprintfmt>f0103f9e6621,301897
f0103fa3:	83 c4 10             	add    $0x10,%espf0103fa36623,301959
f0103fa6:	c9                   	leave  f0103fa66624,302009
f0103fa7:	c3                   	ret    f0103fa76625,302049
f0103fa8 <vprintfmt>:f0103fa86627,302090
f0103fa8:	55                   	push   %ebpf0103fa86629,302114
f0103fa9:	89 e5                	mov    %esp,%ebpf0103fa96630,302158
f0103fab:	57                   	push   %edif0103fab6631,302207
f0103fac:	56                   	push   %esif0103fac6632,302251
f0103fad:	53                   	push   %ebxf0103fad6633,302295
f0103fae:	83 ec 2c             	sub    $0x2c,%espf0103fae6634,302339
f0103fb1:	e8 b1 c1 ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f0103fb16635,302389
f0103fb6:	81 c3 6a b0 07 00    	add    $0x7b06a,%ebxf0103fb66636,302461
f0103fbc:	8b 75 0c             	mov    0xc(%ebp),%esif0103fbc6637,302514
f0103fbf:	8b 7d 10             	mov    0x10(%ebp),%edif0103fbf6638,302568
f0103fc2:	e9 8e 03 00 00       	jmp    f0104355 <.L35+0x48>f0103fc26639,302623
		padc = ' ';padc6640,302683
f0103fc7:	c6 45 d4 20          	movb   $0x20,-0x2c(%ebp)f0103fc76641,302697
		altflag = 0;altflag6642,302754
f0103fcb:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)f0103fcb6643,302769
		precision = -1;precision6644,302825
f0103fd2:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f0103fd26645,302843
		width = -1;width6646,302906
f0103fd9:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)f0103fd96647,302920
		lflag = 0;lflag6648,302983
f0103fe0:	b9 00 00 00 00       	mov    $0x0,%ecxf0103fe06649,302996
f0103fe5:	89 4d cc             	mov    %ecx,-0x34(%ebp)f0103fe56650,303045
f0103fe8:	8d 47 01             	lea    0x1(%edi),%eaxf0103fe86652,303144
f0103feb:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0103feb6653,303198
f0103fee:	0f b6 17             	movzbl (%edi),%edxf0103fee6654,303254
f0103ff1:	8d 42 dd             	lea    -0x23(%edx),%eaxf0103ff16655,303305
f0103ff4:	3c 55                	cmp    $0x55,%alf0103ff46656,303361
f0103ff6:	0f 87 e1 03 00 00    	ja     f01043dd <.L22>f0103ff66657,303410
f0103ffc:	0f b6 c0             	movzbl %al,%eaxf0103ffc6658,303465
f0103fff:	89 d9                	mov    %ebx,%ecxf0103fff6659,303513
f0104001:	03 8c 83 c8 70 f8 ff 	add    -0x78f38(%ebx,%eax,4),%ecxf01040016660,303562
f0104008:	ff e1                	jmp    *%ecxf01040086661,303628
f010400a <.L67>:f010400a6663,303674
f010400a:	8b 7d e4             	mov    -0x1c(%ebp),%edif010400a6664,303691
			padc = '-';padc6665,303747
f010400d:	c6 45 d4 2d          	movb   $0x2d,-0x2c(%ebp)f010400d6666,303762
f0104011:	eb d5                	jmp    f0103fe8 <vprintfmt+0x40>f01040116667,303819
f0104013 <.L28>:f01040136669,303885
f0104013:	8b 7d e4             	mov    -0x1c(%ebp),%edif01040136671,303945
			padc = '0';padc6672,304001
f0104016:	c6 45 d4 30          	movb   $0x30,-0x2c(%ebp)f01040166673,304016
f010401a:	eb cc                	jmp    f0103fe8 <vprintfmt+0x40>f010401a6674,304073
f010401c <.L29>:f010401c6676,304139
f010401c:	0f b6 d2             	movzbl %dl,%edxf010401c6678,304199
f010401f:	8b 7d e4             	mov    -0x1c(%ebp),%edif010401f6679,304247
f0104022:	b8 00 00 00 00       	mov    $0x0,%eaxf01040226681,304337
				precision = precision * 10 + ch - '0';precision6682,304386
f0104027:	8d 04 80             	lea    (%eax,%eax,4),%eaxf01040276683,304429
f010402a:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eaxf010402a6684,304487
				ch = *fmt;ch6685,304550
f010402e:	0f be 17             	movsbl (%edi),%edxf010402e6686,304565
f0104031:	8d 4a d0             	lea    -0x30(%edx),%ecxf01040316688,304646
f0104034:	83 f9 09             	cmp    $0x9,%ecxf01040346689,304702
f0104037:	77 55                	ja     f010408e <.L23+0xf>f01040376690,304751
f0104039:	83 c7 01             	add    $0x1,%edif01040396692,304844
				precision = precision * 10 + ch - '0';precision6693,304893
f010403c:	eb e9                	jmp    f0104027 <.L29+0xb>f010403c6694,304936
f010403e <.L26>:f010403e6696,304996
			precision = va_arg(ap, int);precision6697,305013
f010403e:	8b 45 14             	mov    0x14(%ebp),%eaxf010403e6698,305045
f0104041:	8b 00                	mov    (%eax),%eaxf01040416699,305100
f0104043:	89 45 d0             	mov    %eax,-0x30(%ebp)f01040436700,305151
f0104046:	8b 45 14             	mov    0x14(%ebp),%eaxf01040466701,305207
f0104049:	8d 40 04             	lea    0x4(%eax),%eaxf01040496702,305262
f010404c:	89 45 14             	mov    %eax,0x14(%ebp)f010404c6703,305316
f010404f:	8b 7d e4             	mov    -0x1c(%ebp),%edif010404f6705,305414
f0104052:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f01040526707,305488
f0104056:	79 90                	jns    f0103fe8 <vprintfmt+0x40>f01040566708,305544
				width = precision, precision = -1;width6709,305609
f0104058:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01040586710,305648
f010405b:	89 45 e0             	mov    %eax,-0x20(%ebp)f010405b6711,305704
f010405e:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f010405e6712,305760
f0104065:	eb 81                	jmp    f0103fe8 <vprintfmt+0x40>f01040656713,305823
f0104067 <.L27>:f01040676715,305889
f0104067:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01040676716,305906
f010406a:	85 c0                	test   %eax,%eaxf010406a6717,305962
f010406c:	ba 00 00 00 00       	mov    $0x0,%edxf010406c6718,306011
f0104071:	0f 49 d0             	cmovns %eax,%edxf01040716719,306060
f0104074:	89 55 e0             	mov    %edx,-0x20(%ebp)f01040746720,306109
f0104077:	8b 7d e4             	mov    -0x1c(%ebp),%edif01040776722,306208
f010407a:	e9 69 ff ff ff       	jmp    f0103fe8 <vprintfmt+0x40>f010407a6723,306264
f010407f <.L23>:f010407f6725,306330
f010407f:	8b 7d e4             	mov    -0x1c(%ebp),%edif010407f6726,306347
			altflag = 1;altflag6727,306403
f0104082:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)f01040826728,306419
f0104089:	e9 5a ff ff ff       	jmp    f0103fe8 <vprintfmt+0x40>f01040896730,306493
f010408e:	89 45 d0             	mov    %eax,-0x30(%ebp)f010408e6731,306558
f0104091:	eb bf                	jmp    f0104052 <.L26+0x14>f01040916732,306614
f0104093 <.L33>:f01040936734,306675
f0104093:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f01040936736,306704
f0104097:	8b 7d e4             	mov    -0x1c(%ebp),%edif01040976738,306803
f010409a:	e9 49 ff ff ff       	jmp    f0103fe8 <vprintfmt+0x40>f010409a6740,306877
f010409f <.L30>:f010409f6742,306943
f010409f:	8b 45 14             	mov    0x14(%ebp),%eaxf010409f6744,306995
f01040a2:	8d 78 04             	lea    0x4(%eax),%edif01040a26745,307050
f01040a5:	83 ec 08             	sub    $0x8,%espf01040a56746,307104
f01040a8:	56                   	push   %esif01040a86747,307153
f01040a9:	ff 30                	pushl  (%eax)f01040a96748,307197
f01040ab:	ff 55 08             	call   *0x8(%ebp)f01040ab6749,307243
f01040ae:	83 c4 10             	add    $0x10,%espf01040ae6751,307303
f01040b1:	89 7d 14             	mov    %edi,0x14(%ebp)f01040b16753,307388
f01040b4:	e9 99 02 00 00       	jmp    f0104352 <.L35+0x45>f01040b46755,307453
f01040b9 <.L32>:f01040b96757,307514
			err = va_arg(ap, int);err6758,307531
f01040b9:	8b 45 14             	mov    0x14(%ebp),%eaxf01040b96759,307557
f01040bc:	8d 78 04             	lea    0x4(%eax),%edif01040bc6760,307612
f01040bf:	8b 00                	mov    (%eax),%eaxf01040bf6761,307666
f01040c1:	99                   	cltd   f01040c16762,307717
f01040c2:	31 d0                	xor    %edx,%eaxf01040c26763,307757
f01040c4:	29 d0                	sub    %edx,%eaxf01040c46764,307806
f01040c6:	83 f8 06             	cmp    $0x6,%eaxf01040c66766,307914
f01040c9:	7f 27                	jg     f01040f2 <.L32+0x39>f01040c96767,307963
f01040cb:	8b 94 83 b0 20 00 00 	mov    0x20b0(%ebx,%eax,4),%edxf01040cb6768,308023
f01040d2:	85 d2                	test   %edx,%edxf01040d26769,308087
f01040d4:	74 1c                	je     f01040f2 <.L32+0x39>f01040d46770,308136
f01040d6:	52                   	push   %edxf01040d66772,308234
f01040d7:	8d 83 59 69 f8 ff    	lea    -0x796a7(%ebx),%eaxf01040d76773,308278
f01040dd:	50                   	push   %eaxf01040dd6774,308337
f01040de:	56                   	push   %esif01040de6775,308381
f01040df:	ff 75 08             	pushl  0x8(%ebp)f01040df6776,308425
f01040e2:	e8 a4 fe ff ff       	call   f0103f8b <printfmt>f01040e26777,308474
f01040e7:	83 c4 10             	add    $0x10,%espf01040e76778,308533
			err = va_arg(ap, int);err6779,308583
f01040ea:	89 7d 14             	mov    %edi,0x14(%ebp)f01040ea6780,308609
f01040ed:	e9 60 02 00 00       	jmp    f0104352 <.L35+0x45>f01040ed6781,308664
f01040f2:	50                   	push   %eaxf01040f26783,308770
f01040f3:	8d 83 55 70 f8 ff    	lea    -0x78fab(%ebx),%eaxf01040f36784,308814
f01040f9:	50                   	push   %eaxf01040f96785,308873
f01040fa:	56                   	push   %esif01040fa6786,308917
f01040fb:	ff 75 08             	pushl  0x8(%ebp)f01040fb6787,308961
f01040fe:	e8 88 fe ff ff       	call   f0103f8b <printfmt>f01040fe6788,309010
f0104103:	83 c4 10             	add    $0x10,%espf01041036789,309069
			err = va_arg(ap, int);err6790,309119
f0104106:	89 7d 14             	mov    %edi,0x14(%ebp)f01041066791,309145
f0104109:	e9 44 02 00 00       	jmp    f0104352 <.L35+0x45>f01041096793,309246
f010410e <.L36>:f010410e6795,309307
f010410e:	8b 45 14             	mov    0x14(%ebp),%eaxf010410e6797,309365
f0104111:	83 c0 04             	add    $0x4,%eaxf01041116798,309420
f0104114:	89 45 cc             	mov    %eax,-0x34(%ebp)f01041146799,309469
f0104117:	8b 45 14             	mov    0x14(%ebp),%eaxf01041176800,309525
f010411a:	8b 38                	mov    (%eax),%edif010411a6801,309580
				p = "(null)";p6802,309631
f010411c:	85 ff                	test   %edi,%edif010411c6803,309649
f010411e:	8d 83 4e 70 f8 ff    	lea    -0x78fb2(%ebx),%eaxf010411e6804,309698
f0104124:	0f 44 f8             	cmove  %eax,%edif01041246805,309757
f0104127:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f01041276807,309839
f010412b:	0f 8e b5 00 00 00    	jle    f01041e6 <.L36+0xd8>f010412b6808,309895
f0104131:	80 7d d4 2d          	cmpb   $0x2d,-0x2c(%ebp)f01041316809,309955
f0104135:	75 08                	jne    f010413f <.L36+0x31>f01041356810,310012
f0104137:	89 75 0c             	mov    %esi,0xc(%ebp)f01041376811,310072
f010413a:	8b 75 d0             	mov    -0x30(%ebp),%esif010413a6812,310126
f010413d:	eb 6d                	jmp    f01041ac <.L36+0x9e>f010413d6813,310182
f010413f:	83 ec 08             	sub    $0x8,%espf010413f6815,310303
f0104142:	ff 75 d0             	pushl  -0x30(%ebp)f01041426816,310352
f0104145:	57                   	push   %edif01041456817,310403
f0104146:	e8 49 04 00 00       	call   f0104594 <strnlen>f01041466818,310447
f010414b:	8b 55 e0             	mov    -0x20(%ebp),%edxf010414b6819,310505
f010414e:	29 c2                	sub    %eax,%edxf010414e6820,310561
f0104150:	89 55 c8             	mov    %edx,-0x38(%ebp)f01041506821,310610
f0104153:	83 c4 10             	add    $0x10,%espf01041536822,310666
f0104156:	0f be 45 d4          	movsbl -0x2c(%ebp),%eaxf01041566824,310742
f010415a:	89 45 e0             	mov    %eax,-0x20(%ebp)f010415a6825,310798
f010415d:	89 7d d4             	mov    %edi,-0x2c(%ebp)f010415d6826,310854
f0104160:	89 d7                	mov    %edx,%edif01041606827,310910
f0104162:	eb 10                	jmp    f0104174 <.L36+0x66>f01041626829,311020
f0104164:	83 ec 08             	sub    $0x8,%espf01041646831,311106
f0104167:	56                   	push   %esif01041676832,311155
f0104168:	ff 75 e0             	pushl  -0x20(%ebp)f01041686833,311199
f010416b:	ff 55 08             	call   *0x8(%ebp)f010416b6834,311250
f010416e:	83 ef 01             	sub    $0x1,%edif010416e6836,311361
f0104171:	83 c4 10             	add    $0x10,%espf01041716837,311410
f0104174:	85 ff                	test   %edi,%edif01041746838,311460
f0104176:	7f ec                	jg     f0104164 <.L36+0x56>f01041766839,311509
f0104178:	8b 7d d4             	mov    -0x2c(%ebp),%edif01041786840,311569
f010417b:	8b 55 c8             	mov    -0x38(%ebp),%edxf010417b6841,311625
f010417e:	85 d2                	test   %edx,%edxf010417e6842,311681
f0104180:	b8 00 00 00 00       	mov    $0x0,%eaxf01041806843,311730
f0104185:	0f 49 c2             	cmovns %edx,%eaxf01041856844,311779
f0104188:	29 c2                	sub    %eax,%edxf01041886845,311828
f010418a:	89 55 e0             	mov    %edx,-0x20(%ebp)f010418a6846,311877
f010418d:	89 75 0c             	mov    %esi,0xc(%ebp)f010418d6847,311933
f0104190:	8b 75 d0             	mov    -0x30(%ebp),%esif01041906848,311987
f0104193:	eb 17                	jmp    f01041ac <.L36+0x9e>f01041936849,312043
f0104195:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)f01041956851,312146
f0104199:	75 30                	jne    f01041cb <.L36+0xbd>f01041996852,312202
f010419b:	83 ec 08             	sub    $0x8,%espf010419b6854,312286
f010419e:	ff 75 0c             	pushl  0xc(%ebp)f010419e6855,312335
f01041a1:	50                   	push   %eaxf01041a16856,312384
f01041a2:	ff 55 08             	call   *0x8(%ebp)f01041a26857,312428
f01041a5:	83 c4 10             	add    $0x10,%espf01041a56858,312478
f01041a8:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)f01041a86860,312607
f01041ac:	83 c7 01             	add    $0x1,%edif01041ac6861,312663
f01041af:	0f b6 57 ff          	movzbl -0x1(%edi),%edxf01041af6862,312712
f01041b3:	0f be c2             	movsbl %dl,%eaxf01041b36863,312767
f01041b6:	85 c0                	test   %eax,%eaxf01041b66864,312815
f01041b8:	74 52                	je     f010420c <.L36+0xfe>f01041b86865,312864
f01041ba:	85 f6                	test   %esi,%esif01041ba6866,312924
f01041bc:	78 d7                	js     f0104195 <.L36+0x87>f01041bc6867,312973
f01041be:	83 ee 01             	sub    $0x1,%esif01041be6868,313033
f01041c1:	79 d2                	jns    f0104195 <.L36+0x87>f01041c16869,313082
f01041c3:	8b 75 0c             	mov    0xc(%ebp),%esif01041c36870,313142
f01041c6:	8b 7d e0             	mov    -0x20(%ebp),%edif01041c66871,313196
f01041c9:	eb 32                	jmp    f01041fd <.L36+0xef>f01041c96872,313252
f01041cb:	0f be d2             	movsbl %dl,%edxf01041cb6874,313355
f01041ce:	83 ea 20             	sub    $0x20,%edxf01041ce6875,313403
f01041d1:	83 fa 5e             	cmp    $0x5e,%edxf01041d16876,313453
f01041d4:	76 c5                	jbe    f010419b <.L36+0x8d>f01041d46877,313503
f01041d6:	83 ec 08             	sub    $0x8,%espf01041d66879,313588
f01041d9:	ff 75 0c             	pushl  0xc(%ebp)f01041d96880,313637
f01041dc:	6a 3f                	push   $0x3ff01041dc6881,313686
f01041de:	ff 55 08             	call   *0x8(%ebp)f01041de6882,313731
f01041e1:	83 c4 10             	add    $0x10,%espf01041e16883,313781
f01041e4:	eb c2                	jmp    f01041a8 <.L36+0x9a>f01041e46884,313831
f01041e6:	89 75 0c             	mov    %esi,0xc(%ebp)f01041e66885,313891
f01041e9:	8b 75 d0             	mov    -0x30(%ebp),%esif01041e96886,313945
f01041ec:	eb be                	jmp    f01041ac <.L36+0x9e>f01041ec6887,314001
f01041ee:	83 ec 08             	sub    $0x8,%espf01041ee6889,314085
f01041f1:	56                   	push   %esif01041f16890,314134
f01041f2:	6a 20                	push   $0x20f01041f26891,314178
f01041f4:	ff 55 08             	call   *0x8(%ebp)f01041f46892,314223
f01041f7:	83 ef 01             	sub    $0x1,%edif01041f76894,314303
f01041fa:	83 c4 10             	add    $0x10,%espf01041fa6895,314352
f01041fd:	85 ff                	test   %edi,%edif01041fd6896,314402
f01041ff:	7f ed                	jg     f01041ee <.L36+0xe0>f01041ff6897,314451
f0104201:	8b 45 cc             	mov    -0x34(%ebp),%eaxf01042016899,314552
f0104204:	89 45 14             	mov    %eax,0x14(%ebp)f01042046900,314608
f0104207:	e9 46 01 00 00       	jmp    f0104352 <.L35+0x45>f01042076901,314663
f010420c:	8b 7d e0             	mov    -0x20(%ebp),%edif010420c6902,314723
f010420f:	8b 75 0c             	mov    0xc(%ebp),%esif010420f6903,314779
f0104212:	eb e9                	jmp    f01041fd <.L36+0xef>f01042126904,314833
f0104214 <.L31>:f01042146906,314894
f0104214:	8b 4d cc             	mov    -0x34(%ebp),%ecxf01042146907,314911
f0104217:	83 f9 01             	cmp    $0x1,%ecxf01042176909,314984
f010421a:	7e 40                	jle    f010425c <.L31+0x48>f010421a6910,315033
f010421c:	8b 45 14             	mov    0x14(%ebp),%eaxf010421c6912,315126
f010421f:	8b 50 04             	mov    0x4(%eax),%edxf010421f6913,315181
f0104222:	8b 00                	mov    (%eax),%eaxf01042226914,315235
f0104224:	89 45 d8             	mov    %eax,-0x28(%ebp)f01042246915,315286
f0104227:	89 55 dc             	mov    %edx,-0x24(%ebp)f01042276916,315342
f010422a:	8b 45 14             	mov    0x14(%ebp),%eaxf010422a6917,315398
f010422d:	8d 40 08             	lea    0x8(%eax),%eaxf010422d6918,315453
f0104230:	89 45 14             	mov    %eax,0x14(%ebp)f01042306919,315507
f0104233:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)f01042336921,315592
f0104237:	79 55                	jns    f010428e <.L31+0x7a>f01042376922,315648
f0104239:	83 ec 08             	sub    $0x8,%espf01042396924,315732
f010423c:	56                   	push   %esif010423c6925,315781
f010423d:	6a 2d                	push   $0x2df010423d6926,315825
f010423f:	ff 55 08             	call   *0x8(%ebp)f010423f6927,315870
				num = -(long long) num;num6928,315920
f0104242:	8b 55 d8             	mov    -0x28(%ebp),%edxf01042426929,315948
f0104245:	8b 4d dc             	mov    -0x24(%ebp),%ecxf01042456930,316004
f0104248:	f7 da                	neg    %edxf01042486931,316060
f010424a:	83 d1 00             	adc    $0x0,%ecxf010424a6932,316104
f010424d:	f7 d9                	neg    %ecxf010424d6933,316153
f010424f:	83 c4 10             	add    $0x10,%espf010424f6934,316197
			base = 10;base6935,316247
f0104252:	b8 0a 00 00 00       	mov    $0xa,%eaxf01042526936,316261
f0104257:	e9 db 00 00 00       	jmp    f0104337 <.L35+0x2a>f01042576937,316310
f010425c:	85 c9                	test   %ecx,%ecxf010425c6939,316387
f010425e:	75 17                	jne    f0104277 <.L31+0x63>f010425e6940,316436
f0104260:	8b 45 14             	mov    0x14(%ebp),%eaxf01042606942,316523
f0104263:	8b 00                	mov    (%eax),%eaxf01042636943,316578
f0104265:	89 45 d8             	mov    %eax,-0x28(%ebp)f01042656944,316629
f0104268:	99                   	cltd   f01042686945,316685
f0104269:	89 55 dc             	mov    %edx,-0x24(%ebp)f01042696946,316725
f010426c:	8b 45 14             	mov    0x14(%ebp),%eaxf010426c6947,316781
f010426f:	8d 40 04             	lea    0x4(%eax),%eaxf010426f6948,316836
f0104272:	89 45 14             	mov    %eax,0x14(%ebp)f01042726949,316890
f0104275:	eb bc                	jmp    f0104233 <.L31+0x1f>f01042756950,316945
f0104277:	8b 45 14             	mov    0x14(%ebp),%eaxf01042776952,317033
f010427a:	8b 00                	mov    (%eax),%eaxf010427a6953,317088
f010427c:	89 45 d8             	mov    %eax,-0x28(%ebp)f010427c6954,317139
f010427f:	99                   	cltd   f010427f6955,317195
f0104280:	89 55 dc             	mov    %edx,-0x24(%ebp)f01042806956,317235
f0104283:	8b 45 14             	mov    0x14(%ebp),%eaxf01042836957,317291
f0104286:	8d 40 04             	lea    0x4(%eax),%eaxf01042866958,317346
f0104289:	89 45 14             	mov    %eax,0x14(%ebp)f01042896959,317400
f010428c:	eb a5                	jmp    f0104233 <.L31+0x1f>f010428c6960,317455
			num = getint(&ap, lflag);num6961,317515
f010428e:	8b 55 d8             	mov    -0x28(%ebp),%edxf010428e6962,317544
f0104291:	8b 4d dc             	mov    -0x24(%ebp),%ecxf01042916963,317600
			base = 10;base6964,317656
f0104294:	b8 0a 00 00 00       	mov    $0xa,%eaxf01042946965,317670
f0104299:	e9 99 00 00 00       	jmp    f0104337 <.L35+0x2a>f01042996966,317719
f010429e <.L37>:f010429e6968,317780
f010429e:	8b 4d cc             	mov    -0x34(%ebp),%ecxf010429e6969,317797
f01042a1:	83 f9 01             	cmp    $0x1,%ecxf01042a16971,317870
f01042a4:	7e 15                	jle    f01042bb <.L37+0x1d>f01042a46972,317919
f01042a6:	8b 45 14             	mov    0x14(%ebp),%eaxf01042a66974,318021
f01042a9:	8b 10                	mov    (%eax),%edxf01042a96975,318076
f01042ab:	8b 48 04             	mov    0x4(%eax),%ecxf01042ab6976,318127
f01042ae:	8d 40 08             	lea    0x8(%eax),%eaxf01042ae6977,318181
f01042b1:	89 45 14             	mov    %eax,0x14(%ebp)f01042b16978,318235
			base = 10;base6979,318290
f01042b4:	b8 0a 00 00 00       	mov    $0xa,%eaxf01042b46980,318304
f01042b9:	eb 7c                	jmp    f0104337 <.L35+0x2a>f01042b96981,318353
f01042bb:	85 c9                	test   %ecx,%ecxf01042bb6983,318430
f01042bd:	75 17                	jne    f01042d6 <.L37+0x38>f01042bd6984,318479
f01042bf:	8b 45 14             	mov    0x14(%ebp),%eaxf01042bf6986,318575
f01042c2:	8b 10                	mov    (%eax),%edxf01042c26987,318630
f01042c4:	b9 00 00 00 00       	mov    $0x0,%ecxf01042c46988,318681
f01042c9:	8d 40 04             	lea    0x4(%eax),%eaxf01042c96989,318730
f01042cc:	89 45 14             	mov    %eax,0x14(%ebp)f01042cc6990,318784
			base = 10;base6991,318839
f01042cf:	b8 0a 00 00 00       	mov    $0xa,%eaxf01042cf6992,318853
f01042d4:	eb 61                	jmp    f0104337 <.L35+0x2a>f01042d46993,318902
f01042d6:	8b 45 14             	mov    0x14(%ebp),%eaxf01042d66995,318999
f01042d9:	8b 10                	mov    (%eax),%edxf01042d96996,319054
f01042db:	b9 00 00 00 00       	mov    $0x0,%ecxf01042db6997,319105
f01042e0:	8d 40 04             	lea    0x4(%eax),%eaxf01042e06998,319154
f01042e3:	89 45 14             	mov    %eax,0x14(%ebp)f01042e36999,319208
			base = 10;base7000,319263
f01042e6:	b8 0a 00 00 00       	mov    $0xa,%eaxf01042e67001,319277
f01042eb:	eb 4a                	jmp    f0104337 <.L35+0x2a>f01042eb7002,319326
f01042ed <.L34>:f01042ed7004,319387
f01042ed:	83 ec 08             	sub    $0x8,%espf01042ed7006,319427
f01042f0:	56                   	push   %esif01042f07007,319476
f01042f1:	6a 58                	push   $0x58f01042f17008,319520
f01042f3:	ff 55 08             	call   *0x8(%ebp)f01042f37009,319565
f01042f6:	83 c4 08             	add    $0x8,%espf01042f67011,319638
f01042f9:	56                   	push   %esif01042f97012,319687
f01042fa:	6a 58                	push   $0x58f01042fa7013,319731
f01042fc:	ff 55 08             	call   *0x8(%ebp)f01042fc7014,319776
f01042ff:	83 c4 08             	add    $0x8,%espf01042ff7016,319849
f0104302:	56                   	push   %esif01043027017,319898
f0104303:	6a 58                	push   $0x58f01043037018,319942
f0104305:	ff 55 08             	call   *0x8(%ebp)f01043057019,319987
f0104308:	83 c4 10             	add    $0x10,%espf01043087021,320047
f010430b:	eb 45                	jmp    f0104352 <.L35+0x45>f010430b7022,320097
f010430d <.L35>:f010430d7024,320158
f010430d:	83 ec 08             	sub    $0x8,%espf010430d7026,320198
f0104310:	56                   	push   %esif01043107027,320247
f0104311:	6a 30                	push   $0x30f01043117028,320291
f0104313:	ff 55 08             	call   *0x8(%ebp)f01043137029,320336
f0104316:	83 c4 08             	add    $0x8,%espf01043167031,320409
f0104319:	56                   	push   %esif01043197032,320458
f010431a:	6a 78                	push   $0x78f010431a7033,320502
f010431c:	ff 55 08             	call   *0x8(%ebp)f010431c7034,320547
			num = (unsigned long long)num7035,320597
f010431f:	8b 45 14             	mov    0x14(%ebp),%eaxf010431f7036,320627
f0104322:	8b 10                	mov    (%eax),%edxf01043227037,320682
f0104324:	b9 00 00 00 00       	mov    $0x0,%ecxf01043247038,320733
f0104329:	83 c4 10             	add    $0x10,%espf01043297040,320798
f010432c:	8d 40 04             	lea    0x4(%eax),%eaxf010432c7042,320884
f010432f:	89 45 14             	mov    %eax,0x14(%ebp)f010432f7043,320938
			base = 16;base7044,320993
f0104332:	b8 10 00 00 00       	mov    $0x10,%eaxf01043327045,321007
f0104337:	83 ec 0c             	sub    $0xc,%espf01043377047,321109
f010433a:	0f be 7d d4          	movsbl -0x2c(%ebp),%edif010433a7048,321158
f010433e:	57                   	push   %edif010433e7049,321214
f010433f:	ff 75 e0             	pushl  -0x20(%ebp)f010433f7050,321258
f0104342:	50                   	push   %eaxf01043427051,321309
f0104343:	51                   	push   %ecxf01043437052,321353
f0104344:	52                   	push   %edxf01043447053,321397
f0104345:	89 f2                	mov    %esi,%edxf01043457054,321441
f0104347:	8b 45 08             	mov    0x8(%ebp),%eaxf01043477055,321490
f010434a:	e8 55 fb ff ff       	call   f0103ea4 <printnum>f010434a7056,321544
f010434f:	83 c4 20             	add    $0x20,%espf010434f7058,321613
			err = va_arg(ap, int);err7059,321663
f0104352:	8b 7d e4             	mov    -0x1c(%ebp),%edif01043527060,321689
f0104355:	83 c7 01             	add    $0x1,%edif01043557062,321796
f0104358:	0f b6 47 ff          	movzbl -0x1(%edi),%eaxf01043587063,321845
f010435c:	83 f8 25             	cmp    $0x25,%eaxf010435c7064,321900
f010435f:	0f 84 62 fc ff ff    	je     f0103fc7 <vprintfmt+0x1f>f010435f7065,321950
f0104365:	85 c0                	test   %eax,%eaxf01043657067,322034
f0104367:	0f 84 91 00 00 00    	je     f01043fe <.L22+0x21>f01043677068,322083
f010436d:	83 ec 08             	sub    $0x8,%espf010436d7070,322165
f0104370:	56                   	push   %esif01043707071,322214
f0104371:	50                   	push   %eaxf01043717072,322258
f0104372:	ff 55 08             	call   *0x8(%ebp)f01043727073,322302
f0104375:	83 c4 10             	add    $0x10,%espf01043757074,322352
f0104378:	eb db                	jmp    f0104355 <.L35+0x48>f01043787075,322402
f010437a <.L38>:f010437a7077,322463
f010437a:	8b 4d cc             	mov    -0x34(%ebp),%ecxf010437a7078,322480
f010437d:	83 f9 01             	cmp    $0x1,%ecxf010437d7080,322553
f0104380:	7e 15                	jle    f0104397 <.L38+0x1d>f01043807081,322602
f0104382:	8b 45 14             	mov    0x14(%ebp),%eaxf01043827083,322704
f0104385:	8b 10                	mov    (%eax),%edxf01043857084,322759
f0104387:	8b 48 04             	mov    0x4(%eax),%ecxf01043877085,322810
f010438a:	8d 40 08             	lea    0x8(%eax),%eaxf010438a7086,322864
f010438d:	89 45 14             	mov    %eax,0x14(%ebp)f010438d7087,322918
			base = 16;base7088,322973
f0104390:	b8 10 00 00 00       	mov    $0x10,%eaxf01043907089,322987
f0104395:	eb a0                	jmp    f0104337 <.L35+0x2a>f01043957090,323037
f0104397:	85 c9                	test   %ecx,%ecxf01043977092,323114
f0104399:	75 17                	jne    f01043b2 <.L38+0x38>f01043997093,323163
f010439b:	8b 45 14             	mov    0x14(%ebp),%eaxf010439b7095,323259
f010439e:	8b 10                	mov    (%eax),%edxf010439e7096,323314
f01043a0:	b9 00 00 00 00       	mov    $0x0,%ecxf01043a07097,323365
f01043a5:	8d 40 04             	lea    0x4(%eax),%eaxf01043a57098,323414
f01043a8:	89 45 14             	mov    %eax,0x14(%ebp)f01043a87099,323468
			base = 16;base7100,323523
f01043ab:	b8 10 00 00 00       	mov    $0x10,%eaxf01043ab7101,323537
f01043b0:	eb 85                	jmp    f0104337 <.L35+0x2a>f01043b07102,323587
f01043b2:	8b 45 14             	mov    0x14(%ebp),%eaxf01043b27104,323684
f01043b5:	8b 10                	mov    (%eax),%edxf01043b57105,323739
f01043b7:	b9 00 00 00 00       	mov    $0x0,%ecxf01043b77106,323790
f01043bc:	8d 40 04             	lea    0x4(%eax),%eaxf01043bc7107,323839
f01043bf:	89 45 14             	mov    %eax,0x14(%ebp)f01043bf7108,323893
			base = 16;base7109,323948
f01043c2:	b8 10 00 00 00       	mov    $0x10,%eaxf01043c27110,323962
f01043c7:	e9 6b ff ff ff       	jmp    f0104337 <.L35+0x2a>f01043c77111,324012
f01043cc <.L25>:f01043cc7113,324073
f01043cc:	83 ec 08             	sub    $0x8,%espf01043cc7115,324112
f01043cf:	56                   	push   %esif01043cf7116,324161
f01043d0:	6a 25                	push   $0x25f01043d07117,324205
f01043d2:	ff 55 08             	call   *0x8(%ebp)f01043d27118,324250
f01043d5:	83 c4 10             	add    $0x10,%espf01043d57120,324310
f01043d8:	e9 75 ff ff ff       	jmp    f0104352 <.L35+0x45>f01043d87121,324360
f01043dd <.L22>:f01043dd7123,324421
f01043dd:	83 ec 08             	sub    $0x8,%espf01043dd7125,324461
f01043e0:	56                   	push   %esif01043e07126,324510
f01043e1:	6a 25                	push   $0x25f01043e17127,324554
f01043e3:	ff 55 08             	call   *0x8(%ebp)f01043e37128,324599
f01043e6:	83 c4 10             	add    $0x10,%espf01043e67130,324687
f01043e9:	89 f8                	mov    %edi,%eaxf01043e97131,324737
f01043eb:	eb 03                	jmp    f01043f0 <.L22+0x13>f01043eb7132,324786
f01043ed:	83 e8 01             	sub    $0x1,%eaxf01043ed7133,324846
f01043f0:	80 78 ff 25          	cmpb   $0x25,-0x1(%eax)f01043f07134,324895
f01043f4:	75 f7                	jne    f01043ed <.L22+0x10>f01043f47135,324951
f01043f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01043f67136,325011
f01043f9:	e9 54 ff ff ff       	jmp    f0104352 <.L35+0x45>f01043f97137,325067
f01043fe:	8d 65 f4             	lea    -0xc(%ebp),%espf01043fe7139,325129
f0104401:	5b                   	pop    %ebxf01044017140,325184
f0104402:	5e                   	pop    %esif01044027141,325228
f0104403:	5f                   	pop    %edif01044037142,325272
f0104404:	5d                   	pop    %ebpf01044047143,325316
f0104405:	c3                   	ret    f01044057144,325360
f0104406 <vsnprintf>:f01044067146,325401
intint7148,325424
f0104406:	55                   	push   %ebpf01044067151,325487
f0104407:	89 e5                	mov    %esp,%ebpf01044077152,325531
f0104409:	53                   	push   %ebxf01044097153,325580
f010440a:	83 ec 14             	sub    $0x14,%espf010440a7154,325624
f010440d:	e8 55 bd ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f010440d7155,325674
f0104412:	81 c3 0e ac 07 00    	add    $0x7ac0e,%ebxf01044127156,325746
f0104418:	8b 45 08             	mov    0x8(%ebp),%eaxf01044187157,325799
f010441b:	8b 55 0c             	mov    0xc(%ebp),%edxf010441b7158,325853
f010441e:	89 45 ec             	mov    %eax,-0x14(%ebp)f010441e7160,325948
f0104421:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecxf01044217161,326004
f0104425:	89 4d f0             	mov    %ecx,-0x10(%ebp)f01044257162,326066
f0104428:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f01044287163,326122
f010442f:	85 c0                	test   %eax,%eaxf010442f7166,326205
f0104431:	74 2b                	je     f010445e <vsnprintf+0x58>f01044317167,326254
f0104433:	85 d2                	test   %edx,%edxf01044337168,326319
f0104435:	7e 27                	jle    f010445e <vsnprintf+0x58>f01044357169,326368
f0104437:	ff 75 14             	pushl  0x14(%ebp)f01044377174,326533
f010443a:	ff 75 10             	pushl  0x10(%ebp)f010443a7175,326583
f010443d:	8d 45 ec             	lea    -0x14(%ebp),%eaxf010443d7176,326633
f0104440:	50                   	push   %eaxf01044407177,326689
f0104441:	8d 83 4e 4f f8 ff    	lea    -0x7b0b2(%ebx),%eaxf01044417178,326733
f0104447:	50                   	push   %eaxf01044477179,326792
f0104448:	e8 5b fb ff ff       	call   f0103fa8 <vprintfmt>f01044487180,326836
f010444d:	8b 45 ec             	mov    -0x14(%ebp),%eaxf010444d7184,326943
f0104450:	c6 00 00             	movb   $0x0,(%eax)f01044507185,326999
f0104453:	8b 45 f4             	mov    -0xc(%ebp),%eaxf01044537188,327066
f0104456:	83 c4 10             	add    $0x10,%espf01044567189,327121
f0104459:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01044597191,327173
f010445c:	c9                   	leave  f010445c7192,327228
f010445d:	c3                   	ret    f010445d7193,327268
f010445e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eaxf010445e7195,327327
f0104463:	eb f4                	jmp    f0104459 <vsnprintf+0x53>f01044637196,327383
f0104465 <snprintf>:f01044657198,327449
intint7200,327471
f0104465:	55                   	push   %ebpf01044657203,327526
f0104466:	89 e5                	mov    %esp,%ebpf01044667204,327570
f0104468:	83 ec 08             	sub    $0x8,%espf01044687205,327619
f010446b:	8d 45 14             	lea    0x14(%ebp),%eaxf010446b7210,327711
	rc = vsnprintf(buf, n, fmt, ap);rc7211,327766
f010446e:	50                   	push   %eaxf010446e7212,327800
f010446f:	ff 75 10             	pushl  0x10(%ebp)f010446f7213,327844
f0104472:	ff 75 0c             	pushl  0xc(%ebp)f01044727214,327894
f0104475:	ff 75 08             	pushl  0x8(%ebp)f01044757215,327943
f0104478:	e8 89 ff ff ff       	call   f0104406 <vsnprintf>f01044787216,327992
f010447d:	c9                   	leave  f010447d7221,328080
f010447e:	c3                   	ret    f010447e7222,328120
f010447f <readline>:f010447f7224,328161
#define BUFLEN 1024BUFLEN7225,328182
static char buf[BUFLEN];static7226,328202
char *char7228,328228
f010447f:	55                   	push   %ebpf010447f7231,328266
f0104480:	89 e5                	mov    %esp,%ebpf01044807232,328310
f0104482:	57                   	push   %edif01044827233,328359
f0104483:	56                   	push   %esif01044837234,328403
f0104484:	53                   	push   %ebxf01044847235,328447
f0104485:	83 ec 1c             	sub    $0x1c,%espf01044857236,328491
f0104488:	e8 da bc ff ff       	call   f0100167 <__x86.get_pc_thunk.bx>f01044887237,328541
f010448d:	81 c3 93 ab 07 00    	add    $0x7ab93,%ebxf010448d7238,328613
f0104493:	8b 45 08             	mov    0x8(%ebp),%eaxf01044937239,328666
f0104496:	85 c0                	test   %eax,%eaxf01044967243,328762
f0104498:	74 13                	je     f01044ad <readline+0x2e>f01044987244,328811
f010449a:	83 ec 08             	sub    $0x8,%espf010449a7246,328900
f010449d:	50                   	push   %eaxf010449d7247,328949
f010449e:	8d 83 59 69 f8 ff    	lea    -0x796a7(%ebx),%eaxf010449e7248,328993
f01044a4:	50                   	push   %eaxf01044a47249,329052
f01044a5:	e8 70 f2 ff ff       	call   f010371a <cprintf>f01044a57250,329096
f01044aa:	83 c4 10             	add    $0x10,%espf01044aa7251,329154
	i = 0;i7253,329205
	echoing = iscons(0);echoing7254,329213
f01044ad:	83 ec 0c             	sub    $0xc,%espf01044ad7255,329235
f01044b0:	6a 00                	push   $0x0f01044b07256,329284
f01044b2:	e8 48 c2 ff ff       	call   f01006ff <iscons>f01044b27257,329328
f01044b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01044b77258,329385
f01044ba:	83 c4 10             	add    $0x10,%espf01044ba7259,329441
	i = 0;i7260,329491
f01044bd:	bf 00 00 00 00       	mov    $0x0,%edif01044bd7261,329499
f01044c2:	eb 46                	jmp    f010450a <readline+0x8b>f01044c27262,329548
		c = getchar();c7264,329625
f01044c4:	83 ec 08             	sub    $0x8,%espf01044c47267,329692
f01044c7:	50                   	push   %eaxf01044c77268,329741
f01044c8:	8d 83 20 72 f8 ff    	lea    -0x78de0(%ebx),%eaxf01044c87269,329785
f01044ce:	50                   	push   %eaxf01044ce7270,329844
f01044cf:	e8 46 f2 ff ff       	call   f010371a <cprintf>f01044cf7271,329888
f01044d4:	83 c4 10             	add    $0x10,%espf01044d47273,329962
f01044d7:	b8 00 00 00 00       	mov    $0x0,%eaxf01044d77274,330012
f01044dc:	8d 65 f4             	lea    -0xc(%ebp),%espf01044dc7281,330120
f01044df:	5b                   	pop    %ebxf01044df7282,330175
f01044e0:	5e                   	pop    %esif01044e07283,330219
f01044e1:	5f                   	pop    %edif01044e17284,330263
f01044e2:	5d                   	pop    %ebpf01044e27285,330307
f01044e3:	c3                   	ret    f01044e37286,330351
f01044e4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01044e47288,330407
f01044e8:	75 05                	jne    f01044ef <readline+0x70>f01044e87289,330463
f01044ea:	83 ef 01             	sub    $0x1,%edif01044ea7291,330535
f01044ed:	eb 1b                	jmp    f010450a <readline+0x8b>f01044ed7292,330584
f01044ef:	83 ec 0c             	sub    $0xc,%espf01044ef7294,330668
f01044f2:	6a 08                	push   $0x8f01044f27295,330717
f01044f4:	e8 e5 c1 ff ff       	call   f01006de <cputchar>f01044f47296,330761
f01044f9:	83 c4 10             	add    $0x10,%espf01044f97297,330820
f01044fc:	eb ec                	jmp    f01044ea <readline+0x6b>f01044fc7298,330870
f01044fe:	89 f0                	mov    %esi,%eaxf01044fe7300,330951
f0104500:	88 84 3b e0 2b 00 00 	mov    %al,0x2be0(%ebx,%edi,1)f01045007301,331000
f0104507:	8d 7f 01             	lea    0x1(%edi),%edif01045077302,331063
		c = getchar();c7303,331117
f010450a:	e8 df c1 ff ff       	call   f01006ee <getchar>f010450a7304,331134
f010450f:	89 c6                	mov    %eax,%esif010450f7305,331192
f0104511:	85 c0                	test   %eax,%eaxf01045117307,331256
f0104513:	78 af                	js     f01044c4 <readline+0x45>f01045137308,331305
f0104515:	83 f8 08             	cmp    $0x8,%eaxf01045157310,331421
f0104518:	0f 94 c2             	sete   %dlf01045187311,331470
f010451b:	83 f8 7f             	cmp    $0x7f,%eaxf010451b7312,331513
f010451e:	0f 94 c0             	sete   %alf010451e7313,331563
f0104521:	08 c2                	or     %al,%dlf01045217314,331606
f0104523:	74 04                	je     f0104529 <readline+0xaa>f01045237315,331653
f0104525:	85 ff                	test   %edi,%edif01045257316,331717
f0104527:	7f bb                	jg     f01044e4 <readline+0x65>f01045277317,331766
f0104529:	83 fe 1f             	cmp    $0x1f,%esif01045297319,331871
f010452c:	7e 1c                	jle    f010454a <readline+0xcb>f010452c7320,331921
f010452e:	81 ff fe 03 00 00    	cmp    $0x3fe,%edif010452e7321,331985
f0104534:	7f 14                	jg     f010454a <readline+0xcb>f01045347322,332036
f0104536:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01045367324,332116
f010453a:	74 c2                	je     f01044fe <readline+0x7f>f010453a7325,332172
f010453c:	83 ec 0c             	sub    $0xc,%espf010453c7327,332253
f010453f:	56                   	push   %esif010453f7328,332302
f0104540:	e8 99 c1 ff ff       	call   f01006de <cputchar>f01045407329,332346
f0104545:	83 c4 10             	add    $0x10,%espf01045457330,332405
f0104548:	eb b4                	jmp    f01044fe <readline+0x7f>f01045487331,332455
f010454a:	83 fe 0a             	cmp    $0xa,%esif010454a7333,332558
f010454d:	74 05                	je     f0104554 <readline+0xd5>f010454d7334,332607
f010454f:	83 fe 0d             	cmp    $0xd,%esif010454f7335,332671
f0104552:	75 b6                	jne    f010450a <readline+0x8b>f01045527336,332720
f0104554:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f01045547338,332800
f0104558:	75 13                	jne    f010456d <readline+0xee>f01045587339,332856
f010455a:	c6 84 3b e0 2b 00 00 	movb   $0x0,0x2be0(%ebx,%edi,1)f010455a7341,332935
f0104561:	00 f01045617342,332999
f0104562:	8d 83 e0 2b 00 00    	lea    0x2be0(%ebx),%eaxf01045627344,333028
f0104568:	e9 6f ff ff ff       	jmp    f01044dc <readline+0x5d>f01045687345,333085
f010456d:	83 ec 0c             	sub    $0xc,%espf010456d7347,333169
f0104570:	6a 0a                	push   $0xaf01045707348,333218
f0104572:	e8 67 c1 ff ff       	call   f01006de <cputchar>f01045727349,333262
f0104577:	83 c4 10             	add    $0x10,%espf01045777350,333321
f010457a:	eb de                	jmp    f010455a <readline+0xdb>f010457a7351,333371
f010457c <strlen>:f010457c7353,333436
#define ASM 1ASM7355,333494
intint7357,333509
f010457c:	55                   	push   %ebpf010457c7360,333537
f010457d:	89 e5                	mov    %esp,%ebpf010457d7361,333581
f010457f:	8b 55 08             	mov    0x8(%ebp),%edxf010457f7362,333630
f0104582:	b8 00 00 00 00       	mov    $0x0,%eaxf01045827366,333723
f0104587:	eb 03                	jmp    f010458c <strlen+0x10>f01045877367,333772
f0104589:	83 c0 01             	add    $0x1,%eaxf01045897369,333841
f010458c:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)f010458c7371,333920
f0104590:	75 f7                	jne    f0104589 <strlen+0xd>f01045907372,333978
f0104592:	5d                   	pop    %ebpf01045927375,334052
f0104593:	c3                   	ret    f01045937376,334096
f0104594 <strnlen>:f01045947378,334137
intint7380,334158
f0104594:	55                   	push   %ebpf01045947383,334200
f0104595:	89 e5                	mov    %esp,%ebpf01045957384,334244
f0104597:	8b 4d 08             	mov    0x8(%ebp),%ecxf01045977385,334293
f010459a:	8b 55 0c             	mov    0xc(%ebp),%edxf010459a7386,334347
f010459d:	b8 00 00 00 00       	mov    $0x0,%eaxf010459d7390,334460
f01045a2:	eb 03                	jmp    f01045a7 <strnlen+0x13>f01045a27391,334509
f01045a4:	83 c0 01             	add    $0x1,%eaxf01045a47393,334579
f01045a7:	39 d0                	cmp    %edx,%eaxf01045a77395,334678
f01045a9:	74 06                	je     f01045b1 <strnlen+0x1d>f01045a97396,334727
f01045ab:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)f01045ab7397,334790
f01045af:	75 f3                	jne    f01045a4 <strnlen+0x10>f01045af7398,334848
f01045b1:	5d                   	pop    %ebpf01045b17401,334924
f01045b2:	c3                   	ret    f01045b27402,334968
f01045b3 <strcpy>:f01045b37404,335009
char *char7406,335029
f01045b3:	55                   	push   %ebpf01045b37409,335073
f01045b4:	89 e5                	mov    %esp,%ebpf01045b47410,335117
f01045b6:	53                   	push   %ebxf01045b67411,335166
f01045b7:	8b 45 08             	mov    0x8(%ebp),%eaxf01045b77412,335210
f01045ba:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01045ba7413,335264
	ret = dst;ret7416,335331
f01045bd:	89 c2                	mov    %eax,%edxf01045bd7418,335378
f01045bf:	83 c1 01             	add    $0x1,%ecxf01045bf7419,335427
f01045c2:	83 c2 01             	add    $0x1,%edxf01045c27420,335476
f01045c5:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebxf01045c57421,335525
f01045c9:	88 5a ff             	mov    %bl,-0x1(%edx)f01045c97422,335580
f01045cc:	84 db                	test   %bl,%blf01045cc7423,335634
f01045ce:	75 ef                	jne    f01045bf <strcpy+0xc>f01045ce7424,335681
f01045d0:	5b                   	pop    %ebxf01045d07428,335777
f01045d1:	5d                   	pop    %ebpf01045d17429,335821
f01045d2:	c3                   	ret    f01045d27430,335865
f01045d3 <strcat>:f01045d37432,335906
char *char7434,335926
f01045d3:	55                   	push   %ebpf01045d37437,335970
f01045d4:	89 e5                	mov    %esp,%ebpf01045d47438,336014
f01045d6:	53                   	push   %ebxf01045d67439,336063
f01045d7:	8b 5d 08             	mov    0x8(%ebp),%ebxf01045d77440,336107
f01045da:	53                   	push   %ebxf01045da7442,336185
f01045db:	e8 9c ff ff ff       	call   f010457c <strlen>f01045db7443,336229
f01045e0:	83 c4 04             	add    $0x4,%espf01045e07444,336286
f01045e3:	ff 75 0c             	pushl  0xc(%ebp)f01045e37446,336360
f01045e6:	01 d8                	add    %ebx,%eaxf01045e67447,336409
f01045e8:	50                   	push   %eaxf01045e87448,336458
f01045e9:	e8 c5 ff ff ff       	call   f01045b3 <strcpy>f01045e97449,336502
f01045ee:	89 d8                	mov    %ebx,%eaxf01045ee7452,336574
f01045f0:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01045f07453,336623
f01045f3:	c9                   	leave  f01045f37454,336678
f01045f4:	c3                   	ret    f01045f47455,336718
f01045f5 <strncpy>:f01045f57457,336759
char *char7459,336780
f01045f5:	55                   	push   %ebpf01045f57461,336838
f01045f6:	89 e5                	mov    %esp,%ebpf01045f67462,336882
f01045f8:	56                   	push   %esif01045f87463,336931
f01045f9:	53                   	push   %ebxf01045f97464,336975
f01045fa:	8b 75 08             	mov    0x8(%ebp),%esif01045fa7465,337019
f01045fd:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01045fd7466,337073
f0104600:	89 f3                	mov    %esi,%ebxf01046007467,337127
f0104602:	03 5d 10             	add    0x10(%ebp),%ebxf01046027468,337176
	ret = dst;ret7472,337255
f0104605:	89 f2                	mov    %esi,%edxf01046057474,337297
f0104607:	eb 0f                	jmp    f0104618 <strncpy+0x23>f01046077475,337346
f0104609:	83 c2 01             	add    $0x1,%edxf01046097477,337426
f010460c:	0f b6 01             	movzbl (%ecx),%eaxf010460c7478,337475
f010460f:	88 42 ff             	mov    %al,-0x1(%edx)f010460f7479,337526
f0104612:	80 39 01             	cmpb   $0x1,(%ecx)f01046127483,337673
f0104615:	83 d9 ff             	sbb    $0xffffffff,%ecxf01046157484,337724
f0104618:	39 da                	cmp    %ebx,%edxf01046187486,337810
f010461a:	75 ed                	jne    f0104609 <strncpy+0x14>f010461a7487,337859
f010461c:	89 f0                	mov    %esi,%eaxf010461c7491,337940
f010461e:	5b                   	pop    %ebxf010461e7492,337989
f010461f:	5e                   	pop    %esif010461f7493,338033
f0104620:	5d                   	pop    %ebpf01046207494,338077
f0104621:	c3                   	ret    f01046217495,338121
f0104622 <strlcpy>:f01046227497,338162
size_tsize_t7499,338183
f0104622:	55                   	push   %ebpf01046227502,338241
f0104623:	89 e5                	mov    %esp,%ebpf01046237503,338285
f0104625:	56                   	push   %esif01046257504,338334
f0104626:	53                   	push   %ebxf01046267505,338378
f0104627:	8b 75 08             	mov    0x8(%ebp),%esif01046277506,338422
f010462a:	8b 55 0c             	mov    0xc(%ebp),%edxf010462a7507,338476
f010462d:	8b 4d 10             	mov    0x10(%ebp),%ecxf010462d7508,338530
f0104630:	89 f0                	mov    %esi,%eaxf01046307509,338585
f0104632:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebxf01046327510,338634
	dst_in = dst;dst_in7513,338712
f0104636:	85 c9                	test   %ecx,%ecxf01046367515,338744
f0104638:	75 0b                	jne    f0104645 <strlcpy+0x23>f01046387516,338793
f010463a:	eb 17                	jmp    f0104653 <strlcpy+0x31>f010463a7517,338856
f010463c:	83 c2 01             	add    $0x1,%edxf010463c7520,338976
f010463f:	83 c0 01             	add    $0x1,%eaxf010463f7521,339025
f0104642:	88 48 ff             	mov    %cl,-0x1(%eax)f01046427522,339074
f0104645:	39 d8                	cmp    %ebx,%eaxf01046457524,339165
f0104647:	74 07                	je     f0104650 <strlcpy+0x2e>f01046477525,339214
f0104649:	0f b6 0a             	movzbl (%edx),%ecxf01046497526,339277
f010464c:	84 c9                	test   %cl,%clf010464c7527,339328
f010464e:	75 ec                	jne    f010463c <strlcpy+0x1a>f010464e7528,339375
f0104650:	c6 00 00             	movb   $0x0,(%eax)f01046507530,339453
f0104653:	29 f0                	sub    %esi,%eaxf01046537533,339529
f0104655:	5b                   	pop    %ebxf01046557535,339580
f0104656:	5e                   	pop    %esif01046567536,339624
f0104657:	5d                   	pop    %ebpf01046577537,339668
f0104658:	c3                   	ret    f01046587538,339712
f0104659 <strcmp>:f01046597540,339753
intint7542,339773
f0104659:	55                   	push   %ebpf01046597545,339816
f010465a:	89 e5                	mov    %esp,%ebpf010465a7546,339860
f010465c:	8b 4d 08             	mov    0x8(%ebp),%ecxf010465c7547,339909
f010465f:	8b 55 0c             	mov    0xc(%ebp),%edxf010465f7548,339963
f0104662:	eb 06                	jmp    f010466a <strcmp+0x11>f01046627550,340041
f0104664:	83 c1 01             	add    $0x1,%ecxf01046647552,340115
f0104667:	83 c2 01             	add    $0x1,%edxf01046677553,340164
f010466a:	0f b6 01             	movzbl (%ecx),%eaxf010466a7555,340237
f010466d:	84 c0                	test   %al,%alf010466d7556,340288
f010466f:	74 04                	je     f0104675 <strcmp+0x1c>f010466f7557,340335
f0104671:	3a 02                	cmp    (%edx),%alf01046717558,340397
f0104673:	74 ef                	je     f0104664 <strcmp+0xb>f01046737559,340447
f0104675:	0f b6 c0             	movzbl %al,%eaxf01046757561,340565
f0104678:	0f b6 12             	movzbl (%edx),%edxf01046787562,340613
f010467b:	29 d0                	sub    %edx,%eaxf010467b7563,340664
f010467d:	5d                   	pop    %ebpf010467d7565,340715
f010467e:	c3                   	ret    f010467e7566,340759
f010467f <strncmp>:f010467f7568,340800
intint7570,340821
f010467f:	55                   	push   %ebpf010467f7573,340875
f0104680:	89 e5                	mov    %esp,%ebpf01046807574,340919
f0104682:	53                   	push   %ebxf01046827575,340968
f0104683:	8b 45 08             	mov    0x8(%ebp),%eaxf01046837576,341012
f0104686:	8b 55 0c             	mov    0xc(%ebp),%edxf01046867577,341066
f0104689:	89 c3                	mov    %eax,%ebxf01046897578,341120
f010468b:	03 5d 10             	add    0x10(%ebp),%ebxf010468b7579,341169
f010468e:	eb 06                	jmp    f0104696 <strncmp+0x17>f010468e7581,341257
f0104690:	83 c0 01             	add    $0x1,%eaxf01046907583,341337
f0104693:	83 c2 01             	add    $0x1,%edxf01046937584,341386
f0104696:	39 d8                	cmp    %ebx,%eaxf01046967586,341468
f0104698:	74 16                	je     f01046b0 <strncmp+0x31>f01046987587,341517
f010469a:	0f b6 08             	movzbl (%eax),%ecxf010469a7588,341580
f010469d:	84 c9                	test   %cl,%clf010469d7589,341631
f010469f:	74 04                	je     f01046a5 <strncmp+0x26>f010469f7590,341678
f01046a1:	3a 0a                	cmp    (%edx),%clf01046a17591,341741
f01046a3:	74 eb                	je     f0104690 <strncmp+0x11>f01046a37592,341791
f01046a5:	0f b6 00             	movzbl (%eax),%eaxf01046a57597,341943
f01046a8:	0f b6 12             	movzbl (%edx),%edxf01046a87598,341994
f01046ab:	29 d0                	sub    %edx,%eaxf01046ab7599,342045
f01046ad:	5b                   	pop    %ebxf01046ad7601,342096
f01046ae:	5d                   	pop    %ebpf01046ae7602,342140
f01046af:	c3                   	ret    f01046af7603,342184
f01046b0:	b8 00 00 00 00       	mov    $0x0,%eaxf01046b07605,342236
f01046b5:	eb f6                	jmp    f01046ad <strncmp+0x2e>f01046b57606,342285
f01046b7 <strchr>:f01046b77608,342349
char *char7612,342475
f01046b7:	55                   	push   %ebpf01046b77615,342514
f01046b8:	89 e5                	mov    %esp,%ebpf01046b87616,342558
f01046ba:	8b 45 08             	mov    0x8(%ebp),%eaxf01046ba7617,342607
f01046bd:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf01046bd7618,342661
f01046c1:	0f b6 10             	movzbl (%eax),%edxf01046c17620,342732
f01046c4:	84 d2                	test   %dl,%dlf01046c47621,342783
f01046c6:	74 09                	je     f01046d1 <strchr+0x1a>f01046c67622,342830
f01046c8:	38 ca                	cmp    %cl,%dlf01046c87624,342907
f01046ca:	74 0a                	je     f01046d6 <strchr+0x1f>f01046ca7625,342954
f01046cc:	83 c0 01             	add    $0x1,%eaxf01046cc7627,343033
f01046cf:	eb f0                	jmp    f01046c1 <strchr+0xa>f01046cf7628,343082
f01046d1:	b8 00 00 00 00       	mov    $0x0,%eaxf01046d17631,343176
f01046d6:	5d                   	pop    %ebpf01046d67633,343227
f01046d7:	c3                   	ret    f01046d77634,343271
f01046d8 <strfind>:f01046d87636,343312
char *char7640,343470
f01046d8:	55                   	push   %ebpf01046d87643,343510
f01046d9:	89 e5                	mov    %esp,%ebpf01046d97644,343554
f01046db:	8b 45 08             	mov    0x8(%ebp),%eaxf01046db7645,343603
f01046de:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf01046de7646,343657
f01046e2:	eb 03                	jmp    f01046e7 <strfind+0xf>f01046e27648,343728
f01046e4:	83 c0 01             	add    $0x1,%eaxf01046e47649,343790
f01046e7:	0f b6 10             	movzbl (%eax),%edxf01046e77650,343839
f01046ea:	38 ca                	cmp    %cl,%dlf01046ea7652,343905
f01046ec:	74 04                	je     f01046f2 <strfind+0x1a>f01046ec7653,343952
f01046ee:	84 d2                	test   %dl,%dlf01046ee7654,344015
f01046f0:	75 f2                	jne    f01046e4 <strfind+0xc>f01046f07655,344062
f01046f2:	5d                   	pop    %ebpf01046f27659,344156
f01046f3:	c3                   	ret    f01046f37660,344200
f01046f4 <memset>:f01046f47662,344241
void *void7665,344269
f01046f4:	55                   	push   %ebpf01046f47668,344311
f01046f5:	89 e5                	mov    %esp,%ebpf01046f57669,344355
f01046f7:	57                   	push   %edif01046f77670,344404
f01046f8:	56                   	push   %esif01046f87671,344448
f01046f9:	53                   	push   %ebxf01046f97672,344492
f01046fa:	8b 7d 08             	mov    0x8(%ebp),%edif01046fa7673,344536
f01046fd:	8b 4d 10             	mov    0x10(%ebp),%ecxf01046fd7674,344590
f0104700:	85 c9                	test   %ecx,%ecxf01047007678,344669
f0104702:	74 13                	je     f0104717 <memset+0x23>f01047027679,344718
f0104704:	f7 c7 03 00 00 00    	test   $0x3,%edif01047047682,344826
f010470a:	75 05                	jne    f0104711 <memset+0x1d>f010470a7683,344875
f010470c:	f6 c1 03             	test   $0x3,%clf010470c7684,344937
f010470f:	74 0d                	je     f010471e <memset+0x2a>f010470f7685,344985
		c = (c<<24)|(c<<16)|(c<<8)|c;c7686,345047
f0104711:	8b 45 0c             	mov    0xc(%ebp),%eaxf01047117692,345211
f0104714:	fc                   	cld    f01047147693,345265
f0104715:	f3 aa                	rep stos %al,%es:(%edi)f01047157694,345305
f0104717:	89 f8                	mov    %edi,%eaxf01047177699,345428
f0104719:	5b                   	pop    %ebxf01047197700,345477
f010471a:	5e                   	pop    %esif010471a7701,345521
f010471b:	5f                   	pop    %edif010471b7702,345565
f010471c:	5d                   	pop    %ebpf010471c7703,345609
f010471d:	c3                   	ret    f010471d7704,345653
f010471e:	0f b6 55 0c          	movzbl 0xc(%ebp),%edxf010471e7706,345706
		c = (c<<24)|(c<<16)|(c<<8)|c;c7707,345760
f0104722:	89 d3                	mov    %edx,%ebxf01047227708,345792
f0104724:	c1 e3 08             	shl    $0x8,%ebxf01047247709,345841
f0104727:	89 d0                	mov    %edx,%eaxf01047277710,345890
f0104729:	c1 e0 18             	shl    $0x18,%eaxf01047297711,345939
f010472c:	89 d6                	mov    %edx,%esif010472c7712,345989
f010472e:	c1 e6 10             	shl    $0x10,%esif010472e7713,346038
f0104731:	09 f0                	or     %esi,%eaxf01047317714,346088
f0104733:	09 c2                	or     %eax,%edxf01047337715,346137
f0104735:	09 da                	or     %ebx,%edxf01047357716,346186
f0104737:	c1 e9 02             	shr    $0x2,%ecxf01047377718,346269
f010473a:	89 d0                	mov    %edx,%eaxf010473a7720,346352
f010473c:	fc                   	cld    f010473c7721,346401
f010473d:	f3 ab                	rep stos %eax,%es:(%edi)f010473d7722,346441
f010473f:	eb d6                	jmp    f0104717 <memset+0x23>f010473f7723,346498
f0104741 <memmove>:f01047417725,346561
void *void7727,346582
f0104741:	55                   	push   %ebpf01047417730,346637
f0104742:	89 e5                	mov    %esp,%ebpf01047427731,346681
f0104744:	57                   	push   %edif01047447732,346730
f0104745:	56                   	push   %esif01047457733,346774
f0104746:	8b 45 08             	mov    0x8(%ebp),%eaxf01047467734,346818
f0104749:	8b 75 0c             	mov    0xc(%ebp),%esif01047497735,346872
f010474c:	8b 4d 10             	mov    0x10(%ebp),%ecxf010474c7736,346926
	s = src;s7740,347008
	d = dst;d7741,347018
f010474f:	39 c6                	cmp    %eax,%esif010474f7743,347055
f0104751:	73 35                	jae    f0104788 <memmove+0x47>f01047517744,347104
f0104753:	8d 14 0e             	lea    (%esi,%ecx,1),%edxf01047537745,347167
f0104756:	39 c2                	cmp    %eax,%edxf01047567746,347225
f0104758:	76 2e                	jbe    f0104788 <memmove+0x47>f01047587747,347274
f010475a:	8d 3c 08             	lea    (%eax,%ecx,1),%edif010475a7750,347357
f010475d:	89 d6                	mov    %edx,%esif010475d7752,347465
f010475f:	09 fe                	or     %edi,%esif010475f7753,347514
f0104761:	f7 c6 03 00 00 00    	test   $0x3,%esif01047617754,347563
f0104767:	74 0c                	je     f0104775 <memmove+0x34>f01047677755,347612
f0104769:	83 ef 01             	sub    $0x1,%edif01047697761,347866
f010476c:	8d 72 ff             	lea    -0x1(%edx),%esif010476c7762,347915
f010476f:	fd                   	std    f010476f7764,348005
f0104770:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f01047707765,348045
f0104772:	fc                   	cld    f01047727768,348190
f0104773:	eb 21                	jmp    f0104796 <memmove+0x55>f01047737769,348230
f0104775:	f6 c1 03             	test   $0x3,%clf01047757771,348343
f0104778:	75 ef                	jne    f0104769 <memmove+0x28>f01047787772,348391
f010477a:	83 ef 04             	sub    $0x4,%edif010477a7774,348512
f010477d:	8d 72 fc             	lea    -0x4(%edx),%esif010477d7775,348561
f0104780:	c1 e9 02             	shr    $0x2,%ecxf01047807776,348616
f0104783:	fd                   	std    f01047837778,348700
f0104784:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01047847779,348740
f0104786:	eb ea                	jmp    f0104772 <memmove+0x31>f01047867780,348804
f0104788:	89 f2                	mov    %esi,%edxf01047887783,348927
f010478a:	09 c2                	or     %eax,%edxf010478a7784,348976
f010478c:	f6 c2 03             	test   $0x3,%dlf010478c7785,349025
f010478f:	74 09                	je     f010479a <memmove+0x59>f010478f7786,349073
f0104791:	89 c7                	mov    %eax,%edif01047917791,349267
f0104793:	fc                   	cld    f01047937792,349316
f0104794:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f01047947793,349356
f0104796:	5e                   	pop    %esif01047967798,349490
f0104797:	5f                   	pop    %edif01047977799,349534
f0104798:	5d                   	pop    %ebpf01047987800,349578
f0104799:	c3                   	ret    f01047997801,349622
f010479a:	f6 c1 03             	test   $0x3,%clf010479a7803,349712
f010479d:	75 f2                	jne    f0104791 <memmove+0x50>f010479d7804,349760
f010479f:	c1 e9 02             	shr    $0x2,%ecxf010479f7806,349877
f01047a2:	89 c7                	mov    %eax,%edif01047a27808,349961
f01047a4:	fc                   	cld    f01047a47809,350010
f01047a5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01047a57810,350050
f01047a7:	eb ed                	jmp    f0104796 <memmove+0x55>f01047a77811,350114
f01047a9 <memcpy>:f01047a97813,350178
void *void7817,350207
f01047a9:	55                   	push   %ebpf01047a97820,350261
f01047aa:	89 e5                	mov    %esp,%ebpf01047aa7821,350305
f01047ac:	ff 75 10             	pushl  0x10(%ebp)f01047ac7823,350384
f01047af:	ff 75 0c             	pushl  0xc(%ebp)f01047af7824,350434
f01047b2:	ff 75 08             	pushl  0x8(%ebp)f01047b27825,350483
f01047b5:	e8 87 ff ff ff       	call   f0104741 <memmove>f01047b57826,350532
f01047ba:	c9                   	leave  f01047ba7828,350592
f01047bb:	c3                   	ret    f01047bb7829,350632
f01047bc <memcmp>:f01047bc7831,350673
intint7833,350693
f01047bc:	55                   	push   %ebpf01047bc7836,350748
f01047bd:	89 e5                	mov    %esp,%ebpf01047bd7837,350792
f01047bf:	56                   	push   %esif01047bf7838,350841
f01047c0:	53                   	push   %ebxf01047c07839,350885
f01047c1:	8b 45 08             	mov    0x8(%ebp),%eaxf01047c17840,350929
f01047c4:	8b 55 0c             	mov    0xc(%ebp),%edxf01047c47841,350983
f01047c7:	89 c6                	mov    %eax,%esif01047c77842,351037
f01047c9:	03 75 10             	add    0x10(%ebp),%esif01047c97843,351086
f01047cc:	39 f0                	cmp    %esi,%eaxf01047cc7848,351247
f01047ce:	74 1c                	je     f01047ec <memcmp+0x30>f01047ce7849,351296
f01047d0:	0f b6 08             	movzbl (%eax),%ecxf01047d07851,351376
f01047d3:	0f b6 1a             	movzbl (%edx),%ebxf01047d37852,351427
f01047d6:	38 d9                	cmp    %bl,%clf01047d67853,351478
f01047d8:	75 08                	jne    f01047e2 <memcmp+0x26>f01047d87854,351525
f01047da:	83 c0 01             	add    $0x1,%eaxf01047da7857,351634
f01047dd:	83 c2 01             	add    $0x1,%edxf01047dd7858,351683
f01047e0:	eb ea                	jmp    f01047cc <memcmp+0x10>f01047e07859,351732
f01047e2:	0f b6 c1             	movzbl %cl,%eaxf01047e27861,351827
f01047e5:	0f b6 db             	movzbl %bl,%ebxf01047e57862,351875
f01047e8:	29 d8                	sub    %ebx,%eaxf01047e87863,351923
f01047ea:	eb 05                	jmp    f01047f1 <memcmp+0x35>f01047ea7864,351972
f01047ec:	b8 00 00 00 00       	mov    $0x0,%eaxf01047ec7868,352049
f01047f1:	5b                   	pop    %ebxf01047f17870,352100
f01047f2:	5e                   	pop    %esif01047f27871,352144
f01047f3:	5d                   	pop    %ebpf01047f37872,352188
f01047f4:	c3                   	ret    f01047f47873,352232
f01047f5 <memfind>:f01047f57875,352273
void *void7877,352294
f01047f5:	55                   	push   %ebpf01047f57880,352343
f01047f6:	89 e5                	mov    %esp,%ebpf01047f67881,352387
f01047f8:	8b 45 08             	mov    0x8(%ebp),%eaxf01047f87882,352436
f01047fb:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01047fb7883,352490
f01047fe:	89 c2                	mov    %eax,%edxf01047fe7885,352586
f0104800:	03 55 10             	add    0x10(%ebp),%edxf01048007886,352635
f0104803:	39 d0                	cmp    %edx,%eaxf01048037888,352713
f0104805:	73 09                	jae    f0104810 <memfind+0x1b>f01048057889,352762
f0104807:	38 08                	cmp    %cl,(%eax)f01048077891,352880
f0104809:	74 05                	je     f0104810 <memfind+0x1b>f01048097892,352930
f010480b:	83 c0 01             	add    $0x1,%eaxf010480b7894,353016
f010480e:	eb f3                	jmp    f0104803 <memfind+0xe>f010480e7895,353065
f0104810:	5d                   	pop    %ebpf01048107899,353159
f0104811:	c3                   	ret    f01048117900,353203
f0104812 <strtol>:f01048127902,353244
longlong7904,353264
f0104812:	55                   	push   %ebpf01048127907,353318
f0104813:	89 e5                	mov    %esp,%ebpf01048137908,353362
f0104815:	57                   	push   %edif01048157909,353411
f0104816:	56                   	push   %esif01048167910,353455
f0104817:	53                   	push   %ebxf01048177911,353499
f0104818:	8b 4d 08             	mov    0x8(%ebp),%ecxf01048187912,353543
f010481b:	8b 5d 10             	mov    0x10(%ebp),%ebxf010481b7913,353597
f010481e:	eb 03                	jmp    f0104823 <strtol+0x11>f010481e7919,353745
f0104820:	83 c1 01             	add    $0x1,%ecxf01048207921,353814
f0104823:	0f b6 01             	movzbl (%ecx),%eaxf01048237923,353896
f0104826:	3c 20                	cmp    $0x20,%alf01048267924,353947
f0104828:	74 f6                	je     f0104820 <strtol+0xe>f01048287925,353996
f010482a:	3c 09                	cmp    $0x9,%alf010482a7926,354057
f010482c:	74 f2                	je     f0104820 <strtol+0xe>f010482c7927,354105
f010482e:	3c 2b                	cmp    $0x2b,%alf010482e7931,354203
f0104830:	74 2e                	je     f0104860 <strtol+0x4e>f01048307932,354252
f0104832:	bf 00 00 00 00       	mov    $0x0,%edif01048327934,354328
f0104837:	3c 2d                	cmp    $0x2d,%alf01048377937,354405
f0104839:	74 2f                	je     f010486a <strtol+0x58>f01048397938,354454
f010483b:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebxf010483b7943,354626
f0104841:	75 05                	jne    f0104848 <strtol+0x36>f01048417944,354682
f0104843:	80 39 30             	cmpb   $0x30,(%ecx)f01048437945,354744
f0104846:	74 2c                	je     f0104874 <strtol+0x62>f01048467946,354796
f0104848:	85 db                	test   %ebx,%ebxf01048487949,354915
f010484a:	75 0a                	jne    f0104856 <strtol+0x44>f010484a7950,354964
		base = 10;base7953,355064
f010484c:	bb 0a 00 00 00       	mov    $0xa,%ebxf010484c7954,355077
f0104851:	80 39 30             	cmpb   $0x30,(%ecx)f01048517956,355162
f0104854:	74 28                	je     f010487e <strtol+0x6c>f01048547957,355214
		base = 10;base7958,355276
f0104856:	b8 00 00 00 00       	mov    $0x0,%eaxf01048567959,355289
f010485b:	89 5d 10             	mov    %ebx,0x10(%ebp)f010485b7960,355338
f010485e:	eb 50                	jmp    f01048b0 <strtol+0x9e>f010485e7961,355393
f0104860:	83 c1 01             	add    $0x1,%ecxf01048607963,355462
f0104863:	bf 00 00 00 00       	mov    $0x0,%edif01048637965,355525
f0104868:	eb d1                	jmp    f010483b <strtol+0x29>f01048687966,355574
f010486a:	83 c1 01             	add    $0x1,%ecxf010486a7968,355652
f010486d:	bf 01 00 00 00       	mov    $0x1,%edif010486d7969,355701
f0104872:	eb c7                	jmp    f010483b <strtol+0x29>f01048727970,355750
f0104874:	80 79 01 78          	cmpb   $0x78,0x1(%ecx)f01048747972,355876
f0104878:	74 0e                	je     f0104888 <strtol+0x76>f01048787973,355931
f010487a:	85 db                	test   %ebx,%ebxf010487a7975,356029
f010487c:	75 d8                	jne    f0104856 <strtol+0x44>f010487c7976,356078
f010487e:	83 c1 01             	add    $0x1,%ecxf010487e7978,356157
f0104881:	bb 08 00 00 00       	mov    $0x8,%ebxf01048817979,356206
f0104886:	eb ce                	jmp    f0104856 <strtol+0x44>f01048867980,356255
f0104888:	83 c1 02             	add    $0x2,%ecxf01048887982,356338
f010488b:	bb 10 00 00 00       	mov    $0x10,%ebxf010488b7983,356387
f0104890:	eb c4                	jmp    f0104856 <strtol+0x44>f01048907984,356437
			dig = *s - '0';dig7989,356554
f0104892:	8d 72 9f             	lea    -0x61(%edx),%esif01048927991,356608
f0104895:	89 f3                	mov    %esi,%ebxf01048957992,356664
f0104897:	80 fb 19             	cmp    $0x19,%blf01048977993,356713
f010489a:	77 29                	ja     f01048c5 <strtol+0xb3>f010489a7994,356762
			dig = *s - 'a' + 10;dig7995,356824
f010489c:	0f be d2             	movsbl %dl,%edxf010489c7996,356848
f010489f:	83 ea 57             	sub    $0x57,%edxf010489f7997,356896
			dig = *s - 'A' + 10;dig7999,356981
f01048a2:	3b 55 10             	cmp    0x10(%ebp),%edxf01048a28003,357041
f01048a5:	7d 30                	jge    f01048d7 <strtol+0xc5>f01048a58004,357096
f01048a7:	83 c1 01             	add    $0x1,%ecxf01048a78007,357201
f01048aa:	0f af 45 10          	imul   0x10(%ebp),%eaxf01048aa8008,357250
f01048ae:	01 d0                	add    %edx,%eaxf01048ae8009,357305
f01048b0:	0f b6 11             	movzbl (%ecx),%edxf01048b08011,357384
f01048b3:	8d 72 d0             	lea    -0x30(%edx),%esif01048b38012,357435
f01048b6:	89 f3                	mov    %esi,%ebxf01048b68013,357491
f01048b8:	80 fb 09             	cmp    $0x9,%blf01048b88014,357540
f01048bb:	77 d5                	ja     f0104892 <strtol+0x80>f01048bb8015,357588
			dig = *s - '0';dig8016,357650
f01048bd:	0f be d2             	movsbl %dl,%edxf01048bd8017,357669
f01048c0:	83 ea 30             	sub    $0x30,%edxf01048c08018,357717
f01048c3:	eb dd                	jmp    f01048a2 <strtol+0x90>f01048c38019,357767
f01048c5:	8d 72 bf             	lea    -0x41(%edx),%esif01048c58021,357864
f01048c8:	89 f3                	mov    %esi,%ebxf01048c88022,357920
f01048ca:	80 fb 19             	cmp    $0x19,%blf01048ca8023,357969
f01048cd:	77 08                	ja     f01048d7 <strtol+0xc5>f01048cd8024,358018
			dig = *s - 'A' + 10;dig8025,358080
f01048cf:	0f be d2             	movsbl %dl,%edxf01048cf8026,358104
f01048d2:	83 ea 37             	sub    $0x37,%edxf01048d28027,358152
f01048d5:	eb cb                	jmp    f01048a2 <strtol+0x90>f01048d58028,358202
f01048d7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)f01048d78033,358321
f01048db:	74 05                	je     f01048e2 <strtol+0xd0>f01048db8034,358375
f01048dd:	8b 75 0c             	mov    0xc(%ebp),%esif01048dd8036,358461
f01048e0:	89 0e                	mov    %ecx,(%esi)f01048e08037,358515
f01048e2:	89 c2                	mov    %eax,%edxf01048e28039,358594
f01048e4:	f7 da                	neg    %edxf01048e48040,358643
f01048e6:	85 ff                	test   %edi,%edif01048e68041,358687
f01048e8:	0f 45 c2             	cmovne %edx,%eaxf01048e88042,358736
f01048eb:	5b                   	pop    %ebxf01048eb8044,358787
f01048ec:	5e                   	pop    %esif01048ec8045,358831
f01048ed:	5f                   	pop    %edif01048ed8046,358875
f01048ee:	5d                   	pop    %ebpf01048ee8047,358919
f01048ef:	c3                   	ret    f01048ef8048,358963
f01048f0 <__udivdi3>:f01048f08050,359004
f01048f0:	55                   	push   %ebpf01048f08051,359026
f01048f1:	57                   	push   %edif01048f18052,359070
f01048f2:	56                   	push   %esif01048f28053,359114
f01048f3:	53                   	push   %ebxf01048f38054,359158
f01048f4:	83 ec 1c             	sub    $0x1c,%espf01048f48055,359202
f01048f7:	8b 54 24 3c          	mov    0x3c(%esp),%edxf01048f78056,359252
f01048fb:	8b 6c 24 30          	mov    0x30(%esp),%ebpf01048fb8057,359307
f01048ff:	8b 74 24 34          	mov    0x34(%esp),%esif01048ff8058,359362
f0104903:	8b 5c 24 38          	mov    0x38(%esp),%ebxf01049038059,359417
f0104907:	85 d2                	test   %edx,%edxf01049078060,359472
f0104909:	75 35                	jne    f0104940 <__udivdi3+0x50>f01049098061,359521
f010490b:	39 f3                	cmp    %esi,%ebxf010490b8062,359586
f010490d:	0f 87 bd 00 00 00    	ja     f01049d0 <__udivdi3+0xe0>f010490d8063,359635
f0104913:	85 db                	test   %ebx,%ebxf01049138064,359700
f0104915:	89 d9                	mov    %ebx,%ecxf01049158065,359749
f0104917:	75 0b                	jne    f0104924 <__udivdi3+0x34>f01049178066,359798
f0104919:	b8 01 00 00 00       	mov    $0x1,%eaxf01049198067,359863
f010491e:	31 d2                	xor    %edx,%edxf010491e8068,359912
f0104920:	f7 f3                	div    %ebxf01049208069,359961
f0104922:	89 c1                	mov    %eax,%ecxf01049228070,360005
f0104924:	31 d2                	xor    %edx,%edxf01049248071,360054
f0104926:	89 f0                	mov    %esi,%eaxf01049268072,360103
f0104928:	f7 f1                	div    %ecxf01049288073,360152
f010492a:	89 c6                	mov    %eax,%esif010492a8074,360196
f010492c:	89 e8                	mov    %ebp,%eaxf010492c8075,360245
f010492e:	89 f7                	mov    %esi,%edif010492e8076,360294
f0104930:	f7 f1                	div    %ecxf01049308077,360343
f0104932:	89 fa                	mov    %edi,%edxf01049328078,360387
f0104934:	83 c4 1c             	add    $0x1c,%espf01049348079,360436
f0104937:	5b                   	pop    %ebxf01049378080,360486
f0104938:	5e                   	pop    %esif01049388081,360530
f0104939:	5f                   	pop    %edif01049398082,360574
f010493a:	5d                   	pop    %ebpf010493a8083,360618
f010493b:	c3                   	ret    f010493b8084,360662
f010493c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif010493c8085,360702
f0104940:	39 f2                	cmp    %esi,%edxf01049408086,360763
f0104942:	77 7c                	ja     f01049c0 <__udivdi3+0xd0>f01049428087,360812
f0104944:	0f bd fa             	bsr    %edx,%edif01049448088,360877
f0104947:	83 f7 1f             	xor    $0x1f,%edif01049478089,360926
f010494a:	0f 84 98 00 00 00    	je     f01049e8 <__udivdi3+0xf8>f010494a8090,360976
f0104950:	89 f9                	mov    %edi,%ecxf01049508091,361041
f0104952:	b8 20 00 00 00       	mov    $0x20,%eaxf01049528092,361090
f0104957:	29 f8                	sub    %edi,%eaxf01049578093,361140
f0104959:	d3 e2                	shl    %cl,%edxf01049598094,361189
f010495b:	89 54 24 08          	mov    %edx,0x8(%esp)f010495b8095,361237
f010495f:	89 c1                	mov    %eax,%ecxf010495f8096,361291
f0104961:	89 da                	mov    %ebx,%edxf01049618097,361340
f0104963:	d3 ea                	shr    %cl,%edxf01049638098,361389
f0104965:	8b 4c 24 08          	mov    0x8(%esp),%ecxf01049658099,361437
f0104969:	09 d1                	or     %edx,%ecxf01049698100,361491
f010496b:	89 f2                	mov    %esi,%edxf010496b8101,361540
f010496d:	89 4c 24 08          	mov    %ecx,0x8(%esp)f010496d8102,361589
f0104971:	89 f9                	mov    %edi,%ecxf01049718103,361643
f0104973:	d3 e3                	shl    %cl,%ebxf01049738104,361692
f0104975:	89 c1                	mov    %eax,%ecxf01049758105,361740
f0104977:	d3 ea                	shr    %cl,%edxf01049778106,361789
f0104979:	89 f9                	mov    %edi,%ecxf01049798107,361837
f010497b:	89 5c 24 0c          	mov    %ebx,0xc(%esp)f010497b8108,361886
f010497f:	d3 e6                	shl    %cl,%esif010497f8109,361940
f0104981:	89 eb                	mov    %ebp,%ebxf01049818110,361988
f0104983:	89 c1                	mov    %eax,%ecxf01049838111,362037
f0104985:	d3 eb                	shr    %cl,%ebxf01049858112,362086
f0104987:	09 de                	or     %ebx,%esif01049878113,362134
f0104989:	89 f0                	mov    %esi,%eaxf01049898114,362183
f010498b:	f7 74 24 08          	divl   0x8(%esp)f010498b8115,362232
f010498f:	89 d6                	mov    %edx,%esif010498f8116,362281
f0104991:	89 c3                	mov    %eax,%ebxf01049918117,362330
f0104993:	f7 64 24 0c          	mull   0xc(%esp)f01049938118,362379
f0104997:	39 d6                	cmp    %edx,%esif01049978119,362428
f0104999:	72 0c                	jb     f01049a7 <__udivdi3+0xb7>f01049998120,362477
f010499b:	89 f9                	mov    %edi,%ecxf010499b8121,362542
f010499d:	d3 e5                	shl    %cl,%ebpf010499d8122,362591
f010499f:	39 c5                	cmp    %eax,%ebpf010499f8123,362639
f01049a1:	73 5d                	jae    f0104a00 <__udivdi3+0x110>f01049a18124,362688
f01049a3:	39 d6                	cmp    %edx,%esif01049a38125,362754
f01049a5:	75 59                	jne    f0104a00 <__udivdi3+0x110>f01049a58126,362803
f01049a7:	8d 43 ff             	lea    -0x1(%ebx),%eaxf01049a78127,362869
f01049aa:	31 ff                	xor    %edi,%edif01049aa8128,362924
f01049ac:	89 fa                	mov    %edi,%edxf01049ac8129,362973
f01049ae:	83 c4 1c             	add    $0x1c,%espf01049ae8130,363022
f01049b1:	5b                   	pop    %ebxf01049b18131,363072
f01049b2:	5e                   	pop    %esif01049b28132,363116
f01049b3:	5f                   	pop    %edif01049b38133,363160
f01049b4:	5d                   	pop    %ebpf01049b48134,363204
f01049b5:	c3                   	ret    f01049b58135,363248
f01049b6:	8d 76 00             	lea    0x0(%esi),%esif01049b68136,363288
f01049b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif01049b98137,363342
f01049c0:	31 ff                	xor    %edi,%edif01049c08138,363403
f01049c2:	31 c0                	xor    %eax,%eaxf01049c28139,363452
f01049c4:	89 fa                	mov    %edi,%edxf01049c48140,363501
f01049c6:	83 c4 1c             	add    $0x1c,%espf01049c68141,363550
f01049c9:	5b                   	pop    %ebxf01049c98142,363600
f01049ca:	5e                   	pop    %esif01049ca8143,363644
f01049cb:	5f                   	pop    %edif01049cb8144,363688
f01049cc:	5d                   	pop    %ebpf01049cc8145,363732
f01049cd:	c3                   	ret    f01049cd8146,363776
f01049ce:	66 90                	xchg   %ax,%axf01049ce8147,363816
f01049d0:	31 ff                	xor    %edi,%edif01049d08148,363863
f01049d2:	89 e8                	mov    %ebp,%eaxf01049d28149,363912
f01049d4:	89 f2                	mov    %esi,%edxf01049d48150,363961
f01049d6:	f7 f3                	div    %ebxf01049d68151,364010
f01049d8:	89 fa                	mov    %edi,%edxf01049d88152,364054
f01049da:	83 c4 1c             	add    $0x1c,%espf01049da8153,364103
f01049dd:	5b                   	pop    %ebxf01049dd8154,364153
f01049de:	5e                   	pop    %esif01049de8155,364197
f01049df:	5f                   	pop    %edif01049df8156,364241
f01049e0:	5d                   	pop    %ebpf01049e08157,364285
f01049e1:	c3                   	ret    f01049e18158,364329
f01049e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif01049e28159,364369
f01049e8:	39 f2                	cmp    %esi,%edxf01049e88160,364423
f01049ea:	72 06                	jb     f01049f2 <__udivdi3+0x102>f01049ea8161,364472
f01049ec:	31 c0                	xor    %eax,%eaxf01049ec8162,364538
f01049ee:	39 eb                	cmp    %ebp,%ebxf01049ee8163,364587
f01049f0:	77 d2                	ja     f01049c4 <__udivdi3+0xd4>f01049f08164,364636
f01049f2:	b8 01 00 00 00       	mov    $0x1,%eaxf01049f28165,364701
f01049f7:	eb cb                	jmp    f01049c4 <__udivdi3+0xd4>f01049f78166,364750
f01049f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01049f98167,364815
f0104a00:	89 d8                	mov    %ebx,%eaxf0104a008168,364876
f0104a02:	31 ff                	xor    %edi,%edif0104a028169,364925
f0104a04:	eb be                	jmp    f01049c4 <__udivdi3+0xd4>f0104a048170,364974
f0104a06:	66 90                	xchg   %ax,%axf0104a068171,365039
f0104a08:	66 90                	xchg   %ax,%axf0104a088172,365086
f0104a0a:	66 90                	xchg   %ax,%axf0104a0a8173,365133
f0104a0c:	66 90                	xchg   %ax,%axf0104a0c8174,365180
f0104a0e:	66 90                	xchg   %ax,%axf0104a0e8175,365227
f0104a10 <__umoddi3>:f0104a108177,365275
f0104a10:	55                   	push   %ebpf0104a108178,365297
f0104a11:	57                   	push   %edif0104a118179,365341
f0104a12:	56                   	push   %esif0104a128180,365385
f0104a13:	53                   	push   %ebxf0104a138181,365429
f0104a14:	83 ec 1c             	sub    $0x1c,%espf0104a148182,365473
f0104a17:	8b 6c 24 3c          	mov    0x3c(%esp),%ebpf0104a178183,365523
f0104a1b:	8b 74 24 30          	mov    0x30(%esp),%esif0104a1b8184,365578
f0104a1f:	8b 5c 24 34          	mov    0x34(%esp),%ebxf0104a1f8185,365633
f0104a23:	8b 7c 24 38          	mov    0x38(%esp),%edif0104a238186,365688
f0104a27:	85 ed                	test   %ebp,%ebpf0104a278187,365743
f0104a29:	89 f0                	mov    %esi,%eaxf0104a298188,365792
f0104a2b:	89 da                	mov    %ebx,%edxf0104a2b8189,365841
f0104a2d:	75 19                	jne    f0104a48 <__umoddi3+0x38>f0104a2d8190,365890
f0104a2f:	39 df                	cmp    %ebx,%edif0104a2f8191,365955
f0104a31:	0f 86 b1 00 00 00    	jbe    f0104ae8 <__umoddi3+0xd8>f0104a318192,366004
f0104a37:	f7 f7                	div    %edif0104a378193,366069
f0104a39:	89 d0                	mov    %edx,%eaxf0104a398194,366113
f0104a3b:	31 d2                	xor    %edx,%edxf0104a3b8195,366162
f0104a3d:	83 c4 1c             	add    $0x1c,%espf0104a3d8196,366211
f0104a40:	5b                   	pop    %ebxf0104a408197,366261
f0104a41:	5e                   	pop    %esif0104a418198,366305
f0104a42:	5f                   	pop    %edif0104a428199,366349
f0104a43:	5d                   	pop    %ebpf0104a438200,366393
f0104a44:	c3                   	ret    f0104a448201,366437
f0104a45:	8d 76 00             	lea    0x0(%esi),%esif0104a458202,366477
f0104a48:	39 dd                	cmp    %ebx,%ebpf0104a488203,366531
f0104a4a:	77 f1                	ja     f0104a3d <__umoddi3+0x2d>f0104a4a8204,366580
f0104a4c:	0f bd cd             	bsr    %ebp,%ecxf0104a4c8205,366645
f0104a4f:	83 f1 1f             	xor    $0x1f,%ecxf0104a4f8206,366694
f0104a52:	89 4c 24 04          	mov    %ecx,0x4(%esp)f0104a528207,366744
f0104a56:	0f 84 b4 00 00 00    	je     f0104b10 <__umoddi3+0x100>f0104a568208,366798
f0104a5c:	b8 20 00 00 00       	mov    $0x20,%eaxf0104a5c8209,366864
f0104a61:	89 c2                	mov    %eax,%edxf0104a618210,366914
f0104a63:	8b 44 24 04          	mov    0x4(%esp),%eaxf0104a638211,366963
f0104a67:	29 c2                	sub    %eax,%edxf0104a678212,367017
f0104a69:	89 c1                	mov    %eax,%ecxf0104a698213,367066
f0104a6b:	89 f8                	mov    %edi,%eaxf0104a6b8214,367115
f0104a6d:	d3 e5                	shl    %cl,%ebpf0104a6d8215,367164
f0104a6f:	89 d1                	mov    %edx,%ecxf0104a6f8216,367212
f0104a71:	89 54 24 0c          	mov    %edx,0xc(%esp)f0104a718217,367261
f0104a75:	d3 e8                	shr    %cl,%eaxf0104a758218,367315
f0104a77:	09 c5                	or     %eax,%ebpf0104a778219,367363
f0104a79:	8b 44 24 04          	mov    0x4(%esp),%eaxf0104a798220,367412
f0104a7d:	89 c1                	mov    %eax,%ecxf0104a7d8221,367466
f0104a7f:	d3 e7                	shl    %cl,%edif0104a7f8222,367515
f0104a81:	89 d1                	mov    %edx,%ecxf0104a818223,367563
f0104a83:	89 7c 24 08          	mov    %edi,0x8(%esp)f0104a838224,367612
f0104a87:	89 df                	mov    %ebx,%edif0104a878225,367666
f0104a89:	d3 ef                	shr    %cl,%edif0104a898226,367715
f0104a8b:	89 c1                	mov    %eax,%ecxf0104a8b8227,367763
f0104a8d:	89 f0                	mov    %esi,%eaxf0104a8d8228,367812
f0104a8f:	d3 e3                	shl    %cl,%ebxf0104a8f8229,367861
f0104a91:	89 d1                	mov    %edx,%ecxf0104a918230,367909
f0104a93:	89 fa                	mov    %edi,%edxf0104a938231,367958
f0104a95:	d3 e8                	shr    %cl,%eaxf0104a958232,368007
f0104a97:	0f b6 4c 24 04       	movzbl 0x4(%esp),%ecxf0104a978233,368055
f0104a9c:	09 d8                	or     %ebx,%eaxf0104a9c8234,368109
f0104a9e:	f7 f5                	div    %ebpf0104a9e8235,368158
f0104aa0:	d3 e6                	shl    %cl,%esif0104aa08236,368202
f0104aa2:	89 d1                	mov    %edx,%ecxf0104aa28237,368250
f0104aa4:	f7 64 24 08          	mull   0x8(%esp)f0104aa48238,368299
f0104aa8:	39 d1                	cmp    %edx,%ecxf0104aa88239,368348
f0104aaa:	89 c3                	mov    %eax,%ebxf0104aaa8240,368397
f0104aac:	89 d7                	mov    %edx,%edif0104aac8241,368446
f0104aae:	72 06                	jb     f0104ab6 <__umoddi3+0xa6>f0104aae8242,368495
f0104ab0:	75 0e                	jne    f0104ac0 <__umoddi3+0xb0>f0104ab08243,368560
f0104ab2:	39 c6                	cmp    %eax,%esif0104ab28244,368625
f0104ab4:	73 0a                	jae    f0104ac0 <__umoddi3+0xb0>f0104ab48245,368674
f0104ab6:	2b 44 24 08          	sub    0x8(%esp),%eaxf0104ab68246,368739
f0104aba:	19 ea                	sbb    %ebp,%edxf0104aba8247,368793
f0104abc:	89 d7                	mov    %edx,%edif0104abc8248,368842
f0104abe:	89 c3                	mov    %eax,%ebxf0104abe8249,368891
f0104ac0:	89 ca                	mov    %ecx,%edxf0104ac08250,368940
f0104ac2:	0f b6 4c 24 0c       	movzbl 0xc(%esp),%ecxf0104ac28251,368989
f0104ac7:	29 de                	sub    %ebx,%esif0104ac78252,369043
f0104ac9:	19 fa                	sbb    %edi,%edxf0104ac98253,369092
f0104acb:	8b 5c 24 04          	mov    0x4(%esp),%ebxf0104acb8254,369141
f0104acf:	89 d0                	mov    %edx,%eaxf0104acf8255,369195
f0104ad1:	d3 e0                	shl    %cl,%eaxf0104ad18256,369244
f0104ad3:	89 d9                	mov    %ebx,%ecxf0104ad38257,369292
f0104ad5:	d3 ee                	shr    %cl,%esif0104ad58258,369341
f0104ad7:	d3 ea                	shr    %cl,%edxf0104ad78259,369389
f0104ad9:	09 f0                	or     %esi,%eaxf0104ad98260,369437
f0104adb:	83 c4 1c             	add    $0x1c,%espf0104adb8261,369486
f0104ade:	5b                   	pop    %ebxf0104ade8262,369536
f0104adf:	5e                   	pop    %esif0104adf8263,369580
f0104ae0:	5f                   	pop    %edif0104ae08264,369624
f0104ae1:	5d                   	pop    %ebpf0104ae18265,369668
f0104ae2:	c3                   	ret    f0104ae28266,369712
f0104ae3:	90                   	nopf0104ae38267,369752
f0104ae4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif0104ae48268,369788
f0104ae8:	85 ff                	test   %edi,%edif0104ae88269,369849
f0104aea:	89 f9                	mov    %edi,%ecxf0104aea8270,369898
f0104aec:	75 0b                	jne    f0104af9 <__umoddi3+0xe9>f0104aec8271,369947
f0104aee:	b8 01 00 00 00       	mov    $0x1,%eaxf0104aee8272,370012
f0104af3:	31 d2                	xor    %edx,%edxf0104af38273,370061
f0104af5:	f7 f7                	div    %edif0104af58274,370110
f0104af7:	89 c1                	mov    %eax,%ecxf0104af78275,370154
f0104af9:	89 d8                	mov    %ebx,%eaxf0104af98276,370203
f0104afb:	31 d2                	xor    %edx,%edxf0104afb8277,370252
f0104afd:	f7 f1                	div    %ecxf0104afd8278,370301
f0104aff:	89 f0                	mov    %esi,%eaxf0104aff8279,370345
f0104b01:	f7 f1                	div    %ecxf0104b018280,370394
f0104b03:	e9 31 ff ff ff       	jmp    f0104a39 <__umoddi3+0x29>f0104b038281,370438
f0104b08:	90                   	nopf0104b088282,370503
f0104b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif0104b098283,370539
f0104b10:	39 dd                	cmp    %ebx,%ebpf0104b108284,370600
f0104b12:	72 08                	jb     f0104b1c <__umoddi3+0x10c>f0104b128285,370649
f0104b14:	39 f7                	cmp    %esi,%edif0104b148286,370715
f0104b16:	0f 87 21 ff ff ff    	ja     f0104a3d <__umoddi3+0x2d>f0104b168287,370764
f0104b1c:	89 da                	mov    %ebx,%edxf0104b1c8288,370829
f0104b1e:	89 f0                	mov    %esi,%eaxf0104b1e8289,370878
f0104b20:	29 f8                	sub    %edi,%eaxf0104b208290,370927
f0104b22:	19 ea                	sbb    %ebp,%edxf0104b228291,370976
f0104b24:	e9 14 ff ff ff       	jmp    f0104a3d <__umoddi3+0x2d>f0104b248292,371025

fs/test.c,99
static char *msg = "This is the NEW message of the day!\n\n";msg6,63
fs_test(void)fs_test9,131

user/breakpoint.c,40
umain(int argc, char **argv)umain6,66

user/softint.c,40
umain(int argc, char **argv)umain6,84

user/faultwrite.c,40
umain(int argc, char **argv)umain6,84

user/badsegment.c,40
umain(int argc, char **argv)umain6,79

user/faultwritekernel.c,40
umain(int argc, char **argv)umain6,88

user/buggyhello2.c,91
const char *hello = "hello, world\n";hello6,150
umain(int argc, char **argv)umain9,194

user/divzero.c,60
int zero;zero5,76
umain(int argc, char **argv)umain8,92

user/hello.c,40
umain(int argc, char **argv)umain5,43

user/buggyhello.c,41
umain(int argc, char **argv)umain7,140

user/faultreadkernel.c,40
umain(int argc, char **argv)umain6,84

user/faultread.c,40
umain(int argc, char **argv)umain6,85

user/sendpage.c,265
const char *str1 = "hello child environment! how are you?";str16,128
const char *str2 = "hello parent environment! I'm good.";str27,188
#define TEMP_ADDR	TEMP_ADDR9,247
#define TEMP_ADDR_CHILD	TEMP_ADDR_CHILD10,283
umain(int argc, char **argv)umain13,331

user/evilhello.c,41
umain(int argc, char **argv)umain7,137

user/testbss.c,120
#define ARRAYSIZE ARRAYSIZE5,63
uint32_t bigarray[ARRAYSIZE];bigarray7,94
umain(int argc, char **argv)umain10,130

conf/env.mk,14
V = @V9,359

conf/lab.mk,71
LAB=3LAB1,0
PACKAGEDATE=Tue Sep 25 12:21:10 EDT 2018PACKAGEDATE2,6

kern/console.h,275
#define _CONSOLE_H__CONSOLE_H_4,68
#define MONO_BASE	MONO_BASE11,215
#define MONO_BUF	MONO_BUF12,239
#define CGA_BASE	CGA_BASE13,264
#define CGA_BUF	CGA_BUF14,287
#define CRT_ROWS	CRT_ROWS16,313
#define CRT_COLS	CRT_COLS17,333
#define CRT_SIZE	CRT_SIZE18,353

kern/kclock.c,116
mc146818_read(unsigned reg)mc146818_read11,169
mc146818_write(unsigned reg, unsigned datum)mc146818_write18,250

kern/trapentry.S,204
#define TRAPHANDLER(name, num)						\TRAPHANDLER23,772
	name:			/* function starts here */		\name27,969
#define TRAPHANDLER_NOEC(name, num)					\TRAPHANDLER_NOEC35,1229
	name:								\name39,1343

kern/monitor.c,913
#define CMDBUF_SIZE	CMDBUF_SIZE16,360
struct Command {Command19,417
	const char *name;name20,434
	const char *name;Command::name20,434
	const char *desc;desc21,453
	const char *desc;Command::desc21,453
	int (*func)(int argc, char** argv, struct Trapframe* tf);func23,511
	int (*func)(int argc, char** argv, struct Trapframe* tf);Command::func23,511
static struct Command commands[] = {commands26,574
mon_help(int argc, char **argv, struct Trapframe *tf)mon_help35,965
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)mon_kerninfo45,1152
mon_backtrace(int argc, char **argv, struct Trapframe *tf)mon_backtrace61,1773
int mon_showmappings(int argc, char **argv, struct Trapframe *tf)mon_showmappings67,1868
#define WHITESPACE WHITESPACE95,2648
#define MAXARGS MAXARGS96,2677
runcmd(char *buf, struct Trapframe *tf)runcmd99,2708
monitor(struct Trapframe *tf)monitor138,3500

kern/kdebug.h,1042
#define JOS_KERN_KDEBUG_HJOS_KERN_KDEBUG_H2,26
struct Eipdebuginfo {Eipdebuginfo7,137
	const char *eip_file;		// Source code filename for EIPeip_file8,159
	const char *eip_file;		// Source code filename for EIPEipdebuginfo::eip_file8,159
	int eip_line;			// Source code linenumber for EIPeip_line9,215
	int eip_line;			// Source code linenumber for EIPEipdebuginfo::eip_line9,215
	const char *eip_fn_name;	// Name of function containing EIPeip_fn_name11,267
	const char *eip_fn_name;	// Name of function containing EIPEipdebuginfo::eip_fn_name11,267
	int eip_fn_namelen;		// Length of function nameeip_fn_namelen13,366
	int eip_fn_namelen;		// Length of function nameEipdebuginfo::eip_fn_namelen13,366
	uintptr_t eip_fn_addr;		// Address of start of functioneip_fn_addr14,415
	uintptr_t eip_fn_addr;		// Address of start of functionEipdebuginfo::eip_fn_addr14,415
	int eip_fn_narg;		// Number of function argumentseip_fn_narg15,472
	int eip_fn_narg;		// Number of function argumentsEipdebuginfo::eip_fn_narg15,472

kern/trap.c,602
static struct Taskstate ts;ts12,214
static struct Trapframe *last_tf;last_tf18,434
struct Gatedesc idt[256] = { { 0 } };idt23,615
struct Pseudodesc idt_pd = {idt_pd24,653
static const char *trapname(int trapno)trapname29,720
trap_init(void)trap_init63,1394
trap_init_percpu(void)trap_init_percpu75,1566
print_trapframe(struct Trapframe *tf)print_trapframe97,2090
print_regs(struct PushRegs *regs)print_regs130,3266
trap_dispatch(struct Trapframe *tf)trap_dispatch143,3670
trap(struct Trapframe *tf)trap159,3968
page_fault_handler(struct Trapframe *tf)page_fault_handler198,5029

kern/console.c,2436
delay(void)delay16,352
#define COM1	COM126,448
#define COM_RX	COM_RX28,469
#define COM_TX	COM_TX29,518
#define COM_DLL	COM_DLL30,569
#define COM_DLM	COM_DLM31,623
#define COM_IER	COM_IER32,678
#define   COM_IER_RDI	COM_IER_RDI33,731
#define COM_IIR	COM_IIR34,794
#define COM_FCR	COM_FCR35,842
#define COM_LCR	COM_LCR36,891
#define	  COM_LCR_DLAB	COM_LCR_DLAB37,940
#define	  COM_LCR_WLEN8	COM_LCR_WLEN838,998
#define COM_MCR	COM_MCR39,1051
#define	  COM_MCR_RTS	COM_MCR_RTS40,1101
#define	  COM_MCR_DTR	COM_MCR_DTR41,1146
#define	  COM_MCR_OUT2	COM_MCR_OUT242,1191
#define COM_LSR	COM_LSR43,1238
#define   COM_LSR_DATA	COM_LSR_DATA44,1285
#define   COM_LSR_TXRDY	COM_LSR_TXRDY45,1333
#define   COM_LSR_TSRE	COM_LSR_TSRE46,1389
static bool serial_exists;serial_exists48,1439
serial_proc_data(void)serial_proc_data51,1478
serial_intr(void)serial_intr59,1592
serial_putc(int c)serial_putc66,1678
serial_init(void)serial_init79,1843
lpt_putc(int c)lpt_putc112,2633
static unsigned addr_6845;addr_6845128,2853
static uint16_t *crt_buf;crt_buf129,2880
static uint16_t crt_pos;crt_pos130,2906
cga_init(void)cga_init133,2944
cga_putc(int c)cga_putc163,3430
#define NO	NO214,4399
#define SHIFT	SHIFT216,4414
#define CTL	CTL217,4436
#define ALT	ALT218,4456
#define CAPSLOCK	CAPSLOCK220,4477
#define NUMLOCK	NUMLOCK221,4501
#define SCROLLLOCK	SCROLLLOCK222,4525
#define E0ESC	E0ESC224,4552
static uint8_t shiftcode[256] =shiftcode226,4575
static uint8_t togglecode[256] =togglecode236,4706
static uint8_t normalmap[256] =normalmap243,4805
static uint8_t shiftmap[256] =shiftmap264,5690
#define C(C285,6574
static uint8_t ctlmap[256] =ctlmap287,6598
static uint8_t *charcode[4] = {charcode304,7327
kbd_proc_data(void)kbd_proc_data316,7524
kbd_intr(void)kbd_intr368,8510
kbd_init(void)kbd_init374,8569
#define CONSBUFSIZE CONSBUFSIZE385,8809
	uint8_t buf[CONSBUFSIZE];buf388,8850
	uint8_t buf[CONSBUFSIZE];__anon5::buf388,8850
	uint32_t rpos;rpos389,8877
	uint32_t rpos;__anon5::rpos389,8877
	uint32_t wpos;wpos390,8893
	uint32_t wpos;__anon5::wpos390,8893
} cons;cons391,8909
cons_intr(int (*proc)(void))cons_intr396,9037
cons_getc(void)cons_getc411,9300
cons_putc(int c)cons_putc433,9754
cons_init(void)cons_init442,9860
cputchar(int c)cputchar456,10056
getchar(void)getchar462,10096
iscons(int fdnum)iscons472,10191

kern/entrypgdir.c,163
pte_t entry_pgtable[NPTENTRIES];entry_pgtable4,49
pde_t entry_pgdir[NPDENTRIES] = {entry_pgdir21,934
pte_t entry_pgtable[NPTENTRIES] = {entry_pgtable33,1329

kern/monitor.h,51
#define JOS_KERN_MONITOR_HJOS_KERN_MONITOR_H2,27

kern/env.c,996
struct Env *envs = NULL;		// All environmentsenvs15,278
struct Env *curenv = NULL;		// The current envcurenv16,324
static struct Env *env_free_list;	// Free environment listenv_free_list17,371
#define ENVGENSHIFT	ENVGENSHIFT20,465
struct Segdesc gdt[] =gdt37,1167
struct Pseudodesc gdt_pd = {gdt_pd58,1683
envid2env(envid_t envid, struct Env **env_store, bool checkperm)envid2env73,2093
env_init(void)env_init115,3360
env_init_percpu(void)env_init_percpu126,3531
env_setup_vm(struct Env *e)env_setup_vm156,4657
env_alloc(struct Env **newenv_store, envid_t parent_id)env_alloc199,5999
region_alloc(struct Env *e, void *va, size_t len)region_alloc261,8026
load_icode(struct Env *e, uint8_t *binary)load_icode295,9369
env_create(uint8_t *binary, enum EnvType type)env_create341,11159
env_free(struct Env *e)env_free350,11288
env_destroy(struct Env *e)env_destroy403,12538
env_pop_tf(struct Trapframe *tf)env_pop_tf420,12879
env_run(struct Env *e)env_run440,13317

kern/pmap.h,397
#define JOS_KERN_PMAP_HJOS_KERN_PMAP_H4,72
#define PADDR(PADDR26,657
_paddr(const char *file, int line, void *kva)_paddr29,734
#define KADDR(KADDR38,1069
_kaddr(const char *file, int line, physaddr_t pa)_kaddr41,1139
	ALLOC_ZERO = 1<<0,ALLOC_ZERO51,1378
page2pa(struct PageInfo *pp)page2pa70,1980
pa2page(physaddr_t pa)pa2page76,2078
page2kva(struct PageInfo *pp)page2kva84,2222

kern/syscall.c,290
sys_cputs(const char *s, size_t len)sys_cputs18,409
sys_cgetc(void)sys_cgetc32,785
sys_getenvid(void)sys_getenvid39,886
sys_env_destroy(envid_t envid)sys_env_destroy50,1196
syscall(uint32_t syscallno, uint32_t a1, uint32_t a2, uint32_t a3, uint32_t a4, uint32_t a5)syscall67,1562

kern/pmap.c,1818
size_t npages;			// Amount of physical memory (in pages)npages14,284
static size_t npages_basemem;	// Amount of base memory (in pages)npages_basemem15,341
pde_t *kern_pgdir;		// Kernel's initial page directorykern_pgdir18,449
struct PageInfo *pages;		// Physical page state arraypages19,504
static struct PageInfo *page_free_list;	// Free list of physical pagespage_free_list20,558
nvram_read(int r)nvram_read28,818
i386_detect_memory(void)i386_detect_memory34,909
boot_alloc(uint32_t n)boot_alloc86,2729
mem_init(void)mem_init127,4104
page_init(void)page_init259,9487
page_alloc(int alloc_flags)page_alloc311,11296
page_free(struct PageInfo *pp)page_free332,11692
page_decref(struct PageInfo* pp)page_decref351,12157
pgdir_walk(pde_t *pgdir, const void *va, int create)pgdir_walk380,13293
boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)boot_map_region410,14097
page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)page_insert450,15423
page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)page_lookup472,16066
page_remove(pde_t *pgdir, void *va)page_remove495,16814
tlb_invalidate(pde_t *pgdir, void *va)tlb_invalidate509,17162
static uintptr_t user_mem_check_addr;user_mem_check_addr516,17358
user_mem_check(struct Env *env, const void *va, size_t len, int perm)user_mem_check537,18188
user_mem_assert(struct Env *env, const void *va, size_t len, int perm)user_mem_assert552,18602
check_page_free_list(bool only_low_memory)check_page_free_list570,19119
check_page_alloc(void)check_page_alloc632,20880
check_kern_pgdir(void)check_kern_pgdir714,22697
check_va2pa(pde_t *pgdir, uintptr_t va)check_va2pa767,24153
check_page(void)check_page783,24434
check_page_installed_pgdir(void)check_page_installed_pgdir935,29229

kern/env.h,119
#define JOS_KERN_ENV_HJOS_KERN_ENV_H4,71
#define ENV_PASTE3(ENV_PASTE326,866
#define ENV_CREATE(ENV_CREATE28,907

kern/entry.S,533
#define SRL(val, shamt)		(((val) >> (shamt)) & ~(-1 << (32 - (shamt))))SRL8,142
#define	RELOC(x) ((x) - KERNBASE)RELOC19,588
#define MULTIBOOT_HEADER_MAGIC (0x1BADB002)MULTIBOOT_HEADER_MAGIC21,623
#define MULTIBOOT_HEADER_FLAGS (0)MULTIBOOT_HEADER_FLAGS22,667
#define CHECKSUM (-(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS))CHECKSUM23,702
_start = RELOC(entry)_start41,1253
entry:entry44,1289
relocated:relocated70,2191
spin:	jmp	spinspin84,2523
bootstack:bootstack93,2756
bootstacktop:bootstacktop96,2810

kern/init.c,212
i386_init(void)i386_init16,272
const char *panicstr;panicstr55,1249
_panic(const char *file, int line, const char *fmt,...)_panic62,1397
_warn(const char *file, int line, const char *fmt,...)_warn87,1830

kern/trap.h,45
#define JOS_KERN_TRAP_HJOS_KERN_TRAP_H4,72

kern/syscall.h,51
#define JOS_KERN_SYSCALL_HJOS_KERN_SYSCALL_H2,27

kern/kdebug.c,615
struct UserStabData {UserStabData15,434
	const struct Stab *stabs;stabs16,456
	const struct Stab *stabs;UserStabData::stabs16,456
	const struct Stab *stab_end;stab_end17,483
	const struct Stab *stab_end;UserStabData::stab_end17,483
	const char *stabstr;stabstr18,513
	const char *stabstr;UserStabData::stabstr18,513
	const char *stabstr_end;stabstr_end19,535
	const char *stabstr_end;UserStabData::stabstr_end19,535
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,stab_binsearch60,1929
debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)debuginfo_eip114,3197

kern/kclock.h,420
#define JOS_KERN_KCLOCK_HJOS_KERN_KCLOCK_H4,74
#define	IO_RTC	IO_RTC9,203
#define	MC_NVRAM_START	MC_NVRAM_START11,242
#define	MC_NVRAM_SIZE	MC_NVRAM_SIZE12,301
#define NVRAM_BASELO	NVRAM_BASELO15,393
#define NVRAM_BASEHI	NVRAM_BASEHI16,465
#define NVRAM_EXTLO	NVRAM_EXTLO19,609
#define NVRAM_EXTHI	NVRAM_EXTHI20,680
#define NVRAM_EXT16LO	NVRAM_EXT16LO23,826
#define NVRAM_EXT16HI	NVRAM_EXT16HI24,900

kern/printf.c,136
putch(int ch, int *cnt)putch10,212
vcprintf(const char *fmt, va_list ap)vcprintf17,269
cprintf(const char *fmt, ...)cprintf26,385

grade-lab3,638
r = Runner(save("jos.out"),r5,47
def test_divzero():test_divzero9,126
def test_softint():test_softint20,466
def test_badsegment():test_badsegment31,824
def test_faultread():test_faultread44,1185
def test_faultreadkernel():test_faultreadkernel55,1571
def test_faultwrite():test_faultwrite66,1979
def test_faultwritekernel():test_faultwritekernel76,2314
def test_breakpoint():test_breakpoint86,2661
def test_testbss():test_testbss97,3022
def test_hello():test_hello105,3294
def test_buggyhello():test_buggyhello115,3616
def test_buggyhello2():test_buggyhello2121,3798
def test_evilhello():test_evilhello128,4015

grade-lab2,306
r = Runner(save("jos.out"),r5,47
def test_jos():test_jos9,140
def test_check_page_alloc():test_check_page_alloc13,228
def test_check_page():test_check_page17,352
def test_check_kern_pgdir():test_check_kern_pgdir21,470
def test_check_page_installed_pgdir():test_check_page_installed_pgdir25,596

gradelib.py,2816
__all__ = []__all__7,194
TESTS = []TESTS15,361
CURRENT_TEST = NoneCURRENT_TEST18,424
def test(points, title=None, parent=None):test20,445
    def register_test(fn, title=title):register_test26,703
        def run_test():run_test33,923
def end_part(name):end_part79,2398
    def show_part():show_part80,2418
def run_tests():run_tests89,2709
def get_current_test():get_current_test120,3671
def assert_equal(got, expect, msg=""):assert_equal131,3928
def assert_lines_match(text, *regexps, **kw):assert_lines_match140,4221
    def assert_lines_match_kw(no=[]):assert_lines_match_kw145,4445
MAKE_TIMESTAMP = 0MAKE_TIMESTAMP196,6022
def pre_make():pre_make198,6042
def post_make():post_make203,6197
def make(*target):make209,6385
def show_command(cmd):show_command215,6497
def maybe_unlink(*paths):maybe_unlink219,6593
COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m"}COLORS227,6784
def color(name, text):color229,6857
def reset_fs():reset_fs234,7032
class QEMU(object):QEMU244,7277
    _GDBPORT = None_GDBPORT245,7297
    def __init__(self, *make_args):__init__247,7318
    def get_gdb_port():get_gdb_port273,8258
    def fileno(self):fileno285,8713
    def handle_read(self):handle_read289,8803
    def wait(self):wait299,9115
    def kill(self):kill304,9216
class GDBClient(object):GDBClient308,9293
    def __init__(self, port, timeout=15):__init__309,9318
    def fileno(self):fileno322,9717
    def handle_read(self):handle_read326,9800
    def __send(self, cmd):__send348,10398
    def __send_break(self):__send_break352,10538
    def close(self):close355,10602
    def cont(self):cont360,10705
    def breakpoint(self, addr):breakpoint363,10751
class TerminateTest(Exception):TerminateTest373,10952
class Runner():Runner376,10994
    def __init__(self, *default_monitors):__init__377,11010
    def run_qemu(self, *monitors, **kw):run_qemu380,11105
        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):run_qemu_kw389,11629
    def __monitor_start(self, output):__monitor_start436,13129
    def __react(self, reactors, timeout):__react446,13439
    def user_test(self, binary, *monitors, **kw):user_test466,14081
    def match(self, *args, **kwargs):match476,14579
def save(path):save488,14924
    def setup_save(runner):setup_save492,15062
    def save_on_finish(fail):save_on_finish498,15236
def stop_breakpoint(addr):stop_breakpoint511,15660
    def setup_breakpoint(runner):setup_breakpoint515,15800
def call_on_line(regexp, callback):call_on_line525,16182
    def setup_call_on_line(runner):setup_call_on_line529,16316
        def handle_output(output):handle_output531,16378
def stop_on_line(regexp):stop_on_line541,16743
    def stop(line):stop545,16856

.dir-locals.el,0

GNUmakefile,1598
OBJDIR := objOBJDIR8,197
LABSETUP ?= ./LABSETUP22,403
TOP = .TOP24,419
GCCPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \GCCPREFIX36,874
QEMU := $(shell if which qemu >/dev/null 2>&1; \QEMU52,1637
GDBPORT	:= $(shell expr `id -u` % 5000 + 25000)GDBPORT67,2275
CC	:= $(GCCPREFIX)gcc -pipeCC69,2324
GDB	:= $(GCCPREFIX)gdbGDB70,2352
AS	:= $(GCCPREFIX)asAS71,2375
AR	:= $(GCCPREFIX)arAR72,2396
LD	:= $(GCCPREFIX)ldLD73,2417
OBJCOPY	:= $(GCCPREFIX)objcopyOBJCOPY74,2438
OBJDUMP	:= $(GCCPREFIX)objdumpOBJDUMP75,2469
NM	:= $(GCCPREFIX)nmNM76,2500
NCC	:= gcc $(CC_VER) -pipeNCC79,2540
NATIVE_CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -I$(TOP) -MD -WallNATIVE_CFLAGS80,2567
TAR	:= gtarTAR81,2632
PERL	:= perlPERL82,2644
CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -O1 -fno-builtin -I$(TOP) -MDCFLAGS87,2831
LDFLAGS := -m elf_i386LDFLAGS100,3389
ULDFLAGS := -T user/user.ldULDFLAGS103,3450
GCC_LIB := $(shell $(CC) $(CFLAGS) -print-libgcc-file-name)GCC_LIB105,3479
OBJDIRS :=OBJDIRS108,3599
KERN_CFLAGS := $(CFLAGS) -DJOS_KERNEL -gstabsKERN_CFLAGS124,3990
USER_CFLAGS := $(CFLAGS) -DJOS_USER -gstabsUSER_CFLAGS125,4036
QEMUOPTS = -drive file=$(OBJDIR)/kern/kernel.img,index=0,media=disk,format=raw -serial mon:stdio -gdb tcp::$(GDBPORT)QEMUOPTS145,4589
IMAGES = $(OBJDIR)/kern/kernel.imgIMAGES147,4802
WEBSUB := https://6828.scripts.mit.edu/2018/handin.pyWEBSUB225,6519
UPSTREAM := $(shell git remote -v | grep "pdos.csail.mit.edu/6.828/2018/jos.git (fetch)" | awk '{split($$0,a," "); print a[1]}')UPSTREAM258,7541
