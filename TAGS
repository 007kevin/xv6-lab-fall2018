
grade-lab1,445
r = Runner(save("jos.out"),r6,57
def test_jos():test_jos10,150
def test_printf():test_printf14,211
BACKTRACE_RE = r"^ *ebp +f01[0-9a-z]{5} +eip +f0100[0-9a-z]{3} +args +([0-9a-z]+)"BACKTRACE_RE17,275
def test_backtrace_count():test_backtrace_count20,386
def test_backtrace_arguments():test_backtrace_arguments25,544
def test_backtrace_symbols():test_backtrace_symbols31,777
def test_backtrace_lines():test_backtrace_lines37,1018

mergedep.pl,31
sub readdeps {readdeps27,909

lib/readline.c,106
#define BUFLEN BUFLEN4,47
static char buf[BUFLEN];buf5,67
readline(const char *prompt)readline8,100

lib/string.c,1018
#define ASM ASM9,264
strlen(const char *s)strlen12,283
strnlen(const char *s, size_t size)strnlen22,371
strcpy(char *dst, const char *src)strcpy32,496
strcat(char *dst, const char *src)strcat43,636
strncpy(char *dst, const char *src, size_t size) {strncpy51,745
strlcpy(char *dst, const char *src, size_t size)strlcpy66,998
strcmp(const char *p, const char *q)strcmp80,1201
strncmp(const char *p, const char *q, size_t n)strncmp88,1340
strchr(const char *s, char c)strchr101,1645
strfind(const char *s, char c)strfind112,1889
memset(void *v, int c, size_t n)memset122,2002
memmove(void *dst, const void *src, size_t n)memmove142,2359
memset(void *v, int c, size_t n)memset174,3099
memmove(void *dst, const void *src, size_t n)memmove188,3221
memcpy(void *dst, const void *src, size_t n)memcpy209,3470
memcmp(const void *v1, const void *v2, size_t n)memcmp215,3554
memfind(const void *s, int c, size_t n)memfind230,3801
strtol(const char *s, char **endptr, int base)strtol240,4001

lib/printfmt.c,845
static const char * const error_string[MAXERROR] =error_string21,589
printnum(void (*putch)(int, void*), void *putdat,printnum36,995
getuint(va_list *ap, int lflag)getuint55,1609
getint(va_list *ap, int lflag)getint68,1897
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)vprintfmt83,2193
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)printfmt247,5283
struct sprintbuf {sprintbuf256,5443
	char *buf;buf257,5462
	char *buf;sprintbuf::buf257,5462
	char *ebuf;ebuf258,5474
	char *ebuf;sprintbuf::ebuf258,5474
	int cnt;cnt259,5487
	int cnt;sprintbuf::cnt259,5487
sprintputch(int ch, struct sprintbuf *b)sprintputch263,5513
vsnprintf(char *buf, int n, const char *fmt, va_list ap)vsnprintf271,5615
snprintf(char *buf, int n, const char *fmt, ...)snprintf288,5913

inc/memlayout.h,1127
#define JOS_INC_MEMLAYOUT_HJOS_INC_MEMLAYOUT_H2,28
#define GD_KT GD_KT15,324
#define GD_KD GD_KD16,366
#define GD_UT GD_UT17,408
#define GD_UD GD_UD18,448
#define GD_TSS0 GD_TSS019,488
#define	KERNBASE	KERNBASE87,4609
#define IOPHYSMEM	IOPHYSMEM92,4814
#define EXTPHYSMEM	EXTPHYSMEM93,4841
#define KSTACKTOP	KSTACKTOP96,4887
#define KSTKSIZE	KSTKSIZE97,4914
#define KSTKGAP	KSTKGAP98,4972
#define MMIOLIM	MMIOLIM101,5058
#define MMIOBASE	MMIOBASE102,5096
#define ULIM	ULIM104,5133
#define UVPT	UVPT112,5361
#define UPAGES	UPAGES114,5434
#define UENVS	UENVS116,5515
#define UTOP	UTOP123,5650
#define UXSTACKTOP	UXSTACKTOP125,5710
#define USTACKTOP	USTACKTOP128,5837
#define UTEXT	UTEXT131,5913
#define UTEMP	UTEMP134,6008
#define PFTEMP	PFTEMP137,6168
#define USTABDATA	USTABDATA139,6265
typedef uint32_t pte_t;pte_t143,6320
typedef uint32_t pde_t;pde_t144,6344
struct PageInfo {PageInfo175,7643
	struct PageInfo *pp_link;pp_link177,7693
	struct PageInfo *pp_link;PageInfo::pp_link177,7693
	uint16_t pp_ref;pp_ref184,7951
	uint16_t pp_ref;PageInfo::pp_ref184,7951

inc/stab.h,1529
#define JOS_STAB_HJOS_STAB_H2,19
#define	N_GSYM	N_GSYM15,436
#define	N_FNAME	N_FNAME16,474
#define	N_FUN	N_FUN17,517
#define	N_STSYM	N_STSYM18,555
#define	N_LCSYM	N_LCSYM19,602
#define	N_MAIN	N_MAIN20,648
#define	N_PC	N_PC21,691
#define	N_RSYM	N_RSYM22,734
#define	N_SLINE	N_SLINE23,776
#define	N_DSLINE	N_DSLINE24,826
#define	N_BSLINE	N_BSLINE25,876
#define	N_SSYM	N_SSYM26,925
#define	N_SO	N_SO27,973
#define	N_LSYM	N_LSYM28,1017
#define	N_BINCL	N_BINCL29,1056
#define	N_SOL	N_SOL30,1104
#define	N_PSYM	N_PSYM31,1153
#define	N_EINCL	N_EINCL32,1196
#define	N_ENTRY	N_ENTRY33,1238
#define	N_LBRAC	N_LBRAC34,1285
#define	N_EXCL	N_EXCL35,1323
#define	N_RBRAC	N_RBRAC36,1368
#define	N_BCOMM	N_BCOMM37,1407
#define	N_ECOMM	N_ECOMM38,1445
#define	N_ECOML	N_ECOML39,1481
#define	N_LENG	N_LENG40,1530
struct Stab {Stab43,1637
	uint32_t n_strx;	// index into string table of namen_strx44,1651
	uint32_t n_strx;	// index into string table of nameStab::n_strx44,1651
	uint8_t n_type;         // type of symboln_type45,1704
	uint8_t n_type;         // type of symbolStab::n_type45,1704
	uint8_t n_other;        // misc info (usually empty)n_other46,1747
	uint8_t n_other;        // misc info (usually empty)Stab::n_other46,1747
	uint16_t n_desc;        // description fieldn_desc47,1801
	uint16_t n_desc;        // description fieldStab::n_desc47,1801
	uintptr_t n_value;	// value of symboln_value48,1847
	uintptr_t n_value;	// value of symbolStab::n_value48,1847

inc/string.h,47
#define JOS_INC_STRING_HJOS_INC_STRING_H2,25

inc/stdio.h,69
#define JOS_INC_STDIO_HJOS_INC_STDIO_H2,24
#define NULL	NULL7,87

inc/x86.h,1331
#define JOS_INC_X86_HJOS_INC_X86_H2,22
breakpoint(void)breakpoint7,88
inb(int port)inb13,155
insb(int port, void *addr, int cnt)insb21,278
inw(int port)inw30,481
insw(int port, void *addr, int cnt)insw38,605
inl(int port)inl47,808
insl(int port, void *addr, int cnt)insl55,932
outb(int port, uint8_t data)outb64,1131
outsb(int port, const void *addr, int cnt)outsb70,1241
outw(int port, uint16_t data)outw79,1438
outsw(int port, const void *addr, int cnt)outsw85,1549
outsl(int port, const void *addr, int cnt)outsl94,1746
outl(int port, uint32_t data)outl103,1943
invlpg(void *addr)invlpg109,2054
lidt(void *p)lidt115,2153
lgdt(void *p)lgdt121,2231
lldt(uint16_t sel)lldt127,2309
ltr(uint16_t sel)ltr133,2392
lcr0(uint32_t val)lcr0139,2473
rcr0(void)rcr0145,2566
rcr2(void)rcr2153,2678
lcr3(uint32_t val)lcr3161,2786
rcr3(void)rcr3167,2879
lcr4(uint32_t val)lcr4175,2987
rcr4(void)rcr4181,3080
tlbflush(void)tlbflush189,3188
read_eflags(void)read_eflags197,3337
write_eflags(uint32_t eflags)write_eflags205,3463
read_ebp(void)read_ebp211,3572
read_esp(void)read_esp219,3688
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)cpuid227,3800
read_tsc(void)read_tsc244,4147
xchg(volatile uint32_t *addr, uint32_t newval)xchg252,4255

inc/elf.h,3208
#define JOS_INC_ELF_HJOS_INC_ELF_H2,22
#define ELF_MAGIC ELF_MAGIC4,45
struct Elf {Elf6,109
	uint32_t e_magic;	// must equal ELF_MAGICe_magic7,122
	uint32_t e_magic;	// must equal ELF_MAGICElf::e_magic7,122
	uint8_t e_elf[12];e_elf8,165
	uint8_t e_elf[12];Elf::e_elf8,165
	uint16_t e_type;e_type9,185
	uint16_t e_type;Elf::e_type9,185
	uint16_t e_machine;e_machine10,203
	uint16_t e_machine;Elf::e_machine10,203
	uint32_t e_version;e_version11,224
	uint32_t e_version;Elf::e_version11,224
	uint32_t e_entry;e_entry12,245
	uint32_t e_entry;Elf::e_entry12,245
	uint32_t e_phoff;e_phoff13,264
	uint32_t e_phoff;Elf::e_phoff13,264
	uint32_t e_shoff;e_shoff14,283
	uint32_t e_shoff;Elf::e_shoff14,283
	uint32_t e_flags;e_flags15,302
	uint32_t e_flags;Elf::e_flags15,302
	uint16_t e_ehsize;e_ehsize16,321
	uint16_t e_ehsize;Elf::e_ehsize16,321
	uint16_t e_phentsize;e_phentsize17,341
	uint16_t e_phentsize;Elf::e_phentsize17,341
	uint16_t e_phnum;e_phnum18,364
	uint16_t e_phnum;Elf::e_phnum18,364
	uint16_t e_shentsize;e_shentsize19,383
	uint16_t e_shentsize;Elf::e_shentsize19,383
	uint16_t e_shnum;e_shnum20,406
	uint16_t e_shnum;Elf::e_shnum20,406
	uint16_t e_shstrndx;e_shstrndx21,425
	uint16_t e_shstrndx;Elf::e_shstrndx21,425
struct Proghdr {Proghdr24,451
	uint32_t p_type;p_type25,468
	uint32_t p_type;Proghdr::p_type25,468
	uint32_t p_offset;p_offset26,486
	uint32_t p_offset;Proghdr::p_offset26,486
	uint32_t p_va;p_va27,506
	uint32_t p_va;Proghdr::p_va27,506
	uint32_t p_pa;p_pa28,522
	uint32_t p_pa;Proghdr::p_pa28,522
	uint32_t p_filesz;p_filesz29,538
	uint32_t p_filesz;Proghdr::p_filesz29,538
	uint32_t p_memsz;p_memsz30,558
	uint32_t p_memsz;Proghdr::p_memsz30,558
	uint32_t p_flags;p_flags31,577
	uint32_t p_flags;Proghdr::p_flags31,577
	uint32_t p_align;p_align32,596
	uint32_t p_align;Proghdr::p_align32,596
struct Secthdr {Secthdr35,619
	uint32_t sh_name;sh_name36,636
	uint32_t sh_name;Secthdr::sh_name36,636
	uint32_t sh_type;sh_type37,655
	uint32_t sh_type;Secthdr::sh_type37,655
	uint32_t sh_flags;sh_flags38,674
	uint32_t sh_flags;Secthdr::sh_flags38,674
	uint32_t sh_addr;sh_addr39,694
	uint32_t sh_addr;Secthdr::sh_addr39,694
	uint32_t sh_offset;sh_offset40,713
	uint32_t sh_offset;Secthdr::sh_offset40,713
	uint32_t sh_size;sh_size41,734
	uint32_t sh_size;Secthdr::sh_size41,734
	uint32_t sh_link;sh_link42,753
	uint32_t sh_link;Secthdr::sh_link42,753
	uint32_t sh_info;sh_info43,772
	uint32_t sh_info;Secthdr::sh_info43,772
	uint32_t sh_addralign;sh_addralign44,791
	uint32_t sh_addralign;Secthdr::sh_addralign44,791
	uint32_t sh_entsize;sh_entsize45,815
	uint32_t sh_entsize;Secthdr::sh_entsize45,815
#define ELF_PROG_LOAD	ELF_PROG_LOAD49,871
#define ELF_PROG_FLAG_EXEC	ELF_PROG_FLAG_EXEC52,931
#define ELF_PROG_FLAG_WRITE	ELF_PROG_FLAG_WRITE53,960
#define ELF_PROG_FLAG_READ	ELF_PROG_FLAG_READ54,990
#define ELF_SHT_NULL	ELF_SHT_NULL57,1051
#define ELF_SHT_PROGBITS	ELF_SHT_PROGBITS58,1075
#define ELF_SHT_SYMTAB	ELF_SHT_SYMTAB59,1102
#define ELF_SHT_STRTAB	ELF_SHT_STRTAB60,1128
#define ELF_SHN_UNDEF	ELF_SHN_UNDEF63,1186

inc/mmu.h,10794
#define JOS_INC_MMU_HJOS_INC_MMU_H2,22
#define PGNUM(PGNUM30,964
#define PDX(PDX33,1040
#define PTX(PTX36,1121
#define PGOFF(PGOFF39,1200
#define PGADDR(PGADDR42,1300
#define NPDENTRIES	NPDENTRIES45,1421
#define NPTENTRIES	NPTENTRIES46,1491
#define PGSIZE	PGSIZE48,1554
#define PGSHIFT	PGSHIFT49,1602
#define PTSIZE	PTSIZE51,1640
#define PTSHIFT	PTSHIFT52,1718
#define PTXSHIFT	PTXSHIFT54,1756
#define PDXSHIFT	PDXSHIFT55,1814
#define PTE_P	PTE_P58,1910
#define PTE_W	PTE_W59,1942
#define PTE_U	PTE_U60,1976
#define PTE_PWT	PTE_PWT61,2005
#define PTE_PCD	PTE_PCD62,2045
#define PTE_A	PTE_A63,2085
#define PTE_D	PTE_D64,2118
#define PTE_PS	PTE_PS65,2148
#define PTE_G	PTE_G66,2183
#define PTE_AVAIL	PTE_AVAIL70,2353
#define PTE_SYSCALL	PTE_SYSCALL73,2480
#define PTE_ADDR(PTE_ADDR76,2586
#define CR0_PE	CR0_PE79,2665
#define CR0_MP	CR0_MP80,2713
#define CR0_EM	CR0_EM81,2763
#define CR0_TS	CR0_TS82,2803
#define CR0_ET	CR0_ET83,2847
#define CR0_NE	CR0_NE84,2892
#define CR0_WP	CR0_WP85,2937
#define CR0_AM	CR0_AM86,2981
#define CR0_NW	CR0_NW87,3026
#define CR0_CD	CR0_CD88,3073
#define CR0_PG	CR0_PG89,3117
#define CR4_PCE	CR4_PCE91,3155
#define CR4_MCE	CR4_MCE92,3213
#define CR4_PSE	CR4_PSE93,3265
#define CR4_DE	CR4_DE94,3317
#define CR4_TSD	CR4_TSD95,3368
#define CR4_PVI	CR4_PVI96,3418
#define CR4_VME	CR4_VME97,3483
#define FL_CF	FL_CF100,3554
#define FL_PF	FL_PF101,3594
#define FL_AF	FL_AF102,3635
#define FL_ZF	FL_ZF103,3685
#define FL_SF	FL_SF104,3724
#define FL_TF	FL_TF105,3763
#define FL_IF	FL_IF106,3802
#define FL_DF	FL_DF107,3846
#define FL_OF	FL_OF108,3890
#define FL_IOPL_MASK	FL_IOPL_MASK109,3933
#define FL_IOPL_0	FL_IOPL_0110,3996
#define FL_IOPL_1	FL_IOPL_1111,4040
#define FL_IOPL_2	FL_IOPL_2112,4084
#define FL_IOPL_3	FL_IOPL_3113,4128
#define FL_NT	FL_NT114,4172
#define FL_RF	FL_RF115,4213
#define FL_VM	FL_VM116,4254
#define FL_AC	FL_AC117,4301
#define FL_VIF	FL_VIF118,4346
#define FL_VIP	FL_VIP119,4399
#define FL_ID	FL_ID120,4455
#define FEC_PR	FEC_PR123,4519
#define FEC_WR	FEC_WR124,4584
#define FEC_U	FEC_U125,4636
#define SEG_NULL	SEG_NULL139,4841
#define SEG(SEG142,4903
struct Segdesc {Segdesc152,5176
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitsd_lim_15_0153,5193
	unsigned sd_lim_15_0 : 16;  // Low bits of segment limitSegdesc::sd_lim_15_0153,5193
	unsigned sd_base_15_0 : 16; // Low bits of segment base addresssd_base_15_0154,5251
	unsigned sd_base_15_0 : 16; // Low bits of segment base addressSegdesc::sd_base_15_0154,5251
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addresssd_base_23_16155,5316
	unsigned sd_base_23_16 : 8; // Middle bits of segment base addressSegdesc::sd_base_23_16155,5316
	unsigned sd_type : 4;       // Segment type (see STS_ constants)sd_type156,5384
	unsigned sd_type : 4;       // Segment type (see STS_ constants)Segdesc::sd_type156,5384
	unsigned sd_s : 1;          // 0 = system, 1 = applicationsd_s157,5450
	unsigned sd_s : 1;          // 0 = system, 1 = applicationSegdesc::sd_s157,5450
	unsigned sd_dpl : 2;        // Descriptor Privilege Levelsd_dpl158,5510
	unsigned sd_dpl : 2;        // Descriptor Privilege LevelSegdesc::sd_dpl158,5510
	unsigned sd_p : 1;          // Presentsd_p159,5569
	unsigned sd_p : 1;          // PresentSegdesc::sd_p159,5569
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitsd_lim_19_16160,5609
	unsigned sd_lim_19_16 : 4;  // High bits of segment limitSegdesc::sd_lim_19_16160,5609
	unsigned sd_avl : 1;        // Unused (available for software use)sd_avl161,5668
	unsigned sd_avl : 1;        // Unused (available for software use)Segdesc::sd_avl161,5668
	unsigned sd_rsv1 : 1;       // Reservedsd_rsv1162,5736
	unsigned sd_rsv1 : 1;       // ReservedSegdesc::sd_rsv1162,5736
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentsd_db163,5777
	unsigned sd_db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentSegdesc::sd_db163,5777
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setsd_g164,5848
	unsigned sd_g : 1;          // Granularity: limit scaled by 4K when setSegdesc::sd_g164,5848
	unsigned sd_base_31_24 : 8; // High bits of segment base addresssd_base_31_24165,5921
	unsigned sd_base_31_24 : 8; // High bits of segment base addressSegdesc::sd_base_31_24165,5921
#define SEG_NULL	SEG_NULL168,6006
#define SEG_FAULT	SEG_FAULT170,6114
#define SEG(SEG172,6192
#define SEG16(SEG16176,6391
#define STA_X	STA_X184,6662
#define STA_E	STA_E185,6707
#define STA_C	STA_C186,6771
#define STA_W	STA_W187,6839
#define STA_R	STA_R188,6901
#define STA_A	STA_A189,6958
#define STS_T16A	STS_T16A192,7022
#define STS_LDT	STS_LDT193,7071
#define STS_T16B	STS_T16B194,7122
#define STS_CG16	STS_CG16195,7166
#define STS_TG	STS_TG196,7211
#define STS_IG16	STS_IG16197,7268
#define STS_TG16	STS_TG16198,7318
#define STS_T32A	STS_T32A199,7363
#define STS_T32B	STS_T32B200,7412
#define STS_CG32	STS_CG32201,7456
#define STS_IG32	STS_IG32202,7501
#define STS_TG32	STS_TG32203,7551
struct Taskstate {Taskstate215,7731
	uint32_t ts_link;	// Old ts selectorts_link216,7750
	uint32_t ts_link;	// Old ts selectorTaskstate::ts_link216,7750
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsts_esp0217,7788
	uintptr_t ts_esp0;	// Stack pointers and segment selectorsTaskstate::ts_esp0217,7788
	uint16_t ts_ss0;	//   after an increase in privilege levelts_ss0218,7848
	uint16_t ts_ss0;	//   after an increase in privilege levelTaskstate::ts_ss0218,7848
	uint16_t ts_padding1;ts_padding1219,7908
	uint16_t ts_padding1;Taskstate::ts_padding1219,7908
	uintptr_t ts_esp1;ts_esp1220,7931
	uintptr_t ts_esp1;Taskstate::ts_esp1220,7931
	uint16_t ts_ss1;ts_ss1221,7951
	uint16_t ts_ss1;Taskstate::ts_ss1221,7951
	uint16_t ts_padding2;ts_padding2222,7969
	uint16_t ts_padding2;Taskstate::ts_padding2222,7969
	uintptr_t ts_esp2;ts_esp2223,7992
	uintptr_t ts_esp2;Taskstate::ts_esp2223,7992
	uint16_t ts_ss2;ts_ss2224,8012
	uint16_t ts_ss2;Taskstate::ts_ss2224,8012
	uint16_t ts_padding3;ts_padding3225,8030
	uint16_t ts_padding3;Taskstate::ts_padding3225,8030
	physaddr_t ts_cr3;	// Page directory basets_cr3226,8053
	physaddr_t ts_cr3;	// Page directory baseTaskstate::ts_cr3226,8053
	uintptr_t ts_eip;	// Saved state from last task switchts_eip227,8096
	uintptr_t ts_eip;	// Saved state from last task switchTaskstate::ts_eip227,8096
	uint32_t ts_eflags;ts_eflags228,8152
	uint32_t ts_eflags;Taskstate::ts_eflags228,8152
	uint32_t ts_eax;	// More saved state (registers)ts_eax229,8173
	uint32_t ts_eax;	// More saved state (registers)Taskstate::ts_eax229,8173
	uint32_t ts_ecx;ts_ecx230,8223
	uint32_t ts_ecx;Taskstate::ts_ecx230,8223
	uint32_t ts_edx;ts_edx231,8241
	uint32_t ts_edx;Taskstate::ts_edx231,8241
	uint32_t ts_ebx;ts_ebx232,8259
	uint32_t ts_ebx;Taskstate::ts_ebx232,8259
	uintptr_t ts_esp;ts_esp233,8277
	uintptr_t ts_esp;Taskstate::ts_esp233,8277
	uintptr_t ts_ebp;ts_ebp234,8296
	uintptr_t ts_ebp;Taskstate::ts_ebp234,8296
	uint32_t ts_esi;ts_esi235,8315
	uint32_t ts_esi;Taskstate::ts_esi235,8315
	uint32_t ts_edi;ts_edi236,8333
	uint32_t ts_edi;Taskstate::ts_edi236,8333
	uint16_t ts_es;		// Even more saved state (segment selectors)ts_es237,8351
	uint16_t ts_es;		// Even more saved state (segment selectors)Taskstate::ts_es237,8351
	uint16_t ts_padding4;ts_padding4238,8414
	uint16_t ts_padding4;Taskstate::ts_padding4238,8414
	uint16_t ts_cs;ts_cs239,8437
	uint16_t ts_cs;Taskstate::ts_cs239,8437
	uint16_t ts_padding5;ts_padding5240,8454
	uint16_t ts_padding5;Taskstate::ts_padding5240,8454
	uint16_t ts_ss;ts_ss241,8477
	uint16_t ts_ss;Taskstate::ts_ss241,8477
	uint16_t ts_padding6;ts_padding6242,8494
	uint16_t ts_padding6;Taskstate::ts_padding6242,8494
	uint16_t ts_ds;ts_ds243,8517
	uint16_t ts_ds;Taskstate::ts_ds243,8517
	uint16_t ts_padding7;ts_padding7244,8534
	uint16_t ts_padding7;Taskstate::ts_padding7244,8534
	uint16_t ts_fs;ts_fs245,8557
	uint16_t ts_fs;Taskstate::ts_fs245,8557
	uint16_t ts_padding8;ts_padding8246,8574
	uint16_t ts_padding8;Taskstate::ts_padding8246,8574
	uint16_t ts_gs;ts_gs247,8597
	uint16_t ts_gs;Taskstate::ts_gs247,8597
	uint16_t ts_padding9;ts_padding9248,8614
	uint16_t ts_padding9;Taskstate::ts_padding9248,8614
	uint16_t ts_ldt;ts_ldt249,8637
	uint16_t ts_ldt;Taskstate::ts_ldt249,8637
	uint16_t ts_padding10;ts_padding10250,8655
	uint16_t ts_padding10;Taskstate::ts_padding10250,8655
	uint16_t ts_t;		// Trap on task switchts_t251,8679
	uint16_t ts_t;		// Trap on task switchTaskstate::ts_t251,8679
	uint16_t ts_iomb;	// I/O map base addressts_iomb252,8719
	uint16_t ts_iomb;	// I/O map base addressTaskstate::ts_iomb252,8719
struct Gatedesc {Gatedesc256,8811
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentgd_off_15_0257,8829
	unsigned gd_off_15_0 : 16;   // low 16 bits of offset in segmentGatedesc::gd_off_15_0257,8829
	unsigned gd_sel : 16;        // segment selectorgd_sel258,8895
	unsigned gd_sel : 16;        // segment selectorGatedesc::gd_sel258,8895
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesgd_args259,8945
	unsigned gd_args : 5;        // # args, 0 for interrupt/trap gatesGatedesc::gd_args259,8945
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)gd_rsv1260,9013
	unsigned gd_rsv1 : 3;        // reserved(should be zero I guess)Gatedesc::gd_rsv1260,9013
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})gd_type261,9079
	unsigned gd_type : 4;        // type(STS_{TG,IG32,TG32})Gatedesc::gd_type261,9079
	unsigned gd_s : 1;           // must be 0 (system)gd_s262,9137
	unsigned gd_s : 1;           // must be 0 (system)Gatedesc::gd_s262,9137
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelgd_dpl263,9189
	unsigned gd_dpl : 2;         // descriptor(meaning new) privilege levelGatedesc::gd_dpl263,9189
	unsigned gd_p : 1;           // Presentgd_p264,9262
	unsigned gd_p : 1;           // PresentGatedesc::gd_p264,9262
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentgd_off_31_16265,9303
	unsigned gd_off_31_16 : 16;  // high bits of offset in segmentGatedesc::gd_off_31_16265,9303
#define SETGATE(SETGATE282,10286
#define SETCALLGATE(SETCALLGATE296,10699
struct Pseudodesc {Pseudodesc310,11137
	uint16_t pd_lim;		// Limitpd_lim311,11157
	uint16_t pd_lim;		// LimitPseudodesc::pd_lim311,11157
	uint32_t pd_base;		// Base addresspd_base312,11185
	uint32_t pd_base;		// Base addressPseudodesc::pd_base312,11185

inc/stdarg.h,189
#define	JOS_INC_STDARG_HJOS_INC_STDARG_H4,91
typedef __builtin_va_list va_list;va_list6,117
#define va_start(va_start8,153
#define va_arg(va_arg10,210
#define va_end(va_end12,263

inc/error.h,460
#define JOS_INC_ERROR_HJOS_INC_ERROR_H4,72
	E_UNSPECIFIED	= 1,	// Unspecified or unknown problemE_UNSPECIFIED8,172
	E_BAD_ENV	,	// Environment doesn't exist or otherwiseE_BAD_ENV9,226
	E_INVAL		,	// Invalid parameterE_INVAL11,323
	E_NO_MEM	,	// Request failed due to memory shortageE_NO_MEM12,356
	E_NO_FREE_ENV	,	// Attempt to create a new environment beyondE_NO_FREE_ENV13,409
	E_FAULT		,	// Memory faultE_FAULT15,499
	MAXERRORMAXERROR17,528

inc/kbdreg.h,2510
#define JOS_KBDREG_HJOS_KBDREG_H2,21
#define KEY_HOME	KEY_HOME5,63
#define KEY_END	KEY_END6,85
#define KEY_UP	KEY_UP7,107
#define KEY_DN	KEY_DN8,128
#define KEY_LF	KEY_LF9,149
#define KEY_RT	KEY_RT10,170
#define KEY_PGUP	KEY_PGUP11,191
#define KEY_PGDN	KEY_PGDN12,213
#define KEY_INS	KEY_INS13,235
#define KEY_DEL	KEY_DEL14,257
#define	KBSTATP	KBSTATP19,331
#define	 KBS_DIB	KBS_DIB20,389
#define	 KBS_IBF	KBS_IBF21,436
#define	 KBS_WARM	KBS_WARM22,485
#define	 KBS_OCMD	KBS_OCMD23,535
#define	 KBS_NOSEC	KBS_NOSEC24,594
#define	 KBS_TERR	KBS_TERR25,654
#define	 KBS_RERR	KBS_RERR26,720
#define	 KBS_PERR	KBS_PERR27,767
#define	KBCMDP	KBCMDP29,814
#define	 KBC_RAMREAD	KBC_RAMREAD30,864
#define	 KBC_RAMWRITE	KBC_RAMWRITE31,910
#define	 KBC_AUXDISABLE	KBC_AUXDISABLE32,956
#define	 KBC_AUXENABLE	KBC_AUXENABLE33,1014
#define	 KBC_AUXTEST	KBC_AUXTEST34,1070
#define	 KBC_KBDECHO	KBC_KBDECHO35,1122
#define	 KBC_AUXECHO	KBC_AUXECHO36,1176
#define	 KBC_AUXWRITE	KBC_AUXWRITE37,1231
#define	 KBC_SELFTEST	KBC_SELFTEST38,1288
#define	 KBC_KBDTEST	KBC_KBDTEST39,1337
#define	 KBC_KBDDISABLE	KBC_KBDDISABLE40,1388
#define	 KBC_KBDENABLE	KBC_KBDENABLE41,1445
#define	 KBC_PULSE0	KBC_PULSE042,1500
#define	 KBC_PULSE1	KBC_PULSE143,1550
#define	 KBC_PULSE2	KBC_PULSE244,1600
#define	 KBC_PULSE3	KBC_PULSE345,1650
#define	KBDATAP	KBDATAP47,1701
#define	KBOUTP	KBOUTP48,1746
#define	K_RDCMDBYTE	K_RDCMDBYTE50,1791
#define	K_LDCMDBYTE	K_LDCMDBYTE51,1816
#define	KC8_TRANS	KC8_TRANS53,1842
#define	KC8_MDISABLE	KC8_MDISABLE54,1897
#define	KC8_KDISABLE	KC8_KDISABLE55,1943
#define	KC8_IGNSEC	KC8_IGNSEC56,1992
#define	KC8_CPU	KC8_CPU57,2043
#define	KC8_MENABLE	KC8_MENABLE58,2102
#define	KC8_KENABLE	KC8_KENABLE59,2156
#define	CMDBYTE	CMDBYTE60,2213
#define	KBC_RESET	KBC_RESET63,2299
#define	KBC_RESEND	KBC_RESEND64,2347
#define	KBC_SETDEFAULT	KBC_SETDEFAULT65,2419
#define	KBC_DISABLE	KBC_DISABLE66,2494
#define	KBC_ENABLE	KBC_ENABLE67,2578
#define	KBC_TYPEMATIC	KBC_TYPEMATIC68,2628
#define	KBC_SETTABLE	KBC_SETTABLE69,2690
#define	KBC_MODEIND	KBC_MODEIND70,2753
#define	KBC_ECHO	KBC_ECHO71,2815
#define	KBR_EXTENDED	KBR_EXTENDED74,2903
#define	KBR_RESEND	KBR_RESEND75,2957
#define	KBR_ACK	KBR_ACK76,3011
#define	KBR_OVERRUN	KBR_OVERRUN77,3064
#define	KBR_FAILURE	KBR_FAILURE78,3103
#define	KBR_BREAK	KBR_BREAK79,3152
#define	KBR_RSTDONE	KBR_RSTDONE80,3221
#define	KBR_ECHO	KBR_ECHO81,3267

inc/types.h,1005
#define JOS_INC_TYPES_HJOS_INC_TYPES_H2,24
#define NULL NULL5,62
typedef _Bool bool;bool9,130
enum { false, true };false10,150
enum { false, true };true10,150
typedef __signed char int8_t;int8_t13,219
typedef unsigned char uint8_t;uint8_t14,249
typedef short int16_t;int16_t15,280
typedef unsigned short uint16_t;uint16_t16,303
typedef int int32_t;int32_t17,336
typedef unsigned int uint32_t;uint32_t18,357
typedef long long int64_t;int64_t19,388
typedef unsigned long long uint64_t;uint64_t20,415
typedef int32_t intptr_t;intptr_t26,673
typedef uint32_t uintptr_t;uintptr_t27,699
typedef uint32_t physaddr_t;physaddr_t28,727
typedef uint32_t ppn_t;ppn_t31,791
typedef uint32_t size_t;size_t34,859
typedef int32_t ssize_t;ssize_t37,975
typedef int32_t off_t;off_t40,1048
#define MIN(MIN43,1108
#define MAX(MAX49,1241
#define ROUNDDOWN(ROUNDDOWN58,1476
#define ROUNDUP(ROUNDUP64,1637
#define ARRAY_SIZE(ARRAY_SIZE70,1778
#define offsetof(offsetof73,1904

inc/assert.h,175
#define JOS_INC_ASSERT_HJOS_INC_ASSERT_H4,73
#define warn(warn11,247
#define panic(panic12,304
#define assert(assert14,364
#define static_assert(static_assert18,521

boot/sign.pl,0

boot/main.c,255
#define SECTSIZE	SECTSIZE32,1131
#define ELFHDR	ELFHDR33,1152
bootmain(void)bootmain39,1293
readseg(uint32_t pa, uint32_t count, uint32_t offset)readseg72,2092
waitdisk(void)waitdisk99,2821
readsect(void *dst, uint32_t offset)readsect107,2928

boot/boot.S,108
start:start13,454
protcseg:protcseg58,1983
spin:spin72,2497
gdt:gdt77,2598
gdtdesc:gdtdesc82,2757

obj/boot/boot.asm,729
Disassembly of section .text:Disassembly5,49
start:start11,174
protcseg:protcseg84,2893
spin:spin108,3821
voidvoid132,4396
static inline uint8_tstatic137,4463
voidvoid157,5076
static inline voidstatic169,5412
	offset = (offset / SECTSIZE) + 1;offset226,7583
	end_pa = pa + count;end_pa230,7719
	offset = (offset / SECTSIZE) + 1;offset234,7851
	end_pa = pa + count;end_pa236,7935
	offset = (offset / SECTSIZE) + 1;offset238,8006
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph282,9731
	eph = ph + ELFHDR->e_phnum;eph284,9848
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);ph286,9929
	eph = ph + ELFHDR->e_phnum;eph288,10052
static inline voidstatic309,10911

obj/kern/kernel.asm,250591
Disassembly of section .text:Disassembly5,47
f0100000 <_start+0xeffffff4>:f01000007,78
_start = RELOC(entry)_start9,123
entry:entry12,159
f0100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dhf010000014,200
f0100006:	00 00                	add    %al,(%eax)f010000615,256
f0100008:	fe 4f 52             	decb   0x52(%edi)f010000816,306
f010000b:	e4                   	.byte 0xe4f010000b17,356
f010000c <entry>:f010000c19,400
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472f010000c20,418
f0100013:	34 12 f010001321,471
f0100015:	b8 00 50 11 00       	mov    $0x115000,%eaxf010001528,696
f010001a:	0f 22 d8             	mov    %eax,%cr3f010001a30,767
f010001d:	0f 20 c0             	mov    %cr0,%eaxf010001d33,852
f0100020:	0d 01 00 01 80       	or     $0x80010001,%eaxf010002035,936
f0100025:	0f 22 c0             	mov    %eax,%cr0f010002537,1009
f0100028:	b8 2f 00 10 f0       	mov    $0xf010002f,%eaxf010002843,1219
f010002d:	ff e0                	jmp    *%eaxf010002d45,1286
f010002f <relocated>:f010002f47,1332
relocated:relocated48,1354
f010002f:	bd 00 00 00 00       	mov    $0x0,%ebpf010002f54,1542
f0100034:	bc 00 30 11 f0       	mov    $0xf0113000,%espf010003458,1644
f0100039:	e8 02 00 00 00       	call   f0100040 <i386_init>f010003962,1734
f010003e <spin>:f010003e64,1795
spin:	jmp	spinspin67,1869
f010003e:	eb fe                	jmp    f010003e <spin>f010003e68,1884
f0100040 <i386_init>:f010004070,1940
voidvoid74,1989
f0100040:	55                   	push   %ebpf010004077,2012
f0100041:	89 e5                	mov    %esp,%ebpf010004178,2056
f0100043:	53                   	push   %ebxf010004379,2105
f0100044:	83 ec 08             	sub    $0x8,%espf010004480,2149
f0100047:	e8 03 01 00 00       	call   f010014f <__x86.get_pc_thunk.bx>f010004781,2198
f010004c:	81 c3 bc 42 01 00    	add    $0x142bc,%ebxf010004c82,2270
f0100052:	c7 c2 60 60 11 f0    	mov    $0xf0116060,%edxf010005289,2587
f0100058:	c7 c0 c0 66 11 f0    	mov    $0xf01166c0,%eaxf010005890,2643
f010005e:	29 d0                	sub    %edx,%eaxf010005e91,2699
f0100060:	50                   	push   %eaxf010006092,2748
f0100061:	6a 00                	push   $0x0f010006193,2792
f0100063:	52                   	push   %edxf010006394,2836
f0100064:	e8 c3 22 00 00       	call   f010232c <memset>f010006495,2880
f0100069:	e8 36 05 00 00       	call   f01005a4 <cons_init>f0100069100,3027
f010006e:	83 c4 08             	add    $0x8,%espf010006e103,3135
f0100071:	68 ac 1a 00 00       	push   $0x1aacf0100071104,3184
f0100076:	8d 83 78 e4 fe ff    	lea    -0x11b88(%ebx),%eaxf0100076105,3231
f010007c:	50                   	push   %eaxf010007c106,3290
f010007d:	e8 4e 17 00 00       	call   f01017d0 <cprintf>f010007d107,3334
f0100082:	e8 71 0c 00 00       	call   f0100cf8 <mem_init>f0100082111,3459
f0100087:	83 c4 10             	add    $0x10,%espf0100087112,3518
f010008a:	83 ec 0c             	sub    $0xc,%espf010008a117,3631
f010008d:	6a 00                	push   $0x0f010008d118,3680
f010008f:	e8 8c 07 00 00       	call   f0100820 <monitor>f010008f119,3724
f0100094:	83 c4 10             	add    $0x10,%espf0100094120,3782
f0100097:	eb f1                	jmp    f010008a <i386_init+0x4a>f0100097121,3832
f0100099 <_panic>:f0100099123,3898
voidvoid127,4034
f0100099:	55                   	push   %ebpf0100099130,4097
f010009a:	89 e5                	mov    %esp,%ebpf010009a131,4141
f010009c:	57                   	push   %edif010009c132,4190
f010009d:	56                   	push   %esif010009d133,4234
f010009e:	53                   	push   %ebxf010009e134,4278
f010009f:	83 ec 0c             	sub    $0xc,%espf010009f135,4322
f01000a2:	e8 a8 00 00 00       	call   f010014f <__x86.get_pc_thunk.bx>f01000a2136,4371
f01000a7:	81 c3 61 42 01 00    	add    $0x14261,%ebxf01000a7137,4443
f01000ad:	8b 7d 10             	mov    0x10(%ebp),%edif01000ad138,4496
f01000b0:	c7 c0 c4 66 11 f0    	mov    $0xf01166c4,%eaxf01000b0142,4580
f01000b6:	83 38 00             	cmpl   $0x0,(%eax)f01000b6143,4636
f01000b9:	74 0f                	je     f01000ca <_panic+0x31>f01000b9144,4687
dead:dead147,4763
f01000bb:	83 ec 0c             	sub    $0xc,%espf01000bb151,4834
f01000be:	6a 00                	push   $0x0f01000be152,4883
f01000c0:	e8 5b 07 00 00       	call   f0100820 <monitor>f01000c0153,4927
f01000c5:	83 c4 10             	add    $0x10,%espf01000c5154,4985
f01000c8:	eb f1                	jmp    f01000bb <_panic+0x22>f01000c8155,5035
	panicstr = fmt;panicstr156,5097
f01000ca:	89 38                	mov    %edi,(%eax)f01000ca157,5114
f01000cc:	fa                   	cli    f01000cc159,5192
f01000cd:	fc                   	cld    f01000cd160,5232
f01000ce:	8d 75 14             	lea    0x14(%ebp),%esif01000ce162,5292
f01000d1:	83 ec 04             	sub    $0x4,%espf01000d1164,5396
f01000d4:	ff 75 0c             	pushl  0xc(%ebp)f01000d4165,5445
f01000d7:	ff 75 08             	pushl  0x8(%ebp)f01000d7166,5494
f01000da:	8d 83 93 e4 fe ff    	lea    -0x11b6d(%ebx),%eaxf01000da167,5543
f01000e0:	50                   	push   %eaxf01000e0168,5602
f01000e1:	e8 ea 16 00 00       	call   f01017d0 <cprintf>f01000e1169,5646
f01000e6:	83 c4 08             	add    $0x8,%espf01000e6171,5724
f01000e9:	56                   	push   %esif01000e9172,5773
f01000ea:	57                   	push   %edif01000ea173,5817
f01000eb:	e8 a9 16 00 00       	call   f0101799 <vcprintf>f01000eb174,5861
f01000f0:	8d 83 cf e4 fe ff    	lea    -0x11b31(%ebx),%eaxf01000f0176,5936
f01000f6:	89 04 24             	mov    %eax,(%esp)f01000f6177,5995
f01000f9:	e8 d2 16 00 00       	call   f01017d0 <cprintf>f01000f9178,6046
f01000fe:	83 c4 10             	add    $0x10,%espf01000fe179,6104
f0100101:	eb b8                	jmp    f01000bb <_panic+0x22>f0100101180,6154
f0100103 <_warn>:f0100103182,6217
voidvoid186,6266
f0100103:	55                   	push   %ebpf0100103189,6328
f0100104:	89 e5                	mov    %esp,%ebpf0100104190,6372
f0100106:	56                   	push   %esif0100106191,6421
f0100107:	53                   	push   %ebxf0100107192,6465
f0100108:	e8 42 00 00 00       	call   f010014f <__x86.get_pc_thunk.bx>f0100108193,6509
f010010d:	81 c3 fb 41 01 00    	add    $0x141fb,%ebxf010010d194,6581
f0100113:	8d 75 14             	lea    0x14(%ebp),%esif0100113198,6668
f0100116:	83 ec 04             	sub    $0x4,%espf0100116200,6774
f0100119:	ff 75 0c             	pushl  0xc(%ebp)f0100119201,6823
f010011c:	ff 75 08             	pushl  0x8(%ebp)f010011c202,6872
f010011f:	8d 83 ab e4 fe ff    	lea    -0x11b55(%ebx),%eaxf010011f203,6921
f0100125:	50                   	push   %eaxf0100125204,6980
f0100126:	e8 a5 16 00 00       	call   f01017d0 <cprintf>f0100126205,7024
f010012b:	83 c4 08             	add    $0x8,%espf010012b207,7102
f010012e:	56                   	push   %esif010012e208,7151
f010012f:	ff 75 10             	pushl  0x10(%ebp)f010012f209,7195
f0100132:	e8 62 16 00 00       	call   f0101799 <vcprintf>f0100132210,7245
f0100137:	8d 83 cf e4 fe ff    	lea    -0x11b31(%ebx),%eaxf0100137212,7320
f010013d:	89 04 24             	mov    %eax,(%esp)f010013d213,7379
f0100140:	e8 8b 16 00 00       	call   f01017d0 <cprintf>f0100140214,7430
f0100145:	83 c4 10             	add    $0x10,%espf0100145217,7503
f0100148:	8d 65 f8             	lea    -0x8(%ebp),%espf0100148218,7553
f010014b:	5b                   	pop    %ebxf010014b219,7608
f010014c:	5e                   	pop    %esif010014c220,7652
f010014d:	5d                   	pop    %ebpf010014d221,7696
f010014e:	c3                   	ret    f010014e222,7740
f010014f <__x86.get_pc_thunk.bx>:f010014f224,7781
f010014f:	8b 1c 24             	mov    (%esp),%ebxf010014f225,7815
f0100152:	c3                   	ret    f0100152226,7866
f0100153 <serial_proc_data>:f0100153228,7907
static bool serial_exists;static230,7937
static intstatic232,7965
f0100153:	55                   	push   %ebpf0100153235,8001
f0100154:	89 e5                	mov    %esp,%ebpf0100154236,8045
static inline uint8_tstatic238,8095
f0100156:	ba fd 03 00 00       	mov    $0x3fd,%edxf0100156243,8204
f010015b:	ec                   	in     (%dx),%alf010015b244,8255
f010015c:	a8 01                	test   $0x1,%alf010015c246,8346
f010015e:	74 0b                	je     f010016b <serial_proc_data+0x18>f010015e247,8394
f0100160:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100160248,8466
f0100165:	ec                   	in     (%dx),%alf0100165249,8517
f0100166:	0f b6 c0             	movzbl %al,%eaxf0100166252,8605
f0100169:	5d                   	pop    %ebpf0100169254,8655
f010016a:	c3                   	ret    f010016a255,8699
f010016b:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf010016b257,8752
f0100170:	eb f7                	jmp    f0100169 <serial_proc_data+0x16>f0100170258,8808
f0100172 <cons_intr>:f0100172260,8881
static voidstatic264,9011
f0100172:	55                   	push   %ebpf0100172267,9054
f0100173:	89 e5                	mov    %esp,%ebpf0100173268,9098
f0100175:	56                   	push   %esif0100175269,9147
f0100176:	53                   	push   %ebxf0100176270,9191
f0100177:	e8 d3 ff ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100177271,9235
f010017c:	81 c3 8c 41 01 00    	add    $0x1418c,%ebxf010017c272,9307
f0100182:	89 c6                	mov    %eax,%esif0100182273,9360
f0100184:	ff d6                	call   *%esif0100184277,9451
f0100186:	83 f8 ff             	cmp    $0xffffffff,%eaxf0100186278,9496
f0100189:	74 2e                	je     f01001b9 <cons_intr+0x47>f0100189279,9552
f010018b:	85 c0                	test   %eax,%eaxf010018b281,9631
f010018d:	74 f5                	je     f0100184 <cons_intr+0x12>f010018d282,9680
f010018f:	8b 8b 7c 1f 00 00    	mov    0x1f7c(%ebx),%ecxf010018f285,9787
f0100195:	8d 51 01             	lea    0x1(%ecx),%edxf0100195286,9844
f0100198:	89 93 7c 1f 00 00    	mov    %edx,0x1f7c(%ebx)f0100198287,9898
f010019e:	88 84 0b 78 1d 00 00 	mov    %al,0x1d78(%ebx,%ecx,1)f010019e288,9955
f01001a5:	81 fa 00 02 00 00    	cmp    $0x200,%edxf01001a5290,10050
f01001ab:	75 d7                	jne    f0100184 <cons_intr+0x12>f01001ab291,10101
f01001ad:	c7 83 7c 1f 00 00 00 	movl   $0x0,0x1f7c(%ebx)f01001ad293,10184
f01001b4:	00 00 00 f01001b4294,10241
f01001b7:	eb cb                	jmp    f0100184 <cons_intr+0x12>f01001b7295,10261
f01001b9:	5b                   	pop    %ebxf01001b9298,10331
f01001ba:	5e                   	pop    %esif01001ba299,10375
f01001bb:	5d                   	pop    %ebpf01001bb300,10419
f01001bc:	c3                   	ret    f01001bc301,10463
f01001bd <kbd_proc_data>:f01001bd303,10504
f01001bd:	55                   	push   %ebpf01001bd305,10532
f01001be:	89 e5                	mov    %esp,%ebpf01001be306,10576
f01001c0:	56                   	push   %esif01001c0307,10625
f01001c1:	53                   	push   %ebxf01001c1308,10669
f01001c2:	e8 88 ff ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01001c2309,10713
f01001c7:	81 c3 41 41 01 00    	add    $0x14141,%ebxf01001c7310,10785
f01001cd:	ba 64 00 00 00       	mov    $0x64,%edxf01001cd311,10838
f01001d2:	ec                   	in     (%dx),%alf01001d2312,10888
f01001d3:	a8 01                	test   $0x1,%alf01001d3314,10965
f01001d5:	0f 84 06 01 00 00    	je     f01002e1 <kbd_proc_data+0x124>f01001d5315,11013
f01001db:	a8 20                	test   $0x20,%alf01001db317,11105
f01001dd:	0f 85 05 01 00 00    	jne    f01002e8 <kbd_proc_data+0x12b>f01001dd318,11154
f01001e3:	ba 60 00 00 00       	mov    $0x60,%edxf01001e3319,11224
f01001e8:	ec                   	in     (%dx),%alf01001e8320,11274
f01001e9:	89 c2                	mov    %eax,%edxf01001e9321,11323
f01001eb:	3c e0                	cmp    $0xe0,%alf01001eb323,11393
f01001ed:	0f 84 93 00 00 00    	je     f0100286 <kbd_proc_data+0xc9>f01001ed324,11442
f01001f3:	84 c0                	test   %al,%alf01001f3326,11538
f01001f5:	0f 88 a0 00 00 00    	js     f010029b <kbd_proc_data+0xde>f01001f5327,11585
f01001fb:	8b 8b 58 1d 00 00    	mov    0x1d58(%ebx),%ecxf01001fb329,11683
f0100201:	f6 c1 40             	test   $0x40,%clf0100201330,11740
f0100204:	74 0e                	je     f0100214 <kbd_proc_data+0x57>f0100204331,11789
f0100206:	83 c8 80             	or     $0xffffff80,%eaxf0100206333,11874
f0100209:	89 c2                	mov    %eax,%edxf0100209334,11930
f010020b:	83 e1 bf             	and    $0xffffffbf,%ecxf010020b336,11998
f010020e:	89 8b 58 1d 00 00    	mov    %ecx,0x1d58(%ebx)f010020e337,12054
f0100214:	0f b6 d2             	movzbl %dl,%edxf0100214339,12138
f0100217:	0f b6 84 13 f8 e5 fe 	movzbl -0x11a08(%ebx,%edx,1),%eaxf0100217340,12186
f010021e:	ff f010021e341,12252
f010021f:	0b 83 58 1d 00 00    	or     0x1d58(%ebx),%eaxf010021f342,12266
f0100225:	0f b6 8c 13 f8 e4 fe 	movzbl -0x11b08(%ebx,%edx,1),%ecxf0100225344,12351
f010022c:	ff f010022c345,12417
f010022d:	31 c8                	xor    %ecx,%eaxf010022d346,12431
f010022f:	89 83 58 1d 00 00    	mov    %eax,0x1d58(%ebx)f010022f347,12480
	c = charcode[shift & (CTL | SHIFT)][data];c348,12537
f0100235:	89 c1                	mov    %eax,%ecxf0100235349,12581
f0100237:	83 e1 03             	and    $0x3,%ecxf0100237350,12630
f010023a:	8b 8c 8b f8 1c 00 00 	mov    0x1cf8(%ebx,%ecx,4),%ecxf010023a351,12679
f0100241:	0f b6 14 11          	movzbl (%ecx,%edx,1),%edxf0100241352,12743
f0100245:	0f b6 f2             	movzbl %dl,%esif0100245353,12801
f0100248:	a8 08                	test   $0x8,%alf0100248355,12874
f010024a:	74 0d                	je     f0100259 <kbd_proc_data+0x9c>f010024a356,12922
f010024c:	89 f2                	mov    %esi,%edxf010024c358,13019
f010024e:	8d 4e 9f             	lea    -0x61(%esi),%ecxf010024e359,13068
f0100251:	83 f9 19             	cmp    $0x19,%ecxf0100251360,13124
f0100254:	77 7a                	ja     f01002d0 <kbd_proc_data+0x113>f0100254361,13174
f0100256:	83 ee 20             	sub    $0x20,%esif0100256363,13263
f0100259:	f7 d0                	not    %eaxf0100259365,13361
f010025b:	a8 06                	test   $0x6,%alf010025b366,13405
f010025d:	75 33                	jne    f0100292 <kbd_proc_data+0xd5>f010025d367,13453
f010025f:	81 fe e9 00 00 00    	cmp    $0xe9,%esif010025f368,13522
f0100265:	75 2b                	jne    f0100292 <kbd_proc_data+0xd5>f0100265369,13572
f0100267:	83 ec 0c             	sub    $0xc,%espf0100267371,13668
f010026a:	8d 83 c5 e4 fe ff    	lea    -0x11b3b(%ebx),%eaxf010026a372,13717
f0100270:	50                   	push   %eaxf0100270373,13776
f0100271:	e8 5a 15 00 00       	call   f01017d0 <cprintf>f0100271374,13820
static inline voidstatic377,13881
f0100276:	b8 03 00 00 00       	mov    $0x3,%eaxf0100276381,13988
f010027b:	ba 92 00 00 00       	mov    $0x92,%edxf010027b382,14037
f0100280:	ee                   	out    %al,(%dx)f0100280383,14087
f0100281:	83 c4 10             	add    $0x10,%espf0100281384,14136
f0100284:	eb 0c                	jmp    f0100292 <kbd_proc_data+0xd5>f0100284385,14186
f0100286:	83 8b 58 1d 00 00 40 	orl    $0x40,0x1d58(%ebx)f0100286387,14273
f010028d:	be 00 00 00 00       	mov    $0x0,%esif010028d389,14343
f0100292:	89 f0                	mov    %esi,%eaxf0100292391,14394
f0100294:	8d 65 f8             	lea    -0x8(%ebp),%espf0100294392,14443
f0100297:	5b                   	pop    %ebxf0100297393,14498
f0100298:	5e                   	pop    %esif0100298394,14542
f0100299:	5d                   	pop    %ebpf0100299395,14586
f010029a:	c3                   	ret    f010029a396,14630
		data = (shift & E0ESC ? data : data & 0x7F);data397,14670
f010029b:	8b 8b 58 1d 00 00    	mov    0x1d58(%ebx),%ecxf010029b398,14717
f01002a1:	89 ce                	mov    %ecx,%esif01002a1399,14774
f01002a3:	83 e6 40             	and    $0x40,%esif01002a3400,14823
f01002a6:	83 e0 7f             	and    $0x7f,%eaxf01002a6401,14873
f01002a9:	85 f6                	test   %esi,%esif01002a9402,14923
f01002ab:	0f 44 d0             	cmove  %eax,%edxf01002ab403,14972
f01002ae:	0f b6 d2             	movzbl %dl,%edxf01002ae405,15060
f01002b1:	0f b6 84 13 f8 e5 fe 	movzbl -0x11a08(%ebx,%edx,1),%eaxf01002b1406,15108
f01002b8:	ff f01002b8407,15174
f01002b9:	83 c8 40             	or     $0x40,%eaxf01002b9408,15188
f01002bc:	0f b6 c0             	movzbl %al,%eaxf01002bc409,15238
f01002bf:	f7 d0                	not    %eaxf01002bf410,15286
f01002c1:	21 c8                	and    %ecx,%eaxf01002c1411,15330
f01002c3:	89 83 58 1d 00 00    	mov    %eax,0x1d58(%ebx)f01002c3412,15379
f01002c9:	be 00 00 00 00       	mov    $0x0,%esif01002c9414,15448
f01002ce:	eb c2                	jmp    f0100292 <kbd_proc_data+0xd5>f01002ce415,15497
f01002d0:	83 ea 41             	sub    $0x41,%edxf01002d0417,15599
f01002d3:	8d 4e 20             	lea    0x20(%esi),%ecxf01002d3419,15668
f01002d6:	83 fa 1a             	cmp    $0x1a,%edxf01002d6420,15723
f01002d9:	0f 42 f1             	cmovb  %ecx,%esif01002d9421,15773
f01002dc:	e9 78 ff ff ff       	jmp    f0100259 <kbd_proc_data+0x9c>f01002dc422,15822
f01002e1:	be ff ff ff ff       	mov    $0xffffffff,%esif01002e1424,15904
f01002e6:	eb aa                	jmp    f0100292 <kbd_proc_data+0xd5>f01002e6425,15960
f01002e8:	be ff ff ff ff       	mov    $0xffffffff,%esif01002e8427,16042
f01002ed:	eb a3                	jmp    f0100292 <kbd_proc_data+0xd5>f01002ed428,16098
f01002ef <cons_putc>:f01002ef430,16168
static voidstatic434,16230
f01002ef:	55                   	push   %ebpf01002ef437,16261
f01002f0:	89 e5                	mov    %esp,%ebpf01002f0438,16305
f01002f2:	57                   	push   %edif01002f2439,16354
f01002f3:	56                   	push   %esif01002f3440,16398
f01002f4:	53                   	push   %ebxf01002f4441,16442
f01002f5:	83 ec 1c             	sub    $0x1c,%espf01002f5442,16486
f01002f8:	e8 52 fe ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01002f8443,16536
f01002fd:	81 c3 0b 40 01 00    	add    $0x1400b,%ebxf01002fd444,16608
f0100303:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100303445,16661
f0100306:	be 00 00 00 00       	mov    $0x0,%esif0100306447,16730
f010030b:	bf fd 03 00 00       	mov    $0x3fd,%edif010030b449,16835
f0100310:	b9 84 00 00 00       	mov    $0x84,%ecxf0100310450,16886
f0100315:	eb 09                	jmp    f0100320 <cons_putc+0x31>f0100315451,16936
f0100317:	89 ca                	mov    %ecx,%edxf0100317452,17001
f0100319:	ec                   	in     (%dx),%alf0100319453,17050
f010031a:	ec                   	in     (%dx),%alf010031a454,17099
f010031b:	ec                   	in     (%dx),%alf010031b455,17148
f010031c:	ec                   	in     (%dx),%alf010031c456,17197
f010031d:	83 c6 01             	add    $0x1,%esif010031d458,17257
f0100320:	89 fa                	mov    %edi,%edxf0100320459,17306
f0100322:	ec                   	in     (%dx),%alf0100322460,17355
f0100323:	a8 20                	test   $0x20,%alf0100323462,17463
f0100325:	75 08                	jne    f010032f <cons_putc+0x40>f0100325463,17512
f0100327:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif0100327464,17577
f010032d:	7e e8                	jle    f0100317 <cons_putc+0x28>f010032d465,17629
f010032f:	8b 7d e4             	mov    -0x1c(%ebp),%edif010032f467,17719
f0100332:	89 f8                	mov    %edi,%eaxf0100332468,17775
f0100334:	88 45 e3             	mov    %al,-0x1d(%ebp)f0100334469,17824
f0100337:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100337471,17936
f010033c:	ee                   	out    %al,(%dx)f010033c472,17987
f010033d:	be 00 00 00 00       	mov    $0x0,%esif010033d474,18091
f0100342:	bf 79 03 00 00       	mov    $0x379,%edif0100342476,18196
f0100347:	b9 84 00 00 00       	mov    $0x84,%ecxf0100347477,18247
f010034c:	eb 09                	jmp    f0100357 <cons_putc+0x68>f010034c478,18297
f010034e:	89 ca                	mov    %ecx,%edxf010034e479,18362
f0100350:	ec                   	in     (%dx),%alf0100350480,18411
f0100351:	ec                   	in     (%dx),%alf0100351481,18460
f0100352:	ec                   	in     (%dx),%alf0100352482,18509
f0100353:	ec                   	in     (%dx),%alf0100353483,18558
f0100354:	83 c6 01             	add    $0x1,%esif0100354484,18607
f0100357:	89 fa                	mov    %edi,%edxf0100357485,18656
f0100359:	ec                   	in     (%dx),%alf0100359486,18705
f010035a:	81 fe ff 31 00 00    	cmp    $0x31ff,%esif010035a487,18754
f0100360:	7f 04                	jg     f0100366 <cons_putc+0x77>f0100360488,18806
f0100362:	84 c0                	test   %al,%alf0100362489,18871
f0100364:	79 e8                	jns    f010034e <cons_putc+0x5f>f0100364490,18918
f0100366:	ba 78 03 00 00       	mov    $0x378,%edxf0100366492,19040
f010036b:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eaxf010036b493,19091
f010036f:	ee                   	out    %al,(%dx)f010036f494,19147
f0100370:	ba 7a 03 00 00       	mov    $0x37a,%edxf0100370495,19196
f0100375:	b8 0d 00 00 00       	mov    $0xd,%eaxf0100375496,19247
f010037a:	ee                   	out    %al,(%dx)f010037a497,19296
f010037b:	b8 08 00 00 00       	mov    $0x8,%eaxf010037b498,19345
f0100380:	ee                   	out    %al,(%dx)f0100380499,19394
f0100381:	8b 7d e4             	mov    -0x1c(%ebp),%edif0100381501,19462
f0100384:	89 fa                	mov    %edi,%edxf0100384502,19518
f0100386:	81 e2 00 ff ff ff    	and    $0xffffff00,%edxf0100386503,19567
f010038c:	89 f8                	mov    %edi,%eaxf010038c505,19638
f010038e:	80 cc 07             	or     $0x7,%ahf010038e506,19687
f0100391:	85 d2                	test   %edx,%edxf0100391507,19735
f0100393:	0f 45 c7             	cmovne %edi,%eaxf0100393508,19784
f0100396:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100396509,19833
f0100399:	0f b6 c0             	movzbl %al,%eaxf0100399511,19910
f010039c:	83 f8 09             	cmp    $0x9,%eaxf010039c512,19958
f010039f:	0f 84 b9 00 00 00    	je     f010045e <cons_putc+0x16f>f010039f513,20007
f01003a5:	83 f8 09             	cmp    $0x9,%eaxf01003a5514,20073
f01003a8:	7e 74                	jle    f010041e <cons_putc+0x12f>f01003a8515,20122
f01003aa:	83 f8 0a             	cmp    $0xa,%eaxf01003aa516,20188
f01003ad:	0f 84 9e 00 00 00    	je     f0100451 <cons_putc+0x162>f01003ad517,20237
f01003b3:	83 f8 0d             	cmp    $0xd,%eaxf01003b3518,20303
f01003b6:	0f 85 d9 00 00 00    	jne    f0100495 <cons_putc+0x1a6>f01003b6519,20352
f01003bc:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf01003bc521,20453
f01003c3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eaxf01003c3522,20510
f01003c9:	c1 e8 16             	shr    $0x16,%eaxf01003c9523,20567
f01003cc:	8d 04 80             	lea    (%eax,%eax,4),%eaxf01003cc524,20617
f01003cf:	c1 e0 04             	shl    $0x4,%eaxf01003cf525,20675
f01003d2:	66 89 83 80 1f 00 00 	mov    %ax,0x1f80(%ebx)f01003d2526,20724
f01003d9:	66 81 bb 80 1f 00 00 	cmpw   $0x7cf,0x1f80(%ebx)f01003d9528,20808
f01003e0:	cf 07 f01003e0529,20867
f01003e2:	0f 87 d4 00 00 00    	ja     f01004bc <cons_putc+0x1cd>f01003e2530,20884
f01003e8:	8b 8b 88 1f 00 00    	mov    0x1f88(%ebx),%ecxf01003e8532,20972
f01003ee:	b8 0e 00 00 00       	mov    $0xe,%eaxf01003ee533,21029
f01003f3:	89 ca                	mov    %ecx,%edxf01003f3534,21078
f01003f5:	ee                   	out    %al,(%dx)f01003f5535,21127
f01003f6:	0f b7 9b 80 1f 00 00 	movzwl 0x1f80(%ebx),%ebxf01003f6537,21212
f01003fd:	8d 71 01             	lea    0x1(%ecx),%esif01003fd538,21269
f0100400:	89 d8                	mov    %ebx,%eaxf0100400539,21323
f0100402:	66 c1 e8 08          	shr    $0x8,%axf0100402540,21372
f0100406:	89 f2                	mov    %esi,%edxf0100406541,21420
f0100408:	ee                   	out    %al,(%dx)f0100408542,21469
f0100409:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100409543,21518
f010040e:	89 ca                	mov    %ecx,%edxf010040e544,21567
f0100410:	ee                   	out    %al,(%dx)f0100410545,21616
f0100411:	89 d8                	mov    %ebx,%eaxf0100411546,21665
f0100413:	89 f2                	mov    %esi,%edxf0100413547,21714
f0100415:	ee                   	out    %al,(%dx)f0100415548,21763
f0100416:	8d 65 f4             	lea    -0xc(%ebp),%espf0100416553,21859
f0100419:	5b                   	pop    %ebxf0100419554,21914
f010041a:	5e                   	pop    %esif010041a555,21958
f010041b:	5f                   	pop    %edif010041b556,22002
f010041c:	5d                   	pop    %ebpf010041c557,22046
f010041d:	c3                   	ret    f010041d558,22090
f010041e:	83 f8 08             	cmp    $0x8,%eaxf010041e560,22151
f0100421:	75 72                	jne    f0100495 <cons_putc+0x1a6>f0100421561,22200
f0100423:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf0100423563,22287
f010042a:	66 85 c0             	test   %ax,%axf010042a564,22344
f010042d:	74 b9                	je     f01003e8 <cons_putc+0xf9>f010042d565,22391
f010042f:	83 e8 01             	sub    $0x1,%eaxf010042f567,22470
f0100432:	66 89 83 80 1f 00 00 	mov    %ax,0x1f80(%ebx)f0100432568,22519
f0100439:	0f b7 c0             	movzwl %ax,%eaxf0100439570,22616
f010043c:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edxf010043c571,22664
f0100440:	b2 00                	mov    $0x0,%dlf0100440572,22720
f0100442:	83 ca 20             	or     $0x20,%edxf0100442573,22768
f0100445:	8b 8b 84 1f 00 00    	mov    0x1f84(%ebx),%ecxf0100445574,22818
f010044b:	66 89 14 41          	mov    %dx,(%ecx,%eax,2)f010044b575,22875
f010044f:	eb 88                	jmp    f01003d9 <cons_putc+0xea>f010044f576,22932
f0100451:	66 83 83 80 1f 00 00 	addw   $0x50,0x1f80(%ebx)f0100451578,23020
f0100458:	50 f0100458579,23078
f0100459:	e9 5e ff ff ff       	jmp    f01003bc <cons_putc+0xcd>f0100459580,23092
f010045e:	b8 20 00 00 00       	mov    $0x20,%eaxf010045e582,23175
f0100463:	e8 87 fe ff ff       	call   f01002ef <cons_putc>f0100463583,23225
f0100468:	b8 20 00 00 00       	mov    $0x20,%eaxf0100468585,23303
f010046d:	e8 7d fe ff ff       	call   f01002ef <cons_putc>f010046d586,23353
f0100472:	b8 20 00 00 00       	mov    $0x20,%eaxf0100472588,23431
f0100477:	e8 73 fe ff ff       	call   f01002ef <cons_putc>f0100477589,23481
f010047c:	b8 20 00 00 00       	mov    $0x20,%eaxf010047c591,23559
f0100481:	e8 69 fe ff ff       	call   f01002ef <cons_putc>f0100481592,23609
f0100486:	b8 20 00 00 00       	mov    $0x20,%eaxf0100486594,23687
f010048b:	e8 5f fe ff ff       	call   f01002ef <cons_putc>f010048b595,23737
f0100490:	e9 44 ff ff ff       	jmp    f01003d9 <cons_putc+0xea>f0100490596,23797
f0100495:	0f b7 83 80 1f 00 00 	movzwl 0x1f80(%ebx),%eaxf0100495598,23915
f010049c:	8d 50 01             	lea    0x1(%eax),%edxf010049c599,23972
f010049f:	66 89 93 80 1f 00 00 	mov    %dx,0x1f80(%ebx)f010049f600,24026
f01004a6:	0f b7 c0             	movzwl %ax,%eaxf01004a6601,24082
f01004a9:	8b 93 84 1f 00 00    	mov    0x1f84(%ebx),%edxf01004a9602,24130
f01004af:	0f b7 7d e4          	movzwl -0x1c(%ebp),%edif01004af603,24187
f01004b3:	66 89 3c 42          	mov    %di,(%edx,%eax,2)f01004b3604,24243
f01004b7:	e9 1d ff ff ff       	jmp    f01003d9 <cons_putc+0xea>f01004b7605,24300
f01004bc:	8b 83 84 1f 00 00    	mov    0x1f84(%ebx),%eaxf01004bc607,24447
f01004c2:	83 ec 04             	sub    $0x4,%espf01004c2608,24504
f01004c5:	68 00 0f 00 00       	push   $0xf00f01004c5609,24553
f01004ca:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edxf01004ca610,24599
f01004d0:	52                   	push   %edxf01004d0611,24654
f01004d1:	50                   	push   %eaxf01004d1612,24698
f01004d2:	e8 a2 1e 00 00       	call   f0102379 <memmove>f01004d2613,24742
f01004d7:	8b 93 84 1f 00 00    	mov    0x1f84(%ebx),%edxf01004d7615,24830
f01004dd:	8d 82 00 0f 00 00    	lea    0xf00(%edx),%eaxf01004dd616,24887
f01004e3:	81 c2 a0 0f 00 00    	add    $0xfa0,%edxf01004e3617,24943
f01004e9:	83 c4 10             	add    $0x10,%espf01004e9618,24994
f01004ec:	66 c7 00 20 07       	movw   $0x720,(%eax)f01004ec619,25044
f01004f1:	83 c0 02             	add    $0x2,%eaxf01004f1620,25097
f01004f4:	39 d0                	cmp    %edx,%eaxf01004f4622,25197
f01004f6:	75 f4                	jne    f01004ec <cons_putc+0x1fd>f01004f6623,25246
f01004f8:	66 83 ab 80 1f 00 00 	subw   $0x50,0x1f80(%ebx)f01004f8625,25335
f01004ff:	50 f01004ff626,25393
f0100500:	e9 e3 fe ff ff       	jmp    f01003e8 <cons_putc+0xf9>f0100500627,25407
f0100505 <serial_intr>:f0100505629,25473
f0100505:	e8 e7 01 00 00       	call   f01006f1 <__x86.get_pc_thunk.ax>f0100505631,25499
f010050a:	05 fe 3d 01 00       	add    $0x13dfe,%eaxf010050a632,25571
f010050f:	80 b8 8c 1f 00 00 00 	cmpb   $0x0,0x1f8c(%eax)f010050f634,25644
f0100516:	75 02                	jne    f010051a <serial_intr+0x15>f0100516635,25701
f0100518:	f3 c3                	repz ret f0100518636,25768
f010051a:	55                   	push   %ebpf010051a638,25812
f010051b:	89 e5                	mov    %esp,%ebpf010051b639,25856
f010051d:	83 ec 08             	sub    $0x8,%espf010051d640,25905
f0100520:	8d 80 4b be fe ff    	lea    -0x141b5(%eax),%eaxf0100520642,25985
f0100526:	e8 47 fc ff ff       	call   f0100172 <cons_intr>f0100526643,26044
f010052b:	c9                   	leave  f010052b645,26106
f010052c:	c3                   	ret    f010052c646,26146
f010052d <kbd_intr>:f010052d648,26187
f010052d:	55                   	push   %ebpf010052d650,26210
f010052e:	89 e5                	mov    %esp,%ebpf010052e651,26254
f0100530:	83 ec 08             	sub    $0x8,%espf0100530652,26303
f0100533:	e8 b9 01 00 00       	call   f01006f1 <__x86.get_pc_thunk.ax>f0100533653,26352
f0100538:	05 d0 3d 01 00       	add    $0x13dd0,%eaxf0100538654,26424
f010053d:	8d 80 b5 be fe ff    	lea    -0x1414b(%eax),%eaxf010053d656,26504
f0100543:	e8 2a fc ff ff       	call   f0100172 <cons_intr>f0100543657,26563
f0100548:	c9                   	leave  f0100548659,26625
f0100549:	c3                   	ret    f0100549660,26665
f010054a <cons_getc>:f010054a662,26706
f010054a:	55                   	push   %ebpf010054a664,26730
f010054b:	89 e5                	mov    %esp,%ebpf010054b665,26774
f010054d:	53                   	push   %ebxf010054d666,26823
f010054e:	83 ec 04             	sub    $0x4,%espf010054e667,26867
f0100551:	e8 f9 fb ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100551668,26916
f0100556:	81 c3 b2 3d 01 00    	add    $0x13db2,%ebxf0100556669,26988
f010055c:	e8 a4 ff ff ff       	call   f0100505 <serial_intr>f010055c671,27057
f0100561:	e8 c7 ff ff ff       	call   f010052d <kbd_intr>f0100561673,27132
f0100566:	8b 93 78 1f 00 00    	mov    0x1f78(%ebx),%edxf0100566675,27222
f010056c:	b8 00 00 00 00       	mov    $0x0,%eaxf010056c677,27290
f0100571:	3b 93 7c 1f 00 00    	cmp    0x1f7c(%ebx),%edxf0100571679,27370
f0100577:	74 19                	je     f0100592 <cons_getc+0x48>f0100577680,27427
		c = cons.buf[cons.rpos++];c681,27492
f0100579:	8d 4a 01             	lea    0x1(%edx),%ecxf0100579682,27521
f010057c:	89 8b 78 1f 00 00    	mov    %ecx,0x1f78(%ebx)f010057c683,27575
f0100582:	0f b6 84 13 78 1d 00 	movzbl 0x1d78(%ebx,%edx,1),%eaxf0100582684,27632
f0100589:	00 f0100589685,27696
f010058a:	81 f9 00 02 00 00    	cmp    $0x200,%ecxf010058a687,27742
f0100590:	74 06                	je     f0100598 <cons_getc+0x4e>f0100590688,27793
f0100592:	83 c4 04             	add    $0x4,%espf0100592690,27860
f0100595:	5b                   	pop    %ebxf0100595691,27909
f0100596:	5d                   	pop    %ebpf0100596692,27953
f0100597:	c3                   	ret    f0100597693,27997
f0100598:	c7 83 78 1f 00 00 00 	movl   $0x0,0x1f78(%ebx)f0100598695,28055
f010059f:	00 00 00 f010059f696,28112
f01005a2:	eb ee                	jmp    f0100592 <cons_getc+0x48>f01005a2697,28132
f01005a4 <cons_init>:f01005a4699,28198
voidvoid702,28255
f01005a4:	55                   	push   %ebpf01005a4705,28278
f01005a5:	89 e5                	mov    %esp,%ebpf01005a5706,28322
f01005a7:	57                   	push   %edif01005a7707,28371
f01005a8:	56                   	push   %esif01005a8708,28415
f01005a9:	53                   	push   %ebxf01005a9709,28459
f01005aa:	83 ec 1c             	sub    $0x1c,%espf01005aa710,28503
f01005ad:	e8 9d fb ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01005ad711,28553
f01005b2:	81 c3 56 3d 01 00    	add    $0x13d56,%ebxf01005b2712,28625
	was = *cp;was713,28678
f01005b8:	0f b7 15 00 80 0b f0 	movzwl 0xf00b8000,%edxf01005b8714,28690
f01005bf:	66 c7 05 00 80 0b f0 	movw   $0xa55a,0xf00b8000f01005bf716,28771
f01005c6:	5a a5 f01005c6717,28829
f01005c8:	0f b7 05 00 80 0b f0 	movzwl 0xf00b8000,%eaxf01005c8719,28868
f01005cf:	66 3d 5a a5          	cmp    $0xa55a,%axf01005cf720,28923
f01005d3:	0f 84 bc 00 00 00    	je     f0100695 <cons_init+0xf1>f01005d3721,28974
		addr_6845 = MONO_BASE;addr_6845722,29039
f01005d9:	c7 83 88 1f 00 00 b4 	movl   $0x3b4,0x1f88(%ebx)f01005d9723,29064
f01005e0:	03 00 00 f01005e0724,29123
		cp = (uint16_t*) (KERNBASE + MONO_BUF);cp725,29143
f01005e3:	c7 45 e4 00 00 0b f0 	movl   $0xf00b0000,-0x1c(%ebp)f01005e3726,29185
f01005ea:	8b bb 88 1f 00 00    	mov    0x1f88(%ebx),%edif01005ea728,29270
f01005f0:	b8 0e 00 00 00       	mov    $0xe,%eaxf01005f0729,29327
f01005f5:	89 fa                	mov    %edi,%edxf01005f5730,29376
f01005f7:	ee                   	out    %al,(%dx)f01005f7731,29425
	pos = inb(addr_6845 + 1) << 8;pos732,29474
f01005f8:	8d 4f 01             	lea    0x1(%edi),%ecxf01005f8733,29506
f01005fb:	89 ca                	mov    %ecx,%edxf01005fb735,29616
f01005fd:	ec                   	in     (%dx),%alf01005fd736,29665
f01005fe:	0f b6 f0             	movzbl %al,%esif01005fe737,29714
f0100601:	c1 e6 08             	shl    $0x8,%esif0100601738,29762
f0100604:	b8 0f 00 00 00       	mov    $0xf,%eaxf0100604740,29868
f0100609:	89 fa                	mov    %edi,%edxf0100609741,29917
f010060b:	ee                   	out    %al,(%dx)f010060b742,29966
f010060c:	89 ca                	mov    %ecx,%edxf010060c744,30071
f010060e:	ec                   	in     (%dx),%alf010060e745,30120
	crt_buf = (uint16_t*) cp;crt_buf746,30169
f010060f:	8b 7d e4             	mov    -0x1c(%ebp),%edif010060f747,30196
f0100612:	89 bb 84 1f 00 00    	mov    %edi,0x1f84(%ebx)f0100612748,30252
f0100618:	0f b6 c0             	movzbl %al,%eaxf0100618750,30337
f010061b:	09 c6                	or     %eax,%esif010061b751,30385
	crt_pos = pos;crt_pos752,30434
f010061d:	66 89 b3 80 1f 00 00 	mov    %si,0x1f80(%ebx)f010061d753,30450
f0100624:	b9 00 00 00 00       	mov    $0x0,%ecxf0100624755,30563
f0100629:	89 c8                	mov    %ecx,%eaxf0100629756,30612
f010062b:	ba fa 03 00 00       	mov    $0x3fa,%edxf010062b757,30661
f0100630:	ee                   	out    %al,(%dx)f0100630758,30712
f0100631:	bf fb 03 00 00       	mov    $0x3fb,%edif0100631759,30761
f0100636:	b8 80 ff ff ff       	mov    $0xffffff80,%eaxf0100636760,30812
f010063b:	89 fa                	mov    %edi,%edxf010063b761,30868
f010063d:	ee                   	out    %al,(%dx)f010063d762,30917
f010063e:	b8 0c 00 00 00       	mov    $0xc,%eaxf010063e763,30966
f0100643:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100643764,31015
f0100648:	ee                   	out    %al,(%dx)f0100648765,31066
f0100649:	be f9 03 00 00       	mov    $0x3f9,%esif0100649766,31115
f010064e:	89 c8                	mov    %ecx,%eaxf010064e767,31166
f0100650:	89 f2                	mov    %esi,%edxf0100650768,31215
f0100652:	ee                   	out    %al,(%dx)f0100652769,31264
f0100653:	b8 03 00 00 00       	mov    $0x3,%eaxf0100653770,31313
f0100658:	89 fa                	mov    %edi,%edxf0100658771,31362
f010065a:	ee                   	out    %al,(%dx)f010065a772,31411
f010065b:	ba fc 03 00 00       	mov    $0x3fc,%edxf010065b773,31460
f0100660:	89 c8                	mov    %ecx,%eaxf0100660774,31511
f0100662:	ee                   	out    %al,(%dx)f0100662775,31560
f0100663:	b8 01 00 00 00       	mov    $0x1,%eaxf0100663776,31609
f0100668:	89 f2                	mov    %esi,%edxf0100668777,31658
f010066a:	ee                   	out    %al,(%dx)f010066a778,31707
f010066b:	ba fd 03 00 00       	mov    $0x3fd,%edxf010066b780,31812
f0100670:	ec                   	in     (%dx),%alf0100670781,31863
f0100671:	89 c1                	mov    %eax,%ecxf0100671782,31912
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);serial_exists783,31961
f0100673:	3c ff                	cmp    $0xff,%alf0100673784,32007
f0100675:	0f 95 83 8c 1f 00 00 	setne  0x1f8c(%ebx)f0100675785,32056
f010067c:	ba fa 03 00 00       	mov    $0x3fa,%edxf010067c786,32108
f0100681:	ec                   	in     (%dx),%alf0100681787,32159
f0100682:	ba f8 03 00 00       	mov    $0x3f8,%edxf0100682788,32208
f0100687:	ec                   	in     (%dx),%alf0100687789,32259
f0100688:	80 f9 ff             	cmp    $0xff,%clf0100688795,32372
f010068b:	74 25                	je     f01006b2 <cons_init+0x10e>f010068b796,32421
f010068d:	8d 65 f4             	lea    -0xc(%ebp),%espf010068d799,32533
f0100690:	5b                   	pop    %ebxf0100690800,32588
f0100691:	5e                   	pop    %esif0100691801,32632
f0100692:	5f                   	pop    %edif0100692802,32676
f0100693:	5d                   	pop    %ebpf0100693803,32720
f0100694:	c3                   	ret    f0100694804,32764
f0100695:	66 89 15 00 80 0b f0 	mov    %dx,0xf00b8000f0100695806,32817
		addr_6845 = CGA_BASE;addr_6845807,32871
f010069c:	c7 83 88 1f 00 00 d4 	movl   $0x3d4,0x1f88(%ebx)f010069c808,32895
f01006a3:	03 00 00 f01006a3809,32954
	cp = (uint16_t*) (KERNBASE + CGA_BUF);cp810,32974
f01006a6:	c7 45 e4 00 80 0b f0 	movl   $0xf00b8000,-0x1c(%ebp)f01006a6811,33014
f01006ad:	e9 38 ff ff ff       	jmp    f01005ea <cons_init+0x46>f01006ad812,33077
f01006b2:	83 ec 0c             	sub    $0xc,%espf01006b2814,33186
f01006b5:	8d 83 d1 e4 fe ff    	lea    -0x11b2f(%ebx),%eaxf01006b5815,33235
f01006bb:	50                   	push   %eaxf01006bb816,33294
f01006bc:	e8 0f 11 00 00       	call   f01017d0 <cprintf>f01006bc817,33338
f01006c1:	83 c4 10             	add    $0x10,%espf01006c1818,33396
f01006c4:	eb c7                	jmp    f010068d <cons_init+0xe9>f01006c4820,33448
f01006c6 <cputchar>:f01006c6822,33514
voidvoid826,33597
f01006c6:	55                   	push   %ebpf01006c6829,33620
f01006c7:	89 e5                	mov    %esp,%ebpf01006c7830,33664
f01006c9:	83 ec 08             	sub    $0x8,%espf01006c9831,33713
f01006cc:	8b 45 08             	mov    0x8(%ebp),%eaxf01006cc833,33777
f01006cf:	e8 1b fc ff ff       	call   f01002ef <cons_putc>f01006cf834,33831
f01006d4:	c9                   	leave  f01006d4836,33893
f01006d5:	c3                   	ret    f01006d5837,33933
f01006d6 <getchar>:f01006d6839,33974
intint841,33995
f01006d6:	55                   	push   %ebpf01006d6844,34015
f01006d7:	89 e5                	mov    %esp,%ebpf01006d7845,34059
f01006d9:	83 ec 08             	sub    $0x8,%espf01006d9846,34108
f01006dc:	e8 69 fe ff ff       	call   f010054a <cons_getc>f01006dc850,34198
f01006e1:	85 c0                	test   %eax,%eaxf01006e1851,34258
f01006e3:	74 f7                	je     f01006dc <getchar+0x6>f01006e3852,34307
f01006e5:	c9                   	leave  f01006e5856,34402
f01006e6:	c3                   	ret    f01006e6857,34442
f01006e7 <iscons>:f01006e7859,34483
intint861,34503
f01006e7:	55                   	push   %ebpf01006e7864,34527
f01006e8:	89 e5                	mov    %esp,%ebpf01006e8865,34571
f01006ea:	b8 01 00 00 00       	mov    $0x1,%eaxf01006ea869,34654
f01006ef:	5d                   	pop    %ebpf01006ef870,34703
f01006f0:	c3                   	ret    f01006f0871,34747
f01006f1 <__x86.get_pc_thunk.ax>:f01006f1873,34788
f01006f1:	8b 04 24             	mov    (%esp),%eaxf01006f1874,34822
f01006f4:	c3                   	ret    f01006f4875,34873
f01006f5 <mon_help>:f01006f5877,34914
intint881,35000
f01006f5:	55                   	push   %ebpf01006f5884,35060
f01006f6:	89 e5                	mov    %esp,%ebpf01006f6885,35104
f01006f8:	56                   	push   %esif01006f8886,35153
f01006f9:	53                   	push   %ebxf01006f9887,35197
f01006fa:	e8 50 fa ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01006fa888,35241
f01006ff:	81 c3 09 3c 01 00    	add    $0x13c09,%ebxf01006ff889,35313
f0100705:	83 ec 04             	sub    $0x4,%espf0100705894,35479
f0100708:	8d 83 f8 e6 fe ff    	lea    -0x11908(%ebx),%eaxf0100708895,35528
f010070e:	50                   	push   %eaxf010070e896,35587
f010070f:	8d 83 16 e7 fe ff    	lea    -0x118ea(%ebx),%eaxf010070f897,35631
f0100715:	50                   	push   %eaxf0100715898,35690
f0100716:	8d b3 1b e7 fe ff    	lea    -0x118e5(%ebx),%esif0100716899,35734
f010071c:	56                   	push   %esif010071c900,35793
f010071d:	e8 ae 10 00 00       	call   f01017d0 <cprintf>f010071d901,35837
f0100722:	83 c4 0c             	add    $0xc,%espf0100722902,35895
f0100725:	8d 83 84 e7 fe ff    	lea    -0x1187c(%ebx),%eaxf0100725903,35944
f010072b:	50                   	push   %eaxf010072b904,36003
f010072c:	8d 83 24 e7 fe ff    	lea    -0x118dc(%ebx),%eaxf010072c905,36047
f0100732:	50                   	push   %eaxf0100732906,36106
f0100733:	56                   	push   %esif0100733907,36150
f0100734:	e8 97 10 00 00       	call   f01017d0 <cprintf>f0100734908,36194
f0100739:	b8 00 00 00 00       	mov    $0x0,%eaxf0100739911,36265
f010073e:	8d 65 f8             	lea    -0x8(%ebp),%espf010073e912,36314
f0100741:	5b                   	pop    %ebxf0100741913,36369
f0100742:	5e                   	pop    %esif0100742914,36413
f0100743:	5d                   	pop    %ebpf0100743915,36457
f0100744:	c3                   	ret    f0100744916,36501
f0100745 <mon_kerninfo>:f0100745918,36542
intint920,36568
f0100745:	55                   	push   %ebpf0100745923,36632
f0100746:	89 e5                	mov    %esp,%ebpf0100746924,36676
f0100748:	57                   	push   %edif0100748925,36725
f0100749:	56                   	push   %esif0100749926,36769
f010074a:	53                   	push   %ebxf010074a927,36813
f010074b:	83 ec 18             	sub    $0x18,%espf010074b928,36857
f010074e:	e8 fc f9 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f010074e929,36907
f0100753:	81 c3 b5 3b 01 00    	add    $0x13bb5,%ebxf0100753930,36979
f0100759:	8d 83 2d e7 fe ff    	lea    -0x118d3(%ebx),%eaxf0100759934,37129
f010075f:	50                   	push   %eaxf010075f935,37188
f0100760:	e8 6b 10 00 00       	call   f01017d0 <cprintf>f0100760936,37232
f0100765:	83 c4 08             	add    $0x8,%espf0100765938,37351
f0100768:	ff b3 f8 ff ff ff    	pushl  -0x8(%ebx)f0100768939,37400
f010076e:	8d 83 ac e7 fe ff    	lea    -0x11854(%ebx),%eaxf010076e940,37450
f0100774:	50                   	push   %eaxf0100774941,37509
f0100775:	e8 56 10 00 00       	call   f01017d0 <cprintf>f0100775942,37553
f010077a:	83 c4 0c             	add    $0xc,%espf010077a944,37685
f010077d:	c7 c7 0c 00 10 f0    	mov    $0xf010000c,%edif010077d945,37734
f0100783:	8d 87 00 00 00 10    	lea    0x10000000(%edi),%eaxf0100783946,37790
f0100789:	50                   	push   %eaxf0100789947,37851
f010078a:	57                   	push   %edif010078a948,37895
f010078b:	8d 83 d4 e7 fe ff    	lea    -0x1182c(%ebx),%eaxf010078b949,37939
f0100791:	50                   	push   %eaxf0100791950,37998
f0100792:	e8 39 10 00 00       	call   f01017d0 <cprintf>f0100792951,38042
f0100797:	83 c4 0c             	add    $0xc,%espf0100797953,38174
f010079a:	c7 c0 69 27 10 f0    	mov    $0xf0102769,%eaxf010079a954,38223
f01007a0:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007a0955,38279
f01007a6:	52                   	push   %edxf01007a6956,38340
f01007a7:	50                   	push   %eaxf01007a7957,38384
f01007a8:	8d 83 f8 e7 fe ff    	lea    -0x11808(%ebx),%eaxf01007a8958,38428
f01007ae:	50                   	push   %eaxf01007ae959,38487
f01007af:	e8 1c 10 00 00       	call   f01017d0 <cprintf>f01007af960,38531
f01007b4:	83 c4 0c             	add    $0xc,%espf01007b4962,38663
f01007b7:	c7 c0 60 60 11 f0    	mov    $0xf0116060,%eaxf01007b7963,38712
f01007bd:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf01007bd964,38768
f01007c3:	52                   	push   %edxf01007c3965,38829
f01007c4:	50                   	push   %eaxf01007c4966,38873
f01007c5:	8d 83 1c e8 fe ff    	lea    -0x117e4(%ebx),%eaxf01007c5967,38917
f01007cb:	50                   	push   %eaxf01007cb968,38976
f01007cc:	e8 ff 0f 00 00       	call   f01017d0 <cprintf>f01007cc969,39020
f01007d1:	83 c4 0c             	add    $0xc,%espf01007d1971,39148
f01007d4:	c7 c6 c0 66 11 f0    	mov    $0xf01166c0,%esif01007d4972,39197
f01007da:	8d 86 00 00 00 10    	lea    0x10000000(%esi),%eaxf01007da973,39253
f01007e0:	50                   	push   %eaxf01007e0974,39314
f01007e1:	56                   	push   %esif01007e1975,39358
f01007e2:	8d 83 40 e8 fe ff    	lea    -0x117c0(%ebx),%eaxf01007e2976,39402
f01007e8:	50                   	push   %eaxf01007e8977,39461
f01007e9:	e8 e2 0f 00 00       	call   f01017d0 <cprintf>f01007e9978,39505
f01007ee:	83 c4 08             	add    $0x8,%espf01007ee980,39618
f01007f1:	81 c6 ff 03 00 00    	add    $0x3ff,%esif01007f1982,39705
f01007f7:	29 fe                	sub    %edi,%esif01007f7983,39756
f01007f9:	c1 fe 0a             	sar    $0xa,%esif01007f9985,39860
f01007fc:	56                   	push   %esif01007fc986,39909
f01007fd:	8d 83 64 e8 fe ff    	lea    -0x1179c(%ebx),%eaxf01007fd987,39953
f0100803:	50                   	push   %eaxf0100803988,40012
f0100804:	e8 c7 0f 00 00       	call   f01017d0 <cprintf>f0100804989,40056
f0100809:	b8 00 00 00 00       	mov    $0x0,%eaxf0100809992,40127
f010080e:	8d 65 f4             	lea    -0xc(%ebp),%espf010080e993,40176
f0100811:	5b                   	pop    %ebxf0100811994,40231
f0100812:	5e                   	pop    %esif0100812995,40275
f0100813:	5f                   	pop    %edif0100813996,40319
f0100814:	5d                   	pop    %ebpf0100814997,40363
f0100815:	c3                   	ret    f0100815998,40407
f0100816 <mon_backtrace>:f01008161000,40448
intint1002,40475
f0100816:	55                   	push   %ebpf01008161005,40540
f0100817:	89 e5                	mov    %esp,%ebpf01008171006,40584
f0100819:	b8 00 00 00 00       	mov    $0x0,%eaxf01008191010,40666
f010081e:	5d                   	pop    %ebpf010081e1011,40715
f010081f:	c3                   	ret    f010081f1012,40759
f0100820 <monitor>:f01008201014,40800
voidvoid1018,40834
f0100820:	55                   	push   %ebpf01008201021,40871
f0100821:	89 e5                	mov    %esp,%ebpf01008211022,40915
f0100823:	57                   	push   %edif01008231023,40964
f0100824:	56                   	push   %esif01008241024,41008
f0100825:	53                   	push   %ebxf01008251025,41052
f0100826:	83 ec 68             	sub    $0x68,%espf01008261026,41096
f0100829:	e8 21 f9 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01008291027,41146
f010082e:	81 c3 da 3a 01 00    	add    $0x13ada,%ebxf010082e1028,41218
f0100834:	8d 83 90 e8 fe ff    	lea    -0x11770(%ebx),%eaxf01008341032,41334
f010083a:	50                   	push   %eaxf010083a1033,41393
f010083b:	e8 90 0f 00 00       	call   f01017d0 <cprintf>f010083b1034,41437
f0100840:	8d 83 b4 e8 fe ff    	lea    -0x1174c(%ebx),%eaxf01008401036,41546
f0100846:	89 04 24             	mov    %eax,(%esp)f01008461037,41605
f0100849:	e8 82 0f 00 00       	call   f01017d0 <cprintf>f01008491038,41656
f010084e:	83 c4 10             	add    $0x10,%espf010084e1039,41714
f0100851:	8d bb 4a e7 fe ff    	lea    -0x118b6(%ebx),%edif01008511041,41807
f0100857:	eb 4a                	jmp    f01008a3 <monitor+0x83>f01008571042,41866
f0100859:	83 ec 08             	sub    $0x8,%espf01008591043,41929
f010085c:	0f be c0             	movsbl %al,%eaxf010085c1044,41978
f010085f:	50                   	push   %eaxf010085f1045,42026
f0100860:	57                   	push   %edif01008601046,42070
f0100861:	e8 89 1a 00 00       	call   f01022ef <strchr>f01008611047,42114
f0100866:	83 c4 10             	add    $0x10,%espf01008661048,42171
f0100869:	85 c0                	test   %eax,%eaxf01008691049,42221
f010086b:	74 08                	je     f0100875 <monitor+0x55>f010086b1050,42270
f010086d:	c6 06 00             	movb   $0x0,(%esi)f010086d1052,42348
f0100870:	8d 76 01             	lea    0x1(%esi),%esif01008701053,42399
f0100873:	eb 79                	jmp    f01008ee <monitor+0xce>f01008731054,42453
f0100875:	80 3e 00             	cmpb   $0x0,(%esi)f01008751056,42533
f0100878:	74 7f                	je     f01008f9 <monitor+0xd9>f01008781057,42584
f010087a:	83 7d a4 0f          	cmpl   $0xf,-0x5c(%ebp)f010087a1059,42674
f010087e:	74 0f                	je     f010088f <monitor+0x6f>f010087e1060,42730
f0100880:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01008801062,42815
f0100883:	8d 48 01             	lea    0x1(%eax),%ecxf01008831063,42871
f0100886:	89 4d a4             	mov    %ecx,-0x5c(%ebp)f01008861064,42925
f0100889:	89 74 85 a8          	mov    %esi,-0x58(%ebp,%eax,4)f01008891065,42981
f010088d:	eb 44                	jmp    f01008d3 <monitor+0xb3>f010088d1066,43044
f010088f:	83 ec 08             	sub    $0x8,%espf010088f1068,43161
f0100892:	6a 10                	push   $0x10f01008921069,43210
f0100894:	8d 83 4f e7 fe ff    	lea    -0x118b1(%ebx),%eaxf01008941070,43255
f010089a:	50                   	push   %eaxf010089a1071,43314
f010089b:	e8 30 0f 00 00       	call   f01017d0 <cprintf>f010089b1072,43358
f01008a0:	83 c4 10             	add    $0x10,%espf01008a01073,43416
		buf = readline("K> ");buf1077,43481
f01008a3:	8d 83 46 e7 fe ff    	lea    -0x118ba(%ebx),%eaxf01008a31078,43506
f01008a9:	89 45 a4             	mov    %eax,-0x5c(%ebp)f01008a91079,43565
f01008ac:	83 ec 0c             	sub    $0xc,%espf01008ac1080,43621
f01008af:	ff 75 a4             	pushl  -0x5c(%ebp)f01008af1081,43670
f01008b2:	e8 00 18 00 00       	call   f01020b7 <readline>f01008b21082,43721
f01008b7:	89 c6                	mov    %eax,%esif01008b71083,43780
f01008b9:	83 c4 10             	add    $0x10,%espf01008b91085,43848
f01008bc:	85 c0                	test   %eax,%eaxf01008bc1086,43898
f01008be:	74 ec                	je     f01008ac <monitor+0x8c>f01008be1087,43947
f01008c0:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)f01008c01089,44027
	argc = 0;argc1090,44083
f01008c7:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)f01008c71091,44094
f01008ce:	eb 1e                	jmp    f01008ee <monitor+0xce>f01008ce1092,44150
f01008d0:	83 c6 01             	add    $0x1,%esif01008d01094,44223
f01008d3:	0f b6 06             	movzbl (%esi),%eaxf01008d31096,44316
f01008d6:	84 c0                	test   %al,%alf01008d61097,44367
f01008d8:	74 14                	je     f01008ee <monitor+0xce>f01008d81098,44414
f01008da:	83 ec 08             	sub    $0x8,%espf01008da1099,44477
f01008dd:	0f be c0             	movsbl %al,%eaxf01008dd1100,44526
f01008e0:	50                   	push   %eaxf01008e01101,44574
f01008e1:	57                   	push   %edif01008e11102,44618
f01008e2:	e8 08 1a 00 00       	call   f01022ef <strchr>f01008e21103,44662
f01008e7:	83 c4 10             	add    $0x10,%espf01008e71104,44719
f01008ea:	85 c0                	test   %eax,%eaxf01008ea1105,44769
f01008ec:	74 e2                	je     f01008d0 <monitor+0xb0>f01008ec1106,44818
f01008ee:	0f b6 06             	movzbl (%esi),%eaxf01008ee1108,44924
f01008f1:	84 c0                	test   %al,%alf01008f11109,44975
f01008f3:	0f 85 60 ff ff ff    	jne    f0100859 <monitor+0x39>f01008f31110,45022
f01008f9:	8b 45 a4             	mov    -0x5c(%ebp),%eaxf01008f91112,45102
f01008fc:	c7 44 85 a8 00 00 00 	movl   $0x0,-0x58(%ebp,%eax,4)f01008fc1113,45158
f0100903:	00 f01009031114,45221
f0100904:	85 c0                	test   %eax,%eaxf01009041116,45251
f0100906:	74 9b                	je     f01008a3 <monitor+0x83>f01009061117,45300
f0100908:	83 ec 08             	sub    $0x8,%espf01009081119,45409
f010090b:	8d 83 16 e7 fe ff    	lea    -0x118ea(%ebx),%eaxf010090b1120,45458
f0100911:	50                   	push   %eaxf01009111121,45517
f0100912:	ff 75 a8             	pushl  -0x58(%ebp)f01009121122,45561
f0100915:	e8 77 19 00 00       	call   f0102291 <strcmp>f01009151123,45612
f010091a:	83 c4 10             	add    $0x10,%espf010091a1124,45669
f010091d:	85 c0                	test   %eax,%eaxf010091d1125,45719
f010091f:	74 38                	je     f0100959 <monitor+0x139>f010091f1126,45768
f0100921:	83 ec 08             	sub    $0x8,%espf01009211127,45832
f0100924:	8d 83 24 e7 fe ff    	lea    -0x118dc(%ebx),%eaxf01009241128,45881
f010092a:	50                   	push   %eaxf010092a1129,45940
f010092b:	ff 75 a8             	pushl  -0x58(%ebp)f010092b1130,45984
f010092e:	e8 5e 19 00 00       	call   f0102291 <strcmp>f010092e1131,46035
f0100933:	83 c4 10             	add    $0x10,%espf01009331132,46092
f0100936:	85 c0                	test   %eax,%eaxf01009361133,46142
f0100938:	74 1a                	je     f0100954 <monitor+0x134>f01009381134,46191
f010093a:	83 ec 08             	sub    $0x8,%espf010093a1136,46300
f010093d:	ff 75 a8             	pushl  -0x58(%ebp)f010093d1137,46349
f0100940:	8d 83 6c e7 fe ff    	lea    -0x11894(%ebx),%eaxf01009401138,46400
f0100946:	50                   	push   %eaxf01009461139,46459
f0100947:	e8 84 0e 00 00       	call   f01017d0 <cprintf>f01009471140,46503
f010094c:	83 c4 10             	add    $0x10,%espf010094c1141,46561
f010094f:	e9 4f ff ff ff       	jmp    f01008a3 <monitor+0x83>f010094f1142,46611
f0100954:	b8 01 00 00 00       	mov    $0x1,%eaxf01009541144,46720
f0100959:	83 ec 04             	sub    $0x4,%espf01009591146,46813
f010095c:	8d 04 40             	lea    (%eax,%eax,2),%eaxf010095c1147,46862
f010095f:	ff 75 08             	pushl  0x8(%ebp)f010095f1148,46920
f0100962:	8d 55 a8             	lea    -0x58(%ebp),%edxf01009621149,46969
f0100965:	52                   	push   %edxf01009651150,47025
f0100966:	ff 75 a4             	pushl  -0x5c(%ebp)f01009661151,47069
f0100969:	ff 94 83 10 1d 00 00 	call   *0x1d10(%ebx,%eax,4)f01009691152,47120
f0100970:	83 c4 10             	add    $0x10,%espf01009701154,47208
f0100973:	85 c0                	test   %eax,%eaxf01009731155,47258
f0100975:	0f 89 28 ff ff ff    	jns    f01008a3 <monitor+0x83>f01009751156,47307
f010097b:	8d 65 f4             	lea    -0xc(%ebp),%espf010097b1160,47386
f010097e:	5b                   	pop    %ebxf010097e1161,47441
f010097f:	5e                   	pop    %esif010097f1162,47485
f0100980:	5f                   	pop    %edif01009801163,47529
f0100981:	5d                   	pop    %ebpf01009811164,47573
f0100982:	c3                   	ret    f01009821165,47617
f0100983 <nvram_read>:f01009831167,47658
static intstatic1171,47791
f0100983:	55                   	push   %ebpf01009831174,47822
f0100984:	89 e5                	mov    %esp,%ebpf01009841175,47866
f0100986:	57                   	push   %edif01009861176,47915
f0100987:	56                   	push   %esif01009871177,47959
f0100988:	53                   	push   %ebxf01009881178,48003
f0100989:	83 ec 18             	sub    $0x18,%espf01009891179,48047
f010098c:	e8 be f7 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f010098c1180,48097
f0100991:	81 c3 77 39 01 00    	add    $0x13977,%ebxf01009911181,48169
f0100997:	89 c7                	mov    %eax,%edif01009971182,48222
f0100999:	50                   	push   %eaxf01009991184,48327
f010099a:	e8 aa 0d 00 00       	call   f0101749 <mc146818_read>f010099a1185,48371
f010099f:	89 c6                	mov    %eax,%esif010099f1186,48435
f01009a1:	83 c7 01             	add    $0x1,%edif01009a11187,48484
f01009a4:	89 3c 24             	mov    %edi,(%esp)f01009a41188,48533
f01009a7:	e8 9d 0d 00 00       	call   f0101749 <mc146818_read>f01009a71189,48584
f01009ac:	c1 e0 08             	shl    $0x8,%eaxf01009ac1190,48648
f01009af:	09 f0                	or     %esi,%eaxf01009af1191,48697
f01009b1:	8d 65 f4             	lea    -0xc(%ebp),%espf01009b11193,48748
f01009b4:	5b                   	pop    %ebxf01009b41194,48803
f01009b5:	5e                   	pop    %esif01009b51195,48847
f01009b6:	5f                   	pop    %edif01009b61196,48891
f01009b7:	5d                   	pop    %ebpf01009b71197,48935
f01009b8:	c3                   	ret    f01009b81198,48979
f01009b9 <boot_alloc>:f01009b91200,49020
static void *static1204,49203
f01009b9:	55                   	push   %ebpf01009b91207,49242
f01009ba:	89 e5                	mov    %esp,%ebpf01009ba1208,49286
f01009bc:	53                   	push   %ebxf01009bc1209,49335
f01009bd:	83 ec 04             	sub    $0x4,%espf01009bd1210,49379
f01009c0:	e8 7c 0d 00 00       	call   f0101741 <__x86.get_pc_thunk.cx>f01009c01211,49428
f01009c5:	81 c1 43 39 01 00    	add    $0x13943,%ecxf01009c51212,49500
f01009cb:	89 c2                	mov    %eax,%edxf01009cb1213,49553
f01009cd:	83 b9 90 1f 00 00 00 	cmpl   $0x0,0x1f90(%ecx)f01009cd1220,49902
f01009d4:	74 34                	je     f0100a0a <boot_alloc+0x51>f01009d41221,49959
f01009d6:	8b 81 90 1f 00 00    	mov    0x1f90(%ecx),%eaxf01009d61228,50291
f01009dc:	8b 99 98 1f 00 00    	mov    0x1f98(%ecx),%ebxf01009dc1229,50348
f01009e2:	c1 e3 0c             	shl    $0xc,%ebxf01009e21230,50405
f01009e5:	81 c3 c0 66 11 f0    	add    $0xf01166c0,%ebxf01009e51231,50454
f01009eb:	29 c3                	sub    %eax,%ebxf01009eb1232,50510
f01009ed:	39 d3                	cmp    %edx,%ebxf01009ed1235,50587
f01009ef:	72 31                	jb     f0100a22 <boot_alloc+0x69>f01009ef1236,50636
        result = nextfree;result1240,50838
f01009f1:	81 c2 ff 0f 00 00    	add    $0xfff,%edxf01009f11242,50905
f01009f7:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edxf01009f71243,50956
f01009fd:	01 c2                	add    %eax,%edxf01009fd1244,51012
f01009ff:	89 91 90 1f 00 00    	mov    %edx,0x1f90(%ecx)f01009ff1245,51061
f0100a05:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100a051248,51143
f0100a08:	c9                   	leave  f0100a081249,51198
f0100a09:	c3                   	ret    f0100a091250,51238
		nextfree = ROUNDUP((char *) end, PGSIZE);nextfree1251,51278
f0100a0a:	c7 c0 c0 66 11 f0    	mov    $0xf01166c0,%eaxf0100a0a1252,51322
f0100a10:	05 ff 0f 00 00       	add    $0xfff,%eaxf0100a101253,51378
f0100a15:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100a151254,51429
f0100a1a:	89 81 90 1f 00 00    	mov    %eax,0x1f90(%ecx)f0100a1a1255,51485
f0100a20:	eb b4                	jmp    f01009d6 <boot_alloc+0x1d>f0100a201256,51542
f0100a22:	83 ec 0c             	sub    $0xc,%espf0100a221258,51706
f0100a25:	53                   	push   %ebxf0100a251259,51755
f0100a26:	52                   	push   %edxf0100a261260,51799
f0100a27:	8d 81 dc e8 fe ff    	lea    -0x11724(%ecx),%eaxf0100a271261,51843
f0100a2d:	50                   	push   %eaxf0100a2d1262,51902
f0100a2e:	6a 6d                	push   $0x6df0100a2e1263,51946
f0100a30:	8d 81 58 eb fe ff    	lea    -0x114a8(%ecx),%eaxf0100a301264,51991
f0100a36:	50                   	push   %eaxf0100a361265,52050
f0100a37:	89 cb                	mov    %ecx,%ebxf0100a371266,52094
f0100a39:	e8 5b f6 ff ff       	call   f0100099 <_panic>f0100a391267,52143
f0100a3e <page2kva>:f0100a3e1269,52201
static inline void*static1273,52252
f0100a3e:	55                   	push   %ebpf0100a3e1276,52304
f0100a3f:	89 e5                	mov    %esp,%ebpf0100a3f1277,52348
f0100a41:	53                   	push   %ebxf0100a411278,52397
f0100a42:	83 ec 04             	sub    $0x4,%espf0100a421279,52441
f0100a45:	e8 f3 0c 00 00       	call   f010173d <__x86.get_pc_thunk.dx>f0100a451280,52490
f0100a4a:	81 c2 be 38 01 00    	add    $0x138be,%edxf0100a4a1281,52562
f0100a50:	c7 c1 d0 66 11 f0    	mov    $0xf01166d0,%ecxf0100a501283,52648
f0100a56:	2b 01                	sub    (%ecx),%eaxf0100a561284,52704
f0100a58:	c1 f8 03             	sar    $0x3,%eaxf0100a581285,52755
f0100a5b:	c1 e0 0c             	shl    $0xc,%eaxf0100a5b1286,52804
f0100a5e:	89 c1                	mov    %eax,%ecxf0100a5e1288,52879
f0100a60:	c1 e9 0c             	shr    $0xc,%ecxf0100a601289,52928
f0100a63:	c7 c3 c8 66 11 f0    	mov    $0xf01166c8,%ebxf0100a631290,52977
f0100a69:	39 0b                	cmp    %ecx,(%ebx)f0100a691291,53033
f0100a6b:	76 0a                	jbe    f0100a77 <page2kva+0x39>f0100a6b1292,53084
f0100a6d:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100a6d1294,53181
f0100a72:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100a721297,53267
f0100a75:	c9                   	leave  f0100a751298,53322
f0100a76:	c3                   	ret    f0100a761299,53362
f0100a77:	50                   	push   %eaxf0100a771301,53466
f0100a78:	8d 82 28 e9 fe ff    	lea    -0x116d8(%edx),%eaxf0100a781302,53510
f0100a7e:	50                   	push   %eaxf0100a7e1303,53569
f0100a7f:	6a 52                	push   $0x52f0100a7f1304,53613
f0100a81:	8d 82 64 eb fe ff    	lea    -0x1149c(%edx),%eaxf0100a811305,53658
f0100a87:	50                   	push   %eaxf0100a871306,53717
f0100a88:	89 d3                	mov    %edx,%ebxf0100a881307,53761
f0100a8a:	e8 0a f6 ff ff       	call   f0100099 <_panic>f0100a8a1308,53810
f0100a8f <check_va2pa>:f0100a8f1310,53868
static physaddr_tstatic1314,54032
f0100a8f:	55                   	push   %ebpf0100a8f1317,54092
f0100a90:	89 e5                	mov    %esp,%ebpf0100a901318,54136
f0100a92:	56                   	push   %esif0100a921319,54185
f0100a93:	53                   	push   %ebxf0100a931320,54229
f0100a94:	e8 a8 0c 00 00       	call   f0101741 <__x86.get_pc_thunk.cx>f0100a941321,54273
f0100a99:	81 c1 6f 38 01 00    	add    $0x1386f,%ecxf0100a991322,54345
	pgdir = &pgdir[PDX(va)];pgdir1325,54410
f0100a9f:	89 d3                	mov    %edx,%ebxf0100a9f1326,54436
f0100aa1:	c1 eb 16             	shr    $0x16,%ebxf0100aa11327,54485
f0100aa4:	8b 04 98             	mov    (%eax,%ebx,4),%eaxf0100aa41329,54559
f0100aa7:	a8 01                	test   $0x1,%alf0100aa71330,54617
f0100aa9:	74 5a                	je     f0100b05 <check_va2pa+0x76>f0100aa91331,54665
	p = (pte_t*) KADDR(PTE_ADDR(*pgdir));p1333,54745
f0100aab:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100aab1334,54784
f0100ab0:	89 c6                	mov    %eax,%esif0100ab01336,54866
f0100ab2:	c1 ee 0c             	shr    $0xc,%esif0100ab21337,54915
f0100ab5:	c7 c3 c8 66 11 f0    	mov    $0xf01166c8,%ebxf0100ab51338,54964
f0100abb:	3b 33                	cmp    (%ebx),%esif0100abb1339,55020
f0100abd:	73 2b                	jae    f0100aea <check_va2pa+0x5b>f0100abd1340,55071
f0100abf:	c1 ea 0c             	shr    $0xc,%edxf0100abf1342,55166
f0100ac2:	81 e2 ff 03 00 00    	and    $0x3ff,%edxf0100ac21343,55215
f0100ac8:	8b 84 90 00 00 00 f0 	mov    -0x10000000(%eax,%edx,4),%eaxf0100ac81344,55266
f0100acf:	89 c2                	mov    %eax,%edxf0100acf1345,55335
f0100ad1:	83 e2 01             	and    $0x1,%edxf0100ad11346,55384
f0100ad4:	25 00 f0 ff ff       	and    $0xfffff000,%eaxf0100ad41349,55476
f0100ad9:	85 d2                	test   %edx,%edxf0100ad91350,55532
f0100adb:	ba ff ff ff ff       	mov    $0xffffffff,%edxf0100adb1351,55581
f0100ae0:	0f 44 c2             	cmove  %edx,%eaxf0100ae01352,55637
f0100ae3:	8d 65 f8             	lea    -0x8(%ebp),%espf0100ae31354,55688
f0100ae6:	5b                   	pop    %ebxf0100ae61355,55743
f0100ae7:	5e                   	pop    %esif0100ae71356,55787
f0100ae8:	5d                   	pop    %ebpf0100ae81357,55831
f0100ae9:	c3                   	ret    f0100ae91358,55875
f0100aea:	50                   	push   %eaxf0100aea1360,55979
f0100aeb:	8d 81 28 e9 fe ff    	lea    -0x116d8(%ecx),%eaxf0100aeb1361,56023
f0100af1:	50                   	push   %eaxf0100af11362,56082
f0100af2:	68 a3 02 00 00       	push   $0x2a3f0100af21363,56126
f0100af7:	8d 81 58 eb fe ff    	lea    -0x114a8(%ecx),%eaxf0100af71364,56172
f0100afd:	50                   	push   %eaxf0100afd1365,56231
f0100afe:	89 cb                	mov    %ecx,%ebxf0100afe1366,56275
f0100b00:	e8 94 f5 ff ff       	call   f0100099 <_panic>f0100b001367,56324
f0100b05:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0100b051369,56394
f0100b0a:	eb d7                	jmp    f0100ae3 <check_va2pa+0x54>f0100b0a1370,56450
f0100b0c <page_init>:f0100b0c1372,56518
f0100b0c:	55                   	push   %ebpf0100b0c1374,56542
f0100b0d:	89 e5                	mov    %esp,%ebpf0100b0d1375,56586
f0100b0f:	57                   	push   %edif0100b0f1376,56635
f0100b10:	56                   	push   %esif0100b101377,56679
f0100b11:	53                   	push   %ebxf0100b111378,56723
f0100b12:	83 ec 1c             	sub    $0x1c,%espf0100b121379,56767
f0100b15:	e8 2b 0c 00 00       	call   f0101745 <__x86.get_pc_thunk.si>f0100b151380,56817
f0100b1a:	81 c6 ee 37 01 00    	add    $0x137ee,%esif0100b1a1381,56889
f0100b20:	bb 00 00 00 00       	mov    $0x0,%ebxf0100b201383,56974
f0100b25:	c7 c7 c8 66 11 f0    	mov    $0xf01166c8,%edif0100b251384,57023
f0100b2b:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100b2b1386,57103
f0100b31:	89 45 e0             	mov    %eax,-0x20(%ebp)f0100b311387,57159
f0100b34:	eb 38                	jmp    f0100b6e <page_init+0x62>f0100b341389,57247
f0100b36:	39 9e 98 1f 00 00    	cmp    %ebx,0x1f98(%esi)f0100b361391,57347
f0100b3c:	76 52                	jbe    f0100b90 <page_init+0x84>f0100b3c1392,57404
f0100b3e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecxf0100b3e1393,57469
f0100b45:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100b451395,57550
f0100b4b:	89 ca                	mov    %ecx,%edxf0100b4b1396,57606
f0100b4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100b4d1397,57655
f0100b50:	03 10                	add    (%eax),%edxf0100b501398,57711
f0100b52:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f0100b521399,57762
f0100b58:	8b 86 94 1f 00 00    	mov    0x1f94(%esi),%eaxf0100b581401,57854
f0100b5e:	89 02                	mov    %eax,(%edx)f0100b5e1402,57911
			page_free_list = &pages[i];page_free_list1403,57962
f0100b60:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100b601404,57993
f0100b63:	03 08                	add    (%eax),%ecxf0100b631405,58049
f0100b65:	89 8e 94 1f 00 00    	mov    %ecx,0x1f94(%esi)f0100b651406,58100
f0100b6b:	83 c3 01             	add    $0x1,%ebxf0100b6b1408,58189
f0100b6e:	39 1f                	cmp    %ebx,(%edi)f0100b6e1409,58238
f0100b70:	0f 86 80 00 00 00    	jbe    f0100bf6 <page_init+0xea>f0100b701410,58289
f0100b76:	85 db                	test   %ebx,%ebxf0100b761412,58370
f0100b78:	75 bc                	jne    f0100b36 <page_init+0x2a>f0100b781413,58419
f0100b7a:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100b7a1415,58508
f0100b80:	8b 00                	mov    (%eax),%eaxf0100b801416,58564
f0100b82:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100b821417,58615
f0100b88:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100b881419,58697
f0100b8e:	eb db                	jmp    f0100b6b <page_init+0x5f>f0100b8e1420,58748
f0100b90:	81 fb 00 01 00 00    	cmp    $0x100,%ebxf0100b901422,58904
f0100b96:	77 16                	ja     f0100bae <page_init+0xa2>f0100b961423,58955
f0100b98:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100b981425,59044
f0100b9b:	8b 00                	mov    (%eax),%eaxf0100b9b1426,59100
f0100b9d:	8d 04 d8             	lea    (%eax,%ebx,8),%eaxf0100b9d1427,59151
f0100ba0:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)f0100ba01428,59209
f0100ba6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100ba61430,59291
f0100bac:	eb bd                	jmp    f0100b6b <page_init+0x5f>f0100bac1431,59342
f0100bae:	b8 00 00 00 00       	mov    $0x0,%eaxf0100bae1433,59498
f0100bb3:	e8 01 fe ff ff       	call   f01009b9 <boot_alloc>f0100bb31434,59547
f0100bb8:	05 00 00 00 10       	add    $0x10000000,%eaxf0100bb81435,59608
f0100bbd:	c1 e8 0c             	shr    $0xc,%eaxf0100bbd1436,59664
f0100bc0:	39 d8                	cmp    %ebx,%eaxf0100bc01437,59713
f0100bc2:	77 d4                	ja     f0100b98 <page_init+0x8c>f0100bc21438,59762
f0100bc4:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecxf0100bc41439,59827
f0100bcb:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100bcb1441,59908
f0100bd1:	89 ca                	mov    %ecx,%edxf0100bd11442,59964
f0100bd3:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0100bd31443,60013
f0100bd6:	03 10                	add    (%eax),%edxf0100bd61444,60069
f0100bd8:	66 c7 42 04 00 00    	movw   $0x0,0x4(%edx)f0100bd81445,60120
f0100bde:	8b 86 94 1f 00 00    	mov    0x1f94(%esi),%eaxf0100bde1447,60212
f0100be4:	89 02                	mov    %eax,(%edx)f0100be41448,60269
			page_free_list = &pages[i];page_free_list1449,60320
f0100be6:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100be61450,60351
f0100be9:	03 08                	add    (%eax),%ecxf0100be91451,60407
f0100beb:	89 8e 94 1f 00 00    	mov    %ecx,0x1f94(%esi)f0100beb1452,60458
f0100bf1:	e9 75 ff ff ff       	jmp    f0100b6b <page_init+0x5f>f0100bf11453,60515
f0100bf6:	83 c4 1c             	add    $0x1c,%espf0100bf61455,60582
f0100bf9:	5b                   	pop    %ebxf0100bf91456,60632
f0100bfa:	5e                   	pop    %esif0100bfa1457,60676
f0100bfb:	5f                   	pop    %edif0100bfb1458,60720
f0100bfc:	5d                   	pop    %ebpf0100bfc1459,60764
f0100bfd:	c3                   	ret    f0100bfd1460,60808
f0100bfe <page_alloc>:f0100bfe1462,60849
f0100bfe:	55                   	push   %ebpf0100bfe1464,60874
f0100bff:	89 e5                	mov    %esp,%ebpf0100bff1465,60918
f0100c01:	56                   	push   %esif0100c011466,60967
f0100c02:	53                   	push   %ebxf0100c021467,61011
f0100c03:	e8 47 f5 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100c031468,61055
f0100c08:	81 c3 00 37 01 00    	add    $0x13700,%ebxf0100c081469,61127
f0100c0e:	8b b3 94 1f 00 00    	mov    0x1f94(%ebx),%esif0100c0e1471,61215
f0100c14:	85 f6                	test   %esi,%esif0100c141472,61272
f0100c16:	74 1a                	je     f0100c32 <page_alloc+0x34>f0100c161473,61321
	page_free_list = result->pp_link;page_free_list1474,61387
f0100c18:	8b 06                	mov    (%esi),%eaxf0100c181475,61422
f0100c1a:	89 83 94 1f 00 00    	mov    %eax,0x1f94(%ebx)f0100c1a1476,61473
f0100c20:	c7 06 00 00 00 00    	movl   $0x0,(%esi)f0100c201478,61555
f0100c26:	66 c7 46 04 00 00    	movw   $0x0,0x4(%esi)f0100c261480,61627
f0100c2c:	f6 45 08 01          	testb  $0x1,0x8(%ebp)f0100c2c1482,61712
f0100c30:	75 09                	jne    f0100c3b <page_alloc+0x3d>f0100c301483,61766
f0100c32:	89 f0                	mov    %esi,%eaxf0100c321485,61834
f0100c34:	8d 65 f8             	lea    -0x8(%ebp),%espf0100c341486,61883
f0100c37:	5b                   	pop    %ebxf0100c371487,61938
f0100c38:	5e                   	pop    %esif0100c381488,61982
f0100c39:	5d                   	pop    %ebpf0100c391489,62026
f0100c3a:	c3                   	ret    f0100c3a1490,62070
f0100c3b:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100c3b1492,62143
f0100c41:	89 f2                	mov    %esi,%edxf0100c411493,62199
f0100c43:	2b 10                	sub    (%eax),%edxf0100c431494,62248
f0100c45:	89 d0                	mov    %edx,%eaxf0100c451495,62299
f0100c47:	c1 f8 03             	sar    $0x3,%eaxf0100c471496,62348
f0100c4a:	c1 e0 0c             	shl    $0xc,%eaxf0100c4a1497,62397
f0100c4d:	89 c1                	mov    %eax,%ecxf0100c4d1499,62472
f0100c4f:	c1 e9 0c             	shr    $0xc,%ecxf0100c4f1500,62521
f0100c52:	c7 c2 c8 66 11 f0    	mov    $0xf01166c8,%edxf0100c521501,62570
f0100c58:	3b 0a                	cmp    (%edx),%ecxf0100c581502,62626
f0100c5a:	73 1a                	jae    f0100c76 <page_alloc+0x78>f0100c5a1503,62677
f0100c5c:	83 ec 04             	sub    $0x4,%espf0100c5c1505,62782
f0100c5f:	68 00 10 00 00       	push   $0x1000f0100c5f1506,62831
f0100c64:	6a 00                	push   $0x0f0100c641507,62878
f0100c66:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100c661509,62955
f0100c6b:	50                   	push   %eaxf0100c6b1510,63011
f0100c6c:	e8 bb 16 00 00       	call   f010232c <memset>f0100c6c1511,63055
f0100c71:	83 c4 10             	add    $0x10,%espf0100c711512,63112
f0100c74:	eb bc                	jmp    f0100c32 <page_alloc+0x34>f0100c741513,63162
f0100c76:	50                   	push   %eaxf0100c761515,63292
f0100c77:	8d 83 28 e9 fe ff    	lea    -0x116d8(%ebx),%eaxf0100c771516,63336
f0100c7d:	50                   	push   %eaxf0100c7d1517,63395
f0100c7e:	6a 52                	push   $0x52f0100c7e1518,63439
f0100c80:	8d 83 64 eb fe ff    	lea    -0x1149c(%ebx),%eaxf0100c801519,63484
f0100c86:	50                   	push   %eaxf0100c861520,63543
f0100c87:	e8 0d f4 ff ff       	call   f0100099 <_panic>f0100c871521,63587
f0100c8c <page_free>:f0100c8c1523,63645
f0100c8c:	55                   	push   %ebpf0100c8c1525,63669
f0100c8d:	89 e5                	mov    %esp,%ebpf0100c8d1526,63713
f0100c8f:	53                   	push   %ebxf0100c8f1527,63762
f0100c90:	83 ec 04             	sub    $0x4,%espf0100c901528,63806
f0100c93:	e8 b7 f4 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100c931529,63855
f0100c98:	81 c3 70 36 01 00    	add    $0x13670,%ebxf0100c981530,63927
f0100c9e:	8b 45 08             	mov    0x8(%ebp),%eaxf0100c9e1531,63980
f0100ca1:	0f b7 48 04          	movzwl 0x4(%eax),%ecxf0100ca11533,64050
f0100ca5:	66 85 c9             	test   %cx,%cxf0100ca51534,64104
f0100ca8:	75 19                	jne    f0100cc3 <page_free+0x37>f0100ca81535,64151
f0100caa:	8b 08                	mov    (%eax),%ecxf0100caa1537,64233
f0100cac:	85 c9                	test   %ecx,%ecxf0100cac1538,64284
f0100cae:	75 2f                	jne    f0100cdf <page_free+0x53>f0100cae1539,64333
f0100cb0:	8b 8b 94 1f 00 00    	mov    0x1f94(%ebx),%ecxf0100cb01541,64429
f0100cb6:	89 08                	mov    %ecx,(%eax)f0100cb61542,64486
	page_free_list = pp;page_free_list1543,64537
f0100cb8:	89 83 94 1f 00 00    	mov    %eax,0x1f94(%ebx)f0100cb81544,64559
f0100cbe:	8b 5d fc             	mov    -0x4(%ebp),%ebxf0100cbe1546,64618
f0100cc1:	c9                   	leave  f0100cc11547,64673
f0100cc2:	c3                   	ret    f0100cc21548,64713
f0100cc3:	0f b7 c9             	movzwl %cx,%ecxf0100cc31550,64820
f0100cc6:	51                   	push   %ecxf0100cc61551,64868
f0100cc7:	8d 83 4c e9 fe ff    	lea    -0x116b4(%ebx),%eaxf0100cc71552,64912
f0100ccd:	50                   	push   %eaxf0100ccd1553,64971
f0100cce:	68 3f 01 00 00       	push   $0x13ff0100cce1554,65015
f0100cd3:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100cd31555,65061
f0100cd9:	50                   	push   %eaxf0100cd91556,65120
f0100cda:	e8 ba f3 ff ff       	call   f0100099 <_panic>f0100cda1557,65164
f0100cdf:	51                   	push   %ecxf0100cdf1559,65285
f0100ce0:	8d 83 78 e9 fe ff    	lea    -0x11688(%ebx),%eaxf0100ce01560,65329
f0100ce6:	50                   	push   %eaxf0100ce61561,65388
f0100ce7:	68 41 01 00 00       	push   $0x141f0100ce71562,65432
f0100cec:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100cec1563,65478
f0100cf2:	50                   	push   %eaxf0100cf21564,65537
f0100cf3:	e8 a1 f3 ff ff       	call   f0100099 <_panic>f0100cf31565,65581
f0100cf8 <mem_init>:f0100cf81567,65639
f0100cf8:	55                   	push   %ebpf0100cf81569,65662
f0100cf9:	89 e5                	mov    %esp,%ebpf0100cf91570,65706
f0100cfb:	57                   	push   %edif0100cfb1571,65755
f0100cfc:	56                   	push   %esif0100cfc1572,65799
f0100cfd:	53                   	push   %ebxf0100cfd1573,65843
f0100cfe:	83 ec 3c             	sub    $0x3c,%espf0100cfe1574,65887
f0100d01:	e8 49 f4 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0100d011575,65937
f0100d06:	81 c3 02 36 01 00    	add    $0x13602,%ebxf0100d061576,66009
	basemem = nvram_read(NVRAM_BASELO);basemem1577,66062
f0100d0c:	b8 15 00 00 00       	mov    $0x15,%eaxf0100d0c1578,66099
f0100d11:	e8 6d fc ff ff       	call   f0100983 <nvram_read>f0100d111579,66149
f0100d16:	89 c7                	mov    %eax,%edif0100d161580,66210
	extmem = nvram_read(NVRAM_EXTLO);extmem1581,66259
f0100d18:	b8 17 00 00 00       	mov    $0x17,%eaxf0100d181582,66294
f0100d1d:	e8 61 fc ff ff       	call   f0100983 <nvram_read>f0100d1d1583,66344
f0100d22:	89 c6                	mov    %eax,%esif0100d221584,66405
	ext16mem = nvram_read(NVRAM_EXT16LO) * 64;ext16mem1585,66454
f0100d24:	b8 34 00 00 00       	mov    $0x34,%eaxf0100d241586,66498
f0100d29:	e8 55 fc ff ff       	call   f0100983 <nvram_read>f0100d291587,66548
f0100d2e:	c1 e0 06             	shl    $0x6,%eaxf0100d2e1588,66609
f0100d31:	85 c0                	test   %eax,%eaxf0100d311590,66673
f0100d33:	75 0e                	jne    f0100d43 <mem_init+0x4b>f0100d331591,66722
		totalmem = basemem;totalmem1592,66786
f0100d35:	89 f8                	mov    %edi,%eaxf0100d351593,66808
f0100d37:	85 f6                	test   %esi,%esif0100d371595,66875
f0100d39:	74 0d                	je     f0100d48 <mem_init+0x50>f0100d391596,66924
		totalmem = 1 * 1024 + extmem;totalmem1597,66988
f0100d3b:	8d 86 00 04 00 00    	lea    0x400(%esi),%eaxf0100d3b1598,67020
f0100d41:	eb 05                	jmp    f0100d48 <mem_init+0x50>f0100d411599,67076
		totalmem = 16 * 1024 + ext16mem;totalmem1600,67140
f0100d43:	05 00 40 00 00       	add    $0x4000,%eaxf0100d431601,67175
	npages = totalmem / (PGSIZE / 1024);npages1602,67227
f0100d48:	89 c1                	mov    %eax,%ecxf0100d481603,67265
f0100d4a:	c1 e9 02             	shr    $0x2,%ecxf0100d4a1604,67314
f0100d4d:	c7 c2 c8 66 11 f0    	mov    $0xf01166c8,%edxf0100d4d1605,67363
f0100d53:	89 0a                	mov    %ecx,(%edx)f0100d531606,67419
	npages_basemem = basemem / (PGSIZE / 1024);npages_basemem1607,67470
f0100d55:	89 fa                	mov    %edi,%edxf0100d551608,67515
f0100d57:	c1 ea 02             	shr    $0x2,%edxf0100d571609,67564
f0100d5a:	89 93 98 1f 00 00    	mov    %edx,0x1f98(%ebx)f0100d5a1610,67613
f0100d60:	89 c2                	mov    %eax,%edxf0100d601612,67743
f0100d62:	29 fa                	sub    %edi,%edxf0100d621613,67792
f0100d64:	52                   	push   %edxf0100d641614,67841
f0100d65:	57                   	push   %edif0100d651615,67885
f0100d66:	50                   	push   %eaxf0100d661616,67929
f0100d67:	8d 83 a0 e9 fe ff    	lea    -0x11660(%ebx),%eaxf0100d671617,67973
f0100d6d:	50                   	push   %eaxf0100d6d1618,68032
f0100d6e:	e8 5d 0a 00 00       	call   f01017d0 <cprintf>f0100d6e1619,68076
	kern_pgdir = (pde_t *) boot_alloc(PGSIZE);kern_pgdir1620,68134
f0100d73:	b8 00 10 00 00       	mov    $0x1000,%eaxf0100d731621,68178
f0100d78:	e8 3c fc ff ff       	call   f01009b9 <boot_alloc>f0100d781622,68230
f0100d7d:	c7 c6 cc 66 11 f0    	mov    $0xf01166cc,%esif0100d7d1623,68291
f0100d83:	89 06                	mov    %eax,(%esi)f0100d831624,68347
f0100d85:	83 c4 0c             	add    $0xc,%espf0100d851626,68430
f0100d88:	68 00 10 00 00       	push   $0x1000f0100d881627,68479
f0100d8d:	6a 00                	push   $0x0f0100d8d1628,68526
f0100d8f:	50                   	push   %eaxf0100d8f1629,68570
f0100d90:	e8 97 15 00 00       	call   f010232c <memset>f0100d901630,68614
f0100d95:	8b 06                	mov    (%esi),%eaxf0100d951632,68731
f0100d97:	83 c4 10             	add    $0x10,%espf0100d971634,68813
f0100d9a:	3d ff ff ff ef       	cmp    $0xefffffff,%eaxf0100d9a1635,68863
f0100d9f:	77 19                	ja     f0100dba <mem_init+0xc2>f0100d9f1636,68919
f0100da1:	50                   	push   %eaxf0100da11638,69049
f0100da2:	8d 83 dc e9 fe ff    	lea    -0x11624(%ebx),%eaxf0100da21639,69093
f0100da8:	50                   	push   %eaxf0100da81640,69152
f0100da9:	68 92 00 00 00       	push   $0x92f0100da91641,69196
f0100dae:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100dae1642,69241
f0100db4:	50                   	push   %eaxf0100db41643,69300
f0100db5:	e8 df f2 ff ff       	call   f0100099 <_panic>f0100db51644,69344
f0100dba:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edxf0100dba1646,69437
f0100dc0:	83 ca 05             	or     $0x5,%edxf0100dc01647,69498
f0100dc3:	89 90 f4 0e 00 00    	mov    %edx,0xef4(%eax)f0100dc31648,69547
	pages = (struct PageInfo *) boot_alloc(sizeof(struct PageInfo) * npages);pages1649,69603
f0100dc9:	c7 c6 c8 66 11 f0    	mov    $0xf01166c8,%esif0100dc91650,69678
f0100dcf:	8b 06                	mov    (%esi),%eaxf0100dcf1651,69734
f0100dd1:	c1 e0 03             	shl    $0x3,%eaxf0100dd11652,69785
f0100dd4:	e8 e0 fb ff ff       	call   f01009b9 <boot_alloc>f0100dd41653,69834
f0100dd9:	c7 c2 d0 66 11 f0    	mov    $0xf01166d0,%edxf0100dd91654,69895
f0100ddf:	89 02                	mov    %eax,(%edx)f0100ddf1655,69951
f0100de1:	83 ec 04             	sub    $0x4,%espf0100de11657,70055
f0100de4:	8b 16                	mov    (%esi),%edxf0100de41658,70104
f0100de6:	c1 e2 03             	shl    $0x3,%edxf0100de61659,70155
f0100de9:	52                   	push   %edxf0100de91660,70204
f0100dea:	6a 00                	push   $0x0f0100dea1661,70248
f0100dec:	50                   	push   %eaxf0100dec1662,70292
f0100ded:	e8 3a 15 00 00       	call   f010232c <memset>f0100ded1663,70336
f0100df2:	e8 15 fd ff ff       	call   f0100b0c <page_init>f0100df21665,70407
f0100df7:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf0100df71667,70489
f0100dfd:	83 c4 10             	add    $0x10,%espf0100dfd1668,70546
f0100e00:	85 c0                	test   %eax,%eaxf0100e001669,70596
f0100e02:	74 5d                	je     f0100e61 <mem_init+0x169>f0100e021670,70645
f0100e04:	8d 55 d8             	lea    -0x28(%ebp),%edxf0100e041672,70754
f0100e07:	89 55 e0             	mov    %edx,-0x20(%ebp)f0100e071673,70810
f0100e0a:	8d 55 dc             	lea    -0x24(%ebp),%edxf0100e0a1674,70866
f0100e0d:	89 55 e4             	mov    %edx,-0x1c(%ebp)f0100e0d1675,70922
f0100e10:	c7 c1 d0 66 11 f0    	mov    $0xf01166d0,%ecxf0100e101677,71011
f0100e16:	89 c2                	mov    %eax,%edxf0100e161678,71067
f0100e18:	2b 11                	sub    (%ecx),%edxf0100e181679,71116
f0100e1a:	f7 c2 00 e0 7f 00    	test   $0x7fe000,%edxf0100e1a1681,71216
f0100e20:	0f 95 c2             	setne  %dlf0100e201682,71270
f0100e23:	0f b6 d2             	movzbl %dl,%edxf0100e231683,71313
f0100e26:	8b 74 95 e0          	mov    -0x20(%ebp,%edx,4),%esif0100e261685,71384
f0100e2a:	89 06                	mov    %eax,(%esi)f0100e2a1686,71447
f0100e2c:	89 44 95 e0          	mov    %eax,-0x20(%ebp,%edx,4)f0100e2c1688,71530
f0100e30:	8b 00                	mov    (%eax),%eaxf0100e301690,71645
f0100e32:	85 c0                	test   %eax,%eaxf0100e321691,71696
f0100e34:	75 e0                	jne    f0100e16 <mem_init+0x11e>f0100e341692,71745
f0100e36:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf0100e361694,71824
f0100e39:	c7 00 00 00 00 00    	movl   $0x0,(%eax)f0100e391695,71880
f0100e3f:	8b 55 dc             	mov    -0x24(%ebp),%edxf0100e3f1697,71947
f0100e42:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0100e421698,72003
f0100e45:	89 10                	mov    %edx,(%eax)f0100e451699,72059
		page_free_list = pp1;page_free_list1700,72110
f0100e47:	8b 75 d8             	mov    -0x28(%ebp),%esif0100e471701,72134
f0100e4a:	89 b3 94 1f 00 00    	mov    %esi,0x1f94(%ebx)f0100e4a1702,72190
f0100e50:	c7 c7 d0 66 11 f0    	mov    $0xf01166d0,%edif0100e501703,72247
f0100e56:	c7 c0 c8 66 11 f0    	mov    $0xf01166c8,%eaxf0100e561705,72329
f0100e5c:	89 45 d4             	mov    %eax,-0x2c(%ebp)f0100e5c1706,72385
f0100e5f:	eb 33                	jmp    f0100e94 <mem_init+0x19c>f0100e5f1707,72441
f0100e61:	83 ec 04             	sub    $0x4,%espf0100e611709,72554
f0100e64:	8d 83 00 ea fe ff    	lea    -0x11600(%ebx),%eaxf0100e641710,72603
f0100e6a:	50                   	push   %eaxf0100e6a1711,72662
f0100e6b:	68 e4 01 00 00       	push   $0x1e4f0100e6b1712,72706
f0100e70:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100e701713,72752
f0100e76:	50                   	push   %eaxf0100e761714,72811
f0100e77:	e8 1d f2 ff ff       	call   f0100099 <_panic>f0100e771715,72855
f0100e7c:	52                   	push   %edxf0100e7c1717,72976
f0100e7d:	8d 83 28 e9 fe ff    	lea    -0x116d8(%ebx),%eaxf0100e7d1718,73020
f0100e83:	50                   	push   %eaxf0100e831719,73079
f0100e84:	6a 52                	push   $0x52f0100e841720,73123
f0100e86:	8d 83 64 eb fe ff    	lea    -0x1149c(%ebx),%eaxf0100e861721,73168
f0100e8c:	50                   	push   %eaxf0100e8c1722,73227
f0100e8d:	e8 07 f2 ff ff       	call   f0100099 <_panic>f0100e8d1723,73271
f0100e92:	8b 36                	mov    (%esi),%esif0100e921725,73377
f0100e94:	85 f6                	test   %esi,%esif0100e941726,73428
f0100e96:	74 3d                	je     f0100ed5 <mem_init+0x1dd>f0100e961727,73477
f0100e98:	89 f0                	mov    %esi,%eaxf0100e981729,73575
f0100e9a:	2b 07                	sub    (%edi),%eaxf0100e9a1730,73624
f0100e9c:	c1 f8 03             	sar    $0x3,%eaxf0100e9c1731,73675
f0100e9f:	89 c2                	mov    %eax,%edxf0100e9f1733,73760
f0100ea1:	c1 e2 0c             	shl    $0xc,%edxf0100ea11734,73809
f0100ea4:	a9 00 fc 0f 00       	test   $0xffc00,%eaxf0100ea41735,73858
f0100ea9:	75 e7                	jne    f0100e92 <mem_init+0x19a>f0100ea91736,73911
f0100eab:	89 d0                	mov    %edx,%eaxf0100eab1738,74002
f0100ead:	c1 e8 0c             	shr    $0xc,%eaxf0100ead1739,74051
f0100eb0:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0100eb01740,74100
f0100eb3:	3b 01                	cmp    (%ecx),%eaxf0100eb31741,74156
f0100eb5:	73 c5                	jae    f0100e7c <mem_init+0x184>f0100eb51742,74207
f0100eb7:	83 ec 04             	sub    $0x4,%espf0100eb71744,74308
f0100eba:	68 80 00 00 00       	push   $0x80f0100eba1745,74357
f0100ebf:	68 97 00 00 00       	push   $0x97f0100ebf1746,74402
f0100ec4:	81 ea 00 00 00 10    	sub    $0x10000000,%edxf0100ec41748,74480
f0100eca:	52                   	push   %edxf0100eca1749,74536
f0100ecb:	e8 5c 14 00 00       	call   f010232c <memset>f0100ecb1750,74580
f0100ed0:	83 c4 10             	add    $0x10,%espf0100ed01751,74637
f0100ed3:	eb bd                	jmp    f0100e92 <mem_init+0x19a>f0100ed31752,74687
	first_free_page = (char *) boot_alloc(0);first_free_page1753,74752
f0100ed5:	b8 00 00 00 00       	mov    $0x0,%eaxf0100ed51754,74795
f0100eda:	e8 da fa ff ff       	call   f01009b9 <boot_alloc>f0100eda1755,74844
f0100edf:	89 45 c8             	mov    %eax,-0x38(%ebp)f0100edf1756,74905
f0100ee2:	8b 93 94 1f 00 00    	mov    0x1f94(%ebx),%edxf0100ee21758,75012
f0100ee8:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf0100ee81760,75092
f0100eee:	8b 08                	mov    (%eax),%ecxf0100eee1761,75148
f0100ef0:	c7 c0 c8 66 11 f0    	mov    $0xf01166c8,%eaxf0100ef01763,75230
f0100ef6:	8b 00                	mov    (%eax),%eaxf0100ef61764,75286
f0100ef8:	89 45 c4             	mov    %eax,-0x3c(%ebp)f0100ef81765,75337
f0100efb:	8d 04 c1             	lea    (%ecx,%eax,8),%eaxf0100efb1766,75393
f0100efe:	89 45 d4             	mov    %eax,-0x2c(%ebp)f0100efe1767,75451
f0100f01:	89 4d d0             	mov    %ecx,-0x30(%ebp)f0100f011769,75568
f0100f04:	bf 00 00 00 00       	mov    $0x0,%edif0100f041771,75666
f0100f09:	89 75 cc             	mov    %esi,-0x34(%ebp)f0100f091772,75715
f0100f0c:	e9 f3 00 00 00       	jmp    f0101004 <mem_init+0x30c>f0100f0c1773,75771
f0100f11:	8d 83 72 eb fe ff    	lea    -0x1148e(%ebx),%eaxf0100f111775,75859
f0100f17:	50                   	push   %eaxf0100f171776,75918
f0100f18:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf0100f181777,75962
f0100f1e:	50                   	push   %eaxf0100f1e1778,76021
f0100f1f:	68 fe 01 00 00       	push   $0x1fef0100f1f1779,76065
f0100f24:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100f241780,76111
f0100f2a:	50                   	push   %eaxf0100f2a1781,76170
f0100f2b:	e8 69 f1 ff ff       	call   f0100099 <_panic>f0100f2b1782,76214
f0100f30:	8d 83 93 eb fe ff    	lea    -0x1146d(%ebx),%eaxf0100f301784,76302
f0100f36:	50                   	push   %eaxf0100f361785,76361
f0100f37:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf0100f371786,76405
f0100f3d:	50                   	push   %eaxf0100f3d1787,76464
f0100f3e:	68 ff 01 00 00       	push   $0x1fff0100f3e1788,76508
f0100f43:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100f431789,76554
f0100f49:	50                   	push   %eaxf0100f491790,76613
f0100f4a:	e8 4a f1 ff ff       	call   f0100099 <_panic>f0100f4a1791,76657
f0100f4f:	8d 83 24 ea fe ff    	lea    -0x115dc(%ebx),%eaxf0100f4f1793,76775
f0100f55:	50                   	push   %eaxf0100f551794,76834
f0100f56:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf0100f561795,76878
f0100f5c:	50                   	push   %eaxf0100f5c1796,76937
f0100f5d:	68 00 02 00 00       	push   $0x200f0100f5d1797,76981
f0100f62:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100f621798,77027
f0100f68:	50                   	push   %eaxf0100f681799,77086
f0100f69:	e8 2b f1 ff ff       	call   f0100099 <_panic>f0100f691800,77130
f0100f6e:	8d 83 a7 eb fe ff    	lea    -0x11459(%ebx),%eaxf0100f6e1802,77215
f0100f74:	50                   	push   %eaxf0100f741803,77274
f0100f75:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf0100f751804,77318
f0100f7b:	50                   	push   %eaxf0100f7b1805,77377
f0100f7c:	68 03 02 00 00       	push   $0x203f0100f7c1806,77421
f0100f81:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100f811807,77467
f0100f87:	50                   	push   %eaxf0100f871808,77526
f0100f88:	e8 0c f1 ff ff       	call   f0100099 <_panic>f0100f881809,77570
f0100f8d:	8d 83 b8 eb fe ff    	lea    -0x11448(%ebx),%eaxf0100f8d1811,77663
f0100f93:	50                   	push   %eaxf0100f931812,77722
f0100f94:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf0100f941813,77766
f0100f9a:	50                   	push   %eaxf0100f9a1814,77825
f0100f9b:	68 04 02 00 00       	push   $0x204f0100f9b1815,77869
f0100fa0:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100fa01816,77915
f0100fa6:	50                   	push   %eaxf0100fa61817,77974
f0100fa7:	e8 ed f0 ff ff       	call   f0100099 <_panic>f0100fa71818,78018
f0100fac:	8d 83 58 ea fe ff    	lea    -0x115a8(%ebx),%eaxf0100fac1820,78121
f0100fb2:	50                   	push   %eaxf0100fb21821,78180
f0100fb3:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf0100fb31822,78224
f0100fb9:	50                   	push   %eaxf0100fb91823,78283
f0100fba:	68 05 02 00 00       	push   $0x205f0100fba1824,78327
f0100fbf:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100fbf1825,78373
f0100fc5:	50                   	push   %eaxf0100fc51826,78432
f0100fc6:	e8 ce f0 ff ff       	call   f0100099 <_panic>f0100fc61827,78476
f0100fcb:	8d 83 d1 eb fe ff    	lea    -0x1142f(%ebx),%eaxf0100fcb1829,78570
f0100fd1:	50                   	push   %eaxf0100fd11830,78629
f0100fd2:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf0100fd21831,78673
f0100fd8:	50                   	push   %eaxf0100fd81832,78732
f0100fd9:	68 06 02 00 00       	push   $0x206f0100fd91833,78776
f0100fde:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf0100fde1834,78822
f0100fe4:	50                   	push   %eaxf0100fe41835,78881
f0100fe5:	e8 af f0 ff ff       	call   f0100099 <_panic>f0100fe51836,78925
f0100fea:	89 c6                	mov    %eax,%esif0100fea1838,79008
f0100fec:	c1 ee 0c             	shr    $0xc,%esif0100fec1839,79057
f0100fef:	39 75 c4             	cmp    %esi,-0x3c(%ebp)f0100fef1840,79106
f0100ff2:	76 71                	jbe    f0101065 <mem_init+0x36d>f0100ff21841,79162
f0100ff4:	2d 00 00 00 10       	sub    $0x10000000,%eaxf0100ff41843,79260
f0100ff9:	39 45 c8             	cmp    %eax,-0x38(%ebp)f0100ff91845,79396
f0100ffc:	77 7d                	ja     f010107b <mem_init+0x383>f0100ffc1846,79452
f0100ffe:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f0100ffe1848,79536
f0101002:	8b 12                	mov    (%edx),%edxf01010021850,79643
f0101004:	85 d2                	test   %edx,%edxf01010041851,79694
f0101006:	0f 84 8e 00 00 00    	je     f010109a <mem_init+0x3a2>f01010061852,79743
f010100c:	39 d1                	cmp    %edx,%ecxf010100c1854,79831
f010100e:	0f 87 fd fe ff ff    	ja     f0100f11 <mem_init+0x219>f010100e1855,79880
f0101014:	3b 55 d4             	cmp    -0x2c(%ebp),%edxf01010141857,79976
f0101017:	0f 83 13 ff ff ff    	jae    f0100f30 <mem_init+0x238>f01010171858,80032
f010101d:	89 d0                	mov    %edx,%eaxf010101d1860,80158
f010101f:	2b 45 d0             	sub    -0x30(%ebp),%eaxf010101f1861,80207
f0101022:	a8 07                	test   $0x7,%alf01010221862,80263
f0101024:	0f 85 25 ff ff ff    	jne    f0100f4f <mem_init+0x257>f01010241863,80311
f010102a:	c1 f8 03             	sar    $0x3,%eaxf010102a1865,80409
f010102d:	c1 e0 0c             	shl    $0xc,%eaxf010102d1866,80458
f0101030:	85 c0                	test   %eax,%eaxf01010301868,80535
f0101032:	0f 84 36 ff ff ff    	je     f0100f6e <mem_init+0x276>f01010321869,80584
f0101038:	3d 00 00 0a 00       	cmp    $0xa0000,%eaxf01010381871,80685
f010103d:	0f 84 4a ff ff ff    	je     f0100f8d <mem_init+0x295>f010103d1872,80738
f0101043:	3d 00 f0 0f 00       	cmp    $0xff000,%eaxf01010431874,80849
f0101048:	0f 84 5e ff ff ff    	je     f0100fac <mem_init+0x2b4>f01010481875,80902
f010104e:	3d 00 00 10 00       	cmp    $0x100000,%eaxf010104e1877,81004
f0101053:	0f 84 72 ff ff ff    	je     f0100fcb <mem_init+0x2d3>f01010531878,81058
f0101059:	3d ff ff 0f 00       	cmp    $0xfffff,%eaxf01010591880,81203
f010105e:	77 8a                	ja     f0100fea <mem_init+0x2f2>f010105e1881,81256
f0101060:	83 c7 01             	add    $0x1,%edif01010601883,81341
f0101063:	eb 9d                	jmp    f0101002 <mem_init+0x30a>f01010631884,81390
f0101065:	50                   	push   %eaxf01010651886,81519
f0101066:	8d 83 28 e9 fe ff    	lea    -0x116d8(%ebx),%eaxf01010661887,81563
f010106c:	50                   	push   %eaxf010106c1888,81622
f010106d:	6a 52                	push   $0x52f010106d1889,81666
f010106f:	8d 83 64 eb fe ff    	lea    -0x1149c(%ebx),%eaxf010106f1890,81711
f0101075:	50                   	push   %eaxf01010751891,81770
f0101076:	e8 1e f0 ff ff       	call   f0100099 <_panic>f01010761892,81814
f010107b:	8d 83 7c ea fe ff    	lea    -0x11584(%ebx),%eaxf010107b1894,81951
f0101081:	50                   	push   %eaxf01010811895,82010
f0101082:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01010821896,82054
f0101088:	50                   	push   %eaxf01010881897,82113
f0101089:	68 07 02 00 00       	push   $0x207f01010891898,82157
f010108e:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf010108e1899,82203
f0101094:	50                   	push   %eaxf01010941900,82262
f0101095:	e8 ff ef ff ff       	call   f0100099 <_panic>f01010951901,82306
f010109a:	8b 75 cc             	mov    -0x34(%ebp),%esif010109a1902,82363
f010109d:	85 ff                	test   %edi,%edif010109d1904,82447
f010109f:	7e 2e                	jle    f01010cf <mem_init+0x3d7>f010109f1905,82496
f01010a1:	85 f6                	test   %esi,%esif01010a11907,82588
f01010a3:	7e 49                	jle    f01010ee <mem_init+0x3f6>f01010a31908,82637
f01010a5:	83 ec 0c             	sub    $0xc,%espf01010a51910,82751
f01010a8:	8d 83 c4 ea fe ff    	lea    -0x1153c(%ebx),%eaxf01010a81911,82800
f01010ae:	50                   	push   %eaxf01010ae1912,82859
f01010af:	e8 1c 07 00 00       	call   f01017d0 <cprintf>f01010af1913,82903
f01010b4:	83 c4 10             	add    $0x10,%espf01010b41915,82974
f01010b7:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf01010b71916,83024
f01010bd:	83 38 00             	cmpl   $0x0,(%eax)f01010bd1917,83080
f01010c0:	74 4b                	je     f010110d <mem_init+0x415>f01010c01918,83131
f01010c2:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf01010c21920,83256
f01010c8:	be 00 00 00 00       	mov    $0x0,%esif01010c81921,83313
f01010cd:	eb 5e                	jmp    f010112d <mem_init+0x435>f01010cd1922,83362
f01010cf:	8d 83 eb eb fe ff    	lea    -0x11415(%ebx),%eaxf01010cf1924,83455
f01010d5:	50                   	push   %eaxf01010d51925,83514
f01010d6:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01010d61926,83558
f01010dc:	50                   	push   %eaxf01010dc1927,83617
f01010dd:	68 0f 02 00 00       	push   $0x20ff01010dd1928,83661
f01010e2:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01010e21929,83707
f01010e8:	50                   	push   %eaxf01010e81930,83766
f01010e9:	e8 ab ef ff ff       	call   f0100099 <_panic>f01010e91931,83810
f01010ee:	8d 83 fd eb fe ff    	lea    -0x11403(%ebx),%eaxf01010ee1933,83894
f01010f4:	50                   	push   %eaxf01010f41934,83953
f01010f5:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01010f51935,83997
f01010fb:	50                   	push   %eaxf01010fb1936,84056
f01010fc:	68 10 02 00 00       	push   $0x210f01010fc1937,84100
f0101101:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01011011938,84146
f0101107:	50                   	push   %eaxf01011071939,84205
f0101108:	e8 8c ef ff ff       	call   f0100099 <_panic>f01011081940,84249
f010110d:	83 ec 04             	sub    $0x4,%espf010110d1942,84345
f0101110:	8d 83 0e ec fe ff    	lea    -0x113f2(%ebx),%eaxf01011101943,84394
f0101116:	50                   	push   %eaxf01011161944,84453
f0101117:	68 23 02 00 00       	push   $0x223f01011171945,84497
f010111c:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf010111c1946,84543
f0101122:	50                   	push   %eaxf01011221947,84602
f0101123:	e8 71 ef ff ff       	call   f0100099 <_panic>f01011231948,84646
f0101128:	83 c6 01             	add    $0x1,%esif01011281950,84714
f010112b:	8b 00                	mov    (%eax),%eaxf010112b1952,84823
f010112d:	85 c0                	test   %eax,%eaxf010112d1953,84874
f010112f:	75 f7                	jne    f0101128 <mem_init+0x430>f010112f1954,84923
f0101131:	83 ec 0c             	sub    $0xc,%espf01011311956,85020
f0101134:	6a 00                	push   $0x0f01011341957,85069
f0101136:	e8 c3 fa ff ff       	call   f0100bfe <page_alloc>f01011361958,85113
f010113b:	89 45 d4             	mov    %eax,-0x2c(%ebp)f010113b1959,85174
f010113e:	83 c4 10             	add    $0x10,%espf010113e1960,85230
f0101141:	85 c0                	test   %eax,%eaxf01011411961,85280
f0101143:	0f 84 e7 01 00 00    	je     f0101330 <mem_init+0x638>f01011431962,85329
f0101149:	83 ec 0c             	sub    $0xc,%espf01011491964,85426
f010114c:	6a 00                	push   $0x0f010114c1965,85475
f010114e:	e8 ab fa ff ff       	call   f0100bfe <page_alloc>f010114e1966,85519
f0101153:	89 c7                	mov    %eax,%edif01011531967,85580
f0101155:	83 c4 10             	add    $0x10,%espf01011551968,85629
f0101158:	85 c0                	test   %eax,%eaxf01011581969,85679
f010115a:	0f 84 ef 01 00 00    	je     f010134f <mem_init+0x657>f010115a1970,85728
f0101160:	83 ec 0c             	sub    $0xc,%espf01011601972,85825
f0101163:	6a 00                	push   $0x0f01011631973,85874
f0101165:	e8 94 fa ff ff       	call   f0100bfe <page_alloc>f01011651974,85918
f010116a:	89 45 d0             	mov    %eax,-0x30(%ebp)f010116a1975,85979
f010116d:	83 c4 10             	add    $0x10,%espf010116d1976,86035
f0101170:	85 c0                	test   %eax,%eaxf01011701977,86085
f0101172:	0f 84 f6 01 00 00    	je     f010136e <mem_init+0x676>f01011721978,86134
f0101178:	39 7d d4             	cmp    %edi,-0x2c(%ebp)f01011781980,86227
f010117b:	0f 84 0c 02 00 00    	je     f010138d <mem_init+0x695>f010117b1981,86283
f0101181:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01011811983,86390
f0101184:	39 45 d4             	cmp    %eax,-0x2c(%ebp)f01011841984,86446
f0101187:	0f 84 1f 02 00 00    	je     f01013ac <mem_init+0x6b4>f01011871985,86502
f010118d:	39 c7                	cmp    %eax,%edif010118d1986,86567
f010118f:	0f 84 17 02 00 00    	je     f01013ac <mem_init+0x6b4>f010118f1987,86616
f0101195:	c7 c0 d0 66 11 f0    	mov    $0xf01166d0,%eaxf01011951989,86714
f010119b:	8b 08                	mov    (%eax),%ecxf010119b1990,86770
f010119d:	c7 c0 c8 66 11 f0    	mov    $0xf01166c8,%eaxf010119d1992,86860
f01011a3:	8b 10                	mov    (%eax),%edxf01011a31993,86916
f01011a5:	c1 e2 0c             	shl    $0xc,%edxf01011a51994,86967
f01011a8:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf01011a81995,87016
f01011ab:	29 c8                	sub    %ecx,%eaxf01011ab1996,87072
f01011ad:	c1 f8 03             	sar    $0x3,%eaxf01011ad1997,87121
f01011b0:	c1 e0 0c             	shl    $0xc,%eaxf01011b01998,87170
f01011b3:	39 d0                	cmp    %edx,%eaxf01011b31999,87219
f01011b5:	0f 83 10 02 00 00    	jae    f01013cb <mem_init+0x6d3>f01011b52000,87268
f01011bb:	89 f8                	mov    %edi,%eaxf01011bb2001,87333
f01011bd:	29 c8                	sub    %ecx,%eaxf01011bd2002,87382
f01011bf:	c1 f8 03             	sar    $0x3,%eaxf01011bf2003,87431
f01011c2:	c1 e0 0c             	shl    $0xc,%eaxf01011c22004,87480
f01011c5:	39 c2                	cmp    %eax,%edxf01011c52006,87568
f01011c7:	0f 86 1d 02 00 00    	jbe    f01013ea <mem_init+0x6f2>f01011c72007,87617
f01011cd:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01011cd2008,87682
f01011d0:	29 c8                	sub    %ecx,%eaxf01011d02009,87738
f01011d2:	c1 f8 03             	sar    $0x3,%eaxf01011d22010,87787
f01011d5:	c1 e0 0c             	shl    $0xc,%eaxf01011d52011,87836
f01011d8:	39 c2                	cmp    %eax,%edxf01011d82013,87924
f01011da:	0f 86 29 02 00 00    	jbe    f0101409 <mem_init+0x711>f01011da2014,87973
	fl = page_free_list;fl2015,88038
f01011e0:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf01011e02016,88060
f01011e6:	89 45 cc             	mov    %eax,-0x34(%ebp)f01011e62017,88117
	page_free_list = 0;page_free_list2018,88173
f01011e9:	c7 83 94 1f 00 00 00 	movl   $0x0,0x1f94(%ebx)f01011e92019,88194
f01011f0:	00 00 00 f01011f02020,88251
f01011f3:	83 ec 0c             	sub    $0xc,%espf01011f32022,88296
f01011f6:	6a 00                	push   $0x0f01011f62023,88345
f01011f8:	e8 01 fa ff ff       	call   f0100bfe <page_alloc>f01011f82024,88389
f01011fd:	83 c4 10             	add    $0x10,%espf01011fd2025,88450
f0101200:	85 c0                	test   %eax,%eaxf01012002026,88500
f0101202:	0f 85 20 02 00 00    	jne    f0101428 <mem_init+0x730>f01012022027,88549
f0101208:	83 ec 0c             	sub    $0xc,%espf01012082029,88631
f010120b:	ff 75 d4             	pushl  -0x2c(%ebp)f010120b2030,88680
f010120e:	e8 79 fa ff ff       	call   f0100c8c <page_free>f010120e2031,88731
f0101213:	89 3c 24             	mov    %edi,(%esp)f01012132033,88808
f0101216:	e8 71 fa ff ff       	call   f0100c8c <page_free>f01012162034,88859
f010121b:	83 c4 04             	add    $0x4,%espf010121b2036,88936
f010121e:	ff 75 d0             	pushl  -0x30(%ebp)f010121e2037,88985
f0101221:	e8 66 fa ff ff       	call   f0100c8c <page_free>f01012212038,89036
f0101226:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f01012262040,89128
f010122d:	e8 cc f9 ff ff       	call   f0100bfe <page_alloc>f010122d2041,89179
f0101232:	89 c7                	mov    %eax,%edif01012322042,89240
f0101234:	83 c4 10             	add    $0x10,%espf01012342043,89289
f0101237:	85 c0                	test   %eax,%eaxf01012372044,89339
f0101239:	0f 84 08 02 00 00    	je     f0101447 <mem_init+0x74f>f01012392045,89388
f010123f:	83 ec 0c             	sub    $0xc,%espf010123f2047,89485
f0101242:	6a 00                	push   $0x0f01012422048,89534
f0101244:	e8 b5 f9 ff ff       	call   f0100bfe <page_alloc>f01012442049,89578
f0101249:	89 45 d4             	mov    %eax,-0x2c(%ebp)f01012492050,89639
f010124c:	83 c4 10             	add    $0x10,%espf010124c2051,89695
f010124f:	85 c0                	test   %eax,%eaxf010124f2052,89745
f0101251:	0f 84 0f 02 00 00    	je     f0101466 <mem_init+0x76e>f01012512053,89794
f0101257:	83 ec 0c             	sub    $0xc,%espf01012572055,89891
f010125a:	6a 00                	push   $0x0f010125a2056,89940
f010125c:	e8 9d f9 ff ff       	call   f0100bfe <page_alloc>f010125c2057,89984
f0101261:	89 45 d0             	mov    %eax,-0x30(%ebp)f01012612058,90045
f0101264:	83 c4 10             	add    $0x10,%espf01012642059,90101
f0101267:	85 c0                	test   %eax,%eaxf01012672060,90151
f0101269:	0f 84 16 02 00 00    	je     f0101485 <mem_init+0x78d>f01012692061,90200
f010126f:	3b 7d d4             	cmp    -0x2c(%ebp),%edif010126f2063,90293
f0101272:	0f 84 2c 02 00 00    	je     f01014a4 <mem_init+0x7ac>f01012722064,90349
f0101278:	8b 45 d0             	mov    -0x30(%ebp),%eaxf01012782066,90456
f010127b:	39 c7                	cmp    %eax,%edif010127b2067,90512
f010127d:	0f 84 40 02 00 00    	je     f01014c3 <mem_init+0x7cb>f010127d2068,90561
f0101283:	39 45 d4             	cmp    %eax,-0x2c(%ebp)f01012832069,90626
f0101286:	0f 84 37 02 00 00    	je     f01014c3 <mem_init+0x7cb>f01012862070,90682
f010128c:	83 ec 0c             	sub    $0xc,%espf010128c2072,90772
f010128f:	6a 00                	push   $0x0f010128f2073,90821
f0101291:	e8 68 f9 ff ff       	call   f0100bfe <page_alloc>f01012912074,90865
f0101296:	83 c4 10             	add    $0x10,%espf01012962075,90926
f0101299:	85 c0                	test   %eax,%eaxf01012992076,90976
f010129b:	0f 85 41 02 00 00    	jne    f01014e2 <mem_init+0x7ea>f010129b2077,91025
f01012a1:	89 f8                	mov    %edi,%eaxf01012a12079,91125
f01012a3:	e8 96 f7 ff ff       	call   f0100a3e <page2kva>f01012a32080,91174
f01012a8:	83 ec 04             	sub    $0x4,%espf01012a82081,91233
f01012ab:	68 00 10 00 00       	push   $0x1000f01012ab2082,91282
f01012b0:	6a 01                	push   $0x1f01012b02083,91329
f01012b2:	50                   	push   %eaxf01012b22084,91373
f01012b3:	e8 74 10 00 00       	call   f010232c <memset>f01012b32085,91417
f01012b8:	89 3c 24             	mov    %edi,(%esp)f01012b82087,91491
f01012bb:	e8 cc f9 ff ff       	call   f0100c8c <page_free>f01012bb2088,91542
f01012c0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)f01012c02090,91642
f01012c7:	e8 32 f9 ff ff       	call   f0100bfe <page_alloc>f01012c72091,91693
f01012cc:	83 c4 10             	add    $0x10,%espf01012cc2092,91754
f01012cf:	85 c0                	test   %eax,%eaxf01012cf2093,91804
f01012d1:	0f 84 2a 02 00 00    	je     f0101501 <mem_init+0x809>f01012d12094,91853
f01012d7:	39 c7                	cmp    %eax,%edif01012d72096,91944
f01012d9:	0f 85 41 02 00 00    	jne    f0101520 <mem_init+0x828>f01012d92097,91993
	c = page2kva(pp);c2098,92058
f01012df:	e8 5a f7 ff ff       	call   f0100a3e <page2kva>f01012df2099,92077
f01012e4:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edxf01012e42100,92136
f01012ea:	80 38 00             	cmpb   $0x0,(%eax)f01012ea2102,92214
f01012ed:	0f 85 4c 02 00 00    	jne    f010153f <mem_init+0x847>f01012ed2103,92265
f01012f3:	83 c0 01             	add    $0x1,%eaxf01012f32104,92330
f01012f6:	39 c2                	cmp    %eax,%edxf01012f62106,92409
f01012f8:	75 f0                	jne    f01012ea <mem_init+0x5f2>f01012f82107,92458
	page_free_list = fl;page_free_list2108,92523
f01012fa:	8b 45 cc             	mov    -0x34(%ebp),%eaxf01012fa2109,92545
f01012fd:	89 83 94 1f 00 00    	mov    %eax,0x1f94(%ebx)f01012fd2110,92601
f0101303:	83 ec 0c             	sub    $0xc,%espf01013032112,92675
f0101306:	57                   	push   %edif01013062113,92724
f0101307:	e8 80 f9 ff ff       	call   f0100c8c <page_free>f01013072114,92768
f010130c:	83 c4 04             	add    $0x4,%espf010130c2116,92845
f010130f:	ff 75 d4             	pushl  -0x2c(%ebp)f010130f2117,92894
f0101312:	e8 75 f9 ff ff       	call   f0100c8c <page_free>f01013122118,92945
f0101317:	83 c4 04             	add    $0x4,%espf01013172120,93022
f010131a:	ff 75 d0             	pushl  -0x30(%ebp)f010131a2121,93071
f010131d:	e8 6a f9 ff ff       	call   f0100c8c <page_free>f010131d2122,93122
f0101322:	8b 83 94 1f 00 00    	mov    0x1f94(%ebx),%eaxf01013222124,93231
f0101328:	83 c4 10             	add    $0x10,%espf01013282125,93288
f010132b:	e9 33 02 00 00       	jmp    f0101563 <mem_init+0x86b>f010132b2126,93338
f0101330:	8d 83 29 ec fe ff    	lea    -0x113d7(%ebx),%eaxf01013302128,93435
f0101336:	50                   	push   %eaxf01013362129,93494
f0101337:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01013372130,93538
f010133d:	50                   	push   %eaxf010133d2131,93597
f010133e:	68 2b 02 00 00       	push   $0x22bf010133e2132,93641
f0101343:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01013432133,93687
f0101349:	50                   	push   %eaxf01013492134,93746
f010134a:	e8 4a ed ff ff       	call   f0100099 <_panic>f010134a2135,93790
f010134f:	8d 83 3f ec fe ff    	lea    -0x113c1(%ebx),%eaxf010134f2137,93879
f0101355:	50                   	push   %eaxf01013552138,93938
f0101356:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01013562139,93982
f010135c:	50                   	push   %eaxf010135c2140,94041
f010135d:	68 2c 02 00 00       	push   $0x22cf010135d2141,94085
f0101362:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01013622142,94131
f0101368:	50                   	push   %eaxf01013682143,94190
f0101369:	e8 2b ed ff ff       	call   f0100099 <_panic>f01013692144,94234
f010136e:	8d 83 55 ec fe ff    	lea    -0x113ab(%ebx),%eaxf010136e2146,94323
f0101374:	50                   	push   %eaxf01013742147,94382
f0101375:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01013752148,94426
f010137b:	50                   	push   %eaxf010137b2149,94485
f010137c:	68 2d 02 00 00       	push   $0x22df010137c2150,94529
f0101381:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01013812151,94575
f0101387:	50                   	push   %eaxf01013872152,94634
f0101388:	e8 0c ed ff ff       	call   f0100099 <_panic>f01013882153,94678
f010138d:	8d 83 6b ec fe ff    	lea    -0x11395(%ebx),%eaxf010138d2155,94763
f0101393:	50                   	push   %eaxf01013932156,94822
f0101394:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01013942157,94866
f010139a:	50                   	push   %eaxf010139a2158,94925
f010139b:	68 30 02 00 00       	push   $0x230f010139b2159,94969
f01013a0:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01013a02160,95015
f01013a6:	50                   	push   %eaxf01013a62161,95074
f01013a7:	e8 ed ec ff ff       	call   f0100099 <_panic>f01013a72162,95118
f01013ac:	8d 83 e8 ea fe ff    	lea    -0x11518(%ebx),%eaxf01013ac2164,95217
f01013b2:	50                   	push   %eaxf01013b22165,95276
f01013b3:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01013b32166,95320
f01013b9:	50                   	push   %eaxf01013b92167,95379
f01013ba:	68 31 02 00 00       	push   $0x231f01013ba2168,95423
f01013bf:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01013bf2169,95469
f01013c5:	50                   	push   %eaxf01013c52170,95528
f01013c6:	e8 ce ec ff ff       	call   f0100099 <_panic>f01013c62171,95572
f01013cb:	8d 83 7d ec fe ff    	lea    -0x11383(%ebx),%eaxf01013cb2173,95668
f01013d1:	50                   	push   %eaxf01013d12174,95727
f01013d2:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01013d22175,95771
f01013d8:	50                   	push   %eaxf01013d82176,95830
f01013d9:	68 32 02 00 00       	push   $0x232f01013d92177,95874
f01013de:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01013de2178,95920
f01013e4:	50                   	push   %eaxf01013e42179,95979
f01013e5:	e8 af ec ff ff       	call   f0100099 <_panic>f01013e52180,96023
f01013ea:	8d 83 9a ec fe ff    	lea    -0x11366(%ebx),%eaxf01013ea2182,96119
f01013f0:	50                   	push   %eaxf01013f02183,96178
f01013f1:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01013f12184,96222
f01013f7:	50                   	push   %eaxf01013f72185,96281
f01013f8:	68 33 02 00 00       	push   $0x233f01013f82186,96325
f01013fd:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01013fd2187,96371
f0101403:	50                   	push   %eaxf01014032188,96430
f0101404:	e8 90 ec ff ff       	call   f0100099 <_panic>f01014042189,96474
f0101409:	8d 83 b7 ec fe ff    	lea    -0x11349(%ebx),%eaxf01014092191,96570
f010140f:	50                   	push   %eaxf010140f2192,96629
f0101410:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01014102193,96673
f0101416:	50                   	push   %eaxf01014162194,96732
f0101417:	68 34 02 00 00       	push   $0x234f01014172195,96776
f010141c:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf010141c2196,96822
f0101422:	50                   	push   %eaxf01014222197,96881
f0101423:	e8 71 ec ff ff       	call   f0100099 <_panic>f01014232198,96925
f0101428:	8d 83 d4 ec fe ff    	lea    -0x1132c(%ebx),%eaxf01014282200,97007
f010142e:	50                   	push   %eaxf010142e2201,97066
f010142f:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf010142f2202,97110
f0101435:	50                   	push   %eaxf01014352203,97169
f0101436:	68 3b 02 00 00       	push   $0x23bf01014362204,97213
f010143b:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf010143b2205,97259
f0101441:	50                   	push   %eaxf01014412206,97318
f0101442:	e8 52 ec ff ff       	call   f0100099 <_panic>f01014422207,97362
f0101447:	8d 83 29 ec fe ff    	lea    -0x113d7(%ebx),%eaxf01014472209,97451
f010144d:	50                   	push   %eaxf010144d2210,97510
f010144e:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf010144e2211,97554
f0101454:	50                   	push   %eaxf01014542212,97613
f0101455:	68 42 02 00 00       	push   $0x242f01014552213,97657
f010145a:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf010145a2214,97703
f0101460:	50                   	push   %eaxf01014602215,97762
f0101461:	e8 33 ec ff ff       	call   f0100099 <_panic>f01014612216,97806
f0101466:	8d 83 3f ec fe ff    	lea    -0x113c1(%ebx),%eaxf01014662218,97895
f010146c:	50                   	push   %eaxf010146c2219,97954
f010146d:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf010146d2220,97998
f0101473:	50                   	push   %eaxf01014732221,98057
f0101474:	68 43 02 00 00       	push   $0x243f01014742222,98101
f0101479:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01014792223,98147
f010147f:	50                   	push   %eaxf010147f2224,98206
f0101480:	e8 14 ec ff ff       	call   f0100099 <_panic>f01014802225,98250
f0101485:	8d 83 55 ec fe ff    	lea    -0x113ab(%ebx),%eaxf01014852227,98339
f010148b:	50                   	push   %eaxf010148b2228,98398
f010148c:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf010148c2229,98442
f0101492:	50                   	push   %eaxf01014922230,98501
f0101493:	68 44 02 00 00       	push   $0x244f01014932231,98545
f0101498:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01014982232,98591
f010149e:	50                   	push   %eaxf010149e2233,98650
f010149f:	e8 f5 eb ff ff       	call   f0100099 <_panic>f010149f2234,98694
f01014a4:	8d 83 6b ec fe ff    	lea    -0x11395(%ebx),%eaxf01014a42236,98779
f01014aa:	50                   	push   %eaxf01014aa2237,98838
f01014ab:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01014ab2238,98882
f01014b1:	50                   	push   %eaxf01014b12239,98941
f01014b2:	68 46 02 00 00       	push   $0x246f01014b22240,98985
f01014b7:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01014b72241,99031
f01014bd:	50                   	push   %eaxf01014bd2242,99090
f01014be:	e8 d6 eb ff ff       	call   f0100099 <_panic>f01014be2243,99134
f01014c3:	8d 83 e8 ea fe ff    	lea    -0x11518(%ebx),%eaxf01014c32245,99233
f01014c9:	50                   	push   %eaxf01014c92246,99292
f01014ca:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01014ca2247,99336
f01014d0:	50                   	push   %eaxf01014d02248,99395
f01014d1:	68 47 02 00 00       	push   $0x247f01014d12249,99439
f01014d6:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01014d62250,99485
f01014dc:	50                   	push   %eaxf01014dc2251,99544
f01014dd:	e8 b7 eb ff ff       	call   f0100099 <_panic>f01014dd2252,99588
f01014e2:	8d 83 d4 ec fe ff    	lea    -0x1132c(%ebx),%eaxf01014e22254,99670
f01014e8:	50                   	push   %eaxf01014e82255,99729
f01014e9:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01014e92256,99773
f01014ef:	50                   	push   %eaxf01014ef2257,99832
f01014f0:	68 48 02 00 00       	push   $0x248f01014f02258,99876
f01014f5:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01014f52259,99922
f01014fb:	50                   	push   %eaxf01014fb2260,99981
f01014fc:	e8 98 eb ff ff       	call   f0100099 <_panic>f01014fc2261,100025
f0101501:	8d 83 e3 ec fe ff    	lea    -0x1131d(%ebx),%eaxf01015012263,100122
f0101507:	50                   	push   %eaxf01015072264,100181
f0101508:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01015082265,100225
f010150e:	50                   	push   %eaxf010150e2266,100284
f010150f:	68 4d 02 00 00       	push   $0x24df010150f2267,100328
f0101514:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01015142268,100374
f010151a:	50                   	push   %eaxf010151a2269,100433
f010151b:	e8 79 eb ff ff       	call   f0100099 <_panic>f010151b2270,100477
f0101520:	8d 83 01 ed fe ff    	lea    -0x112ff(%ebx),%eaxf01015202272,100560
f0101526:	50                   	push   %eaxf01015262273,100619
f0101527:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01015272274,100663
f010152d:	50                   	push   %eaxf010152d2275,100722
f010152e:	68 4e 02 00 00       	push   $0x24ef010152e2276,100766
f0101533:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01015332277,100812
f0101539:	50                   	push   %eaxf01015392278,100871
f010153a:	e8 5a eb ff ff       	call   f0100099 <_panic>f010153a2279,100915
f010153f:	8d 83 11 ed fe ff    	lea    -0x112ef(%ebx),%eaxf010153f2281,100993
f0101545:	50                   	push   %eaxf01015452282,101052
f0101546:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01015462283,101096
f010154c:	50                   	push   %eaxf010154c2284,101155
f010154d:	68 51 02 00 00       	push   $0x251f010154d2285,101199
f0101552:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01015522286,101245
f0101558:	50                   	push   %eaxf01015582287,101304
f0101559:	e8 3b eb ff ff       	call   f0100099 <_panic>f01015592288,101348
f010155e:	83 ee 01             	sub    $0x1,%esif010155e2290,101416
f0101561:	8b 00                	mov    (%eax),%eaxf01015612292,101514
f0101563:	85 c0                	test   %eax,%eaxf01015632293,101565
f0101565:	75 f7                	jne    f010155e <mem_init+0x866>f01015652294,101614
f0101567:	85 f6                	test   %esi,%esif01015672296,101700
f0101569:	0f 85 83 00 00 00    	jne    f01015f2 <mem_init+0x8fa>f01015692297,101749
f010156f:	83 ec 0c             	sub    $0xc,%espf010156f2299,101859
f0101572:	8d 83 08 eb fe ff    	lea    -0x114f8(%ebx),%eaxf01015722300,101908
f0101578:	50                   	push   %eaxf01015782301,101967
f0101579:	e8 52 02 00 00       	call   f01017d0 <cprintf>f01015792302,102011
	pp0 = pp1 = pp2 = 0;pp02307,102150
f010157e:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)f010157e2309,102204
f0101585:	e8 74 f6 ff ff       	call   f0100bfe <page_alloc>f01015852310,102255
f010158a:	89 c7                	mov    %eax,%edif010158a2311,102316
f010158c:	83 c4 10             	add    $0x10,%espf010158c2312,102365
f010158f:	85 c0                	test   %eax,%eaxf010158f2313,102415
f0101591:	74 7e                	je     f0101611 <mem_init+0x919>f01015912314,102464
f0101593:	83 ec 0c             	sub    $0xc,%espf01015932316,102561
f0101596:	6a 00                	push   $0x0f01015962317,102610
f0101598:	e8 61 f6 ff ff       	call   f0100bfe <page_alloc>f01015982318,102654
f010159d:	89 c6                	mov    %eax,%esif010159d2319,102715
f010159f:	83 c4 10             	add    $0x10,%espf010159f2320,102764
f01015a2:	85 c0                	test   %eax,%eaxf01015a22321,102814
f01015a4:	0f 84 86 00 00 00    	je     f0101630 <mem_init+0x938>f01015a42322,102863
f01015aa:	83 ec 0c             	sub    $0xc,%espf01015aa2324,102960
f01015ad:	6a 00                	push   $0x0f01015ad2325,103009
f01015af:	e8 4a f6 ff ff       	call   f0100bfe <page_alloc>f01015af2326,103053
f01015b4:	83 c4 10             	add    $0x10,%espf01015b42327,103114
f01015b7:	85 c0                	test   %eax,%eaxf01015b72328,103164
f01015b9:	0f 84 90 00 00 00    	je     f010164f <mem_init+0x957>f01015b92329,103213
f01015bf:	39 f7                	cmp    %esi,%edif01015bf2333,103321
f01015c1:	0f 84 a7 00 00 00    	je     f010166e <mem_init+0x976>f01015c12334,103370
f01015c7:	39 c7                	cmp    %eax,%edif01015c72336,103477
f01015c9:	74 08                	je     f01015d3 <mem_init+0x8db>f01015c92337,103526
f01015cb:	39 c6                	cmp    %eax,%esif01015cb2338,103591
f01015cd:	0f 85 ba 00 00 00    	jne    f010168d <mem_init+0x995>f01015cd2339,103640
f01015d3:	8d 83 e8 ea fe ff    	lea    -0x11518(%ebx),%eaxf01015d32340,103705
f01015d9:	50                   	push   %eaxf01015d92341,103764
f01015da:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01015da2342,103808
f01015e0:	50                   	push   %eaxf01015e02343,103867
f01015e1:	68 bd 02 00 00       	push   $0x2bdf01015e12344,103911
f01015e6:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01015e62345,103957
f01015ec:	50                   	push   %eaxf01015ec2346,104016
f01015ed:	e8 a7 ea ff ff       	call   f0100099 <_panic>f01015ed2347,104060
f01015f2:	8d 83 1b ed fe ff    	lea    -0x112e5(%ebx),%eaxf01015f22349,104138
f01015f8:	50                   	push   %eaxf01015f82350,104197
f01015f9:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01015f92351,104241
f01015ff:	50                   	push   %eaxf01015ff2352,104300
f0101600:	68 5e 02 00 00       	push   $0x25ef01016002353,104344
f0101605:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01016052354,104390
f010160b:	50                   	push   %eaxf010160b2355,104449
f010160c:	e8 88 ea ff ff       	call   f0100099 <_panic>f010160c2356,104493
f0101611:	8d 83 29 ec fe ff    	lea    -0x113d7(%ebx),%eaxf01016112358,104582
f0101617:	50                   	push   %eaxf01016172359,104641
f0101618:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01016182360,104685
f010161e:	50                   	push   %eaxf010161e2361,104744
f010161f:	68 b7 02 00 00       	push   $0x2b7f010161f2362,104788
f0101624:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01016242363,104834
f010162a:	50                   	push   %eaxf010162a2364,104893
f010162b:	e8 69 ea ff ff       	call   f0100099 <_panic>f010162b2365,104937
f0101630:	8d 83 3f ec fe ff    	lea    -0x113c1(%ebx),%eaxf01016302367,105026
f0101636:	50                   	push   %eaxf01016362368,105085
f0101637:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01016372369,105129
f010163d:	50                   	push   %eaxf010163d2370,105188
f010163e:	68 b8 02 00 00       	push   $0x2b8f010163e2371,105232
f0101643:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01016432372,105278
f0101649:	50                   	push   %eaxf01016492373,105337
f010164a:	e8 4a ea ff ff       	call   f0100099 <_panic>f010164a2374,105381
f010164f:	8d 83 55 ec fe ff    	lea    -0x113ab(%ebx),%eaxf010164f2376,105470
f0101655:	50                   	push   %eaxf01016552377,105529
f0101656:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01016562378,105573
f010165c:	50                   	push   %eaxf010165c2379,105632
f010165d:	68 b9 02 00 00       	push   $0x2b9f010165d2380,105676
f0101662:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01016622381,105722
f0101668:	50                   	push   %eaxf01016682382,105781
f0101669:	e8 2b ea ff ff       	call   f0100099 <_panic>f01016692383,105825
f010166e:	8d 83 6b ec fe ff    	lea    -0x11395(%ebx),%eaxf010166e2385,105910
f0101674:	50                   	push   %eaxf01016742386,105969
f0101675:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01016752387,106013
f010167b:	50                   	push   %eaxf010167b2388,106072
f010167c:	68 bc 02 00 00       	push   $0x2bcf010167c2389,106116
f0101681:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01016812390,106162
f0101687:	50                   	push   %eaxf01016872391,106221
f0101688:	e8 0c ea ff ff       	call   f0100099 <_panic>f01016882392,106265
	fl = page_free_list;fl2395,106372
	page_free_list = 0;page_free_list2396,106394
f010168d:	c7 83 94 1f 00 00 00 	movl   $0x0,0x1f94(%ebx)f010168d2397,106415
f0101694:	00 00 00 f01016942398,106472
f0101697:	83 ec 0c             	sub    $0xc,%espf01016972402,106547
f010169a:	6a 00                	push   $0x0f010169a2403,106596
f010169c:	e8 5d f5 ff ff       	call   f0100bfe <page_alloc>f010169c2404,106640
f01016a1:	83 c4 10             	add    $0x10,%espf01016a12405,106701
f01016a4:	85 c0                	test   %eax,%eaxf01016a42406,106751
f01016a6:	74 1f                	je     f01016c7 <mem_init+0x9cf>f01016a62407,106800
f01016a8:	8d 83 d4 ec fe ff    	lea    -0x1132c(%ebx),%eaxf01016a82408,106865
f01016ae:	50                   	push   %eaxf01016ae2409,106924
f01016af:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01016af2410,106968
f01016b5:	50                   	push   %eaxf01016b52411,107027
f01016b6:	68 c4 02 00 00       	push   $0x2c4f01016b62412,107071
f01016bb:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01016bb2413,107117
f01016c1:	50                   	push   %eaxf01016c12414,107176
f01016c2:	e8 d2 e9 ff ff       	call   f0100099 <_panic>f01016c22415,107220
f01016c7:	8d 83 28 eb fe ff    	lea    -0x114d8(%ebx),%eaxf01016c72422,107504
f01016cd:	50                   	push   %eaxf01016cd2423,107563
f01016ce:	8d 83 7e eb fe ff    	lea    -0x11482(%ebx),%eaxf01016ce2424,107607
f01016d4:	50                   	push   %eaxf01016d42425,107666
f01016d5:	68 ca 02 00 00       	push   $0x2caf01016d52426,107710
f01016da:	8d 83 58 eb fe ff    	lea    -0x114a8(%ebx),%eaxf01016da2427,107756
f01016e0:	50                   	push   %eaxf01016e02428,107815
f01016e1:	e8 b3 e9 ff ff       	call   f0100099 <_panic>f01016e12429,107859
f01016e6 <page_decref>:f01016e62431,107917
f01016e6:	55                   	push   %ebpf01016e62433,107943
f01016e7:	89 e5                	mov    %esp,%ebpf01016e72434,107987
f01016e9:	83 ec 08             	sub    $0x8,%espf01016e92435,108036
f01016ec:	8b 55 08             	mov    0x8(%ebp),%edxf01016ec2436,108085
f01016ef:	0f b7 42 04          	movzwl 0x4(%edx),%eaxf01016ef2438,108163
f01016f3:	83 e8 01             	sub    $0x1,%eaxf01016f32439,108217
f01016f6:	66 89 42 04          	mov    %ax,0x4(%edx)f01016f62440,108266
f01016fa:	66 85 c0             	test   %ax,%axf01016fa2441,108319
f01016fd:	74 02                	je     f0101701 <page_decref+0x1b>f01016fd2442,108366
f01016ff:	c9                   	leave  f01016ff2444,108435
f0101700:	c3                   	ret    f01017002445,108475
f0101701:	83 ec 0c             	sub    $0xc,%espf01017012447,108532
f0101704:	52                   	push   %edxf01017042448,108581
f0101705:	e8 82 f5 ff ff       	call   f0100c8c <page_free>f01017052449,108625
f010170a:	83 c4 10             	add    $0x10,%espf010170a2450,108685
f010170d:	eb f0                	jmp    f01016ff <page_decref+0x19>f010170d2452,108737
f010170f <pgdir_walk>:f010170f2454,108805
f010170f:	55                   	push   %ebpf010170f2456,108830
f0101710:	89 e5                	mov    %esp,%ebpf01017102457,108874
f0101712:	b8 00 00 00 00       	mov    $0x0,%eaxf01017122459,108925
f0101717:	5d                   	pop    %ebpf01017172460,108974
f0101718:	c3                   	ret    f01017182461,109018
f0101719 <page_insert>:f01017192463,109059
f0101719:	55                   	push   %ebpf01017192465,109085
f010171a:	89 e5                	mov    %esp,%ebpf010171a2466,109129
f010171c:	b8 00 00 00 00       	mov    $0x0,%eaxf010171c2468,109180
f0101721:	5d                   	pop    %ebpf01017212469,109229
f0101722:	c3                   	ret    f01017222470,109273
f0101723 <page_lookup>:f01017232472,109314
f0101723:	55                   	push   %ebpf01017232474,109340
f0101724:	89 e5                	mov    %esp,%ebpf01017242475,109384
f0101726:	b8 00 00 00 00       	mov    $0x0,%eaxf01017262477,109435
f010172b:	5d                   	pop    %ebpf010172b2478,109484
f010172c:	c3                   	ret    f010172c2479,109528
f010172d <page_remove>:f010172d2481,109569
f010172d:	55                   	push   %ebpf010172d2483,109595
f010172e:	89 e5                	mov    %esp,%ebpf010172e2484,109639
f0101730:	5d                   	pop    %ebpf01017302486,109690
f0101731:	c3                   	ret    f01017312487,109734
f0101732 <tlb_invalidate>:f01017322489,109775
f0101732:	55                   	push   %ebpf01017322491,109804
f0101733:	89 e5                	mov    %esp,%ebpf01017332492,109848
static inline voidstatic2495,109900
f0101735:	8b 45 0c             	mov    0xc(%ebp),%eaxf01017352499,109996
f0101738:	0f 01 38             	invlpg (%eax)f01017382500,110050
f010173b:	5d                   	pop    %ebpf010173b2502,110098
f010173c:	c3                   	ret    f010173c2503,110142
f010173d <__x86.get_pc_thunk.dx>:f010173d2505,110183
f010173d:	8b 14 24             	mov    (%esp),%edxf010173d2506,110217
f0101740:	c3                   	ret    f01017402507,110268
f0101741 <__x86.get_pc_thunk.cx>:f01017412509,110309
f0101741:	8b 0c 24             	mov    (%esp),%ecxf01017412510,110343
f0101744:	c3                   	ret    f01017442511,110394
f0101745 <__x86.get_pc_thunk.si>:f01017452513,110435
f0101745:	8b 34 24             	mov    (%esp),%esif01017452514,110469
f0101748:	c3                   	ret    f01017482515,110520
f0101749 <mc146818_read>:f01017492517,110561
unsignedunsigned2521,110614
f0101749:	55                   	push   %ebpf01017492524,110653
f010174a:	89 e5                	mov    %esp,%ebpf010174a2525,110697
f010174c:	8b 45 08             	mov    0x8(%ebp),%eaxf010174c2527,110803
f010174f:	ba 70 00 00 00       	mov    $0x70,%edxf010174f2528,110857
f0101754:	ee                   	out    %al,(%dx)f01017542529,110907
f0101755:	ba 71 00 00 00       	mov    $0x71,%edxf01017552531,111012
f010175a:	ec                   	in     (%dx),%alf010175a2532,111062
f010175b:	0f b6 c0             	movzbl %al,%eaxf010175b2535,111154
f010175e:	5d                   	pop    %ebpf010175e2537,111204
f010175f:	c3                   	ret    f010175f2538,111248
f0101760 <mc146818_write>:f01017602540,111289
voidvoid2542,111317
f0101760:	55                   	push   %ebpf01017602545,111369
f0101761:	89 e5                	mov    %esp,%ebpf01017612546,111413
f0101763:	8b 45 08             	mov    0x8(%ebp),%eaxf01017632548,111519
f0101766:	ba 70 00 00 00       	mov    $0x70,%edxf01017662549,111573
f010176b:	ee                   	out    %al,(%dx)f010176b2550,111623
f010176c:	8b 45 0c             	mov    0xc(%ebp),%eaxf010176c2551,111672
f010176f:	ba 71 00 00 00       	mov    $0x71,%edxf010176f2552,111726
f0101774:	ee                   	out    %al,(%dx)f01017742553,111776
f0101775:	5d                   	pop    %ebpf01017752557,111871
f0101776:	c3                   	ret    f01017762558,111915
f0101777 <putch>:f01017772560,111956
static voidstatic2564,112000
f0101777:	55                   	push   %ebpf01017772567,112038
f0101778:	89 e5                	mov    %esp,%ebpf01017782568,112082
f010177a:	53                   	push   %ebxf010177a2569,112131
f010177b:	83 ec 10             	sub    $0x10,%espf010177b2570,112175
f010177e:	e8 cc e9 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f010177e2571,112225
f0101783:	81 c3 85 2b 01 00    	add    $0x12b85,%ebxf01017832572,112297
f0101789:	ff 75 08             	pushl  0x8(%ebp)f01017892574,112365
f010178c:	e8 35 ef ff ff       	call   f01006c6 <cputchar>f010178c2575,112414
f0101791:	83 c4 10             	add    $0x10,%espf01017912578,112484
f0101794:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01017942579,112534
f0101797:	c9                   	leave  f01017972580,112589
f0101798:	c3                   	ret    f01017982581,112629
f0101799 <vcprintf>:f01017992583,112670
intint2585,112692
f0101799:	55                   	push   %ebpf01017992588,112736
f010179a:	89 e5                	mov    %esp,%ebpf010179a2589,112780
f010179c:	53                   	push   %ebxf010179c2590,112829
f010179d:	83 ec 14             	sub    $0x14,%espf010179d2591,112873
f01017a0:	e8 aa e9 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01017a02592,112923
f01017a5:	81 c3 63 2b 01 00    	add    $0x12b63,%ebxf01017a52593,112995
f01017ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f01017ab2595,113062
f01017b2:	ff 75 0c             	pushl  0xc(%ebp)f01017b22598,113159
f01017b5:	ff 75 08             	pushl  0x8(%ebp)f01017b52599,113208
f01017b8:	8d 45 f4             	lea    -0xc(%ebp),%eaxf01017b82600,113257
f01017bb:	50                   	push   %eaxf01017bb2601,113312
f01017bc:	8d 83 6f d4 fe ff    	lea    -0x12b91(%ebx),%eaxf01017bc2602,113356
f01017c2:	50                   	push   %eaxf01017c22603,113415
f01017c3:	e8 18 04 00 00       	call   f0101be0 <vprintfmt>f01017c32604,113459
f01017c8:	8b 45 f4             	mov    -0xc(%ebp),%eaxf01017c82607,113534
f01017cb:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01017cb2608,113589
f01017ce:	c9                   	leave  f01017ce2609,113644
f01017cf:	c3                   	ret    f01017cf2610,113684
f01017d0 <cprintf>:f01017d02612,113725
intint2614,113746
f01017d0:	55                   	push   %ebpf01017d02617,113782
f01017d1:	89 e5                	mov    %esp,%ebpf01017d12618,113826
f01017d3:	83 ec 10             	sub    $0x10,%espf01017d32619,113875
f01017d6:	8d 45 0c             	lea    0xc(%ebp),%eaxf01017d62624,113969
	cnt = vcprintf(fmt, ap);cnt2625,114023
f01017d9:	50                   	push   %eaxf01017d92626,114049
f01017da:	ff 75 08             	pushl  0x8(%ebp)f01017da2627,114093
f01017dd:	e8 b7 ff ff ff       	call   f0101799 <vcprintf>f01017dd2628,114142
f01017e2:	c9                   	leave  f01017e22633,114230
f01017e3:	c3                   	ret    f01017e32634,114270
f01017e4 <stab_binsearch>:f01017e42636,114311
static voidstatic2639,114387
f01017e4:	55                   	push   %ebpf01017e42643,114513
f01017e5:	89 e5                	mov    %esp,%ebpf01017e52644,114557
f01017e7:	57                   	push   %edif01017e72645,114606
f01017e8:	56                   	push   %esif01017e82646,114650
f01017e9:	53                   	push   %ebxf01017e92647,114694
f01017ea:	83 ec 14             	sub    $0x14,%espf01017ea2648,114738
f01017ed:	89 45 ec             	mov    %eax,-0x14(%ebp)f01017ed2649,114788
f01017f0:	89 55 e4             	mov    %edx,-0x1c(%ebp)f01017f02650,114844
f01017f3:	89 4d e0             	mov    %ecx,-0x20(%ebp)f01017f32651,114900
f01017f6:	8b 7d 08             	mov    0x8(%ebp),%edif01017f62652,114956
f01017f9:	8b 32                	mov    (%edx),%esif01017f92654,115069
f01017fb:	8b 01                	mov    (%ecx),%eaxf01017fb2655,115120
f01017fd:	89 45 f0             	mov    %eax,-0x10(%ebp)f01017fd2656,115171
f0101800:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)f01018002657,115227
f0101807:	eb 2f                	jmp    f0101838 <stab_binsearch+0x54>f01018072660,115302
f0101809:	83 e8 01             	sub    $0x1,%eaxf01018092666,115511
f010180c:	39 c6                	cmp    %eax,%esif010180c2668,115604
f010180e:	7f 49                	jg     f0101859 <stab_binsearch+0x75>f010180e2669,115653
f0101810:	0f b6 0a             	movzbl (%edx),%ecxf01018102670,115723
f0101813:	83 ea 0c             	sub    $0xc,%edxf01018132671,115774
f0101816:	39 f9                	cmp    %edi,%ecxf01018162672,115823
f0101818:	75 ef                	jne    f0101809 <stab_binsearch+0x25>f01018182673,115872
		any_matches = 1;any_matches2678,115986
f010181a:	8d 14 40             	lea    (%eax,%eax,2),%edxf010181a2680,116038
f010181d:	8b 4d ec             	mov    -0x14(%ebp),%ecxf010181d2681,116096
f0101820:	8b 54 91 08          	mov    0x8(%ecx,%edx,4),%edxf01018202682,116152
f0101824:	3b 55 0c             	cmp    0xc(%ebp),%edxf01018242683,116213
f0101827:	73 35                	jae    f010185e <stab_binsearch+0x7a>f01018272684,116267
f0101829:	8b 75 e4             	mov    -0x1c(%ebp),%esif01018292686,116358
f010182c:	89 06                	mov    %eax,(%esi)f010182c2687,116414
			l = true_m + 1;l2688,116465
f010182e:	8d 73 01             	lea    0x1(%ebx),%esif010182e2689,116484
		any_matches = 1;any_matches2690,116538
f0101831:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01018312691,116557
f0101838:	3b 75 f0             	cmp    -0x10(%ebp),%esif01018382693,116631
f010183b:	7f 4e                	jg     f010188b <stab_binsearch+0xa7>f010183b2694,116687
f010183d:	8b 45 f0             	mov    -0x10(%ebp),%eaxf010183d2696,116797
f0101840:	01 f0                	add    %esi,%eaxf01018402697,116853
f0101842:	89 c3                	mov    %eax,%ebxf01018422698,116902
f0101844:	c1 eb 1f             	shr    $0x1f,%ebxf01018442699,116951
f0101847:	01 c3                	add    %eax,%ebxf01018472700,117001
f0101849:	d1 fb                	sar    %ebxf01018492701,117050
f010184b:	8d 04 5b             	lea    (%ebx,%ebx,2),%eaxf010184b2702,117094
f010184e:	8b 4d ec             	mov    -0x14(%ebp),%ecxf010184e2703,117152
f0101851:	8d 54 81 04          	lea    0x4(%ecx,%eax,4),%edxf01018512704,117208
f0101855:	89 d8                	mov    %ebx,%eaxf01018552705,117269
f0101857:	eb b3                	jmp    f010180c <stab_binsearch+0x28>f01018572707,117362
			l = true_m + 1;l2708,117432
f0101859:	8d 73 01             	lea    0x1(%ebx),%esif01018592709,117451
f010185c:	eb da                	jmp    f0101838 <stab_binsearch+0x54>f010185c2711,117518
f010185e:	3b 55 0c             	cmp    0xc(%ebp),%edxf010185e2713,117628
f0101861:	76 14                	jbe    f0101877 <stab_binsearch+0x93>f01018612714,117682
f0101863:	83 e8 01             	sub    $0x1,%eaxf01018632716,117778
f0101866:	89 45 f0             	mov    %eax,-0x10(%ebp)f01018662717,117827
f0101869:	8b 5d e0             	mov    -0x20(%ebp),%ebxf01018692718,117883
f010186c:	89 03                	mov    %eax,(%ebx)f010186c2719,117939
		any_matches = 1;any_matches2720,117990
f010186e:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f010186e2721,118009
f0101875:	eb c1                	jmp    f0101838 <stab_binsearch+0x54>f01018752722,118065
			r = m - 1;r2723,118135
f0101877:	8b 75 e4             	mov    -0x1c(%ebp),%esif01018772728,118257
f010187a:	89 06                	mov    %eax,(%esi)f010187a2729,118313
			l = m;l2730,118364
f010187c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)f010187c2732,118385
f0101880:	89 c6                	mov    %eax,%esif01018802733,118439
		any_matches = 1;any_matches2734,118488
f0101882:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)f01018822735,118507
f0101889:	eb ad                	jmp    f0101838 <stab_binsearch+0x54>f01018892736,118563
f010188b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)f010188b2741,118660
f010188f:	74 16                	je     f01018a7 <stab_binsearch+0xc3>f010188f2742,118716
f0101891:	8b 45 e0             	mov    -0x20(%ebp),%eaxf01018912747,118901
f0101894:	8b 00                	mov    (%eax),%eaxf01018942748,118957
f0101896:	8b 75 e4             	mov    -0x1c(%ebp),%esif01018962750,119060
f0101899:	8b 0e                	mov    (%esi),%ecxf01018992751,119116
f010189b:	8d 14 40             	lea    (%eax,%eax,2),%edxf010189b2752,119167
f010189e:	8b 75 ec             	mov    -0x14(%ebp),%esif010189e2753,119225
f01018a1:	8d 54 96 04          	lea    0x4(%esi,%edx,4),%edxf01018a12754,119281
f01018a5:	eb 12                	jmp    f01018b9 <stab_binsearch+0xd5>f01018a52756,119368
f01018a7:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf01018a72758,119474
f01018aa:	8b 00                	mov    (%eax),%eaxf01018aa2759,119530
f01018ac:	83 e8 01             	sub    $0x1,%eaxf01018ac2760,119581
f01018af:	8b 7d e0             	mov    -0x20(%ebp),%edif01018af2761,119630
f01018b2:	89 07                	mov    %eax,(%edi)f01018b22762,119686
f01018b4:	eb 16                	jmp    f01018cc <stab_binsearch+0xe8>f01018b42763,119737
f01018b6:	83 e8 01             	sub    $0x1,%eaxf01018b62765,119819
f01018b9:	39 c1                	cmp    %eax,%ecxf01018b92767,119894
f01018bb:	7d 0a                	jge    f01018c7 <stab_binsearch+0xe3>f01018bb2768,119943
f01018bd:	0f b6 1a             	movzbl (%edx),%ebxf01018bd2770,120065
f01018c0:	83 ea 0c             	sub    $0xc,%edxf01018c02771,120116
f01018c3:	39 fb                	cmp    %edi,%ebxf01018c32772,120165
f01018c5:	75 ef                	jne    f01018b6 <stab_binsearch+0xd2>f01018c52773,120214
f01018c7:	8b 7d e4             	mov    -0x1c(%ebp),%edif01018c72776,120325
f01018ca:	89 07                	mov    %eax,(%edi)f01018ca2777,120381
f01018cc:	83 c4 14             	add    $0x14,%espf01018cc2780,120437
f01018cf:	5b                   	pop    %ebxf01018cf2781,120487
f01018d0:	5e                   	pop    %esif01018d02782,120531
f01018d1:	5f                   	pop    %edif01018d12783,120575
f01018d2:	5d                   	pop    %ebpf01018d22784,120619
f01018d3:	c3                   	ret    f01018d32785,120663
f01018d4 <debuginfo_eip>:f01018d42787,120704
intint2791,120834
f01018d4:	55                   	push   %ebpf01018d42794,120897
f01018d5:	89 e5                	mov    %esp,%ebpf01018d52795,120941
f01018d7:	57                   	push   %edif01018d72796,120990
f01018d8:	56                   	push   %esif01018d82797,121034
f01018d9:	53                   	push   %ebxf01018d92798,121078
f01018da:	83 ec 2c             	sub    $0x2c,%espf01018da2799,121122
f01018dd:	e8 5f fe ff ff       	call   f0101741 <__x86.get_pc_thunk.cx>f01018dd2800,121172
f01018e2:	81 c1 26 2a 01 00    	add    $0x12a26,%ecxf01018e22801,121244
f01018e8:	89 4d d4             	mov    %ecx,-0x2c(%ebp)f01018e82802,121297
f01018eb:	8b 5d 08             	mov    0x8(%ebp),%ebxf01018eb2803,121353
f01018ee:	8b 7d 0c             	mov    0xc(%ebp),%edif01018ee2804,121407
	const struct Stab *stabs, *stab_end;const2805,121461
f01018f1:	8d 81 26 ed fe ff    	lea    -0x112da(%ecx),%eaxf01018f12811,121633
f01018f7:	89 07                	mov    %eax,(%edi)f01018f72812,121692
f01018f9:	c7 47 04 00 00 00 00 	movl   $0x0,0x4(%edi)f01018f92814,121764
f0101900:	89 47 08             	mov    %eax,0x8(%edi)f01019002816,121852
f0101903:	c7 47 0c 09 00 00 00 	movl   $0x9,0xc(%edi)f01019032818,121933
f010190a:	89 5f 10             	mov    %ebx,0x10(%edi)f010190a2820,122014
f010190d:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)f010190d2822,122093
f0101914:	81 fb ff ff 7f ef    	cmp    $0xef7fffff,%ebxf01019142826,122205
f010191a:	0f 86 f4 00 00 00    	jbe    f0101a14 <debuginfo_eip+0x140>f010191a2827,122261
f0101920:	c7 c0 25 83 10 f0    	mov    $0xf0108325,%eaxf01019202834,122503
f0101926:	39 81 fc ff ff ff    	cmp    %eax,-0x4(%ecx)f01019262835,122559
f010192c:	0f 86 88 01 00 00    	jbe    f0101aba <debuginfo_eip+0x1e6>f010192c2836,122614
f0101932:	8b 75 d4             	mov    -0x2c(%ebp),%esif01019322837,122684
f0101935:	c7 c0 67 a0 10 f0    	mov    $0xf010a067,%eaxf01019352838,122740
f010193b:	80 78 ff 00          	cmpb   $0x0,-0x1(%eax)f010193b2839,122796
f010193f:	0f 85 7c 01 00 00    	jne    f0101ac1 <debuginfo_eip+0x1ed>f010193f2840,122851
	lfile = 0;lfile2846,123152
f0101945:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)f01019452847,123164
	rfile = (stab_end - stabs) - 1;rfile2848,123220
f010194c:	c7 c0 48 32 10 f0    	mov    $0xf0103248,%eaxf010194c2849,123253
f0101952:	c7 c2 24 83 10 f0    	mov    $0xf0108324,%edxf01019522850,123309
f0101958:	29 c2                	sub    %eax,%edxf01019582851,123365
f010195a:	c1 fa 02             	sar    $0x2,%edxf010195a2852,123414
f010195d:	69 d2 ab aa aa aa    	imul   $0xaaaaaaab,%edx,%edxf010195d2853,123463
f0101963:	83 ea 01             	sub    $0x1,%edxf01019632854,123524
f0101966:	89 55 e0             	mov    %edx,-0x20(%ebp)f01019662855,123573
f0101969:	8d 4d e0             	lea    -0x20(%ebp),%ecxf01019692857,123681
f010196c:	8d 55 e4             	lea    -0x1c(%ebp),%edxf010196c2858,123737
f010196f:	83 ec 08             	sub    $0x8,%espf010196f2859,123793
f0101972:	53                   	push   %ebxf01019722860,123842
f0101973:	6a 64                	push   $0x64f01019732861,123886
f0101975:	e8 6a fe ff ff       	call   f01017e4 <stab_binsearch>f01019752862,123931
f010197a:	8b 45 e4             	mov    -0x1c(%ebp),%eaxf010197a2864,124013
f010197d:	83 c4 10             	add    $0x10,%espf010197d2865,124069
f0101980:	85 c0                	test   %eax,%eaxf01019802866,124119
f0101982:	0f 84 40 01 00 00    	je     f0101ac8 <debuginfo_eip+0x1f4>f01019822867,124168
	lfun = lfile;lfun2872,124329
f0101988:	89 45 dc             	mov    %eax,-0x24(%ebp)f01019882873,124344
	rfun = rfile;rfun2874,124400
f010198b:	8b 45 e0             	mov    -0x20(%ebp),%eaxf010198b2875,124415
f010198e:	89 45 d8             	mov    %eax,-0x28(%ebp)f010198e2876,124471
f0101991:	8d 4d d8             	lea    -0x28(%ebp),%ecxf01019912878,124578
f0101994:	8d 55 dc             	lea    -0x24(%ebp),%edxf01019942879,124634
f0101997:	83 ec 08             	sub    $0x8,%espf01019972880,124690
f010199a:	53                   	push   %ebxf010199a2881,124739
f010199b:	6a 24                	push   $0x24f010199b2882,124783
f010199d:	89 75 d4             	mov    %esi,-0x2c(%ebp)f010199d2883,124828
f01019a0:	c7 c0 48 32 10 f0    	mov    $0xf0103248,%eaxf01019a02884,124884
f01019a6:	e8 39 fe ff ff       	call   f01017e4 <stab_binsearch>f01019a62885,124940
f01019ab:	8b 75 dc             	mov    -0x24(%ebp),%esif01019ab2888,125027
f01019ae:	83 c4 10             	add    $0x10,%espf01019ae2889,125083
f01019b1:	3b 75 d8             	cmp    -0x28(%ebp),%esif01019b12890,125133
f01019b4:	7f 79                	jg     f0101a2f <debuginfo_eip+0x15b>f01019b42891,125189
f01019b6:	8d 04 76             	lea    (%esi,%esi,2),%eaxf01019b62895,125411
f01019b9:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019b92896,125469
f01019bc:	c7 c2 48 32 10 f0    	mov    $0xf0103248,%edxf01019bc2897,125525
f01019c2:	8d 0c 82             	lea    (%edx,%eax,4),%ecxf01019c22898,125581
f01019c5:	8b 11                	mov    (%ecx),%edxf01019c52899,125639
f01019c7:	c7 c0 67 a0 10 f0    	mov    $0xf010a067,%eaxf01019c72900,125690
f01019cd:	81 e8 25 83 10 f0    	sub    $0xf0108325,%eaxf01019cd2901,125746
f01019d3:	39 c2                	cmp    %eax,%edxf01019d32902,125802
f01019d5:	73 09                	jae    f01019e0 <debuginfo_eip+0x10c>f01019d52903,125851
f01019d7:	81 c2 25 83 10 f0    	add    $0xf0108325,%edxf01019d72905,125974
f01019dd:	89 57 08             	mov    %edx,0x8(%edi)f01019dd2906,126030
f01019e0:	8b 41 08             	mov    0x8(%ecx),%eaxf01019e02908,126127
f01019e3:	89 47 10             	mov    %eax,0x10(%edi)f01019e32909,126181
		lline = lfile;lline2911,126264
		rline = rfile;rline2912,126281
f01019e6:	83 ec 08             	sub    $0x8,%espf01019e62916,126412
f01019e9:	6a 3a                	push   $0x3af01019e92917,126461
f01019eb:	ff 77 08             	pushl  0x8(%edi)f01019eb2918,126506
f01019ee:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf01019ee2919,126555
f01019f1:	e8 1a 09 00 00       	call   f0102310 <strfind>f01019f12920,126611
f01019f6:	2b 47 08             	sub    0x8(%edi),%eaxf01019f62921,126669
f01019f9:	89 47 0c             	mov    %eax,0xc(%edi)f01019f92922,126723
f01019fc:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf01019fc2929,127047
f01019ff:	8d 04 76             	lea    (%esi,%esi,2),%eaxf01019ff2930,127103
f0101a02:	8b 4d d4             	mov    -0x2c(%ebp),%ecxf0101a022931,127161
f0101a05:	c7 c2 48 32 10 f0    	mov    $0xf0103248,%edxf0101a052932,127217
f0101a0b:	8d 44 82 04          	lea    0x4(%edx,%eax,4),%eaxf0101a0b2933,127273
f0101a0f:	83 c4 10             	add    $0x10,%espf0101a0f2934,127334
f0101a12:	eb 29                	jmp    f0101a3d <debuginfo_eip+0x169>f0101a122935,127384
f0101a14:	83 ec 04             	sub    $0x4,%espf0101a142937,127488
f0101a17:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101a172938,127537
f0101a1a:	8d 83 30 ed fe ff    	lea    -0x112d0(%ebx),%eaxf0101a1a2939,127593
f0101a20:	50                   	push   %eaxf0101a202940,127652
f0101a21:	6a 7f                	push   $0x7ff0101a212941,127696
f0101a23:	8d 83 3d ed fe ff    	lea    -0x112c3(%ebx),%eaxf0101a232942,127741
f0101a29:	50                   	push   %eaxf0101a292943,127800
f0101a2a:	e8 6a e6 ff ff       	call   f0100099 <_panic>f0101a2a2944,127844
f0101a2f:	89 5f 10             	mov    %ebx,0x10(%edi)f0101a2f2946,127929
		lline = lfile;lline2947,127984
f0101a32:	8b 75 e4             	mov    -0x1c(%ebp),%esif0101a322948,128001
f0101a35:	eb af                	jmp    f01019e6 <debuginfo_eip+0x112>f0101a352949,128057
f0101a37:	83 ee 01             	sub    $0x1,%esif0101a372953,128245
f0101a3a:	83 e8 0c             	sub    $0xc,%eaxf0101a3a2954,128294
f0101a3d:	39 f3                	cmp    %esi,%ebxf0101a3d2956,128366
f0101a3f:	7f 3a                	jg     f0101a7b <debuginfo_eip+0x1a7>f0101a3f2957,128415
f0101a41:	0f b6 10             	movzbl (%eax),%edxf0101a412959,128525
f0101a44:	80 fa 84             	cmp    $0x84,%dlf0101a442960,128576
f0101a47:	74 0b                	je     f0101a54 <debuginfo_eip+0x180>f0101a472961,128625
f0101a49:	80 fa 64             	cmp    $0x64,%dlf0101a492963,128762
f0101a4c:	75 e9                	jne    f0101a37 <debuginfo_eip+0x163>f0101a4c2964,128811
f0101a4e:	83 78 04 00          	cmpl   $0x0,0x4(%eax)f0101a4e2965,128881
f0101a52:	74 e3                	je     f0101a37 <debuginfo_eip+0x163>f0101a522966,128935
f0101a54:	8d 14 76             	lea    (%esi,%esi,2),%edxf0101a542968,129073
f0101a57:	8b 5d d4             	mov    -0x2c(%ebp),%ebxf0101a572969,129131
f0101a5a:	c7 c0 48 32 10 f0    	mov    $0xf0103248,%eaxf0101a5a2970,129187
f0101a60:	8b 14 90             	mov    (%eax,%edx,4),%edxf0101a602971,129243
f0101a63:	c7 c0 67 a0 10 f0    	mov    $0xf010a067,%eaxf0101a632972,129301
f0101a69:	81 e8 25 83 10 f0    	sub    $0xf0108325,%eaxf0101a692973,129357
f0101a6f:	39 c2                	cmp    %eax,%edxf0101a6f2974,129413
f0101a71:	73 08                	jae    f0101a7b <debuginfo_eip+0x1a7>f0101a712975,129462
f0101a73:	81 c2 25 83 10 f0    	add    $0xf0108325,%edxf0101a732977,129582
f0101a79:	89 17                	mov    %edx,(%edi)f0101a792978,129638
f0101a7b:	8b 5d dc             	mov    -0x24(%ebp),%ebxf0101a7b2984,129825
f0101a7e:	8b 4d d8             	mov    -0x28(%ebp),%ecxf0101a7e2985,129881
f0101a81:	b8 00 00 00 00       	mov    $0x0,%eaxf0101a812992,130068
f0101a86:	39 cb                	cmp    %ecx,%ebxf0101a862994,130135
f0101a88:	7d 4a                	jge    f0101ad4 <debuginfo_eip+0x200>f0101a882995,130184
f0101a8a:	8d 53 01             	lea    0x1(%ebx),%edxf0101a8a2997,130279
f0101a8d:	8d 1c 5b             	lea    (%ebx,%ebx,2),%ebxf0101a8d2998,130333
f0101a90:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf0101a902999,130391
f0101a93:	c7 c0 48 32 10 f0    	mov    $0xf0103248,%eaxf0101a933000,130447
f0101a99:	8d 44 98 10          	lea    0x10(%eax,%ebx,4),%eaxf0101a993001,130503
f0101a9d:	eb 07                	jmp    f0101aa6 <debuginfo_eip+0x1d2>f0101a9d3002,130565
f0101a9f:	83 47 14 01          	addl   $0x1,0x14(%edi)f0101a9f3004,130659
f0101aa3:	83 c2 01             	add    $0x1,%edxf0101aa33006,130730
f0101aa6:	39 d1                	cmp    %edx,%ecxf0101aa63008,130804
f0101aa8:	74 25                	je     f0101acf <debuginfo_eip+0x1fb>f0101aa83009,130853
f0101aaa:	83 c0 0c             	add    $0xc,%eaxf0101aaa3010,130923
f0101aad:	80 78 f4 a0          	cmpb   $0xa0,-0xc(%eax)f0101aad3012,131026
f0101ab1:	74 ec                	je     f0101a9f <debuginfo_eip+0x1cb>f0101ab13013,131082
f0101ab3:	b8 00 00 00 00       	mov    $0x0,%eaxf0101ab33015,131163
f0101ab8:	eb 1a                	jmp    f0101ad4 <debuginfo_eip+0x200>f0101ab83016,131212
f0101aba:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0101aba3018,131295
f0101abf:	eb 13                	jmp    f0101ad4 <debuginfo_eip+0x200>f0101abf3019,131351
f0101ac1:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0101ac13020,131421
f0101ac6:	eb 0c                	jmp    f0101ad4 <debuginfo_eip+0x200>f0101ac63021,131477
f0101ac8:	b8 ff ff ff ff       	mov    $0xffffffff,%eaxf0101ac83023,131560
f0101acd:	eb 05                	jmp    f0101ad4 <debuginfo_eip+0x200>f0101acd3024,131616
f0101acf:	b8 00 00 00 00       	mov    $0x0,%eaxf0101acf3026,131697
f0101ad4:	8d 65 f4             	lea    -0xc(%ebp),%espf0101ad43028,131748
f0101ad7:	5b                   	pop    %ebxf0101ad73029,131803
f0101ad8:	5e                   	pop    %esif0101ad83030,131847
f0101ad9:	5f                   	pop    %edif0101ad93031,131891
f0101ada:	5d                   	pop    %ebpf0101ada3032,131935
f0101adb:	c3                   	ret    f0101adb3033,131979
f0101adc <printnum>:f0101adc3035,132020
static voidstatic3038,132110
f0101adc:	55                   	push   %ebpf0101adc3042,132236
f0101add:	89 e5                	mov    %esp,%ebpf0101add3043,132280
f0101adf:	57                   	push   %edif0101adf3044,132329
f0101ae0:	56                   	push   %esif0101ae03045,132373
f0101ae1:	53                   	push   %ebxf0101ae13046,132417
f0101ae2:	83 ec 2c             	sub    $0x2c,%espf0101ae23047,132461
f0101ae5:	e8 57 fc ff ff       	call   f0101741 <__x86.get_pc_thunk.cx>f0101ae53048,132511
f0101aea:	81 c1 1e 28 01 00    	add    $0x1281e,%ecxf0101aea3049,132583
f0101af0:	89 4d e4             	mov    %ecx,-0x1c(%ebp)f0101af03050,132636
f0101af3:	89 c7                	mov    %eax,%edif0101af33051,132692
f0101af5:	89 d6                	mov    %edx,%esif0101af53052,132741
f0101af7:	8b 45 08             	mov    0x8(%ebp),%eaxf0101af73053,132790
f0101afa:	8b 55 0c             	mov    0xc(%ebp),%edxf0101afa3054,132844
f0101afd:	89 45 d0             	mov    %eax,-0x30(%ebp)f0101afd3055,132898
f0101b00:	89 55 d4             	mov    %edx,-0x2c(%ebp)f0101b003056,132954
f0101b03:	8b 4d 10             	mov    0x10(%ebp),%ecxf0101b033059,133098
f0101b06:	bb 00 00 00 00       	mov    $0x0,%ebxf0101b063060,133153
f0101b0b:	89 4d d8             	mov    %ecx,-0x28(%ebp)f0101b0b3061,133202
f0101b0e:	89 5d dc             	mov    %ebx,-0x24(%ebp)f0101b0e3062,133258
f0101b11:	39 d3                	cmp    %edx,%ebxf0101b113063,133314
f0101b13:	72 09                	jb     f0101b1e <printnum+0x42>f0101b133064,133363
f0101b15:	39 45 10             	cmp    %eax,0x10(%ebp)f0101b153065,133427
f0101b18:	0f 87 83 00 00 00    	ja     f0101ba1 <printnum+0xc5>f0101b183066,133482
f0101b1e:	83 ec 0c             	sub    $0xc,%espf0101b1e3068,133608
f0101b21:	ff 75 18             	pushl  0x18(%ebp)f0101b213069,133657
f0101b24:	8b 45 14             	mov    0x14(%ebp),%eaxf0101b243070,133707
f0101b27:	8d 58 ff             	lea    -0x1(%eax),%ebxf0101b273071,133762
f0101b2a:	53                   	push   %ebxf0101b2a3072,133817
f0101b2b:	ff 75 10             	pushl  0x10(%ebp)f0101b2b3073,133861
f0101b2e:	83 ec 08             	sub    $0x8,%espf0101b2e3074,133911
f0101b31:	ff 75 dc             	pushl  -0x24(%ebp)f0101b313075,133960
f0101b34:	ff 75 d8             	pushl  -0x28(%ebp)f0101b343076,134011
f0101b37:	ff 75 d4             	pushl  -0x2c(%ebp)f0101b373077,134062
f0101b3a:	ff 75 d0             	pushl  -0x30(%ebp)f0101b3a3078,134113
f0101b3d:	8b 5d e4             	mov    -0x1c(%ebp),%ebxf0101b3d3079,134164
f0101b40:	e8 eb 09 00 00       	call   f0102530 <__udivdi3>f0101b403080,134220
f0101b45:	83 c4 18             	add    $0x18,%espf0101b453081,134280
f0101b48:	52                   	push   %edxf0101b483082,134330
f0101b49:	50                   	push   %eaxf0101b493083,134374
f0101b4a:	89 f2                	mov    %esi,%edxf0101b4a3084,134418
f0101b4c:	89 f8                	mov    %edi,%eaxf0101b4c3085,134467
f0101b4e:	e8 89 ff ff ff       	call   f0101adc <printnum>f0101b4e3086,134516
f0101b53:	83 c4 20             	add    $0x20,%espf0101b533087,134575
f0101b56:	eb 13                	jmp    f0101b6b <printnum+0x8f>f0101b563088,134625
f0101b58:	83 ec 08             	sub    $0x8,%espf0101b583093,134801
f0101b5b:	56                   	push   %esif0101b5b3094,134850
f0101b5c:	ff 75 18             	pushl  0x18(%ebp)f0101b5c3095,134894
f0101b5f:	ff d7                	call   *%edif0101b5f3096,134944
f0101b61:	83 c4 10             	add    $0x10,%espf0101b613097,134989
f0101b64:	83 eb 01             	sub    $0x1,%ebxf0101b643099,135061
f0101b67:	85 db                	test   %ebx,%ebxf0101b673100,135110
f0101b69:	7f ed                	jg     f0101b58 <printnum+0x7c>f0101b693101,135159
f0101b6b:	83 ec 08             	sub    $0x8,%espf0101b6b3106,135325
f0101b6e:	56                   	push   %esif0101b6e3107,135374
f0101b6f:	83 ec 04             	sub    $0x4,%espf0101b6f3108,135418
f0101b72:	ff 75 dc             	pushl  -0x24(%ebp)f0101b723109,135467
f0101b75:	ff 75 d8             	pushl  -0x28(%ebp)f0101b753110,135518
f0101b78:	ff 75 d4             	pushl  -0x2c(%ebp)f0101b783111,135569
f0101b7b:	ff 75 d0             	pushl  -0x30(%ebp)f0101b7b3112,135620
f0101b7e:	8b 75 e4             	mov    -0x1c(%ebp),%esif0101b7e3113,135671
f0101b81:	89 f3                	mov    %esi,%ebxf0101b813114,135727
f0101b83:	e8 c8 0a 00 00       	call   f0102650 <__umoddi3>f0101b833115,135776
f0101b88:	83 c4 14             	add    $0x14,%espf0101b883116,135836
f0101b8b:	0f be 84 06 4b ed fe 	movsbl -0x112b5(%esi,%eax,1),%eaxf0101b8b3117,135886
f0101b92:	ff f0101b923118,135952
f0101b93:	50                   	push   %eaxf0101b933119,135966
f0101b94:	ff d7                	call   *%edif0101b943120,136010
f0101b96:	83 c4 10             	add    $0x10,%espf0101b963122,136057
f0101b99:	8d 65 f4             	lea    -0xc(%ebp),%espf0101b993123,136107
f0101b9c:	5b                   	pop    %ebxf0101b9c3124,136162
f0101b9d:	5e                   	pop    %esif0101b9d3125,136206
f0101b9e:	5f                   	pop    %edif0101b9e3126,136250
f0101b9f:	5d                   	pop    %ebpf0101b9f3127,136294
f0101ba0:	c3                   	ret    f0101ba03128,136338
f0101ba1:	8b 5d 14             	mov    0x14(%ebp),%ebxf0101ba13129,136378
f0101ba4:	eb be                	jmp    f0101b64 <printnum+0x88>f0101ba43130,136433
f0101ba6 <sprintputch>:f0101ba63132,136498
static voidstatic3136,136536
f0101ba6:	55                   	push   %ebpf0101ba63139,136591
f0101ba7:	89 e5                	mov    %esp,%ebpf0101ba73140,136635
f0101ba9:	8b 45 0c             	mov    0xc(%ebp),%eaxf0101ba93141,136684
f0101bac:	83 40 08 01          	addl   $0x1,0x8(%eax)f0101bac3143,136749
f0101bb0:	8b 10                	mov    (%eax),%edxf0101bb03145,136826
f0101bb2:	3b 50 04             	cmp    0x4(%eax),%edxf0101bb23146,136877
f0101bb5:	73 0a                	jae    f0101bc1 <sprintputch+0x1b>f0101bb53147,136931
f0101bb7:	8d 4a 01             	lea    0x1(%edx),%ecxf0101bb73149,137016
f0101bba:	89 08                	mov    %ecx,(%eax)f0101bba3150,137070
f0101bbc:	8b 45 08             	mov    0x8(%ebp),%eaxf0101bbc3151,137121
f0101bbf:	88 02                	mov    %al,(%edx)f0101bbf3152,137175
f0101bc1:	5d                   	pop    %ebpf0101bc13154,137227
f0101bc2:	c3                   	ret    f0101bc23155,137271
f0101bc3 <printfmt>:f0101bc33157,137312
f0101bc3:	55                   	push   %ebpf0101bc33159,137335
f0101bc4:	89 e5                	mov    %esp,%ebpf0101bc43160,137379
f0101bc6:	83 ec 08             	sub    $0x8,%espf0101bc63161,137428
f0101bc9:	8d 45 14             	lea    0x14(%ebp),%eaxf0101bc93163,137497
f0101bcc:	50                   	push   %eaxf0101bcc3165,137588
f0101bcd:	ff 75 10             	pushl  0x10(%ebp)f0101bcd3166,137632
f0101bd0:	ff 75 0c             	pushl  0xc(%ebp)f0101bd03167,137682
f0101bd3:	ff 75 08             	pushl  0x8(%ebp)f0101bd33168,137731
f0101bd6:	e8 05 00 00 00       	call   f0101be0 <vprintfmt>f0101bd63169,137780
f0101bdb:	83 c4 10             	add    $0x10,%espf0101bdb3171,137842
f0101bde:	c9                   	leave  f0101bde3172,137892
f0101bdf:	c3                   	ret    f0101bdf3173,137932
f0101be0 <vprintfmt>:f0101be03175,137973
f0101be0:	55                   	push   %ebpf0101be03177,137997
f0101be1:	89 e5                	mov    %esp,%ebpf0101be13178,138041
f0101be3:	57                   	push   %edif0101be33179,138090
f0101be4:	56                   	push   %esif0101be43180,138134
f0101be5:	53                   	push   %ebxf0101be53181,138178
f0101be6:	83 ec 2c             	sub    $0x2c,%espf0101be63182,138222
f0101be9:	e8 61 e5 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f0101be93183,138272
f0101bee:	81 c3 1a 27 01 00    	add    $0x1271a,%ebxf0101bee3184,138344
f0101bf4:	8b 75 0c             	mov    0xc(%ebp),%esif0101bf43185,138397
f0101bf7:	8b 7d 10             	mov    0x10(%ebp),%edif0101bf73186,138451
f0101bfa:	e9 8e 03 00 00       	jmp    f0101f8d <.L35+0x48>f0101bfa3187,138506
		padc = ' ';padc3188,138566
f0101bff:	c6 45 d4 20          	movb   $0x20,-0x2c(%ebp)f0101bff3189,138580
		altflag = 0;altflag3190,138637
f0101c03:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)f0101c033191,138652
		precision = -1;precision3192,138708
f0101c0a:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f0101c0a3193,138726
		width = -1;width3194,138789
f0101c11:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)f0101c113195,138803
		lflag = 0;lflag3196,138866
f0101c18:	b9 00 00 00 00       	mov    $0x0,%ecxf0101c183197,138879
f0101c1d:	89 4d cc             	mov    %ecx,-0x34(%ebp)f0101c1d3198,138928
f0101c20:	8d 47 01             	lea    0x1(%edi),%eaxf0101c203200,139027
f0101c23:	89 45 e4             	mov    %eax,-0x1c(%ebp)f0101c233201,139081
f0101c26:	0f b6 17             	movzbl (%edi),%edxf0101c263202,139137
f0101c29:	8d 42 dd             	lea    -0x23(%edx),%eaxf0101c293203,139188
f0101c2c:	3c 55                	cmp    $0x55,%alf0101c2c3204,139244
f0101c2e:	0f 87 e1 03 00 00    	ja     f0102015 <.L22>f0101c2e3205,139293
f0101c34:	0f b6 c0             	movzbl %al,%eaxf0101c343206,139348
f0101c37:	89 d9                	mov    %ebx,%ecxf0101c373207,139396
f0101c39:	03 8c 83 d8 ed fe ff 	add    -0x11228(%ebx,%eax,4),%ecxf0101c393208,139445
f0101c40:	ff e1                	jmp    *%ecxf0101c403209,139511
f0101c42 <.L67>:f0101c423211,139557
f0101c42:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101c423212,139574
			padc = '-';padc3213,139630
f0101c45:	c6 45 d4 2d          	movb   $0x2d,-0x2c(%ebp)f0101c453214,139645
f0101c49:	eb d5                	jmp    f0101c20 <vprintfmt+0x40>f0101c493215,139702
f0101c4b <.L28>:f0101c4b3217,139768
f0101c4b:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101c4b3219,139828
			padc = '0';padc3220,139884
f0101c4e:	c6 45 d4 30          	movb   $0x30,-0x2c(%ebp)f0101c4e3221,139899
f0101c52:	eb cc                	jmp    f0101c20 <vprintfmt+0x40>f0101c523222,139956
f0101c54 <.L29>:f0101c543224,140022
f0101c54:	0f b6 d2             	movzbl %dl,%edxf0101c543226,140082
f0101c57:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101c573227,140130
f0101c5a:	b8 00 00 00 00       	mov    $0x0,%eaxf0101c5a3229,140220
				precision = precision * 10 + ch - '0';precision3230,140269
f0101c5f:	8d 04 80             	lea    (%eax,%eax,4),%eaxf0101c5f3231,140312
f0101c62:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eaxf0101c623232,140370
				ch = *fmt;ch3233,140433
f0101c66:	0f be 17             	movsbl (%edi),%edxf0101c663234,140448
f0101c69:	8d 4a d0             	lea    -0x30(%edx),%ecxf0101c693236,140529
f0101c6c:	83 f9 09             	cmp    $0x9,%ecxf0101c6c3237,140585
f0101c6f:	77 55                	ja     f0101cc6 <.L23+0xf>f0101c6f3238,140634
f0101c71:	83 c7 01             	add    $0x1,%edif0101c713240,140727
				precision = precision * 10 + ch - '0';precision3241,140776
f0101c74:	eb e9                	jmp    f0101c5f <.L29+0xb>f0101c743242,140819
f0101c76 <.L26>:f0101c763244,140879
			precision = va_arg(ap, int);precision3245,140896
f0101c76:	8b 45 14             	mov    0x14(%ebp),%eaxf0101c763246,140928
f0101c79:	8b 00                	mov    (%eax),%eaxf0101c793247,140983
f0101c7b:	89 45 d0             	mov    %eax,-0x30(%ebp)f0101c7b3248,141034
f0101c7e:	8b 45 14             	mov    0x14(%ebp),%eaxf0101c7e3249,141090
f0101c81:	8d 40 04             	lea    0x4(%eax),%eaxf0101c813250,141145
f0101c84:	89 45 14             	mov    %eax,0x14(%ebp)f0101c843251,141199
f0101c87:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101c873253,141297
f0101c8a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f0101c8a3255,141371
f0101c8e:	79 90                	jns    f0101c20 <vprintfmt+0x40>f0101c8e3256,141427
				width = precision, precision = -1;width3257,141492
f0101c90:	8b 45 d0             	mov    -0x30(%ebp),%eaxf0101c903258,141531
f0101c93:	89 45 e0             	mov    %eax,-0x20(%ebp)f0101c933259,141587
f0101c96:	c7 45 d0 ff ff ff ff 	movl   $0xffffffff,-0x30(%ebp)f0101c963260,141643
f0101c9d:	eb 81                	jmp    f0101c20 <vprintfmt+0x40>f0101c9d3261,141706
f0101c9f <.L27>:f0101c9f3263,141772
f0101c9f:	8b 45 e0             	mov    -0x20(%ebp),%eaxf0101c9f3264,141789
f0101ca2:	85 c0                	test   %eax,%eaxf0101ca23265,141845
f0101ca4:	ba 00 00 00 00       	mov    $0x0,%edxf0101ca43266,141894
f0101ca9:	0f 49 d0             	cmovns %eax,%edxf0101ca93267,141943
f0101cac:	89 55 e0             	mov    %edx,-0x20(%ebp)f0101cac3268,141992
f0101caf:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101caf3270,142091
f0101cb2:	e9 69 ff ff ff       	jmp    f0101c20 <vprintfmt+0x40>f0101cb23271,142147
f0101cb7 <.L23>:f0101cb73273,142213
f0101cb7:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101cb73274,142230
			altflag = 1;altflag3275,142286
f0101cba:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)f0101cba3276,142302
f0101cc1:	e9 5a ff ff ff       	jmp    f0101c20 <vprintfmt+0x40>f0101cc13278,142376
f0101cc6:	89 45 d0             	mov    %eax,-0x30(%ebp)f0101cc63279,142441
f0101cc9:	eb bf                	jmp    f0101c8a <.L26+0x14>f0101cc93280,142497
f0101ccb <.L33>:f0101ccb3282,142558
f0101ccb:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)f0101ccb3284,142587
f0101ccf:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101ccf3286,142686
f0101cd2:	e9 49 ff ff ff       	jmp    f0101c20 <vprintfmt+0x40>f0101cd23288,142760
f0101cd7 <.L30>:f0101cd73290,142826
f0101cd7:	8b 45 14             	mov    0x14(%ebp),%eaxf0101cd73292,142878
f0101cda:	8d 78 04             	lea    0x4(%eax),%edif0101cda3293,142933
f0101cdd:	83 ec 08             	sub    $0x8,%espf0101cdd3294,142987
f0101ce0:	56                   	push   %esif0101ce03295,143036
f0101ce1:	ff 30                	pushl  (%eax)f0101ce13296,143080
f0101ce3:	ff 55 08             	call   *0x8(%ebp)f0101ce33297,143126
f0101ce6:	83 c4 10             	add    $0x10,%espf0101ce63299,143186
f0101ce9:	89 7d 14             	mov    %edi,0x14(%ebp)f0101ce93301,143271
f0101cec:	e9 99 02 00 00       	jmp    f0101f8a <.L35+0x45>f0101cec3303,143336
f0101cf1 <.L32>:f0101cf13305,143397
			err = va_arg(ap, int);err3306,143414
f0101cf1:	8b 45 14             	mov    0x14(%ebp),%eaxf0101cf13307,143440
f0101cf4:	8d 78 04             	lea    0x4(%eax),%edif0101cf43308,143495
f0101cf7:	8b 00                	mov    (%eax),%eaxf0101cf73309,143549
f0101cf9:	99                   	cltd   f0101cf93310,143600
f0101cfa:	31 d0                	xor    %edx,%eaxf0101cfa3311,143640
f0101cfc:	29 d0                	sub    %edx,%eaxf0101cfc3312,143689
f0101cfe:	83 f8 06             	cmp    $0x6,%eaxf0101cfe3314,143797
f0101d01:	7f 27                	jg     f0101d2a <.L32+0x39>f0101d013315,143846
f0101d03:	8b 94 83 20 1d 00 00 	mov    0x1d20(%ebx,%eax,4),%edxf0101d033316,143906
f0101d0a:	85 d2                	test   %edx,%edxf0101d0a3317,143970
f0101d0c:	74 1c                	je     f0101d2a <.L32+0x39>f0101d0c3318,144019
f0101d0e:	52                   	push   %edxf0101d0e3320,144117
f0101d0f:	8d 83 90 eb fe ff    	lea    -0x11470(%ebx),%eaxf0101d0f3321,144161
f0101d15:	50                   	push   %eaxf0101d153322,144220
f0101d16:	56                   	push   %esif0101d163323,144264
f0101d17:	ff 75 08             	pushl  0x8(%ebp)f0101d173324,144308
f0101d1a:	e8 a4 fe ff ff       	call   f0101bc3 <printfmt>f0101d1a3325,144357
f0101d1f:	83 c4 10             	add    $0x10,%espf0101d1f3326,144416
			err = va_arg(ap, int);err3327,144466
f0101d22:	89 7d 14             	mov    %edi,0x14(%ebp)f0101d223328,144492
f0101d25:	e9 60 02 00 00       	jmp    f0101f8a <.L35+0x45>f0101d253329,144547
f0101d2a:	50                   	push   %eaxf0101d2a3331,144653
f0101d2b:	8d 83 63 ed fe ff    	lea    -0x1129d(%ebx),%eaxf0101d2b3332,144697
f0101d31:	50                   	push   %eaxf0101d313333,144756
f0101d32:	56                   	push   %esif0101d323334,144800
f0101d33:	ff 75 08             	pushl  0x8(%ebp)f0101d333335,144844
f0101d36:	e8 88 fe ff ff       	call   f0101bc3 <printfmt>f0101d363336,144893
f0101d3b:	83 c4 10             	add    $0x10,%espf0101d3b3337,144952
			err = va_arg(ap, int);err3338,145002
f0101d3e:	89 7d 14             	mov    %edi,0x14(%ebp)f0101d3e3339,145028
f0101d41:	e9 44 02 00 00       	jmp    f0101f8a <.L35+0x45>f0101d413341,145129
f0101d46 <.L36>:f0101d463343,145190
f0101d46:	8b 45 14             	mov    0x14(%ebp),%eaxf0101d463345,145248
f0101d49:	83 c0 04             	add    $0x4,%eaxf0101d493346,145303
f0101d4c:	89 45 cc             	mov    %eax,-0x34(%ebp)f0101d4c3347,145352
f0101d4f:	8b 45 14             	mov    0x14(%ebp),%eaxf0101d4f3348,145408
f0101d52:	8b 38                	mov    (%eax),%edif0101d523349,145463
				p = "(null)";p3350,145514
f0101d54:	85 ff                	test   %edi,%edif0101d543351,145532
f0101d56:	8d 83 5c ed fe ff    	lea    -0x112a4(%ebx),%eaxf0101d563352,145581
f0101d5c:	0f 44 f8             	cmove  %eax,%edif0101d5c3353,145640
f0101d5f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)f0101d5f3355,145722
f0101d63:	0f 8e b5 00 00 00    	jle    f0101e1e <.L36+0xd8>f0101d633356,145778
f0101d69:	80 7d d4 2d          	cmpb   $0x2d,-0x2c(%ebp)f0101d693357,145838
f0101d6d:	75 08                	jne    f0101d77 <.L36+0x31>f0101d6d3358,145895
f0101d6f:	89 75 0c             	mov    %esi,0xc(%ebp)f0101d6f3359,145955
f0101d72:	8b 75 d0             	mov    -0x30(%ebp),%esif0101d723360,146009
f0101d75:	eb 6d                	jmp    f0101de4 <.L36+0x9e>f0101d753361,146065
f0101d77:	83 ec 08             	sub    $0x8,%espf0101d773363,146186
f0101d7a:	ff 75 d0             	pushl  -0x30(%ebp)f0101d7a3364,146235
f0101d7d:	57                   	push   %edif0101d7d3365,146286
f0101d7e:	e8 49 04 00 00       	call   f01021cc <strnlen>f0101d7e3366,146330
f0101d83:	8b 55 e0             	mov    -0x20(%ebp),%edxf0101d833367,146388
f0101d86:	29 c2                	sub    %eax,%edxf0101d863368,146444
f0101d88:	89 55 c8             	mov    %edx,-0x38(%ebp)f0101d883369,146493
f0101d8b:	83 c4 10             	add    $0x10,%espf0101d8b3370,146549
f0101d8e:	0f be 45 d4          	movsbl -0x2c(%ebp),%eaxf0101d8e3372,146625
f0101d92:	89 45 e0             	mov    %eax,-0x20(%ebp)f0101d923373,146681
f0101d95:	89 7d d4             	mov    %edi,-0x2c(%ebp)f0101d953374,146737
f0101d98:	89 d7                	mov    %edx,%edif0101d983375,146793
f0101d9a:	eb 10                	jmp    f0101dac <.L36+0x66>f0101d9a3377,146903
f0101d9c:	83 ec 08             	sub    $0x8,%espf0101d9c3379,146989
f0101d9f:	56                   	push   %esif0101d9f3380,147038
f0101da0:	ff 75 e0             	pushl  -0x20(%ebp)f0101da03381,147082
f0101da3:	ff 55 08             	call   *0x8(%ebp)f0101da33382,147133
f0101da6:	83 ef 01             	sub    $0x1,%edif0101da63384,147244
f0101da9:	83 c4 10             	add    $0x10,%espf0101da93385,147293
f0101dac:	85 ff                	test   %edi,%edif0101dac3386,147343
f0101dae:	7f ec                	jg     f0101d9c <.L36+0x56>f0101dae3387,147392
f0101db0:	8b 7d d4             	mov    -0x2c(%ebp),%edif0101db03388,147452
f0101db3:	8b 55 c8             	mov    -0x38(%ebp),%edxf0101db33389,147508
f0101db6:	85 d2                	test   %edx,%edxf0101db63390,147564
f0101db8:	b8 00 00 00 00       	mov    $0x0,%eaxf0101db83391,147613
f0101dbd:	0f 49 c2             	cmovns %edx,%eaxf0101dbd3392,147662
f0101dc0:	29 c2                	sub    %eax,%edxf0101dc03393,147711
f0101dc2:	89 55 e0             	mov    %edx,-0x20(%ebp)f0101dc23394,147760
f0101dc5:	89 75 0c             	mov    %esi,0xc(%ebp)f0101dc53395,147816
f0101dc8:	8b 75 d0             	mov    -0x30(%ebp),%esif0101dc83396,147870
f0101dcb:	eb 17                	jmp    f0101de4 <.L36+0x9e>f0101dcb3397,147926
f0101dcd:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)f0101dcd3399,148029
f0101dd1:	75 30                	jne    f0101e03 <.L36+0xbd>f0101dd13400,148085
f0101dd3:	83 ec 08             	sub    $0x8,%espf0101dd33402,148169
f0101dd6:	ff 75 0c             	pushl  0xc(%ebp)f0101dd63403,148218
f0101dd9:	50                   	push   %eaxf0101dd93404,148267
f0101dda:	ff 55 08             	call   *0x8(%ebp)f0101dda3405,148311
f0101ddd:	83 c4 10             	add    $0x10,%espf0101ddd3406,148361
f0101de0:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)f0101de03408,148490
f0101de4:	83 c7 01             	add    $0x1,%edif0101de43409,148546
f0101de7:	0f b6 57 ff          	movzbl -0x1(%edi),%edxf0101de73410,148595
f0101deb:	0f be c2             	movsbl %dl,%eaxf0101deb3411,148650
f0101dee:	85 c0                	test   %eax,%eaxf0101dee3412,148698
f0101df0:	74 52                	je     f0101e44 <.L36+0xfe>f0101df03413,148747
f0101df2:	85 f6                	test   %esi,%esif0101df23414,148807
f0101df4:	78 d7                	js     f0101dcd <.L36+0x87>f0101df43415,148856
f0101df6:	83 ee 01             	sub    $0x1,%esif0101df63416,148916
f0101df9:	79 d2                	jns    f0101dcd <.L36+0x87>f0101df93417,148965
f0101dfb:	8b 75 0c             	mov    0xc(%ebp),%esif0101dfb3418,149025
f0101dfe:	8b 7d e0             	mov    -0x20(%ebp),%edif0101dfe3419,149079
f0101e01:	eb 32                	jmp    f0101e35 <.L36+0xef>f0101e013420,149135
f0101e03:	0f be d2             	movsbl %dl,%edxf0101e033422,149238
f0101e06:	83 ea 20             	sub    $0x20,%edxf0101e063423,149286
f0101e09:	83 fa 5e             	cmp    $0x5e,%edxf0101e093424,149336
f0101e0c:	76 c5                	jbe    f0101dd3 <.L36+0x8d>f0101e0c3425,149386
f0101e0e:	83 ec 08             	sub    $0x8,%espf0101e0e3427,149471
f0101e11:	ff 75 0c             	pushl  0xc(%ebp)f0101e113428,149520
f0101e14:	6a 3f                	push   $0x3ff0101e143429,149569
f0101e16:	ff 55 08             	call   *0x8(%ebp)f0101e163430,149614
f0101e19:	83 c4 10             	add    $0x10,%espf0101e193431,149664
f0101e1c:	eb c2                	jmp    f0101de0 <.L36+0x9a>f0101e1c3432,149714
f0101e1e:	89 75 0c             	mov    %esi,0xc(%ebp)f0101e1e3433,149774
f0101e21:	8b 75 d0             	mov    -0x30(%ebp),%esif0101e213434,149828
f0101e24:	eb be                	jmp    f0101de4 <.L36+0x9e>f0101e243435,149884
f0101e26:	83 ec 08             	sub    $0x8,%espf0101e263437,149968
f0101e29:	56                   	push   %esif0101e293438,150017
f0101e2a:	6a 20                	push   $0x20f0101e2a3439,150061
f0101e2c:	ff 55 08             	call   *0x8(%ebp)f0101e2c3440,150106
f0101e2f:	83 ef 01             	sub    $0x1,%edif0101e2f3442,150186
f0101e32:	83 c4 10             	add    $0x10,%espf0101e323443,150235
f0101e35:	85 ff                	test   %edi,%edif0101e353444,150285
f0101e37:	7f ed                	jg     f0101e26 <.L36+0xe0>f0101e373445,150334
f0101e39:	8b 45 cc             	mov    -0x34(%ebp),%eaxf0101e393447,150435
f0101e3c:	89 45 14             	mov    %eax,0x14(%ebp)f0101e3c3448,150491
f0101e3f:	e9 46 01 00 00       	jmp    f0101f8a <.L35+0x45>f0101e3f3449,150546
f0101e44:	8b 7d e0             	mov    -0x20(%ebp),%edif0101e443450,150606
f0101e47:	8b 75 0c             	mov    0xc(%ebp),%esif0101e473451,150662
f0101e4a:	eb e9                	jmp    f0101e35 <.L36+0xef>f0101e4a3452,150716
f0101e4c <.L31>:f0101e4c3454,150777
f0101e4c:	8b 4d cc             	mov    -0x34(%ebp),%ecxf0101e4c3455,150794
f0101e4f:	83 f9 01             	cmp    $0x1,%ecxf0101e4f3457,150867
f0101e52:	7e 40                	jle    f0101e94 <.L31+0x48>f0101e523458,150916
f0101e54:	8b 45 14             	mov    0x14(%ebp),%eaxf0101e543460,151009
f0101e57:	8b 50 04             	mov    0x4(%eax),%edxf0101e573461,151064
f0101e5a:	8b 00                	mov    (%eax),%eaxf0101e5a3462,151118
f0101e5c:	89 45 d8             	mov    %eax,-0x28(%ebp)f0101e5c3463,151169
f0101e5f:	89 55 dc             	mov    %edx,-0x24(%ebp)f0101e5f3464,151225
f0101e62:	8b 45 14             	mov    0x14(%ebp),%eaxf0101e623465,151281
f0101e65:	8d 40 08             	lea    0x8(%eax),%eaxf0101e653466,151336
f0101e68:	89 45 14             	mov    %eax,0x14(%ebp)f0101e683467,151390
f0101e6b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)f0101e6b3469,151475
f0101e6f:	79 55                	jns    f0101ec6 <.L31+0x7a>f0101e6f3470,151531
f0101e71:	83 ec 08             	sub    $0x8,%espf0101e713472,151615
f0101e74:	56                   	push   %esif0101e743473,151664
f0101e75:	6a 2d                	push   $0x2df0101e753474,151708
f0101e77:	ff 55 08             	call   *0x8(%ebp)f0101e773475,151753
				num = -(long long) num;num3476,151803
f0101e7a:	8b 55 d8             	mov    -0x28(%ebp),%edxf0101e7a3477,151831
f0101e7d:	8b 4d dc             	mov    -0x24(%ebp),%ecxf0101e7d3478,151887
f0101e80:	f7 da                	neg    %edxf0101e803479,151943
f0101e82:	83 d1 00             	adc    $0x0,%ecxf0101e823480,151987
f0101e85:	f7 d9                	neg    %ecxf0101e853481,152036
f0101e87:	83 c4 10             	add    $0x10,%espf0101e873482,152080
			base = 10;base3483,152130
f0101e8a:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101e8a3484,152144
f0101e8f:	e9 db 00 00 00       	jmp    f0101f6f <.L35+0x2a>f0101e8f3485,152193
f0101e94:	85 c9                	test   %ecx,%ecxf0101e943487,152270
f0101e96:	75 17                	jne    f0101eaf <.L31+0x63>f0101e963488,152319
f0101e98:	8b 45 14             	mov    0x14(%ebp),%eaxf0101e983490,152406
f0101e9b:	8b 00                	mov    (%eax),%eaxf0101e9b3491,152461
f0101e9d:	89 45 d8             	mov    %eax,-0x28(%ebp)f0101e9d3492,152512
f0101ea0:	99                   	cltd   f0101ea03493,152568
f0101ea1:	89 55 dc             	mov    %edx,-0x24(%ebp)f0101ea13494,152608
f0101ea4:	8b 45 14             	mov    0x14(%ebp),%eaxf0101ea43495,152664
f0101ea7:	8d 40 04             	lea    0x4(%eax),%eaxf0101ea73496,152719
f0101eaa:	89 45 14             	mov    %eax,0x14(%ebp)f0101eaa3497,152773
f0101ead:	eb bc                	jmp    f0101e6b <.L31+0x1f>f0101ead3498,152828
f0101eaf:	8b 45 14             	mov    0x14(%ebp),%eaxf0101eaf3500,152916
f0101eb2:	8b 00                	mov    (%eax),%eaxf0101eb23501,152971
f0101eb4:	89 45 d8             	mov    %eax,-0x28(%ebp)f0101eb43502,153022
f0101eb7:	99                   	cltd   f0101eb73503,153078
f0101eb8:	89 55 dc             	mov    %edx,-0x24(%ebp)f0101eb83504,153118
f0101ebb:	8b 45 14             	mov    0x14(%ebp),%eaxf0101ebb3505,153174
f0101ebe:	8d 40 04             	lea    0x4(%eax),%eaxf0101ebe3506,153229
f0101ec1:	89 45 14             	mov    %eax,0x14(%ebp)f0101ec13507,153283
f0101ec4:	eb a5                	jmp    f0101e6b <.L31+0x1f>f0101ec43508,153338
			num = getint(&ap, lflag);num3509,153398
f0101ec6:	8b 55 d8             	mov    -0x28(%ebp),%edxf0101ec63510,153427
f0101ec9:	8b 4d dc             	mov    -0x24(%ebp),%ecxf0101ec93511,153483
			base = 10;base3512,153539
f0101ecc:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101ecc3513,153553
f0101ed1:	e9 99 00 00 00       	jmp    f0101f6f <.L35+0x2a>f0101ed13514,153602
f0101ed6 <.L37>:f0101ed63516,153663
f0101ed6:	8b 4d cc             	mov    -0x34(%ebp),%ecxf0101ed63517,153680
f0101ed9:	83 f9 01             	cmp    $0x1,%ecxf0101ed93519,153753
f0101edc:	7e 15                	jle    f0101ef3 <.L37+0x1d>f0101edc3520,153802
f0101ede:	8b 45 14             	mov    0x14(%ebp),%eaxf0101ede3522,153904
f0101ee1:	8b 10                	mov    (%eax),%edxf0101ee13523,153959
f0101ee3:	8b 48 04             	mov    0x4(%eax),%ecxf0101ee33524,154010
f0101ee6:	8d 40 08             	lea    0x8(%eax),%eaxf0101ee63525,154064
f0101ee9:	89 45 14             	mov    %eax,0x14(%ebp)f0101ee93526,154118
			base = 10;base3527,154173
f0101eec:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101eec3528,154187
f0101ef1:	eb 7c                	jmp    f0101f6f <.L35+0x2a>f0101ef13529,154236
f0101ef3:	85 c9                	test   %ecx,%ecxf0101ef33531,154313
f0101ef5:	75 17                	jne    f0101f0e <.L37+0x38>f0101ef53532,154362
f0101ef7:	8b 45 14             	mov    0x14(%ebp),%eaxf0101ef73534,154458
f0101efa:	8b 10                	mov    (%eax),%edxf0101efa3535,154513
f0101efc:	b9 00 00 00 00       	mov    $0x0,%ecxf0101efc3536,154564
f0101f01:	8d 40 04             	lea    0x4(%eax),%eaxf0101f013537,154613
f0101f04:	89 45 14             	mov    %eax,0x14(%ebp)f0101f043538,154667
			base = 10;base3539,154722
f0101f07:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101f073540,154736
f0101f0c:	eb 61                	jmp    f0101f6f <.L35+0x2a>f0101f0c3541,154785
f0101f0e:	8b 45 14             	mov    0x14(%ebp),%eaxf0101f0e3543,154882
f0101f11:	8b 10                	mov    (%eax),%edxf0101f113544,154937
f0101f13:	b9 00 00 00 00       	mov    $0x0,%ecxf0101f133545,154988
f0101f18:	8d 40 04             	lea    0x4(%eax),%eaxf0101f183546,155037
f0101f1b:	89 45 14             	mov    %eax,0x14(%ebp)f0101f1b3547,155091
			base = 10;base3548,155146
f0101f1e:	b8 0a 00 00 00       	mov    $0xa,%eaxf0101f1e3549,155160
f0101f23:	eb 4a                	jmp    f0101f6f <.L35+0x2a>f0101f233550,155209
f0101f25 <.L34>:f0101f253552,155270
f0101f25:	83 ec 08             	sub    $0x8,%espf0101f253554,155310
f0101f28:	56                   	push   %esif0101f283555,155359
f0101f29:	6a 58                	push   $0x58f0101f293556,155403
f0101f2b:	ff 55 08             	call   *0x8(%ebp)f0101f2b3557,155448
f0101f2e:	83 c4 08             	add    $0x8,%espf0101f2e3559,155521
f0101f31:	56                   	push   %esif0101f313560,155570
f0101f32:	6a 58                	push   $0x58f0101f323561,155614
f0101f34:	ff 55 08             	call   *0x8(%ebp)f0101f343562,155659
f0101f37:	83 c4 08             	add    $0x8,%espf0101f373564,155732
f0101f3a:	56                   	push   %esif0101f3a3565,155781
f0101f3b:	6a 58                	push   $0x58f0101f3b3566,155825
f0101f3d:	ff 55 08             	call   *0x8(%ebp)f0101f3d3567,155870
f0101f40:	83 c4 10             	add    $0x10,%espf0101f403569,155930
f0101f43:	eb 45                	jmp    f0101f8a <.L35+0x45>f0101f433570,155980
f0101f45 <.L35>:f0101f453572,156041
f0101f45:	83 ec 08             	sub    $0x8,%espf0101f453574,156081
f0101f48:	56                   	push   %esif0101f483575,156130
f0101f49:	6a 30                	push   $0x30f0101f493576,156174
f0101f4b:	ff 55 08             	call   *0x8(%ebp)f0101f4b3577,156219
f0101f4e:	83 c4 08             	add    $0x8,%espf0101f4e3579,156292
f0101f51:	56                   	push   %esif0101f513580,156341
f0101f52:	6a 78                	push   $0x78f0101f523581,156385
f0101f54:	ff 55 08             	call   *0x8(%ebp)f0101f543582,156430
			num = (unsigned long long)num3583,156480
f0101f57:	8b 45 14             	mov    0x14(%ebp),%eaxf0101f573584,156510
f0101f5a:	8b 10                	mov    (%eax),%edxf0101f5a3585,156565
f0101f5c:	b9 00 00 00 00       	mov    $0x0,%ecxf0101f5c3586,156616
f0101f61:	83 c4 10             	add    $0x10,%espf0101f613588,156681
f0101f64:	8d 40 04             	lea    0x4(%eax),%eaxf0101f643590,156767
f0101f67:	89 45 14             	mov    %eax,0x14(%ebp)f0101f673591,156821
			base = 16;base3592,156876
f0101f6a:	b8 10 00 00 00       	mov    $0x10,%eaxf0101f6a3593,156890
f0101f6f:	83 ec 0c             	sub    $0xc,%espf0101f6f3595,156992
f0101f72:	0f be 7d d4          	movsbl -0x2c(%ebp),%edif0101f723596,157041
f0101f76:	57                   	push   %edif0101f763597,157097
f0101f77:	ff 75 e0             	pushl  -0x20(%ebp)f0101f773598,157141
f0101f7a:	50                   	push   %eaxf0101f7a3599,157192
f0101f7b:	51                   	push   %ecxf0101f7b3600,157236
f0101f7c:	52                   	push   %edxf0101f7c3601,157280
f0101f7d:	89 f2                	mov    %esi,%edxf0101f7d3602,157324
f0101f7f:	8b 45 08             	mov    0x8(%ebp),%eaxf0101f7f3603,157373
f0101f82:	e8 55 fb ff ff       	call   f0101adc <printnum>f0101f823604,157427
f0101f87:	83 c4 20             	add    $0x20,%espf0101f873606,157496
			err = va_arg(ap, int);err3607,157546
f0101f8a:	8b 7d e4             	mov    -0x1c(%ebp),%edif0101f8a3608,157572
f0101f8d:	83 c7 01             	add    $0x1,%edif0101f8d3610,157679
f0101f90:	0f b6 47 ff          	movzbl -0x1(%edi),%eaxf0101f903611,157728
f0101f94:	83 f8 25             	cmp    $0x25,%eaxf0101f943612,157783
f0101f97:	0f 84 62 fc ff ff    	je     f0101bff <vprintfmt+0x1f>f0101f973613,157833
f0101f9d:	85 c0                	test   %eax,%eaxf0101f9d3615,157917
f0101f9f:	0f 84 91 00 00 00    	je     f0102036 <.L22+0x21>f0101f9f3616,157966
f0101fa5:	83 ec 08             	sub    $0x8,%espf0101fa53618,158048
f0101fa8:	56                   	push   %esif0101fa83619,158097
f0101fa9:	50                   	push   %eaxf0101fa93620,158141
f0101faa:	ff 55 08             	call   *0x8(%ebp)f0101faa3621,158185
f0101fad:	83 c4 10             	add    $0x10,%espf0101fad3622,158235
f0101fb0:	eb db                	jmp    f0101f8d <.L35+0x48>f0101fb03623,158285
f0101fb2 <.L38>:f0101fb23625,158346
f0101fb2:	8b 4d cc             	mov    -0x34(%ebp),%ecxf0101fb23626,158363
f0101fb5:	83 f9 01             	cmp    $0x1,%ecxf0101fb53628,158436
f0101fb8:	7e 15                	jle    f0101fcf <.L38+0x1d>f0101fb83629,158485
f0101fba:	8b 45 14             	mov    0x14(%ebp),%eaxf0101fba3631,158587
f0101fbd:	8b 10                	mov    (%eax),%edxf0101fbd3632,158642
f0101fbf:	8b 48 04             	mov    0x4(%eax),%ecxf0101fbf3633,158693
f0101fc2:	8d 40 08             	lea    0x8(%eax),%eaxf0101fc23634,158747
f0101fc5:	89 45 14             	mov    %eax,0x14(%ebp)f0101fc53635,158801
			base = 16;base3636,158856
f0101fc8:	b8 10 00 00 00       	mov    $0x10,%eaxf0101fc83637,158870
f0101fcd:	eb a0                	jmp    f0101f6f <.L35+0x2a>f0101fcd3638,158920
f0101fcf:	85 c9                	test   %ecx,%ecxf0101fcf3640,158997
f0101fd1:	75 17                	jne    f0101fea <.L38+0x38>f0101fd13641,159046
f0101fd3:	8b 45 14             	mov    0x14(%ebp),%eaxf0101fd33643,159142
f0101fd6:	8b 10                	mov    (%eax),%edxf0101fd63644,159197
f0101fd8:	b9 00 00 00 00       	mov    $0x0,%ecxf0101fd83645,159248
f0101fdd:	8d 40 04             	lea    0x4(%eax),%eaxf0101fdd3646,159297
f0101fe0:	89 45 14             	mov    %eax,0x14(%ebp)f0101fe03647,159351
			base = 16;base3648,159406
f0101fe3:	b8 10 00 00 00       	mov    $0x10,%eaxf0101fe33649,159420
f0101fe8:	eb 85                	jmp    f0101f6f <.L35+0x2a>f0101fe83650,159470
f0101fea:	8b 45 14             	mov    0x14(%ebp),%eaxf0101fea3652,159567
f0101fed:	8b 10                	mov    (%eax),%edxf0101fed3653,159622
f0101fef:	b9 00 00 00 00       	mov    $0x0,%ecxf0101fef3654,159673
f0101ff4:	8d 40 04             	lea    0x4(%eax),%eaxf0101ff43655,159722
f0101ff7:	89 45 14             	mov    %eax,0x14(%ebp)f0101ff73656,159776
			base = 16;base3657,159831
f0101ffa:	b8 10 00 00 00       	mov    $0x10,%eaxf0101ffa3658,159845
f0101fff:	e9 6b ff ff ff       	jmp    f0101f6f <.L35+0x2a>f0101fff3659,159895
f0102004 <.L25>:f01020043661,159956
f0102004:	83 ec 08             	sub    $0x8,%espf01020043663,159995
f0102007:	56                   	push   %esif01020073664,160044
f0102008:	6a 25                	push   $0x25f01020083665,160088
f010200a:	ff 55 08             	call   *0x8(%ebp)f010200a3666,160133
f010200d:	83 c4 10             	add    $0x10,%espf010200d3668,160193
f0102010:	e9 75 ff ff ff       	jmp    f0101f8a <.L35+0x45>f01020103669,160243
f0102015 <.L22>:f01020153671,160304
f0102015:	83 ec 08             	sub    $0x8,%espf01020153673,160344
f0102018:	56                   	push   %esif01020183674,160393
f0102019:	6a 25                	push   $0x25f01020193675,160437
f010201b:	ff 55 08             	call   *0x8(%ebp)f010201b3676,160482
f010201e:	83 c4 10             	add    $0x10,%espf010201e3678,160570
f0102021:	89 f8                	mov    %edi,%eaxf01020213679,160620
f0102023:	eb 03                	jmp    f0102028 <.L22+0x13>f01020233680,160669
f0102025:	83 e8 01             	sub    $0x1,%eaxf01020253681,160729
f0102028:	80 78 ff 25          	cmpb   $0x25,-0x1(%eax)f01020283682,160778
f010202c:	75 f7                	jne    f0102025 <.L22+0x10>f010202c3683,160834
f010202e:	89 45 e4             	mov    %eax,-0x1c(%ebp)f010202e3684,160894
f0102031:	e9 54 ff ff ff       	jmp    f0101f8a <.L35+0x45>f01020313685,160950
f0102036:	8d 65 f4             	lea    -0xc(%ebp),%espf01020363687,161012
f0102039:	5b                   	pop    %ebxf01020393688,161067
f010203a:	5e                   	pop    %esif010203a3689,161111
f010203b:	5f                   	pop    %edif010203b3690,161155
f010203c:	5d                   	pop    %ebpf010203c3691,161199
f010203d:	c3                   	ret    f010203d3692,161243
f010203e <vsnprintf>:f010203e3694,161284
intint3696,161307
f010203e:	55                   	push   %ebpf010203e3699,161370
f010203f:	89 e5                	mov    %esp,%ebpf010203f3700,161414
f0102041:	53                   	push   %ebxf01020413701,161463
f0102042:	83 ec 14             	sub    $0x14,%espf01020423702,161507
f0102045:	e8 05 e1 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01020453703,161557
f010204a:	81 c3 be 22 01 00    	add    $0x122be,%ebxf010204a3704,161629
f0102050:	8b 45 08             	mov    0x8(%ebp),%eaxf01020503705,161682
f0102053:	8b 55 0c             	mov    0xc(%ebp),%edxf01020533706,161736
f0102056:	89 45 ec             	mov    %eax,-0x14(%ebp)f01020563708,161831
f0102059:	8d 4c 10 ff          	lea    -0x1(%eax,%edx,1),%ecxf01020593709,161887
f010205d:	89 4d f0             	mov    %ecx,-0x10(%ebp)f010205d3710,161949
f0102060:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)f01020603711,162005
f0102067:	85 c0                	test   %eax,%eaxf01020673714,162088
f0102069:	74 2b                	je     f0102096 <vsnprintf+0x58>f01020693715,162137
f010206b:	85 d2                	test   %edx,%edxf010206b3716,162202
f010206d:	7e 27                	jle    f0102096 <vsnprintf+0x58>f010206d3717,162251
f010206f:	ff 75 14             	pushl  0x14(%ebp)f010206f3722,162416
f0102072:	ff 75 10             	pushl  0x10(%ebp)f01020723723,162466
f0102075:	8d 45 ec             	lea    -0x14(%ebp),%eaxf01020753724,162516
f0102078:	50                   	push   %eaxf01020783725,162572
f0102079:	8d 83 9e d8 fe ff    	lea    -0x12762(%ebx),%eaxf01020793726,162616
f010207f:	50                   	push   %eaxf010207f3727,162675
f0102080:	e8 5b fb ff ff       	call   f0101be0 <vprintfmt>f01020803728,162719
f0102085:	8b 45 ec             	mov    -0x14(%ebp),%eaxf01020853732,162826
f0102088:	c6 00 00             	movb   $0x0,(%eax)f01020883733,162882
f010208b:	8b 45 f4             	mov    -0xc(%ebp),%eaxf010208b3736,162949
f010208e:	83 c4 10             	add    $0x10,%espf010208e3737,163004
f0102091:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01020913739,163056
f0102094:	c9                   	leave  f01020943740,163111
f0102095:	c3                   	ret    f01020953741,163151
f0102096:	b8 fd ff ff ff       	mov    $0xfffffffd,%eaxf01020963743,163210
f010209b:	eb f4                	jmp    f0102091 <vsnprintf+0x53>f010209b3744,163266
f010209d <snprintf>:f010209d3746,163332
intint3748,163354
f010209d:	55                   	push   %ebpf010209d3751,163409
f010209e:	89 e5                	mov    %esp,%ebpf010209e3752,163453
f01020a0:	83 ec 08             	sub    $0x8,%espf01020a03753,163502
f01020a3:	8d 45 14             	lea    0x14(%ebp),%eaxf01020a33758,163594
	rc = vsnprintf(buf, n, fmt, ap);rc3759,163649
f01020a6:	50                   	push   %eaxf01020a63760,163683
f01020a7:	ff 75 10             	pushl  0x10(%ebp)f01020a73761,163727
f01020aa:	ff 75 0c             	pushl  0xc(%ebp)f01020aa3762,163777
f01020ad:	ff 75 08             	pushl  0x8(%ebp)f01020ad3763,163826
f01020b0:	e8 89 ff ff ff       	call   f010203e <vsnprintf>f01020b03764,163875
f01020b5:	c9                   	leave  f01020b53769,163963
f01020b6:	c3                   	ret    f01020b63770,164003
f01020b7 <readline>:f01020b73772,164044
#define BUFLEN 1024BUFLEN3773,164065
static char buf[BUFLEN];static3774,164085
char *char3776,164111
f01020b7:	55                   	push   %ebpf01020b73779,164149
f01020b8:	89 e5                	mov    %esp,%ebpf01020b83780,164193
f01020ba:	57                   	push   %edif01020ba3781,164242
f01020bb:	56                   	push   %esif01020bb3782,164286
f01020bc:	53                   	push   %ebxf01020bc3783,164330
f01020bd:	83 ec 1c             	sub    $0x1c,%espf01020bd3784,164374
f01020c0:	e8 8a e0 ff ff       	call   f010014f <__x86.get_pc_thunk.bx>f01020c03785,164424
f01020c5:	81 c3 43 22 01 00    	add    $0x12243,%ebxf01020c53786,164496
f01020cb:	8b 45 08             	mov    0x8(%ebp),%eaxf01020cb3787,164549
f01020ce:	85 c0                	test   %eax,%eaxf01020ce3791,164645
f01020d0:	74 13                	je     f01020e5 <readline+0x2e>f01020d03792,164694
f01020d2:	83 ec 08             	sub    $0x8,%espf01020d23794,164783
f01020d5:	50                   	push   %eaxf01020d53795,164832
f01020d6:	8d 83 90 eb fe ff    	lea    -0x11470(%ebx),%eaxf01020d63796,164876
f01020dc:	50                   	push   %eaxf01020dc3797,164935
f01020dd:	e8 ee f6 ff ff       	call   f01017d0 <cprintf>f01020dd3798,164979
f01020e2:	83 c4 10             	add    $0x10,%espf01020e23799,165037
	i = 0;i3801,165088
	echoing = iscons(0);echoing3802,165096
f01020e5:	83 ec 0c             	sub    $0xc,%espf01020e53803,165118
f01020e8:	6a 00                	push   $0x0f01020e83804,165167
f01020ea:	e8 f8 e5 ff ff       	call   f01006e7 <iscons>f01020ea3805,165211
f01020ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)f01020ef3806,165268
f01020f2:	83 c4 10             	add    $0x10,%espf01020f23807,165324
	i = 0;i3808,165374
f01020f5:	bf 00 00 00 00       	mov    $0x0,%edif01020f53809,165382
f01020fa:	eb 46                	jmp    f0102142 <readline+0x8b>f01020fa3810,165431
		c = getchar();c3812,165508
f01020fc:	83 ec 08             	sub    $0x8,%espf01020fc3815,165575
f01020ff:	50                   	push   %eaxf01020ff3816,165624
f0102100:	8d 83 30 ef fe ff    	lea    -0x110d0(%ebx),%eaxf01021003817,165668
f0102106:	50                   	push   %eaxf01021063818,165727
f0102107:	e8 c4 f6 ff ff       	call   f01017d0 <cprintf>f01021073819,165771
f010210c:	83 c4 10             	add    $0x10,%espf010210c3821,165845
f010210f:	b8 00 00 00 00       	mov    $0x0,%eaxf010210f3822,165895
f0102114:	8d 65 f4             	lea    -0xc(%ebp),%espf01021143829,166003
f0102117:	5b                   	pop    %ebxf01021173830,166058
f0102118:	5e                   	pop    %esif01021183831,166102
f0102119:	5f                   	pop    %edif01021193832,166146
f010211a:	5d                   	pop    %ebpf010211a3833,166190
f010211b:	c3                   	ret    f010211b3834,166234
f010211c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f010211c3836,166290
f0102120:	75 05                	jne    f0102127 <readline+0x70>f01021203837,166346
f0102122:	83 ef 01             	sub    $0x1,%edif01021223839,166418
f0102125:	eb 1b                	jmp    f0102142 <readline+0x8b>f01021253840,166467
f0102127:	83 ec 0c             	sub    $0xc,%espf01021273842,166551
f010212a:	6a 08                	push   $0x8f010212a3843,166600
f010212c:	e8 95 e5 ff ff       	call   f01006c6 <cputchar>f010212c3844,166644
f0102131:	83 c4 10             	add    $0x10,%espf01021313845,166703
f0102134:	eb ec                	jmp    f0102122 <readline+0x6b>f01021343846,166753
f0102136:	89 f0                	mov    %esi,%eaxf01021363848,166834
f0102138:	88 84 3b b8 1f 00 00 	mov    %al,0x1fb8(%ebx,%edi,1)f01021383849,166883
f010213f:	8d 7f 01             	lea    0x1(%edi),%edif010213f3850,166946
		c = getchar();c3851,167000
f0102142:	e8 8f e5 ff ff       	call   f01006d6 <getchar>f01021423852,167017
f0102147:	89 c6                	mov    %eax,%esif01021473853,167075
f0102149:	85 c0                	test   %eax,%eaxf01021493855,167139
f010214b:	78 af                	js     f01020fc <readline+0x45>f010214b3856,167188
f010214d:	83 f8 08             	cmp    $0x8,%eaxf010214d3858,167304
f0102150:	0f 94 c2             	sete   %dlf01021503859,167353
f0102153:	83 f8 7f             	cmp    $0x7f,%eaxf01021533860,167396
f0102156:	0f 94 c0             	sete   %alf01021563861,167446
f0102159:	08 c2                	or     %al,%dlf01021593862,167489
f010215b:	74 04                	je     f0102161 <readline+0xaa>f010215b3863,167536
f010215d:	85 ff                	test   %edi,%edif010215d3864,167600
f010215f:	7f bb                	jg     f010211c <readline+0x65>f010215f3865,167649
f0102161:	83 fe 1f             	cmp    $0x1f,%esif01021613867,167754
f0102164:	7e 1c                	jle    f0102182 <readline+0xcb>f01021643868,167804
f0102166:	81 ff fe 03 00 00    	cmp    $0x3fe,%edif01021663869,167868
f010216c:	7f 14                	jg     f0102182 <readline+0xcb>f010216c3870,167919
f010216e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f010216e3872,167999
f0102172:	74 c2                	je     f0102136 <readline+0x7f>f01021723873,168055
f0102174:	83 ec 0c             	sub    $0xc,%espf01021743875,168136
f0102177:	56                   	push   %esif01021773876,168185
f0102178:	e8 49 e5 ff ff       	call   f01006c6 <cputchar>f01021783877,168229
f010217d:	83 c4 10             	add    $0x10,%espf010217d3878,168288
f0102180:	eb b4                	jmp    f0102136 <readline+0x7f>f01021803879,168338
f0102182:	83 fe 0a             	cmp    $0xa,%esif01021823881,168441
f0102185:	74 05                	je     f010218c <readline+0xd5>f01021853882,168490
f0102187:	83 fe 0d             	cmp    $0xd,%esif01021873883,168554
f010218a:	75 b6                	jne    f0102142 <readline+0x8b>f010218a3884,168603
f010218c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)f010218c3886,168683
f0102190:	75 13                	jne    f01021a5 <readline+0xee>f01021903887,168739
f0102192:	c6 84 3b b8 1f 00 00 	movb   $0x0,0x1fb8(%ebx,%edi,1)f01021923889,168818
f0102199:	00 f01021993890,168882
f010219a:	8d 83 b8 1f 00 00    	lea    0x1fb8(%ebx),%eaxf010219a3892,168911
f01021a0:	e9 6f ff ff ff       	jmp    f0102114 <readline+0x5d>f01021a03893,168968
f01021a5:	83 ec 0c             	sub    $0xc,%espf01021a53895,169052
f01021a8:	6a 0a                	push   $0xaf01021a83896,169101
f01021aa:	e8 17 e5 ff ff       	call   f01006c6 <cputchar>f01021aa3897,169145
f01021af:	83 c4 10             	add    $0x10,%espf01021af3898,169204
f01021b2:	eb de                	jmp    f0102192 <readline+0xdb>f01021b23899,169254
f01021b4 <strlen>:f01021b43901,169319
#define ASM 1ASM3903,169377
intint3905,169392
f01021b4:	55                   	push   %ebpf01021b43908,169420
f01021b5:	89 e5                	mov    %esp,%ebpf01021b53909,169464
f01021b7:	8b 55 08             	mov    0x8(%ebp),%edxf01021b73910,169513
f01021ba:	b8 00 00 00 00       	mov    $0x0,%eaxf01021ba3914,169606
f01021bf:	eb 03                	jmp    f01021c4 <strlen+0x10>f01021bf3915,169655
f01021c1:	83 c0 01             	add    $0x1,%eaxf01021c13917,169724
f01021c4:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)f01021c43919,169803
f01021c8:	75 f7                	jne    f01021c1 <strlen+0xd>f01021c83920,169861
f01021ca:	5d                   	pop    %ebpf01021ca3923,169935
f01021cb:	c3                   	ret    f01021cb3924,169979
f01021cc <strnlen>:f01021cc3926,170020
intint3928,170041
f01021cc:	55                   	push   %ebpf01021cc3931,170083
f01021cd:	89 e5                	mov    %esp,%ebpf01021cd3932,170127
f01021cf:	8b 4d 08             	mov    0x8(%ebp),%ecxf01021cf3933,170176
f01021d2:	8b 55 0c             	mov    0xc(%ebp),%edxf01021d23934,170230
f01021d5:	b8 00 00 00 00       	mov    $0x0,%eaxf01021d53938,170343
f01021da:	eb 03                	jmp    f01021df <strnlen+0x13>f01021da3939,170392
f01021dc:	83 c0 01             	add    $0x1,%eaxf01021dc3941,170462
f01021df:	39 d0                	cmp    %edx,%eaxf01021df3943,170561
f01021e1:	74 06                	je     f01021e9 <strnlen+0x1d>f01021e13944,170610
f01021e3:	80 3c 01 00          	cmpb   $0x0,(%ecx,%eax,1)f01021e33945,170673
f01021e7:	75 f3                	jne    f01021dc <strnlen+0x10>f01021e73946,170731
f01021e9:	5d                   	pop    %ebpf01021e93949,170807
f01021ea:	c3                   	ret    f01021ea3950,170851
f01021eb <strcpy>:f01021eb3952,170892
char *char3954,170912
f01021eb:	55                   	push   %ebpf01021eb3957,170956
f01021ec:	89 e5                	mov    %esp,%ebpf01021ec3958,171000
f01021ee:	53                   	push   %ebxf01021ee3959,171049
f01021ef:	8b 45 08             	mov    0x8(%ebp),%eaxf01021ef3960,171093
f01021f2:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01021f23961,171147
	ret = dst;ret3964,171214
f01021f5:	89 c2                	mov    %eax,%edxf01021f53966,171261
f01021f7:	83 c1 01             	add    $0x1,%ecxf01021f73967,171310
f01021fa:	83 c2 01             	add    $0x1,%edxf01021fa3968,171359
f01021fd:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebxf01021fd3969,171408
f0102201:	88 5a ff             	mov    %bl,-0x1(%edx)f01022013970,171463
f0102204:	84 db                	test   %bl,%blf01022043971,171517
f0102206:	75 ef                	jne    f01021f7 <strcpy+0xc>f01022063972,171564
f0102208:	5b                   	pop    %ebxf01022083976,171660
f0102209:	5d                   	pop    %ebpf01022093977,171704
f010220a:	c3                   	ret    f010220a3978,171748
f010220b <strcat>:f010220b3980,171789
char *char3982,171809
f010220b:	55                   	push   %ebpf010220b3985,171853
f010220c:	89 e5                	mov    %esp,%ebpf010220c3986,171897
f010220e:	53                   	push   %ebxf010220e3987,171946
f010220f:	8b 5d 08             	mov    0x8(%ebp),%ebxf010220f3988,171990
f0102212:	53                   	push   %ebxf01022123990,172068
f0102213:	e8 9c ff ff ff       	call   f01021b4 <strlen>f01022133991,172112
f0102218:	83 c4 04             	add    $0x4,%espf01022183992,172169
f010221b:	ff 75 0c             	pushl  0xc(%ebp)f010221b3994,172243
f010221e:	01 d8                	add    %ebx,%eaxf010221e3995,172292
f0102220:	50                   	push   %eaxf01022203996,172341
f0102221:	e8 c5 ff ff ff       	call   f01021eb <strcpy>f01022213997,172385
f0102226:	89 d8                	mov    %ebx,%eaxf01022264000,172457
f0102228:	8b 5d fc             	mov    -0x4(%ebp),%ebxf01022284001,172506
f010222b:	c9                   	leave  f010222b4002,172561
f010222c:	c3                   	ret    f010222c4003,172601
f010222d <strncpy>:f010222d4005,172642
char *char4007,172663
f010222d:	55                   	push   %ebpf010222d4009,172721
f010222e:	89 e5                	mov    %esp,%ebpf010222e4010,172765
f0102230:	56                   	push   %esif01022304011,172814
f0102231:	53                   	push   %ebxf01022314012,172858
f0102232:	8b 75 08             	mov    0x8(%ebp),%esif01022324013,172902
f0102235:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01022354014,172956
f0102238:	89 f3                	mov    %esi,%ebxf01022384015,173010
f010223a:	03 5d 10             	add    0x10(%ebp),%ebxf010223a4016,173059
	ret = dst;ret4020,173138
f010223d:	89 f2                	mov    %esi,%edxf010223d4022,173180
f010223f:	eb 0f                	jmp    f0102250 <strncpy+0x23>f010223f4023,173229
f0102241:	83 c2 01             	add    $0x1,%edxf01022414025,173309
f0102244:	0f b6 01             	movzbl (%ecx),%eaxf01022444026,173358
f0102247:	88 42 ff             	mov    %al,-0x1(%edx)f01022474027,173409
f010224a:	80 39 01             	cmpb   $0x1,(%ecx)f010224a4031,173556
f010224d:	83 d9 ff             	sbb    $0xffffffff,%ecxf010224d4032,173607
f0102250:	39 da                	cmp    %ebx,%edxf01022504034,173693
f0102252:	75 ed                	jne    f0102241 <strncpy+0x14>f01022524035,173742
f0102254:	89 f0                	mov    %esi,%eaxf01022544039,173823
f0102256:	5b                   	pop    %ebxf01022564040,173872
f0102257:	5e                   	pop    %esif01022574041,173916
f0102258:	5d                   	pop    %ebpf01022584042,173960
f0102259:	c3                   	ret    f01022594043,174004
f010225a <strlcpy>:f010225a4045,174045
size_tsize_t4047,174066
f010225a:	55                   	push   %ebpf010225a4050,174124
f010225b:	89 e5                	mov    %esp,%ebpf010225b4051,174168
f010225d:	56                   	push   %esif010225d4052,174217
f010225e:	53                   	push   %ebxf010225e4053,174261
f010225f:	8b 75 08             	mov    0x8(%ebp),%esif010225f4054,174305
f0102262:	8b 55 0c             	mov    0xc(%ebp),%edxf01022624055,174359
f0102265:	8b 4d 10             	mov    0x10(%ebp),%ecxf01022654056,174413
f0102268:	89 f0                	mov    %esi,%eaxf01022684057,174468
f010226a:	8d 5c 0e ff          	lea    -0x1(%esi,%ecx,1),%ebxf010226a4058,174517
	dst_in = dst;dst_in4061,174595
f010226e:	85 c9                	test   %ecx,%ecxf010226e4063,174627
f0102270:	75 0b                	jne    f010227d <strlcpy+0x23>f01022704064,174676
f0102272:	eb 17                	jmp    f010228b <strlcpy+0x31>f01022724065,174739
f0102274:	83 c2 01             	add    $0x1,%edxf01022744068,174859
f0102277:	83 c0 01             	add    $0x1,%eaxf01022774069,174908
f010227a:	88 48 ff             	mov    %cl,-0x1(%eax)f010227a4070,174957
f010227d:	39 d8                	cmp    %ebx,%eaxf010227d4072,175048
f010227f:	74 07                	je     f0102288 <strlcpy+0x2e>f010227f4073,175097
f0102281:	0f b6 0a             	movzbl (%edx),%ecxf01022814074,175160
f0102284:	84 c9                	test   %cl,%clf01022844075,175211
f0102286:	75 ec                	jne    f0102274 <strlcpy+0x1a>f01022864076,175258
f0102288:	c6 00 00             	movb   $0x0,(%eax)f01022884078,175336
f010228b:	29 f0                	sub    %esi,%eaxf010228b4081,175412
f010228d:	5b                   	pop    %ebxf010228d4083,175463
f010228e:	5e                   	pop    %esif010228e4084,175507
f010228f:	5d                   	pop    %ebpf010228f4085,175551
f0102290:	c3                   	ret    f01022904086,175595
f0102291 <strcmp>:f01022914088,175636
intint4090,175656
f0102291:	55                   	push   %ebpf01022914093,175699
f0102292:	89 e5                	mov    %esp,%ebpf01022924094,175743
f0102294:	8b 4d 08             	mov    0x8(%ebp),%ecxf01022944095,175792
f0102297:	8b 55 0c             	mov    0xc(%ebp),%edxf01022974096,175846
f010229a:	eb 06                	jmp    f01022a2 <strcmp+0x11>f010229a4098,175924
f010229c:	83 c1 01             	add    $0x1,%ecxf010229c4100,175998
f010229f:	83 c2 01             	add    $0x1,%edxf010229f4101,176047
f01022a2:	0f b6 01             	movzbl (%ecx),%eaxf01022a24103,176120
f01022a5:	84 c0                	test   %al,%alf01022a54104,176171
f01022a7:	74 04                	je     f01022ad <strcmp+0x1c>f01022a74105,176218
f01022a9:	3a 02                	cmp    (%edx),%alf01022a94106,176280
f01022ab:	74 ef                	je     f010229c <strcmp+0xb>f01022ab4107,176330
f01022ad:	0f b6 c0             	movzbl %al,%eaxf01022ad4109,176448
f01022b0:	0f b6 12             	movzbl (%edx),%edxf01022b04110,176496
f01022b3:	29 d0                	sub    %edx,%eaxf01022b34111,176547
f01022b5:	5d                   	pop    %ebpf01022b54113,176598
f01022b6:	c3                   	ret    f01022b64114,176642
f01022b7 <strncmp>:f01022b74116,176683
intint4118,176704
f01022b7:	55                   	push   %ebpf01022b74121,176758
f01022b8:	89 e5                	mov    %esp,%ebpf01022b84122,176802
f01022ba:	53                   	push   %ebxf01022ba4123,176851
f01022bb:	8b 45 08             	mov    0x8(%ebp),%eaxf01022bb4124,176895
f01022be:	8b 55 0c             	mov    0xc(%ebp),%edxf01022be4125,176949
f01022c1:	89 c3                	mov    %eax,%ebxf01022c14126,177003
f01022c3:	03 5d 10             	add    0x10(%ebp),%ebxf01022c34127,177052
f01022c6:	eb 06                	jmp    f01022ce <strncmp+0x17>f01022c64129,177140
f01022c8:	83 c0 01             	add    $0x1,%eaxf01022c84131,177220
f01022cb:	83 c2 01             	add    $0x1,%edxf01022cb4132,177269
f01022ce:	39 d8                	cmp    %ebx,%eaxf01022ce4134,177351
f01022d0:	74 16                	je     f01022e8 <strncmp+0x31>f01022d04135,177400
f01022d2:	0f b6 08             	movzbl (%eax),%ecxf01022d24136,177463
f01022d5:	84 c9                	test   %cl,%clf01022d54137,177514
f01022d7:	74 04                	je     f01022dd <strncmp+0x26>f01022d74138,177561
f01022d9:	3a 0a                	cmp    (%edx),%clf01022d94139,177624
f01022db:	74 eb                	je     f01022c8 <strncmp+0x11>f01022db4140,177674
f01022dd:	0f b6 00             	movzbl (%eax),%eaxf01022dd4145,177826
f01022e0:	0f b6 12             	movzbl (%edx),%edxf01022e04146,177877
f01022e3:	29 d0                	sub    %edx,%eaxf01022e34147,177928
f01022e5:	5b                   	pop    %ebxf01022e54149,177979
f01022e6:	5d                   	pop    %ebpf01022e64150,178023
f01022e7:	c3                   	ret    f01022e74151,178067
f01022e8:	b8 00 00 00 00       	mov    $0x0,%eaxf01022e84153,178119
f01022ed:	eb f6                	jmp    f01022e5 <strncmp+0x2e>f01022ed4154,178168
f01022ef <strchr>:f01022ef4156,178232
char *char4160,178358
f01022ef:	55                   	push   %ebpf01022ef4163,178397
f01022f0:	89 e5                	mov    %esp,%ebpf01022f04164,178441
f01022f2:	8b 45 08             	mov    0x8(%ebp),%eaxf01022f24165,178490
f01022f5:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf01022f54166,178544
f01022f9:	0f b6 10             	movzbl (%eax),%edxf01022f94168,178615
f01022fc:	84 d2                	test   %dl,%dlf01022fc4169,178666
f01022fe:	74 09                	je     f0102309 <strchr+0x1a>f01022fe4170,178713
f0102300:	38 ca                	cmp    %cl,%dlf01023004172,178790
f0102302:	74 0a                	je     f010230e <strchr+0x1f>f01023024173,178837
f0102304:	83 c0 01             	add    $0x1,%eaxf01023044175,178916
f0102307:	eb f0                	jmp    f01022f9 <strchr+0xa>f01023074176,178965
f0102309:	b8 00 00 00 00       	mov    $0x0,%eaxf01023094179,179059
f010230e:	5d                   	pop    %ebpf010230e4181,179110
f010230f:	c3                   	ret    f010230f4182,179154
f0102310 <strfind>:f01023104184,179195
char *char4188,179353
f0102310:	55                   	push   %ebpf01023104191,179393
f0102311:	89 e5                	mov    %esp,%ebpf01023114192,179437
f0102313:	8b 45 08             	mov    0x8(%ebp),%eaxf01023134193,179486
f0102316:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecxf01023164194,179540
f010231a:	eb 03                	jmp    f010231f <strfind+0xf>f010231a4196,179611
f010231c:	83 c0 01             	add    $0x1,%eaxf010231c4197,179673
f010231f:	0f b6 10             	movzbl (%eax),%edxf010231f4198,179722
f0102322:	38 ca                	cmp    %cl,%dlf01023224200,179788
f0102324:	74 04                	je     f010232a <strfind+0x1a>f01023244201,179835
f0102326:	84 d2                	test   %dl,%dlf01023264202,179898
f0102328:	75 f2                	jne    f010231c <strfind+0xc>f01023284203,179945
f010232a:	5d                   	pop    %ebpf010232a4207,180039
f010232b:	c3                   	ret    f010232b4208,180083
f010232c <memset>:f010232c4210,180124
void *void4213,180152
f010232c:	55                   	push   %ebpf010232c4216,180194
f010232d:	89 e5                	mov    %esp,%ebpf010232d4217,180238
f010232f:	57                   	push   %edif010232f4218,180287
f0102330:	56                   	push   %esif01023304219,180331
f0102331:	53                   	push   %ebxf01023314220,180375
f0102332:	8b 7d 08             	mov    0x8(%ebp),%edif01023324221,180419
f0102335:	8b 4d 10             	mov    0x10(%ebp),%ecxf01023354222,180473
f0102338:	85 c9                	test   %ecx,%ecxf01023384226,180552
f010233a:	74 13                	je     f010234f <memset+0x23>f010233a4227,180601
f010233c:	f7 c7 03 00 00 00    	test   $0x3,%edif010233c4230,180709
f0102342:	75 05                	jne    f0102349 <memset+0x1d>f01023424231,180758
f0102344:	f6 c1 03             	test   $0x3,%clf01023444232,180820
f0102347:	74 0d                	je     f0102356 <memset+0x2a>f01023474233,180868
		c = (c<<24)|(c<<16)|(c<<8)|c;c4234,180930
f0102349:	8b 45 0c             	mov    0xc(%ebp),%eaxf01023494240,181094
f010234c:	fc                   	cld    f010234c4241,181148
f010234d:	f3 aa                	rep stos %al,%es:(%edi)f010234d4242,181188
f010234f:	89 f8                	mov    %edi,%eaxf010234f4247,181311
f0102351:	5b                   	pop    %ebxf01023514248,181360
f0102352:	5e                   	pop    %esif01023524249,181404
f0102353:	5f                   	pop    %edif01023534250,181448
f0102354:	5d                   	pop    %ebpf01023544251,181492
f0102355:	c3                   	ret    f01023554252,181536
f0102356:	0f b6 55 0c          	movzbl 0xc(%ebp),%edxf01023564254,181589
		c = (c<<24)|(c<<16)|(c<<8)|c;c4255,181643
f010235a:	89 d3                	mov    %edx,%ebxf010235a4256,181675
f010235c:	c1 e3 08             	shl    $0x8,%ebxf010235c4257,181724
f010235f:	89 d0                	mov    %edx,%eaxf010235f4258,181773
f0102361:	c1 e0 18             	shl    $0x18,%eaxf01023614259,181822
f0102364:	89 d6                	mov    %edx,%esif01023644260,181872
f0102366:	c1 e6 10             	shl    $0x10,%esif01023664261,181921
f0102369:	09 f0                	or     %esi,%eaxf01023694262,181971
f010236b:	09 c2                	or     %eax,%edxf010236b4263,182020
f010236d:	09 da                	or     %ebx,%edxf010236d4264,182069
f010236f:	c1 e9 02             	shr    $0x2,%ecxf010236f4266,182152
f0102372:	89 d0                	mov    %edx,%eaxf01023724268,182235
f0102374:	fc                   	cld    f01023744269,182284
f0102375:	f3 ab                	rep stos %eax,%es:(%edi)f01023754270,182324
f0102377:	eb d6                	jmp    f010234f <memset+0x23>f01023774271,182381
f0102379 <memmove>:f01023794273,182444
void *void4275,182465
f0102379:	55                   	push   %ebpf01023794278,182520
f010237a:	89 e5                	mov    %esp,%ebpf010237a4279,182564
f010237c:	57                   	push   %edif010237c4280,182613
f010237d:	56                   	push   %esif010237d4281,182657
f010237e:	8b 45 08             	mov    0x8(%ebp),%eaxf010237e4282,182701
f0102381:	8b 75 0c             	mov    0xc(%ebp),%esif01023814283,182755
f0102384:	8b 4d 10             	mov    0x10(%ebp),%ecxf01023844284,182809
	s = src;s4288,182891
	d = dst;d4289,182901
f0102387:	39 c6                	cmp    %eax,%esif01023874291,182938
f0102389:	73 35                	jae    f01023c0 <memmove+0x47>f01023894292,182987
f010238b:	8d 14 0e             	lea    (%esi,%ecx,1),%edxf010238b4293,183050
f010238e:	39 c2                	cmp    %eax,%edxf010238e4294,183108
f0102390:	76 2e                	jbe    f01023c0 <memmove+0x47>f01023904295,183157
f0102392:	8d 3c 08             	lea    (%eax,%ecx,1),%edif01023924298,183240
f0102395:	89 d6                	mov    %edx,%esif01023954300,183348
f0102397:	09 fe                	or     %edi,%esif01023974301,183397
f0102399:	f7 c6 03 00 00 00    	test   $0x3,%esif01023994302,183446
f010239f:	74 0c                	je     f01023ad <memmove+0x34>f010239f4303,183495
f01023a1:	83 ef 01             	sub    $0x1,%edif01023a14309,183749
f01023a4:	8d 72 ff             	lea    -0x1(%edx),%esif01023a44310,183798
f01023a7:	fd                   	std    f01023a74312,183888
f01023a8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f01023a84313,183928
f01023aa:	fc                   	cld    f01023aa4316,184073
f01023ab:	eb 21                	jmp    f01023ce <memmove+0x55>f01023ab4317,184113
f01023ad:	f6 c1 03             	test   $0x3,%clf01023ad4319,184226
f01023b0:	75 ef                	jne    f01023a1 <memmove+0x28>f01023b04320,184274
f01023b2:	83 ef 04             	sub    $0x4,%edif01023b24322,184395
f01023b5:	8d 72 fc             	lea    -0x4(%edx),%esif01023b54323,184444
f01023b8:	c1 e9 02             	shr    $0x2,%ecxf01023b84324,184499
f01023bb:	fd                   	std    f01023bb4326,184583
f01023bc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01023bc4327,184623
f01023be:	eb ea                	jmp    f01023aa <memmove+0x31>f01023be4328,184687
f01023c0:	89 f2                	mov    %esi,%edxf01023c04331,184810
f01023c2:	09 c2                	or     %eax,%edxf01023c24332,184859
f01023c4:	f6 c2 03             	test   $0x3,%dlf01023c44333,184908
f01023c7:	74 09                	je     f01023d2 <memmove+0x59>f01023c74334,184956
f01023c9:	89 c7                	mov    %eax,%edif01023c94339,185150
f01023cb:	fc                   	cld    f01023cb4340,185199
f01023cc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)f01023cc4341,185239
f01023ce:	5e                   	pop    %esif01023ce4346,185373
f01023cf:	5f                   	pop    %edif01023cf4347,185417
f01023d0:	5d                   	pop    %ebpf01023d04348,185461
f01023d1:	c3                   	ret    f01023d14349,185505
f01023d2:	f6 c1 03             	test   $0x3,%clf01023d24351,185595
f01023d5:	75 f2                	jne    f01023c9 <memmove+0x50>f01023d54352,185643
f01023d7:	c1 e9 02             	shr    $0x2,%ecxf01023d74354,185760
f01023da:	89 c7                	mov    %eax,%edif01023da4356,185844
f01023dc:	fc                   	cld    f01023dc4357,185893
f01023dd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)f01023dd4358,185933
f01023df:	eb ed                	jmp    f01023ce <memmove+0x55>f01023df4359,185997
f01023e1 <memcpy>:f01023e14361,186061
void *void4365,186090
f01023e1:	55                   	push   %ebpf01023e14368,186144
f01023e2:	89 e5                	mov    %esp,%ebpf01023e24369,186188
f01023e4:	ff 75 10             	pushl  0x10(%ebp)f01023e44371,186267
f01023e7:	ff 75 0c             	pushl  0xc(%ebp)f01023e74372,186317
f01023ea:	ff 75 08             	pushl  0x8(%ebp)f01023ea4373,186366
f01023ed:	e8 87 ff ff ff       	call   f0102379 <memmove>f01023ed4374,186415
f01023f2:	c9                   	leave  f01023f24376,186475
f01023f3:	c3                   	ret    f01023f34377,186515
f01023f4 <memcmp>:f01023f44379,186556
intint4381,186576
f01023f4:	55                   	push   %ebpf01023f44384,186631
f01023f5:	89 e5                	mov    %esp,%ebpf01023f54385,186675
f01023f7:	56                   	push   %esif01023f74386,186724
f01023f8:	53                   	push   %ebxf01023f84387,186768
f01023f9:	8b 45 08             	mov    0x8(%ebp),%eaxf01023f94388,186812
f01023fc:	8b 55 0c             	mov    0xc(%ebp),%edxf01023fc4389,186866
f01023ff:	89 c6                	mov    %eax,%esif01023ff4390,186920
f0102401:	03 75 10             	add    0x10(%ebp),%esif01024014391,186969
f0102404:	39 f0                	cmp    %esi,%eaxf01024044396,187130
f0102406:	74 1c                	je     f0102424 <memcmp+0x30>f01024064397,187179
f0102408:	0f b6 08             	movzbl (%eax),%ecxf01024084399,187259
f010240b:	0f b6 1a             	movzbl (%edx),%ebxf010240b4400,187310
f010240e:	38 d9                	cmp    %bl,%clf010240e4401,187361
f0102410:	75 08                	jne    f010241a <memcmp+0x26>f01024104402,187408
f0102412:	83 c0 01             	add    $0x1,%eaxf01024124405,187517
f0102415:	83 c2 01             	add    $0x1,%edxf01024154406,187566
f0102418:	eb ea                	jmp    f0102404 <memcmp+0x10>f01024184407,187615
f010241a:	0f b6 c1             	movzbl %cl,%eaxf010241a4409,187710
f010241d:	0f b6 db             	movzbl %bl,%ebxf010241d4410,187758
f0102420:	29 d8                	sub    %ebx,%eaxf01024204411,187806
f0102422:	eb 05                	jmp    f0102429 <memcmp+0x35>f01024224412,187855
f0102424:	b8 00 00 00 00       	mov    $0x0,%eaxf01024244416,187932
f0102429:	5b                   	pop    %ebxf01024294418,187983
f010242a:	5e                   	pop    %esif010242a4419,188027
f010242b:	5d                   	pop    %ebpf010242b4420,188071
f010242c:	c3                   	ret    f010242c4421,188115
f010242d <memfind>:f010242d4423,188156
void *void4425,188177
f010242d:	55                   	push   %ebpf010242d4428,188226
f010242e:	89 e5                	mov    %esp,%ebpf010242e4429,188270
f0102430:	8b 45 08             	mov    0x8(%ebp),%eaxf01024304430,188319
f0102433:	8b 4d 0c             	mov    0xc(%ebp),%ecxf01024334431,188373
f0102436:	89 c2                	mov    %eax,%edxf01024364433,188469
f0102438:	03 55 10             	add    0x10(%ebp),%edxf01024384434,188518
f010243b:	39 d0                	cmp    %edx,%eaxf010243b4436,188596
f010243d:	73 09                	jae    f0102448 <memfind+0x1b>f010243d4437,188645
f010243f:	38 08                	cmp    %cl,(%eax)f010243f4439,188763
f0102441:	74 05                	je     f0102448 <memfind+0x1b>f01024414440,188813
f0102443:	83 c0 01             	add    $0x1,%eaxf01024434442,188899
f0102446:	eb f3                	jmp    f010243b <memfind+0xe>f01024464443,188948
f0102448:	5d                   	pop    %ebpf01024484447,189042
f0102449:	c3                   	ret    f01024494448,189086
f010244a <strtol>:f010244a4450,189127
longlong4452,189147
f010244a:	55                   	push   %ebpf010244a4455,189201
f010244b:	89 e5                	mov    %esp,%ebpf010244b4456,189245
f010244d:	57                   	push   %edif010244d4457,189294
f010244e:	56                   	push   %esif010244e4458,189338
f010244f:	53                   	push   %ebxf010244f4459,189382
f0102450:	8b 4d 08             	mov    0x8(%ebp),%ecxf01024504460,189426
f0102453:	8b 5d 10             	mov    0x10(%ebp),%ebxf01024534461,189480
f0102456:	eb 03                	jmp    f010245b <strtol+0x11>f01024564467,189628
f0102458:	83 c1 01             	add    $0x1,%ecxf01024584469,189697
f010245b:	0f b6 01             	movzbl (%ecx),%eaxf010245b4471,189779
f010245e:	3c 20                	cmp    $0x20,%alf010245e4472,189830
f0102460:	74 f6                	je     f0102458 <strtol+0xe>f01024604473,189879
f0102462:	3c 09                	cmp    $0x9,%alf01024624474,189940
f0102464:	74 f2                	je     f0102458 <strtol+0xe>f01024644475,189988
f0102466:	3c 2b                	cmp    $0x2b,%alf01024664479,190086
f0102468:	74 2e                	je     f0102498 <strtol+0x4e>f01024684480,190135
f010246a:	bf 00 00 00 00       	mov    $0x0,%edif010246a4482,190211
f010246f:	3c 2d                	cmp    $0x2d,%alf010246f4485,190288
f0102471:	74 2f                	je     f01024a2 <strtol+0x58>f01024714486,190337
f0102473:	f7 c3 ef ff ff ff    	test   $0xffffffef,%ebxf01024734491,190509
f0102479:	75 05                	jne    f0102480 <strtol+0x36>f01024794492,190565
f010247b:	80 39 30             	cmpb   $0x30,(%ecx)f010247b4493,190627
f010247e:	74 2c                	je     f01024ac <strtol+0x62>f010247e4494,190679
f0102480:	85 db                	test   %ebx,%ebxf01024804497,190798
f0102482:	75 0a                	jne    f010248e <strtol+0x44>f01024824498,190847
		base = 10;base4501,190947
f0102484:	bb 0a 00 00 00       	mov    $0xa,%ebxf01024844502,190960
f0102489:	80 39 30             	cmpb   $0x30,(%ecx)f01024894504,191045
f010248c:	74 28                	je     f01024b6 <strtol+0x6c>f010248c4505,191097
		base = 10;base4506,191159
f010248e:	b8 00 00 00 00       	mov    $0x0,%eaxf010248e4507,191172
f0102493:	89 5d 10             	mov    %ebx,0x10(%ebp)f01024934508,191221
f0102496:	eb 50                	jmp    f01024e8 <strtol+0x9e>f01024964509,191276
f0102498:	83 c1 01             	add    $0x1,%ecxf01024984511,191345
f010249b:	bf 00 00 00 00       	mov    $0x0,%edif010249b4513,191408
f01024a0:	eb d1                	jmp    f0102473 <strtol+0x29>f01024a04514,191457
f01024a2:	83 c1 01             	add    $0x1,%ecxf01024a24516,191535
f01024a5:	bf 01 00 00 00       	mov    $0x1,%edif01024a54517,191584
f01024aa:	eb c7                	jmp    f0102473 <strtol+0x29>f01024aa4518,191633
f01024ac:	80 79 01 78          	cmpb   $0x78,0x1(%ecx)f01024ac4520,191759
f01024b0:	74 0e                	je     f01024c0 <strtol+0x76>f01024b04521,191814
f01024b2:	85 db                	test   %ebx,%ebxf01024b24523,191912
f01024b4:	75 d8                	jne    f010248e <strtol+0x44>f01024b44524,191961
f01024b6:	83 c1 01             	add    $0x1,%ecxf01024b64526,192040
f01024b9:	bb 08 00 00 00       	mov    $0x8,%ebxf01024b94527,192089
f01024be:	eb ce                	jmp    f010248e <strtol+0x44>f01024be4528,192138
f01024c0:	83 c1 02             	add    $0x2,%ecxf01024c04530,192221
f01024c3:	bb 10 00 00 00       	mov    $0x10,%ebxf01024c34531,192270
f01024c8:	eb c4                	jmp    f010248e <strtol+0x44>f01024c84532,192320
			dig = *s - '0';dig4537,192437
f01024ca:	8d 72 9f             	lea    -0x61(%edx),%esif01024ca4539,192491
f01024cd:	89 f3                	mov    %esi,%ebxf01024cd4540,192547
f01024cf:	80 fb 19             	cmp    $0x19,%blf01024cf4541,192596
f01024d2:	77 29                	ja     f01024fd <strtol+0xb3>f01024d24542,192645
			dig = *s - 'a' + 10;dig4543,192707
f01024d4:	0f be d2             	movsbl %dl,%edxf01024d44544,192731
f01024d7:	83 ea 57             	sub    $0x57,%edxf01024d74545,192779
			dig = *s - 'A' + 10;dig4547,192864
f01024da:	3b 55 10             	cmp    0x10(%ebp),%edxf01024da4551,192924
f01024dd:	7d 30                	jge    f010250f <strtol+0xc5>f01024dd4552,192979
f01024df:	83 c1 01             	add    $0x1,%ecxf01024df4555,193084
f01024e2:	0f af 45 10          	imul   0x10(%ebp),%eaxf01024e24556,193133
f01024e6:	01 d0                	add    %edx,%eaxf01024e64557,193188
f01024e8:	0f b6 11             	movzbl (%ecx),%edxf01024e84559,193267
f01024eb:	8d 72 d0             	lea    -0x30(%edx),%esif01024eb4560,193318
f01024ee:	89 f3                	mov    %esi,%ebxf01024ee4561,193374
f01024f0:	80 fb 09             	cmp    $0x9,%blf01024f04562,193423
f01024f3:	77 d5                	ja     f01024ca <strtol+0x80>f01024f34563,193471
			dig = *s - '0';dig4564,193533
f01024f5:	0f be d2             	movsbl %dl,%edxf01024f54565,193552
f01024f8:	83 ea 30             	sub    $0x30,%edxf01024f84566,193600
f01024fb:	eb dd                	jmp    f01024da <strtol+0x90>f01024fb4567,193650
f01024fd:	8d 72 bf             	lea    -0x41(%edx),%esif01024fd4569,193747
f0102500:	89 f3                	mov    %esi,%ebxf01025004570,193803
f0102502:	80 fb 19             	cmp    $0x19,%blf01025024571,193852
f0102505:	77 08                	ja     f010250f <strtol+0xc5>f01025054572,193901
			dig = *s - 'A' + 10;dig4573,193963
f0102507:	0f be d2             	movsbl %dl,%edxf01025074574,193987
f010250a:	83 ea 37             	sub    $0x37,%edxf010250a4575,194035
f010250d:	eb cb                	jmp    f01024da <strtol+0x90>f010250d4576,194085
f010250f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)f010250f4581,194204
f0102513:	74 05                	je     f010251a <strtol+0xd0>f01025134582,194258
f0102515:	8b 75 0c             	mov    0xc(%ebp),%esif01025154584,194344
f0102518:	89 0e                	mov    %ecx,(%esi)f01025184585,194398
f010251a:	89 c2                	mov    %eax,%edxf010251a4587,194477
f010251c:	f7 da                	neg    %edxf010251c4588,194526
f010251e:	85 ff                	test   %edi,%edif010251e4589,194570
f0102520:	0f 45 c2             	cmovne %edx,%eaxf01025204590,194619
f0102523:	5b                   	pop    %ebxf01025234592,194670
f0102524:	5e                   	pop    %esif01025244593,194714
f0102525:	5f                   	pop    %edif01025254594,194758
f0102526:	5d                   	pop    %ebpf01025264595,194802
f0102527:	c3                   	ret    f01025274596,194846
f0102528:	66 90                	xchg   %ax,%axf01025284597,194886
f010252a:	66 90                	xchg   %ax,%axf010252a4598,194933
f010252c:	66 90                	xchg   %ax,%axf010252c4599,194980
f010252e:	66 90                	xchg   %ax,%axf010252e4600,195027
f0102530 <__udivdi3>:f01025304602,195075
f0102530:	55                   	push   %ebpf01025304603,195097
f0102531:	57                   	push   %edif01025314604,195141
f0102532:	56                   	push   %esif01025324605,195185
f0102533:	53                   	push   %ebxf01025334606,195229
f0102534:	83 ec 1c             	sub    $0x1c,%espf01025344607,195273
f0102537:	8b 54 24 3c          	mov    0x3c(%esp),%edxf01025374608,195323
f010253b:	8b 6c 24 30          	mov    0x30(%esp),%ebpf010253b4609,195378
f010253f:	8b 74 24 34          	mov    0x34(%esp),%esif010253f4610,195433
f0102543:	8b 5c 24 38          	mov    0x38(%esp),%ebxf01025434611,195488
f0102547:	85 d2                	test   %edx,%edxf01025474612,195543
f0102549:	75 35                	jne    f0102580 <__udivdi3+0x50>f01025494613,195592
f010254b:	39 f3                	cmp    %esi,%ebxf010254b4614,195657
f010254d:	0f 87 bd 00 00 00    	ja     f0102610 <__udivdi3+0xe0>f010254d4615,195706
f0102553:	85 db                	test   %ebx,%ebxf01025534616,195771
f0102555:	89 d9                	mov    %ebx,%ecxf01025554617,195820
f0102557:	75 0b                	jne    f0102564 <__udivdi3+0x34>f01025574618,195869
f0102559:	b8 01 00 00 00       	mov    $0x1,%eaxf01025594619,195934
f010255e:	31 d2                	xor    %edx,%edxf010255e4620,195983
f0102560:	f7 f3                	div    %ebxf01025604621,196032
f0102562:	89 c1                	mov    %eax,%ecxf01025624622,196076
f0102564:	31 d2                	xor    %edx,%edxf01025644623,196125
f0102566:	89 f0                	mov    %esi,%eaxf01025664624,196174
f0102568:	f7 f1                	div    %ecxf01025684625,196223
f010256a:	89 c6                	mov    %eax,%esif010256a4626,196267
f010256c:	89 e8                	mov    %ebp,%eaxf010256c4627,196316
f010256e:	89 f7                	mov    %esi,%edif010256e4628,196365
f0102570:	f7 f1                	div    %ecxf01025704629,196414
f0102572:	89 fa                	mov    %edi,%edxf01025724630,196458
f0102574:	83 c4 1c             	add    $0x1c,%espf01025744631,196507
f0102577:	5b                   	pop    %ebxf01025774632,196557
f0102578:	5e                   	pop    %esif01025784633,196601
f0102579:	5f                   	pop    %edif01025794634,196645
f010257a:	5d                   	pop    %ebpf010257a4635,196689
f010257b:	c3                   	ret    f010257b4636,196733
f010257c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif010257c4637,196773
f0102580:	39 f2                	cmp    %esi,%edxf01025804638,196834
f0102582:	77 7c                	ja     f0102600 <__udivdi3+0xd0>f01025824639,196883
f0102584:	0f bd fa             	bsr    %edx,%edif01025844640,196948
f0102587:	83 f7 1f             	xor    $0x1f,%edif01025874641,196997
f010258a:	0f 84 98 00 00 00    	je     f0102628 <__udivdi3+0xf8>f010258a4642,197047
f0102590:	89 f9                	mov    %edi,%ecxf01025904643,197112
f0102592:	b8 20 00 00 00       	mov    $0x20,%eaxf01025924644,197161
f0102597:	29 f8                	sub    %edi,%eaxf01025974645,197211
f0102599:	d3 e2                	shl    %cl,%edxf01025994646,197260
f010259b:	89 54 24 08          	mov    %edx,0x8(%esp)f010259b4647,197308
f010259f:	89 c1                	mov    %eax,%ecxf010259f4648,197362
f01025a1:	89 da                	mov    %ebx,%edxf01025a14649,197411
f01025a3:	d3 ea                	shr    %cl,%edxf01025a34650,197460
f01025a5:	8b 4c 24 08          	mov    0x8(%esp),%ecxf01025a54651,197508
f01025a9:	09 d1                	or     %edx,%ecxf01025a94652,197562
f01025ab:	89 f2                	mov    %esi,%edxf01025ab4653,197611
f01025ad:	89 4c 24 08          	mov    %ecx,0x8(%esp)f01025ad4654,197660
f01025b1:	89 f9                	mov    %edi,%ecxf01025b14655,197714
f01025b3:	d3 e3                	shl    %cl,%ebxf01025b34656,197763
f01025b5:	89 c1                	mov    %eax,%ecxf01025b54657,197811
f01025b7:	d3 ea                	shr    %cl,%edxf01025b74658,197860
f01025b9:	89 f9                	mov    %edi,%ecxf01025b94659,197908
f01025bb:	89 5c 24 0c          	mov    %ebx,0xc(%esp)f01025bb4660,197957
f01025bf:	d3 e6                	shl    %cl,%esif01025bf4661,198011
f01025c1:	89 eb                	mov    %ebp,%ebxf01025c14662,198059
f01025c3:	89 c1                	mov    %eax,%ecxf01025c34663,198108
f01025c5:	d3 eb                	shr    %cl,%ebxf01025c54664,198157
f01025c7:	09 de                	or     %ebx,%esif01025c74665,198205
f01025c9:	89 f0                	mov    %esi,%eaxf01025c94666,198254
f01025cb:	f7 74 24 08          	divl   0x8(%esp)f01025cb4667,198303
f01025cf:	89 d6                	mov    %edx,%esif01025cf4668,198352
f01025d1:	89 c3                	mov    %eax,%ebxf01025d14669,198401
f01025d3:	f7 64 24 0c          	mull   0xc(%esp)f01025d34670,198450
f01025d7:	39 d6                	cmp    %edx,%esif01025d74671,198499
f01025d9:	72 0c                	jb     f01025e7 <__udivdi3+0xb7>f01025d94672,198548
f01025db:	89 f9                	mov    %edi,%ecxf01025db4673,198613
f01025dd:	d3 e5                	shl    %cl,%ebpf01025dd4674,198662
f01025df:	39 c5                	cmp    %eax,%ebpf01025df4675,198710
f01025e1:	73 5d                	jae    f0102640 <__udivdi3+0x110>f01025e14676,198759
f01025e3:	39 d6                	cmp    %edx,%esif01025e34677,198825
f01025e5:	75 59                	jne    f0102640 <__udivdi3+0x110>f01025e54678,198874
f01025e7:	8d 43 ff             	lea    -0x1(%ebx),%eaxf01025e74679,198940
f01025ea:	31 ff                	xor    %edi,%edif01025ea4680,198995
f01025ec:	89 fa                	mov    %edi,%edxf01025ec4681,199044
f01025ee:	83 c4 1c             	add    $0x1c,%espf01025ee4682,199093
f01025f1:	5b                   	pop    %ebxf01025f14683,199143
f01025f2:	5e                   	pop    %esif01025f24684,199187
f01025f3:	5f                   	pop    %edif01025f34685,199231
f01025f4:	5d                   	pop    %ebpf01025f44686,199275
f01025f5:	c3                   	ret    f01025f54687,199319
f01025f6:	8d 76 00             	lea    0x0(%esi),%esif01025f64688,199359
f01025f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif01025f94689,199413
f0102600:	31 ff                	xor    %edi,%edif01026004690,199474
f0102602:	31 c0                	xor    %eax,%eaxf01026024691,199523
f0102604:	89 fa                	mov    %edi,%edxf01026044692,199572
f0102606:	83 c4 1c             	add    $0x1c,%espf01026064693,199621
f0102609:	5b                   	pop    %ebxf01026094694,199671
f010260a:	5e                   	pop    %esif010260a4695,199715
f010260b:	5f                   	pop    %edif010260b4696,199759
f010260c:	5d                   	pop    %ebpf010260c4697,199803
f010260d:	c3                   	ret    f010260d4698,199847
f010260e:	66 90                	xchg   %ax,%axf010260e4699,199887
f0102610:	31 ff                	xor    %edi,%edif01026104700,199934
f0102612:	89 e8                	mov    %ebp,%eaxf01026124701,199983
f0102614:	89 f2                	mov    %esi,%edxf01026144702,200032
f0102616:	f7 f3                	div    %ebxf01026164703,200081
f0102618:	89 fa                	mov    %edi,%edxf01026184704,200125
f010261a:	83 c4 1c             	add    $0x1c,%espf010261a4705,200174
f010261d:	5b                   	pop    %ebxf010261d4706,200224
f010261e:	5e                   	pop    %esif010261e4707,200268
f010261f:	5f                   	pop    %edif010261f4708,200312
f0102620:	5d                   	pop    %ebpf01026204709,200356
f0102621:	c3                   	ret    f01026214710,200400
f0102622:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif01026224711,200440
f0102628:	39 f2                	cmp    %esi,%edxf01026284712,200494
f010262a:	72 06                	jb     f0102632 <__udivdi3+0x102>f010262a4713,200543
f010262c:	31 c0                	xor    %eax,%eaxf010262c4714,200609
f010262e:	39 eb                	cmp    %ebp,%ebxf010262e4715,200658
f0102630:	77 d2                	ja     f0102604 <__udivdi3+0xd4>f01026304716,200707
f0102632:	b8 01 00 00 00       	mov    $0x1,%eaxf01026324717,200772
f0102637:	eb cb                	jmp    f0102604 <__udivdi3+0xd4>f01026374718,200821
f0102639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01026394719,200886
f0102640:	89 d8                	mov    %ebx,%eaxf01026404720,200947
f0102642:	31 ff                	xor    %edi,%edif01026424721,200996
f0102644:	eb be                	jmp    f0102604 <__udivdi3+0xd4>f01026444722,201045
f0102646:	66 90                	xchg   %ax,%axf01026464723,201110
f0102648:	66 90                	xchg   %ax,%axf01026484724,201157
f010264a:	66 90                	xchg   %ax,%axf010264a4725,201204
f010264c:	66 90                	xchg   %ax,%axf010264c4726,201251
f010264e:	66 90                	xchg   %ax,%axf010264e4727,201298
f0102650 <__umoddi3>:f01026504729,201346
f0102650:	55                   	push   %ebpf01026504730,201368
f0102651:	57                   	push   %edif01026514731,201412
f0102652:	56                   	push   %esif01026524732,201456
f0102653:	53                   	push   %ebxf01026534733,201500
f0102654:	83 ec 1c             	sub    $0x1c,%espf01026544734,201544
f0102657:	8b 6c 24 3c          	mov    0x3c(%esp),%ebpf01026574735,201594
f010265b:	8b 74 24 30          	mov    0x30(%esp),%esif010265b4736,201649
f010265f:	8b 5c 24 34          	mov    0x34(%esp),%ebxf010265f4737,201704
f0102663:	8b 7c 24 38          	mov    0x38(%esp),%edif01026634738,201759
f0102667:	85 ed                	test   %ebp,%ebpf01026674739,201814
f0102669:	89 f0                	mov    %esi,%eaxf01026694740,201863
f010266b:	89 da                	mov    %ebx,%edxf010266b4741,201912
f010266d:	75 19                	jne    f0102688 <__umoddi3+0x38>f010266d4742,201961
f010266f:	39 df                	cmp    %ebx,%edif010266f4743,202026
f0102671:	0f 86 b1 00 00 00    	jbe    f0102728 <__umoddi3+0xd8>f01026714744,202075
f0102677:	f7 f7                	div    %edif01026774745,202140
f0102679:	89 d0                	mov    %edx,%eaxf01026794746,202184
f010267b:	31 d2                	xor    %edx,%edxf010267b4747,202233
f010267d:	83 c4 1c             	add    $0x1c,%espf010267d4748,202282
f0102680:	5b                   	pop    %ebxf01026804749,202332
f0102681:	5e                   	pop    %esif01026814750,202376
f0102682:	5f                   	pop    %edif01026824751,202420
f0102683:	5d                   	pop    %ebpf01026834752,202464
f0102684:	c3                   	ret    f01026844753,202508
f0102685:	8d 76 00             	lea    0x0(%esi),%esif01026854754,202548
f0102688:	39 dd                	cmp    %ebx,%ebpf01026884755,202602
f010268a:	77 f1                	ja     f010267d <__umoddi3+0x2d>f010268a4756,202651
f010268c:	0f bd cd             	bsr    %ebp,%ecxf010268c4757,202716
f010268f:	83 f1 1f             	xor    $0x1f,%ecxf010268f4758,202765
f0102692:	89 4c 24 04          	mov    %ecx,0x4(%esp)f01026924759,202815
f0102696:	0f 84 b4 00 00 00    	je     f0102750 <__umoddi3+0x100>f01026964760,202869
f010269c:	b8 20 00 00 00       	mov    $0x20,%eaxf010269c4761,202935
f01026a1:	89 c2                	mov    %eax,%edxf01026a14762,202985
f01026a3:	8b 44 24 04          	mov    0x4(%esp),%eaxf01026a34763,203034
f01026a7:	29 c2                	sub    %eax,%edxf01026a74764,203088
f01026a9:	89 c1                	mov    %eax,%ecxf01026a94765,203137
f01026ab:	89 f8                	mov    %edi,%eaxf01026ab4766,203186
f01026ad:	d3 e5                	shl    %cl,%ebpf01026ad4767,203235
f01026af:	89 d1                	mov    %edx,%ecxf01026af4768,203283
f01026b1:	89 54 24 0c          	mov    %edx,0xc(%esp)f01026b14769,203332
f01026b5:	d3 e8                	shr    %cl,%eaxf01026b54770,203386
f01026b7:	09 c5                	or     %eax,%ebpf01026b74771,203434
f01026b9:	8b 44 24 04          	mov    0x4(%esp),%eaxf01026b94772,203483
f01026bd:	89 c1                	mov    %eax,%ecxf01026bd4773,203537
f01026bf:	d3 e7                	shl    %cl,%edif01026bf4774,203586
f01026c1:	89 d1                	mov    %edx,%ecxf01026c14775,203634
f01026c3:	89 7c 24 08          	mov    %edi,0x8(%esp)f01026c34776,203683
f01026c7:	89 df                	mov    %ebx,%edif01026c74777,203737
f01026c9:	d3 ef                	shr    %cl,%edif01026c94778,203786
f01026cb:	89 c1                	mov    %eax,%ecxf01026cb4779,203834
f01026cd:	89 f0                	mov    %esi,%eaxf01026cd4780,203883
f01026cf:	d3 e3                	shl    %cl,%ebxf01026cf4781,203932
f01026d1:	89 d1                	mov    %edx,%ecxf01026d14782,203980
f01026d3:	89 fa                	mov    %edi,%edxf01026d34783,204029
f01026d5:	d3 e8                	shr    %cl,%eaxf01026d54784,204078
f01026d7:	0f b6 4c 24 04       	movzbl 0x4(%esp),%ecxf01026d74785,204126
f01026dc:	09 d8                	or     %ebx,%eaxf01026dc4786,204180
f01026de:	f7 f5                	div    %ebpf01026de4787,204229
f01026e0:	d3 e6                	shl    %cl,%esif01026e04788,204273
f01026e2:	89 d1                	mov    %edx,%ecxf01026e24789,204321
f01026e4:	f7 64 24 08          	mull   0x8(%esp)f01026e44790,204370
f01026e8:	39 d1                	cmp    %edx,%ecxf01026e84791,204419
f01026ea:	89 c3                	mov    %eax,%ebxf01026ea4792,204468
f01026ec:	89 d7                	mov    %edx,%edif01026ec4793,204517
f01026ee:	72 06                	jb     f01026f6 <__umoddi3+0xa6>f01026ee4794,204566
f01026f0:	75 0e                	jne    f0102700 <__umoddi3+0xb0>f01026f04795,204631
f01026f2:	39 c6                	cmp    %eax,%esif01026f24796,204696
f01026f4:	73 0a                	jae    f0102700 <__umoddi3+0xb0>f01026f44797,204745
f01026f6:	2b 44 24 08          	sub    0x8(%esp),%eaxf01026f64798,204810
f01026fa:	19 ea                	sbb    %ebp,%edxf01026fa4799,204864
f01026fc:	89 d7                	mov    %edx,%edif01026fc4800,204913
f01026fe:	89 c3                	mov    %eax,%ebxf01026fe4801,204962
f0102700:	89 ca                	mov    %ecx,%edxf01027004802,205011
f0102702:	0f b6 4c 24 0c       	movzbl 0xc(%esp),%ecxf01027024803,205060
f0102707:	29 de                	sub    %ebx,%esif01027074804,205114
f0102709:	19 fa                	sbb    %edi,%edxf01027094805,205163
f010270b:	8b 5c 24 04          	mov    0x4(%esp),%ebxf010270b4806,205212
f010270f:	89 d0                	mov    %edx,%eaxf010270f4807,205266
f0102711:	d3 e0                	shl    %cl,%eaxf01027114808,205315
f0102713:	89 d9                	mov    %ebx,%ecxf01027134809,205363
f0102715:	d3 ee                	shr    %cl,%esif01027154810,205412
f0102717:	d3 ea                	shr    %cl,%edxf01027174811,205460
f0102719:	09 f0                	or     %esi,%eaxf01027194812,205508
f010271b:	83 c4 1c             	add    $0x1c,%espf010271b4813,205557
f010271e:	5b                   	pop    %ebxf010271e4814,205607
f010271f:	5e                   	pop    %esif010271f4815,205651
f0102720:	5f                   	pop    %edif01027204816,205695
f0102721:	5d                   	pop    %ebpf01027214817,205739
f0102722:	c3                   	ret    f01027224818,205783
f0102723:	90                   	nopf01027234819,205823
f0102724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif01027244820,205859
f0102728:	85 ff                	test   %edi,%edif01027284821,205920
f010272a:	89 f9                	mov    %edi,%ecxf010272a4822,205969
f010272c:	75 0b                	jne    f0102739 <__umoddi3+0xe9>f010272c4823,206018
f010272e:	b8 01 00 00 00       	mov    $0x1,%eaxf010272e4824,206083
f0102733:	31 d2                	xor    %edx,%edxf01027334825,206132
f0102735:	f7 f7                	div    %edif01027354826,206181
f0102737:	89 c1                	mov    %eax,%ecxf01027374827,206225
f0102739:	89 d8                	mov    %ebx,%eaxf01027394828,206274
f010273b:	31 d2                	xor    %edx,%edxf010273b4829,206323
f010273d:	f7 f1                	div    %ecxf010273d4830,206372
f010273f:	89 f0                	mov    %esi,%eaxf010273f4831,206416
f0102741:	f7 f1                	div    %ecxf01027414832,206465
f0102743:	e9 31 ff ff ff       	jmp    f0102679 <__umoddi3+0x29>f01027434833,206509
f0102748:	90                   	nopf01027484834,206574
f0102749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif01027494835,206610
f0102750:	39 dd                	cmp    %ebx,%ebpf01027504836,206671
f0102752:	72 08                	jb     f010275c <__umoddi3+0x10c>f01027524837,206720
f0102754:	39 f7                	cmp    %esi,%edif01027544838,206786
f0102756:	0f 87 21 ff ff ff    	ja     f010267d <__umoddi3+0x2d>f01027564839,206835
f010275c:	89 da                	mov    %ebx,%edxf010275c4840,206900
f010275e:	89 f0                	mov    %esi,%eaxf010275e4841,206949
f0102760:	29 f8                	sub    %edi,%eaxf01027604842,206998
f0102762:	19 ea                	sbb    %ebp,%edxf01027624843,207047
f0102764:	e9 14 ff ff ff       	jmp    f010267d <__umoddi3+0x2d>f01027644844,207096

fs/test.c,99
static char *msg = "This is the NEW message of the day!\n\n";msg6,63
fs_test(void)fs_test9,131

user/sendpage.c,265
const char *str1 = "hello child environment! how are you?";str16,128
const char *str2 = "hello parent environment! I'm good.";str27,188
#define TEMP_ADDR	TEMP_ADDR9,247
#define TEMP_ADDR_CHILD	TEMP_ADDR_CHILD10,283
umain(int argc, char **argv)umain13,331

conf/env.mk,14
V = @V9,359

conf/lab.mk,71
LAB=2LAB1,0
PACKAGEDATE=Wed Sep 12 14:51:29 EDT 2018PACKAGEDATE2,6

kern/console.h,275
#define _CONSOLE_H__CONSOLE_H_4,68
#define MONO_BASE	MONO_BASE11,215
#define MONO_BUF	MONO_BUF12,239
#define CGA_BASE	CGA_BASE13,264
#define CGA_BUF	CGA_BUF14,287
#define CRT_ROWS	CRT_ROWS16,313
#define CRT_COLS	CRT_COLS17,333
#define CRT_SIZE	CRT_SIZE18,353

kern/kclock.c,116
mc146818_read(unsigned reg)mc146818_read11,169
mc146818_write(unsigned reg, unsigned datum)mc146818_write18,250

kern/monitor.c,821
#define CMDBUF_SIZE	CMDBUF_SIZE14,314
struct Command {Command17,371
	const char *name;name18,388
	const char *name;Command::name18,388
	const char *desc;desc19,407
	const char *desc;Command::desc19,407
	int (*func)(int argc, char** argv, struct Trapframe* tf);func21,465
	int (*func)(int argc, char** argv, struct Trapframe* tf);Command::func21,465
static struct Command commands[] = {commands24,528
mon_help(int argc, char **argv, struct Trapframe *tf)mon_help32,764
mon_kerninfo(int argc, char **argv, struct Trapframe *tf)mon_kerninfo42,951
mon_backtrace(int argc, char **argv, struct Trapframe *tf)mon_backtrace58,1572
#define WHITESPACE WHITESPACE68,1719
#define MAXARGS MAXARGS69,1748
runcmd(char *buf, struct Trapframe *tf)runcmd72,1779
monitor(struct Trapframe *tf)monitor111,2571

kern/kdebug.h,1042
#define JOS_KERN_KDEBUG_HJOS_KERN_KDEBUG_H2,26
struct Eipdebuginfo {Eipdebuginfo7,137
	const char *eip_file;		// Source code filename for EIPeip_file8,159
	const char *eip_file;		// Source code filename for EIPEipdebuginfo::eip_file8,159
	int eip_line;			// Source code linenumber for EIPeip_line9,215
	int eip_line;			// Source code linenumber for EIPEipdebuginfo::eip_line9,215
	const char *eip_fn_name;	// Name of function containing EIPeip_fn_name11,267
	const char *eip_fn_name;	// Name of function containing EIPEipdebuginfo::eip_fn_name11,267
	int eip_fn_namelen;		// Length of function nameeip_fn_namelen13,366
	int eip_fn_namelen;		// Length of function nameEipdebuginfo::eip_fn_namelen13,366
	uintptr_t eip_fn_addr;		// Address of start of functioneip_fn_addr14,415
	uintptr_t eip_fn_addr;		// Address of start of functionEipdebuginfo::eip_fn_addr14,415
	int eip_fn_narg;		// Number of function argumentseip_fn_narg15,472
	int eip_fn_narg;		// Number of function argumentsEipdebuginfo::eip_fn_narg15,472

kern/console.c,2436
delay(void)delay16,352
#define COM1	COM126,448
#define COM_RX	COM_RX28,469
#define COM_TX	COM_TX29,518
#define COM_DLL	COM_DLL30,569
#define COM_DLM	COM_DLM31,623
#define COM_IER	COM_IER32,678
#define   COM_IER_RDI	COM_IER_RDI33,731
#define COM_IIR	COM_IIR34,794
#define COM_FCR	COM_FCR35,842
#define COM_LCR	COM_LCR36,891
#define	  COM_LCR_DLAB	COM_LCR_DLAB37,940
#define	  COM_LCR_WLEN8	COM_LCR_WLEN838,998
#define COM_MCR	COM_MCR39,1051
#define	  COM_MCR_RTS	COM_MCR_RTS40,1101
#define	  COM_MCR_DTR	COM_MCR_DTR41,1146
#define	  COM_MCR_OUT2	COM_MCR_OUT242,1191
#define COM_LSR	COM_LSR43,1238
#define   COM_LSR_DATA	COM_LSR_DATA44,1285
#define   COM_LSR_TXRDY	COM_LSR_TXRDY45,1333
#define   COM_LSR_TSRE	COM_LSR_TSRE46,1389
static bool serial_exists;serial_exists48,1439
serial_proc_data(void)serial_proc_data51,1478
serial_intr(void)serial_intr59,1592
serial_putc(int c)serial_putc66,1678
serial_init(void)serial_init79,1843
lpt_putc(int c)lpt_putc112,2633
static unsigned addr_6845;addr_6845128,2853
static uint16_t *crt_buf;crt_buf129,2880
static uint16_t crt_pos;crt_pos130,2906
cga_init(void)cga_init133,2944
cga_putc(int c)cga_putc163,3430
#define NO	NO214,4399
#define SHIFT	SHIFT216,4414
#define CTL	CTL217,4436
#define ALT	ALT218,4456
#define CAPSLOCK	CAPSLOCK220,4477
#define NUMLOCK	NUMLOCK221,4501
#define SCROLLLOCK	SCROLLLOCK222,4525
#define E0ESC	E0ESC224,4552
static uint8_t shiftcode[256] =shiftcode226,4575
static uint8_t togglecode[256] =togglecode236,4706
static uint8_t normalmap[256] =normalmap243,4805
static uint8_t shiftmap[256] =shiftmap264,5690
#define C(C285,6574
static uint8_t ctlmap[256] =ctlmap287,6598
static uint8_t *charcode[4] = {charcode304,7327
kbd_proc_data(void)kbd_proc_data316,7524
kbd_intr(void)kbd_intr368,8510
kbd_init(void)kbd_init374,8569
#define CONSBUFSIZE CONSBUFSIZE385,8809
	uint8_t buf[CONSBUFSIZE];buf388,8850
	uint8_t buf[CONSBUFSIZE];__anon3::buf388,8850
	uint32_t rpos;rpos389,8877
	uint32_t rpos;__anon3::rpos389,8877
	uint32_t wpos;wpos390,8893
	uint32_t wpos;__anon3::wpos390,8893
} cons;cons391,8909
cons_intr(int (*proc)(void))cons_intr396,9037
cons_getc(void)cons_getc411,9300
cons_putc(int c)cons_putc433,9754
cons_init(void)cons_init442,9860
cputchar(int c)cputchar456,10056
getchar(void)getchar462,10096
iscons(int fdnum)iscons472,10191

kern/entrypgdir.c,163
pte_t entry_pgtable[NPTENTRIES];entry_pgtable4,49
pde_t entry_pgdir[NPDENTRIES] = {entry_pgdir21,934
pte_t entry_pgtable[NPTENTRIES] = {entry_pgtable33,1329

kern/monitor.h,51
#define JOS_KERN_MONITOR_HJOS_KERN_MONITOR_H2,27

kern/pmap.h,397
#define JOS_KERN_PMAP_HJOS_KERN_PMAP_H4,72
#define PADDR(PADDR25,645
_paddr(const char *file, int line, void *kva)_paddr28,722
#define KADDR(KADDR37,1057
_kaddr(const char *file, int line, physaddr_t pa)_kaddr40,1127
	ALLOC_ZERO = 1<<0,ALLOC_ZERO50,1366
page2pa(struct PageInfo *pp)page2pa66,1815
pa2page(physaddr_t pa)pa2page72,1913
page2kva(struct PageInfo *pp)page2kva80,2057

kern/pmap.c,1558
size_t npages;			// Amount of physical memory (in pages)npages13,262
static size_t npages_basemem;	// Amount of base memory (in pages)npages_basemem14,319
pde_t *kern_pgdir;		// Kernel's initial page directorykern_pgdir17,427
struct PageInfo *pages;		// Physical page state arraypages18,482
static struct PageInfo *page_free_list;	// Free list of physical pagespage_free_list19,536
nvram_read(int r)nvram_read27,796
i386_detect_memory(void)i386_detect_memory33,887
boot_alloc(uint32_t n)boot_alloc85,2707
mem_init(void)mem_init126,4082
page_init(void)page_init240,8644
page_alloc(int alloc_flags)page_alloc292,10453
page_free(struct PageInfo *pp)page_free313,10849
page_decref(struct PageInfo* pp)page_decref332,11314
pgdir_walk(pde_t *pgdir, const void *va, int create)pgdir_walk361,12450
boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)boot_map_region379,12998
page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)page_insert410,14094
page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)page_lookup428,14618
page_remove(pde_t *pgdir, void *va)page_remove450,15280
tlb_invalidate(pde_t *pgdir, void *va)tlb_invalidate460,15477
check_page_free_list(bool only_low_memory)check_page_free_list476,15910
check_page_alloc(void)check_page_alloc538,17671
check_kern_pgdir(void)check_kern_pgdir620,19488
check_va2pa(pde_t *pgdir, uintptr_t va)check_va2pa668,20743
check_page(void)check_page684,21024
check_page_installed_pgdir(void)check_page_installed_pgdir837,25846

kern/entry.S,533
#define SRL(val, shamt)		(((val) >> (shamt)) & ~(-1 << (32 - (shamt))))SRL7,120
#define	RELOC(x) ((x) - KERNBASE)RELOC18,566
#define MULTIBOOT_HEADER_MAGIC (0x1BADB002)MULTIBOOT_HEADER_MAGIC20,601
#define MULTIBOOT_HEADER_FLAGS (0)MULTIBOOT_HEADER_FLAGS21,645
#define CHECKSUM (-(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS))CHECKSUM22,680
_start = RELOC(entry)_start40,1231
entry:entry43,1267
relocated:relocated69,2169
spin:	jmp	spinspin83,2501
bootstack:bootstack92,2734
bootstacktop:bootstacktop95,2788

kern/init.c,211
i386_init(void)i386_init14,227
const char *panicstr;panicstr42,921
_panic(const char *file, int line, const char *fmt,...)_panic49,1069
_warn(const char *file, int line, const char *fmt,...)_warn74,1502

kern/kdebug.c,181
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,stab_binsearch51,1753
debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)debuginfo_eip105,3021

kern/kclock.h,420
#define JOS_KERN_KCLOCK_HJOS_KERN_KCLOCK_H4,74
#define	IO_RTC	IO_RTC9,203
#define	MC_NVRAM_START	MC_NVRAM_START11,242
#define	MC_NVRAM_SIZE	MC_NVRAM_SIZE12,301
#define NVRAM_BASELO	NVRAM_BASELO15,393
#define NVRAM_BASEHI	NVRAM_BASEHI16,465
#define NVRAM_EXTLO	NVRAM_EXTLO19,609
#define NVRAM_EXTHI	NVRAM_EXTHI20,680
#define NVRAM_EXT16LO	NVRAM_EXT16LO23,826
#define NVRAM_EXT16HI	NVRAM_EXT16HI24,900

kern/printf.c,136
putch(int ch, int *cnt)putch10,212
vcprintf(const char *fmt, va_list ap)vcprintf17,269
cprintf(const char *fmt, ...)cprintf26,385

grade-lab2,306
r = Runner(save("jos.out"),r5,47
def test_jos():test_jos9,140
def test_check_page_alloc():test_check_page_alloc13,228
def test_check_page():test_check_page17,352
def test_check_kern_pgdir():test_check_kern_pgdir21,470
def test_check_page_installed_pgdir():test_check_page_installed_pgdir25,596

gradelib.py,2816
__all__ = []__all__7,194
TESTS = []TESTS15,361
CURRENT_TEST = NoneCURRENT_TEST18,424
def test(points, title=None, parent=None):test20,445
    def register_test(fn, title=title):register_test26,703
        def run_test():run_test33,923
def end_part(name):end_part79,2398
    def show_part():show_part80,2418
def run_tests():run_tests89,2709
def get_current_test():get_current_test120,3671
def assert_equal(got, expect, msg=""):assert_equal131,3928
def assert_lines_match(text, *regexps, **kw):assert_lines_match140,4221
    def assert_lines_match_kw(no=[]):assert_lines_match_kw145,4445
MAKE_TIMESTAMP = 0MAKE_TIMESTAMP196,6022
def pre_make():pre_make198,6042
def post_make():post_make203,6197
def make(*target):make209,6385
def show_command(cmd):show_command215,6497
def maybe_unlink(*paths):maybe_unlink219,6593
COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m"}COLORS227,6784
def color(name, text):color229,6857
def reset_fs():reset_fs234,7032
class QEMU(object):QEMU244,7277
    _GDBPORT = None_GDBPORT245,7297
    def __init__(self, *make_args):__init__247,7318
    def get_gdb_port():get_gdb_port273,8258
    def fileno(self):fileno285,8713
    def handle_read(self):handle_read289,8803
    def wait(self):wait299,9115
    def kill(self):kill304,9216
class GDBClient(object):GDBClient308,9293
    def __init__(self, port, timeout=15):__init__309,9318
    def fileno(self):fileno322,9717
    def handle_read(self):handle_read326,9800
    def __send(self, cmd):__send348,10398
    def __send_break(self):__send_break352,10538
    def close(self):close355,10602
    def cont(self):cont360,10705
    def breakpoint(self, addr):breakpoint363,10751
class TerminateTest(Exception):TerminateTest373,10952
class Runner():Runner376,10994
    def __init__(self, *default_monitors):__init__377,11010
    def run_qemu(self, *monitors, **kw):run_qemu380,11105
        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):run_qemu_kw389,11629
    def __monitor_start(self, output):__monitor_start436,13129
    def __react(self, reactors, timeout):__react446,13439
    def user_test(self, binary, *monitors, **kw):user_test466,14081
    def match(self, *args, **kwargs):match476,14579
def save(path):save488,14924
    def setup_save(runner):setup_save492,15062
    def save_on_finish(fail):save_on_finish498,15236
def stop_breakpoint(addr):stop_breakpoint511,15660
    def setup_breakpoint(runner):setup_breakpoint515,15800
def call_on_line(regexp, callback):call_on_line525,16182
    def setup_call_on_line(runner):setup_call_on_line529,16316
        def handle_output(output):handle_output531,16378
def stop_on_line(regexp):stop_on_line541,16743
    def stop(line):stop545,16856

.dir-locals.el,0

GNUmakefile,1598
OBJDIR := objOBJDIR8,197
LABSETUP ?= ./LABSETUP22,403
TOP = .TOP24,419
GCCPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \GCCPREFIX36,874
QEMU := $(shell if which qemu >/dev/null 2>&1; \QEMU52,1637
GDBPORT	:= $(shell expr `id -u` % 5000 + 25000)GDBPORT67,2275
CC	:= $(GCCPREFIX)gcc -pipeCC69,2324
GDB	:= $(GCCPREFIX)gdbGDB70,2352
AS	:= $(GCCPREFIX)asAS71,2375
AR	:= $(GCCPREFIX)arAR72,2396
LD	:= $(GCCPREFIX)ldLD73,2417
OBJCOPY	:= $(GCCPREFIX)objcopyOBJCOPY74,2438
OBJDUMP	:= $(GCCPREFIX)objdumpOBJDUMP75,2469
NM	:= $(GCCPREFIX)nmNM76,2500
NCC	:= gcc $(CC_VER) -pipeNCC79,2540
NATIVE_CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -I$(TOP) -MD -WallNATIVE_CFLAGS80,2567
TAR	:= gtarTAR81,2632
PERL	:= perlPERL82,2644
CFLAGS := $(CFLAGS) $(DEFS) $(LABDEFS) -O1 -fno-builtin -I$(TOP) -MDCFLAGS87,2831
LDFLAGS := -m elf_i386LDFLAGS100,3389
ULDFLAGS := -T user/user.ldULDFLAGS103,3450
GCC_LIB := $(shell $(CC) $(CFLAGS) -print-libgcc-file-name)GCC_LIB105,3479
OBJDIRS :=OBJDIRS108,3599
KERN_CFLAGS := $(CFLAGS) -DJOS_KERNEL -gstabsKERN_CFLAGS124,3990
USER_CFLAGS := $(CFLAGS) -DJOS_USER -gstabsUSER_CFLAGS125,4036
QEMUOPTS = -drive file=$(OBJDIR)/kern/kernel.img,index=0,media=disk,format=raw -serial mon:stdio -gdb tcp::$(GDBPORT)QEMUOPTS143,4546
IMAGES = $(OBJDIR)/kern/kernel.imgIMAGES145,4759
WEBSUB := https://6828.scripts.mit.edu/2018/handin.pyWEBSUB223,6476
UPSTREAM := $(shell git remote -v | grep "pdos.csail.mit.edu/6.828/2018/jos.git (fetch)" | awk '{split($$0,a," "); print a[1]}')UPSTREAM256,7498
